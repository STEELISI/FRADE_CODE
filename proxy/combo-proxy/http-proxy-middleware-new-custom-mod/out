./test/e2e/http-proxy-middleware.spec.js:    describe('option.logLevel & option.logProvider', function () {
./test/e2e/http-proxy-middleware.spec.js:      var logMessage
./test/e2e/http-proxy-middleware.spec.js:          logMessage = message
./test/e2e/http-proxy-middleware.spec.js:          logLevel: 'info',
./test/e2e/http-proxy-middleware.spec.js:          logProvider: function (provider) {
./test/e2e/http-proxy-middleware.spec.js:      it('should have logged messages', function () {
./test/e2e/http-proxy-middleware.spec.js:        expect(logMessage).not.to.equal(undefined)
./test/e2e/express-router.spec.js:      var proxyConfig = {target: 'http://jsonplaceholder.typicode.com', changeOrigin: true, logLevel: 'silent'}
./test/unit/_libs.js:  Logger: require('../../lib/logger'),
./test/unit/logger.spec.js:  var logger
./test/unit/logger.spec.js:  var logMessage, debugMessage, infoMessage, warnMessage, errorMessage
./test/unit/logger.spec.js:    logMessage = undefined
./test/unit/logger.spec.js:    logger = Logger.getInstance()
./test/unit/logger.spec.js:    logger.setProvider(function (provider) {
./test/unit/logger.spec.js:      provider.log = function (message) { logMessage = message }
./test/unit/logger.spec.js:  describe('logging with different levels', function () {
./test/unit/logger.spec.js:      logger.log('log')
./test/unit/logger.spec.js:      logger.debug('debug')
./test/unit/logger.spec.js:      logger.info('info')
./test/unit/logger.spec.js:      logger.warn('warn')
./test/unit/logger.spec.js:      logger.error('error')
./test/unit/logger.spec.js:        logger.setLevel('debug')
./test/unit/logger.spec.js:      it('should log .log() messages', function () {
./test/unit/logger.spec.js:        expect(logMessage).to.equal('log')
./test/unit/logger.spec.js:      it('should log .debug() messages', function () {
./test/unit/logger.spec.js:      it('should log .info() messages', function () {
./test/unit/logger.spec.js:      it('should log .warn() messages', function () {
./test/unit/logger.spec.js:      it('should log .error() messages', function () {
./test/unit/logger.spec.js:        logger.setLevel('info')
./test/unit/logger.spec.js:      it('should log .log() messages', function () {
./test/unit/logger.spec.js:        expect(logMessage).to.equal('log')
./test/unit/logger.spec.js:      it('should not log .debug() messages', function () {
./test/unit/logger.spec.js:      it('should log .info() messages', function () {
./test/unit/logger.spec.js:      it('should log .warn() messages', function () {
./test/unit/logger.spec.js:      it('should log .error() messages', function () {
./test/unit/logger.spec.js:        logger.setLevel('warn')
./test/unit/logger.spec.js:      it('should log .log() messages', function () {
./test/unit/logger.spec.js:        expect(logMessage).to.equal('log')
./test/unit/logger.spec.js:      it('should not log .debug() messages', function () {
./test/unit/logger.spec.js:      it('should not log .info() messages', function () {
./test/unit/logger.spec.js:      it('should log .warn() messages', function () {
./test/unit/logger.spec.js:      it('should log .error() messages', function () {
./test/unit/logger.spec.js:        logger.setLevel('error')
./test/unit/logger.spec.js:      it('should log .log() messages', function () {
./test/unit/logger.spec.js:        expect(logMessage).to.equal('log')
./test/unit/logger.spec.js:      it('should not log .debug() messages', function () {
./test/unit/logger.spec.js:      it('should not log .info() messages', function () {
./test/unit/logger.spec.js:      it('should log .warn() messages', function () {
./test/unit/logger.spec.js:      it('should log .error() messages', function () {
./test/unit/logger.spec.js:        logger.setLevel('silent')
./test/unit/logger.spec.js:      it('should log .log() messages', function () {
./test/unit/logger.spec.js:        expect(logMessage).to.equal('log')
./test/unit/logger.spec.js:      it('should not log .debug() messages', function () {
./test/unit/logger.spec.js:      it('should not log .info() messages', function () {
./test/unit/logger.spec.js:      it('should not log .warn() messages', function () {
./test/unit/logger.spec.js:      it('should not log .error() messages', function () {
./test/unit/logger.spec.js:      // make sure all messages are logged
./test/unit/logger.spec.js:        logger.setLevel('debug')
./test/unit/logger.spec.js:        logger.log('log %s %s', 123, 456)
./test/unit/logger.spec.js:        logger.debug('debug %s %s', 123, 456)
./test/unit/logger.spec.js:        logger.info('info %s %s', 123, 456)
./test/unit/logger.spec.js:        logger.warn('warn %s %s', 123, 456)
./test/unit/logger.spec.js:        logger.error('error %s %s', 123, 456)
./test/unit/logger.spec.js:      it('should interpolate .log() messages', function () {
./test/unit/logger.spec.js:        expect(logMessage).to.equal('log 123 456')
./test/unit/logger.spec.js:          logger.setProvider({})
./test/unit/logger.spec.js:    describe('Invalid logLevel', function () {
./test/unit/logger.spec.js:          logger.setLevel('foo')
Binary file ./.git/index matches
Binary file ./.git/objects/pack/pack-b275669d167a1ed645ebe27a019e090e8d130cac.pack matches
./.git/config:	logallrefupdates = true
./.git/hooks/applypatch-msg.sample:# An example hook script to check the commit log message taken by
./.git/hooks/prepare-commit-msg.sample:# An example hook script to prepare the commit log message.
./.git/hooks/commit-msg.sample:# An example hook script to check the commit log message.
./.git/hooks/pre-push.sample:# This sample shows how to prevent push of commits where the log message starts
./.gitignore:logs
./.gitignore:*.log
./README.md:- [Changelog](#changelog)
./README.md:*  **option.logLevel**: string, ['debug', 'info', 'warn', 'error', 'silent']. Default: `'info'`
./README.md:*  **option.logProvider**: function, modify or replace log provider. Default: `console`.
./README.md:    function logProvider(provider) {
./README.md:        // replace the default console log provider.
./README.md:    function logProvider(provider) {
./README.md:        var logger = new (require('winston').Logger)();
./README.md:            log: logger.log,
./README.md:            debug: logger.debug,
./README.md:            info: logger.info,
./README.md:            warn: logger.warn,
./README.md:            error: logger.error
./README.md:        // or log the req
./README.md:        console.log('Client disconnected');
./README.md:## Changelog
./README.md:- [View changelog](https://github.com/chimurai/http-proxy-middleware/blob/master/CHANGELOG.md)
./CHANGELOG.md:# Changelog
./CHANGELOG.md:- feat(logging): improve error message & add link to Node errors page. ([#106](https://github.com/chimurai/http-proxy-middleware/pull/106)) ([cloudmu](https://github.com/cloudmu))
./CHANGELOG.md:- improved logging
./CHANGELOG.md:- add `logLevel` and `logProvider` support
./examples/connect/index.js:  logLevel: 'debug'
./examples/connect/index.js:console.log('[DEMO] Server: listening on port 3000')
./examples/connect/index.js:console.log('[DEMO] Opening: http://localhost:3000/users')
./examples/express/node_modules/http-proxy/package.json:  "readme": "<p align=\"center\">\n  <img src=\"https://raw.github.com/nodejitsu/node-http-proxy/master/doc/logo.png\"/>\n</p>\n\nnode-http-proxy\n=======\n\n<p align=\"left\">\n <a href=\"https://travis-ci.org/nodejitsu/node-http-proxy\" target=\"_blank\">\n  <img src=\"https://travis-ci.org/nodejitsu/node-http-proxy.png\"/></a>&nbsp;&nbsp;\n <a href=\"https://coveralls.io/r/nodejitsu/node-http-proxy\" target=\"_blank\">\n  <img src=\"https://coveralls.io/repos/nodejitsu/node-http-proxy/badge.png\"/></a>\n</p>\n\n`node-http-proxy` is an HTTP programmable proxying library that supports\nwebsockets. It is suitable for implementing components such as reverse\nproxies and load balancers.\n\n### Table of Contents\n  * [Installation](#installation)\n  * [Upgrading from 0.8.x ?](#upgrading-from-08x-)\n  * [Core Concept](#core-concept)\n  * [Use Cases](#use-cases)\n    * [Setup a basic stand-alone proxy server](#setup-a-basic-stand-alone-proxy-server)\n    * [Setup a stand-alone proxy server with custom server logic](#setup-a-stand-alone-proxy-server-with-custom-server-logic)\n    * [Setup a stand-alone proxy server with proxy request header re-writing](#setup-a-stand-alone-proxy-server-with-proxy-request-header-re-writing)\n    * [Modify a response from a proxied server](#modify-a-response-from-a-proxied-server)\n    * [Setup a stand-alone proxy server with latency](#setup-a-stand-alone-proxy-server-with-latency)\n    * [Using HTTPS](#using-https)\n    * [Proxying WebSockets](#proxying-websockets)\n  * [Options](#options)\n  * [Listening for proxy events](#listening-for-proxy-events)\n  * [Shutdown](#shutdown)\n  * [Miscellaneous](#miscellaneous)\n    * [Test](#test)\n    * [ProxyTable API](#proxytable-api)\n    * [Logo](#logo)\n  * [Contributing and Issues](#contributing-and-issues)\n  * [License](#license)\n\n### Installation\n\n`npm install http-proxy --save`\n\n**[Back to top](#table-of-contents)**\n\n### Upgrading from 0.8.x ?\n\nClick [here](UPGRADING.md)\n\n**[Back to top](#table-of-contents)**\n\n### Core Concept\n\nA new proxy is created by calling `createProxyServer` and passing\nan `options` object as argument ([valid properties are available here](lib/http-proxy.js#L33-L50))\n\n```javascript\nvar httpProxy = require('http-proxy');\n\nvar proxy = httpProxy.createProxyServer(options); // See (†)\n```\n†Unless listen(..) is invoked on the object, this does not create a webserver. See below.\n\nAn object will be returned with four methods:\n\n* web `req, res, [options]` (used for proxying regular HTTP(S) requests)\n* ws `req, socket, head, [options]` (used for proxying WS(S) requests)\n* listen `port` (a function that wraps the object in a webserver, for your convenience)\n* close `[callback]` (a function that closes the inner webserver and stops listening on given port)\n\nIt is then possible to proxy requests by calling these functions\n\n```javascript\nhttp.createServer(function(req, res) {\n  proxy.web(req, res, { target: 'http://mytarget.com:8080' });\n});\n```\n\nErrors can be listened on either using the Event Emitter API\n\n```javascript\nproxy.on('error', function(e) {\n  ...\n});\n```\n\nor using the callback API\n\n```javascript\nproxy.web(req, res, { target: 'http://mytarget.com:8080' }, function(e) { ... });\n```\n\nWhen a request is proxied it follows two different pipelines ([available here](lib/http-proxy/passes))\nwhich apply transformations to both the `req` and `res` object.\nThe first pipeline (incoming) is responsible for the creation and manipulation of the stream that connects your client to the target.\nThe second pipeline (outgoing) is responsible for the creation and manipulation of the stream that, from your target, returns data\nto the client.\n\n**[Back to top](#table-of-contents)**\n\n### Use Cases\n\n#### Setup a basic stand-alone proxy server\n\n```js\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n//\n// Create your proxy server and set the target in the options.\n//\nhttpProxy.createProxyServer({target:'http://localhost:9000'}).listen(8000); // See (†)\n\n//\n// Create your target server\n//\nhttp.createServer(function (req, res) {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.write('request successfully proxied!' + '\\n' + JSON.stringify(req.headers, true, 2));\n  res.end();\n}).listen(9000);\n```\n†Invoking listen(..) triggers the creation of a web server. Otherwise, just the proxy instance is created.\n\n**[Back to top](#table-of-contents)**\n\n#### Setup a stand-alone proxy server with custom server logic\nThis example show how you can proxy a request using your own HTTP server\nand also you can put your own logic to handle the request.\n\n```js\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n\n//\n// Create a proxy server with custom application logic\n//\nvar proxy = httpProxy.createProxyServer({});\n\n//\n// Create your custom server and just call `proxy.web()` to proxy\n// a web request to the target passed in the options\n// also you can use `proxy.ws()` to proxy a websockets request\n//\nvar server = http.createServer(function(req, res) {\n  // You can define here your custom logic to handle the request\n  // and then proxy the request.\n  proxy.web(req, res, { target: 'http://127.0.0.1:5060' });\n});\n\nconsole.log(\"listening on port 5050\")\nserver.listen(5050);\n```\n\n**[Back to top](#table-of-contents)**\n\n#### Setup a stand-alone proxy server with proxy request header re-writing\nThis example shows how you can proxy a request using your own HTTP server that\nmodifies the outgoing proxy request by adding a special header.\n\n```js\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n\n//\n// Create a proxy server with custom application logic\n//\nvar proxy = httpProxy.createProxyServer({});\n\n// To modify the proxy connection before data is sent, you can listen\n// for the 'proxyReq' event. When the event is fired, you will receive\n// the following arguments:\n// (http.ClientRequest proxyReq, http.IncomingMessage req,\n//  http.ServerResponse res, Object options). This mechanism is useful when\n// you need to modify the proxy request before the proxy connection\n// is made to the target.\n//\nproxy.on('proxyReq', function(proxyReq, req, res, options) {\n  proxyReq.setHeader('X-Special-Proxy-Header', 'foobar');\n});\n\nvar server = http.createServer(function(req, res) {\n  // You can define here your custom logic to handle the request\n  // and then proxy the request.\n  proxy.web(req, res, {\n    target: 'http://127.0.0.1:5060'\n  });\n});\n\nconsole.log(\"listening on port 5050\")\nserver.listen(5050);\n```\n\n**[Back to top](#table-of-contents)**\n\n#### Modify a response from a proxied server\nSometimes when you have received a HTML/XML document from the server of origin you would like to modify it before forwarding it on.\n\n[Harmon](https://github.com/No9/harmon) allows you to do this in a streaming style so as to keep the pressure on the proxy to a minimum.\n\n**[Back to top](#table-of-contents)**\n\n#### Setup a stand-alone proxy server with latency\n\n```js\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n\n//\n// Create a proxy server with latency\n//\nvar proxy = httpProxy.createProxyServer();\n\n//\n// Create your server that makes an operation that waits a while\n// and then proxies the request\n//\nhttp.createServer(function (req, res) {\n  // This simulates an operation that takes 500ms to execute\n  setTimeout(function () {\n    proxy.web(req, res, {\n      target: 'http://localhost:9008'\n    });\n  }, 500);\n}).listen(8008);\n\n//\n// Create your target server\n//\nhttp.createServer(function (req, res) {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.write('request successfully proxied to: ' + req.url + '\\n' + JSON.stringify(req.headers, true, 2));\n  res.end();\n}).listen(9008);\n```\n\n**[Back to top](#table-of-contents)**\n\n#### Using HTTPS\nYou can activate the validation of a secure SSL certificate to the target connection (avoid self signed certs), just set `secure: true` in the options.\n\n##### HTTPS -> HTTP\n\n```js\n//\n// Create the HTTPS proxy server in front of a HTTP server\n//\nhttpProxy.createServer({\n  target: {\n    host: 'localhost',\n    port: 9009\n  },\n  ssl: {\n    key: fs.readFileSync('valid-ssl-key.pem', 'utf8'),\n    cert: fs.readFileSync('valid-ssl-cert.pem', 'utf8')\n  }\n}).listen(8009);\n```\n\n##### HTTPS -> HTTPS\n\n```js\n//\n// Create the proxy server listening on port 443\n//\nhttpProxy.createServer({\n  ssl: {\n    key: fs.readFileSync('valid-ssl-key.pem', 'utf8'),\n    cert: fs.readFileSync('valid-ssl-cert.pem', 'utf8')\n  },\n  target: 'https://localhost:9010',\n  secure: true // Depends on your needs, could be false.\n}).listen(443);\n```\n\n**[Back to top](#table-of-contents)**\n\n#### Proxying WebSockets\nYou can activate the websocket support for the proxy using `ws:true` in the options.\n\n```js\n//\n// Create a proxy server for websockets\n//\nhttpProxy.createServer({\n  target: 'ws://localhost:9014',\n  ws: true\n}).listen(8014);\n```\n\nAlso you can proxy the websocket requests just calling the `ws(req, socket, head)` method.\n\n```js\n//\n// Setup our server to proxy standard HTTP requests\n//\nvar proxy = new httpProxy.createProxyServer({\n  target: {\n    host: 'localhost',\n    port: 9015\n  }\n});\nvar proxyServer = http.createServer(function (req, res) {\n  proxy.web(req, res);\n});\n\n//\n// Listen to the `upgrade` event and proxy the\n// WebSocket requests as well.\n//\nproxyServer.on('upgrade', function (req, socket, head) {\n  proxy.ws(req, socket, head);\n});\n\nproxyServer.listen(8015);\n```\n\n**[Back to top](#table-of-contents)**\n\n### Options\n\n`httpProxy.createProxyServer` supports the following options:\n\n*  **target**: url string to be parsed with the url module\n*  **forward**: url string to be parsed with the url module\n*  **agent**: object to be passed to http(s).request (see Node's [https agent](http://nodejs.org/api/https.html#https_class_https_agent) and [http agent](http://nodejs.org/api/http.html#http_class_http_agent) objects)\n*  **ssl**: object to be passed to https.createServer()\n*  **ws**: true/false, if you want to proxy websockets\n*  **xfwd**: true/false, adds x-forward headers\n*  **secure**: true/false, if you want to verify the SSL Certs\n*  **toProxy**: true/false, passes the absolute URL as the `path` (useful for proxying to proxies)\n*  **prependPath**: true/false, Default: true - specify whether you want to prepend the target's path to the proxy path\n*  **ignorePath**: true/false, Default: false - specify whether you want to ignore the proxy path of the incoming request (note: you will have to append / manually if required).\n*  **localAddress**: Local interface string to bind for outgoing connections\n*  **changeOrigin**: true/false, Default: false - changes the origin of the host header to the target URL\n*  **preserveHeaderKeyCase**: true/false, Default: false - specify whether you want to keep letter case of response header key\n*  **auth**: Basic authentication i.e. 'user:password' to compute an Authorization header.\n*  **hostRewrite**: rewrites the location hostname on (201/301/302/307/308) redirects.\n*  **autoRewrite**: rewrites the location host/port on (201/301/302/307/308) redirects based on requested host/port. Default: false.\n*  **protocolRewrite**: rewrites the location protocol on (201/301/302/307/308) redirects to 'http' or 'https'. Default: null.\n*  **cookieDomainRewrite**: rewrites domain of `set-cookie` headers. Possible values:\n   * `false` (default): disable cookie rewriting\n   * String: new domain, for example `cookieDomainRewrite: \"new.domain\"`. To remove the domain, use `cookieDomainRewrite: \"\"`.\n   * Object: mapping of domains to new domains, use `\"*\"` to match all domains.  \n     For example keep one domain unchanged, rewrite one domain and remove other domains:\n     ```\n     cookieDomainRewrite: {\n       \"unchanged.domain\": \"unchanged.domain\",\n       \"old.domain\": \"new.domain\",\n       \"*\": \"\"\n     }\n     ```\n*  **headers**: object with extra headers to be added to target requests.\n*  **proxyTimeout**: timeout (in millis) when proxy receives no response from target\n\n**NOTE:**\n`options.ws` and `options.ssl` are optional.\n`options.target` and `options.forward` cannot both be missing\n\nIf you are using the `proxyServer.listen` method, the following options are also applicable:\n\n *  **ssl**: object to be passed to https.createServer()\n *  **ws**: true/false, if you want to proxy websockets\n\n**[Back to top](#table-of-contents)**\n\n### Listening for proxy events\n\n* `error`: The error event is emitted if the request to the target fail. **We do not do any error handling of messages passed between client and proxy, and messages passed between proxy and target, so it is recommended that you listen on errors and handle them.**\n* `proxyReq`: This event is emitted before the data is sent. It gives you a chance to alter the proxyReq request object. Applies to \"web\" connections\n* `proxyReqWs`: This event is emitted before the data is sent. It gives you a chance to alter the proxyReq request object. Applies to \"websocket\" connections\n* `proxyRes`: This event is emitted if the request to the target got a response.\n* `open`: This event is emitted once the proxy websocket was created and piped into the target websocket.\n* `close`: This event is emitted once the proxy websocket was closed.\n* (DEPRECATED) `proxySocket`: Deprecated in favor of `open`.\n\n```js\nvar httpProxy = require('http-proxy');\n// Error example\n//\n// Http Proxy Server with bad target\n//\nvar proxy = httpProxy.createServer({\n  target:'http://localhost:9005'\n});\n\nproxy.listen(8005);\n\n//\n// Listen for the `error` event on `proxy`.\nproxy.on('error', function (err, req, res) {\n  res.writeHead(500, {\n    'Content-Type': 'text/plain'\n  });\n\n  res.end('Something went wrong. And we are reporting a custom error message.');\n});\n\n//\n// Listen for the `proxyRes` event on `proxy`.\n//\nproxy.on('proxyRes', function (proxyRes, req, res) {\n  console.log('RAW Response from the target', JSON.stringify(proxyRes.headers, true, 2));\n});\n\n//\n// Listen for the `open` event on `proxy`.\n//\nproxy.on('open', function (proxySocket) {\n  // listen for messages coming FROM the target here\n  proxySocket.on('data', hybiParseAndLogMessage);\n});\n\n//\n// Listen for the `close` event on `proxy`.\n//\nproxy.on('close', function (res, socket, head) {\n  // view disconnected websocket connections\n  console.log('Client disconnected');\n});\n```\n\n**[Back to top](#table-of-contents)**\n\n### Shutdown\n\n* When testing or running server within another program it may be necessary to close the proxy.\n* This will stop the proxy from accepting new connections.\n\n```js\nvar proxy = new httpProxy.createProxyServer({\n  target: {\n    host: 'localhost',\n    port: 1337\n  }\n});\n\nproxy.close();\n```\n\n**[Back to top](#table-of-contents)**\n\n### Miscellaneous\n\n#### ProxyTable API\n\nA proxy table API is available through this add-on [module](https://github.com/donasaur/http-proxy-rules), which lets you define a set of rules to translate matching routes to target routes that the reverse proxy will talk to.\n\n#### Test\n\n```\n$ npm test\n```\n\n#### Logo\n\nLogo created by [Diego Pasquali](http://dribbble.com/diegopq)\n\n**[Back to top](#table-of-contents)**\n\n### Contributing and Issues\n\n* Search on Google/Github\n* If you can't find anything, open an issue\n* If you feel comfortable about fixing the issue, fork the repo\n* Commit to your local branch (which must be different from `master`)\n* Submit your Pull Request (be sure to include tests and update documentation)\n\n**[Back to top](#table-of-contents)**\n\n### License\n\n>The MIT License (MIT)\n>\n>Copyright (c) 2010 - 2016 Charlie Robbins, Jarrett Cruger & the Contributors.\n>\n>Permission is hereby granted, free of charge, to any person obtaining a copy\n>of this software and associated documentation files (the \"Software\"), to deal\n>in the Software without restriction, including without limitation the rights\n>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n>copies of the Software, and to permit persons to whom the Software is\n>furnished to do so, subject to the following conditions:\n>\n>The above copyright notice and this permission notice shall be included in\n>all copies or substantial portions of the Software.\n>\n>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n>THE SOFTWARE.\n",
./examples/express/node_modules/http-proxy/node_modules/requires-port/package.json:  "readme": "# requires-port\n\n[![Made by unshift](https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square)](http://unshift.io)[![Version npm](http://img.shields.io/npm/v/requires-port.svg?style=flat-square)](http://browsenpm.org/package/requires-port)[![Build Status](http://img.shields.io/travis/unshiftio/requires-port/master.svg?style=flat-square)](https://travis-ci.org/unshiftio/requires-port)[![Dependencies](https://img.shields.io/david/unshiftio/requires-port.svg?style=flat-square)](https://david-dm.org/unshiftio/requires-port)[![Coverage Status](http://img.shields.io/coveralls/unshiftio/requires-port/master.svg?style=flat-square)](https://coveralls.io/r/unshiftio/requires-port?branch=master)[![IRC channel](http://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square)](http://webchat.freenode.net/?channels=unshift)\n\nThe module name says it all, check if a protocol requires a given port.\n\n## Installation\n\nThis module is intended to be used with browserify or Node.js and is distributed\nin the public npm registry. To install it simply run the following command from\nyour CLI:\n\n```j\nnpm install --save requires-port\n```\n\n## Usage\n\nThe module exports it self as function and requires 2 arguments:\n\n1. The port number, can be a string or number.\n2. Protocol, can be `http`, `http:` or even `https://yomoma.com`. We just split\n   it at `:` and use the first result. We currently accept the following\n   protocols:\n   - `http`\n   - `https`\n   - `ws`\n   - `wss`\n   - `ftp`\n   - `gopher`\n   - `file`\n\nIt returns a boolean that indicates if protocol requires this port to be added\nto your URL.\n\n```js\n'use strict';\n\nvar required = require('requires-port');\n\nconsole.log(required('8080', 'http')) // true\nconsole.log(required('80', 'http'))   // false\n```\n\n# License\n\nMIT\n",
./examples/express/node_modules/http-proxy/node_modules/requires-port/README.md:console.log(required('8080', 'http')) // true
./examples/express/node_modules/http-proxy/node_modules/requires-port/README.md:console.log(required('80', 'http'))   // false
./examples/express/node_modules/http-proxy/node_modules/eventemitter3/package.json:  "readme": "# EventEmitter3\n\n[![Version npm](https://img.shields.io/npm/v/eventemitter3.svg?style=flat-square)](http://browsenpm.org/package/eventemitter3)[![Build Status](https://img.shields.io/travis/primus/eventemitter3/master.svg?style=flat-square)](https://travis-ci.org/primus/eventemitter3)[![Dependencies](https://img.shields.io/david/primus/eventemitter3.svg?style=flat-square)](https://david-dm.org/primus/eventemitter3)[![Coverage Status](https://img.shields.io/coveralls/primus/eventemitter3/master.svg?style=flat-square)](https://coveralls.io/r/primus/eventemitter3?branch=master)[![IRC channel](https://img.shields.io/badge/IRC-irc.freenode.net%23primus-00a8ff.svg?style=flat-square)](https://webchat.freenode.net/?channels=primus)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/eventemitter3.svg)](https://saucelabs.com/u/eventemitter3)\n\nEventEmitter3 is a high performance EventEmitter. It has been micro-optimized\nfor various of code paths making this, one of, if not the fastest EventEmitter\navailable for Node.js and browsers. The module is API compatible with the\nEventEmitter that ships by default with Node.js but there are some slight\ndifferences:\n\n- Domain support has been removed.\n- We do not `throw` an error when you emit an `error` event and nobody is\n  listening.\n- The `newListener` event is removed as the use-cases for this functionality are\n  really just edge cases.\n- No `setMaxListeners` and it's pointless memory leak warnings. If you want to\n  add `end` listeners you should be able to do that without modules complaining.\n- No `listenerCount` function. Use `EE.listeners(event).length` instead.\n- Support for custom context for events so there is no need to use `fn.bind`.\n- `listeners` method can do existence checking instead of returning only arrays.\n\nIt's a drop in replacement for existing EventEmitters, but just faster. Free\nperformance, who wouldn't want that? The EventEmitter is written in EcmaScript 3\nso it will work in the oldest browsers and node versions that you need to\nsupport.\n\n## Installation\n\n```bash\n$ npm install --save eventemitter3        # npm\n$ component install primus/eventemitter3  # Component\n$ bower install eventemitter3             # Bower\n```\n\n## Usage\n\nAfter installation the only thing you need to do is require the module:\n\n```js\nvar EventEmitter = require('eventemitter3');\n```\n\nAnd you're ready to create your own EventEmitter instances. For the API\ndocumentation, please follow the official Node.js documentation:\n\nhttp://nodejs.org/api/events.html\n\n### Contextual emits\n\nWe've upgraded the API of the `EventEmitter.on`, `EventEmitter.once` and\n`EventEmitter.removeListener` to accept an extra argument which is the `context`\nor `this` value that should be set for the emitted events. This means you no\nlonger have the overhead of an event that required `fn.bind` in order to get a\ncustom `this` value.\n\n```js\nvar EE = new EventEmitter()\n  , context = { foo: 'bar' };\n\nfunction emitted() {\n  console.log(this === context); // true\n}\n\nEE.once('event-name', emitted, context);\nEE.on('another-event', emitted, context);\nEE.removeListener('another-event', emitted, context);\n```\n\n### Existence\n\nTo check if there is already a listener for a given event you can supply the\n`listeners` method with an extra boolean argument. This will transform the\noutput from an array, to a boolean value which indicates if there are listeners\nin place for the given event:\n\n```js\nvar EE = new EventEmitter();\nEE.once('event-name', function () {});\nEE.on('another-event', function () {});\n\nEE.listeners('event-name', true); // returns true\nEE.listeners('unknown-name', true); // returns false\n```\n\n## License\n\n[MIT](LICENSE)\n",
./examples/express/node_modules/http-proxy/node_modules/eventemitter3/README.md:  console.log(this === context); // true
./examples/express/node_modules/http-proxy/README.md:  <img src="https://raw.github.com/nodejitsu/node-http-proxy/master/doc/logo.png"/>
./examples/express/node_modules/http-proxy/README.md:    * [Setup a stand-alone proxy server with custom server logic](#setup-a-stand-alone-proxy-server-with-custom-server-logic)
./examples/express/node_modules/http-proxy/README.md:    * [Logo](#logo)
./examples/express/node_modules/http-proxy/README.md:#### Setup a stand-alone proxy server with custom server logic
./examples/express/node_modules/http-proxy/README.md:and also you can put your own logic to handle the request.
./examples/express/node_modules/http-proxy/README.md:// Create a proxy server with custom application logic
./examples/express/node_modules/http-proxy/README.md:  // You can define here your custom logic to handle the request
./examples/express/node_modules/http-proxy/README.md:console.log("listening on port 5050")
./examples/express/node_modules/http-proxy/README.md:// Create a proxy server with custom application logic
./examples/express/node_modules/http-proxy/README.md:  // You can define here your custom logic to handle the request
./examples/express/node_modules/http-proxy/README.md:console.log("listening on port 5050")
./examples/express/node_modules/http-proxy/README.md:  console.log('RAW Response from the target', JSON.stringify(proxyRes.headers, true, 2));
./examples/express/node_modules/http-proxy/README.md:  console.log('Client disconnected');
./examples/express/node_modules/is-glob/package.json:  "readme": "# is-glob [![NPM version](https://img.shields.io/npm/v/is-glob.svg?style=flat)](https://www.npmjs.com/package/is-glob) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-glob.svg?style=flat)](https://npmjs.org/package/is-glob)  [![NPM total downloads](https://img.shields.io/npm/dt/is-glob.svg?style=flat)](https://npmjs.org/package/is-glob) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-glob.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-glob) [![Windows Build Status](https://img.shields.io/appveyor/ci/jonschlinkert/is-glob.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/jonschlinkert/is-glob)\n\n> Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a better user experience.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-glob\n```\n\nYou might also be interested in [is-valid-glob](https://github.com/jonschlinkert/is-valid-glob) and [has-glob](https://github.com/jonschlinkert/has-glob).\n\n## Usage\n\n```js\nvar isGlob = require('is-glob');\n```\n\n### Default behavior\n\n**True**\n\nPatterns that have glob characters or regex patterns will return `true`:\n\n```js\nisGlob('!foo.js');\nisGlob('*.js');\nisGlob('**/abc.js');\nisGlob('abc/*.js');\nisGlob('abc/(aaa|bbb).js');\nisGlob('abc/[a-z].js');\nisGlob('abc/{a,b}.js');\n//=> true\n```\n\nExtglobs\n\n```js\nisGlob('abc/@(a).js');\nisGlob('abc/!(a).js');\nisGlob('abc/+(a).js');\nisGlob('abc/*(a).js');\nisGlob('abc/?(a).js');\n//=> true\n```\n\n**False**\n\nEscaped globs or extglobs return `false`:\n\n```js\nisGlob('abc/\\\\@(a).js');\nisGlob('abc/\\\\!(a).js');\nisGlob('abc/\\\\+(a).js');\nisGlob('abc/\\\\*(a).js');\nisGlob('abc/\\\\?(a).js');\nisGlob('\\\\!foo.js');\nisGlob('\\\\*.js');\nisGlob('\\\\*\\\\*/abc.js');\nisGlob('abc/\\\\*.js');\nisGlob('abc/\\\\(aaa|bbb).js');\nisGlob('abc/\\\\[a-z].js');\nisGlob('abc/\\\\{a,b}.js');\n//=> false\n```\n\nPatterns that do not have glob patterns return `false`:\n\n```js\nisGlob('abc.js');\nisGlob('abc/def/ghi.js');\nisGlob('foo.js');\nisGlob('abc/@.js');\nisGlob('abc/+.js');\nisGlob('abc/?.js');\nisGlob();\nisGlob(null);\n//=> false\n```\n\nArrays are also `false` (If you want to check if an array has a glob pattern, use [has-glob](https://github.com/jonschlinkert/has-glob)):\n\n```js\nisGlob(['**/*.js']);\nisGlob(['foo.js']);\n//=> false\n```\n\n### Option strict\n\nWhen `options.strict === false` the behavior is less strict in determining if a pattern is a glob. Meaning that\nsome patterns that would return `false` may return `true`. This is done so that matching libraries like [micromatch](https://github.com/micromatch/micromatch) have a chance at determining if the pattern is a glob or not.\n\n**True**\n\nPatterns that have glob characters or regex patterns will return `true`:\n\n```js\nisGlob('!foo.js', {strict: false});\nisGlob('*.js', {strict: false});\nisGlob('**/abc.js', {strict: false});\nisGlob('abc/*.js', {strict: false});\nisGlob('abc/(aaa|bbb).js', {strict: false});\nisGlob('abc/[a-z].js', {strict: false});\nisGlob('abc/{a,b}.js', {strict: false});\n//=> true\n```\n\nExtglobs\n\n```js\nisGlob('abc/@(a).js', {strict: false});\nisGlob('abc/!(a).js', {strict: false});\nisGlob('abc/+(a).js', {strict: false});\nisGlob('abc/*(a).js', {strict: false});\nisGlob('abc/?(a).js', {strict: false});\n//=> true\n```\n\n**False**\n\nEscaped globs or extglobs return `false`:\n\n```js\nisGlob('\\\\!foo.js', {strict: false});\nisGlob('\\\\*.js', {strict: false});\nisGlob('\\\\*\\\\*/abc.js', {strict: false});\nisGlob('abc/\\\\*.js', {strict: false});\nisGlob('abc/\\\\(aaa|bbb).js', {strict: false});\nisGlob('abc/\\\\[a-z].js', {strict: false});\nisGlob('abc/\\\\{a,b}.js', {strict: false});\n//=> false\n```\n\n## About\n\n### Related projects\n\n* [assemble](https://www.npmjs.com/package/assemble): Get the rocks out of your socks! Assemble makes you fast at creating web projects… [more](https://github.com/assemble/assemble) | [homepage](https://github.com/assemble/assemble \"Get the rocks out of your socks! Assemble makes you fast at creating web projects. Assemble is used by thousands of projects for rapid prototyping, creating themes, scaffolds, boilerplates, e-books, UI components, API documentation, blogs, building websit\")\n* [base](https://www.npmjs.com/package/base): Framework for rapidly creating high quality node.js applications, using plugins like building blocks | [homepage](https://github.com/node-base/base \"Framework for rapidly creating high quality node.js applications, using plugins like building blocks\")\n* [update](https://www.npmjs.com/package/update): Be scalable! Update is a new, open source developer framework and CLI for automating updates… [more](https://github.com/update/update) | [homepage](https://github.com/update/update \"Be scalable! Update is a new, open source developer framework and CLI for automating updates of any kind in code projects.\")\n* [verb](https://www.npmjs.com/package/verb): Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used… [more](https://github.com/verbose/verb) | [homepage](https://github.com/verbose/verb \"Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used on hundreds of projects of all sizes to generate everything from API docs to readmes.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 47 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 1  | [doowb](https://github.com/doowb) |  \n| 1  | [tuvistavie](https://github.com/tuvistavie) |  \n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on August 07, 2017._",
./examples/express/node_modules/is-glob/README.md:* [assemble](https://www.npmjs.com/package/assemble): Get the rocks out of your socks! Assemble makes you fast at creating web projects… [more](https://github.com/assemble/assemble) | [homepage](https://github.com/assemble/assemble "Get the rocks out of your socks! Assemble makes you fast at creating web projects. Assemble is used by thousands of projects for rapid prototyping, creating themes, scaffolds, boilerplates, e-books, UI components, API documentation, blogs, building websit")
./examples/express/node_modules/express-logging/.npmignore:*.log
./examples/express/node_modules/express-logging/package.json:  "name": "express-logging",
./examples/express/node_modules/express-logging/package.json:  "description": "Express middleware to log each request and response",
./examples/express/node_modules/express-logging/package.json:    "url": "git@github.com:telefonica/node-express-logging.git"
./examples/express/node_modules/express-logging/package.json:  "main": "lib/logging",
./examples/express/node_modules/express-logging/package.json:    "logging",
./examples/express/node_modules/express-logging/package.json:  "readme": "# express-logging\n\nExpress middleware to log, using a configurable logger, each request and response.\n\n[![npm version](https://badge.fury.io/js/express-logging.svg)](http://badge.fury.io/js/express-logging)\n[![Build Status](https://travis-ci.org/telefonica/node-express-logging.svg)](https://travis-ci.org/telefonica/node-express-logging)\n[![Coverage Status](https://img.shields.io/coveralls/telefonica/node-express-logging.svg)](https://coveralls.io/r/telefonica/node-express-logging)\n\n## Installation\n\n```bash\nnpm install express-logging\n```\n\n## Basic usage\n\n```js\nvar express = require('express'),\n    expressLogging = require('express-logging'),\n    logger = require('logops');\n\nvar app = express();\napp.use(expressLogging(logger));\n\napp.listen(3000);\n```\n\n## Extended usage with options\n\nAn optional argument `options` can customize enhanced aspects for the logging. This argument is an object with the following elements:\n\n - `blacklist` is available to prevent some resources from being logged (for example, static resources). This argument is an array of strings. If the URL path starts with any of the elements of the blacklist array, then the logging of this request/response is ignored.\n - `policy` is a string to customize how the info is logged. It supports two values: `message` or `params`. The former serializes all the log entry into a single string message. The latter passes to the logger an object with the log entry parameters and a second argument with the message; this policy is useful in order to process these parameters by systems like logstash. The default value is `message`.\n\nThe following example would ignore any resource available at either `/images` or `/html`. It also activates the logging policy `params`.\n\n```js\nvar blacklist = ['/images', '/html'];\napp.use(expressLogging(logger, {blacklist: blacklist, policy: 'params'}));\n```\n\n## Logs\n\n### Logging with default policy **message**\n\nThe request is logged with:\n\n```js\nlogger.info('Request from %s: %s %s', clientIpAddress, requestMethod, requestUrl);\n```\n\nA response without `Location` header is logged with:\n\n```js\nlogger.info('Response with status %d in %d ms.', responseStatusCode, duration);\n```\n\nA response with `Location` header is logged with:\n\n```js\nlogger.info('Response with status %d in %d ms. Location: %s', responseStatusCode, duration, locationHeader);\n```\n\nBoth response log entries include the `duration` of the whole transaction (between receiving the request until replying with the response).\n\n### Logging with policy **params**\n\nThe request is logged with:\n\n```js\nvar params = {requestClientIp: requestClientIp, requestMethod: requestMethod, requestUrl: requestUrl};\nlogger.info(params, 'Request from %s: %s', requestMethod, requestUrl);\n```\n\nA response without `Location` header is logged with:\n\n```js\nvar params = {responseStatusCode: responseStatusCode, responseDuration: duration};\nlogger.info(params, 'Response with status %d', responseStatusCode);\n```\n\nA response with `Location` header is logged with:\n\n```js\nvar params = {responseStatusCode: responseStatusCode, responseDuration: duration, responseLocation: locationHeader};\nlogger.info(params, 'Response with status %d', responseStatusCode);\n```\n\nBoth response log entries include the `duration` of the whole transaction (between receiving the request until replying with the response).\n\n## License\n\nCopyright 2015, 2016 [Telefónica Investigación y Desarrollo, S.A.U](http://www.tid.es)\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n",
./examples/express/node_modules/express-logging/package.json:    "url": "https://github.com/telefonica/node-express-logging/issues"
./examples/express/node_modules/express-logging/package.json:  "_id": "express-logging@1.1.1",
./examples/express/node_modules/express-logging/package.json:  "_from": "express-logging@",
./examples/express/node_modules/express-logging/package.json:  "_resolved": "https://registry.npmjs.org/express-logging/-/express-logging-1.1.1.tgz"
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  var loggingMiddleware,
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      loggerSpy;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    var loggerMock = {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggerSpy = sinon.spy(loggerMock, 'info');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    var LoggingMiddleware = proxyquire('../../lib/logging', {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware = new LoggingMiddleware(loggerMock);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response', function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0]).to.be.equal('Response with status %d in %d ms.');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal(200);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with location header', function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0]).to.be.equal('Response with status %d in %d ms. Location: %s');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal(302);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[3]).to.be.equal('http://localhost:9000/location');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with client IP from XFF header', function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0]).to.be.equal('Response with status %d in %d ms.');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal(200);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with client IP from request if invalid XFF header', function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0]).to.be.equal('Response with status %d in %d ms.');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal(200);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  var loggingMiddleware,
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      loggerSpy;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    var loggerMock = {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggerSpy = sinon.spy(loggerMock, 'info');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    var LoggingMiddleware = proxyquire('../../lib/logging', {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware = new LoggingMiddleware(loggerMock, {policy: 'params'});
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response', function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseStatusCode).to.be.equal(200);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseLocation).not.to.be.defined;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal('Response with status %d');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[2]).to.be.equal(200);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with location header', function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseStatusCode).to.be.equal(302);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseLocation).to.be.equal('http://localhost:9000/location');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal('Response with status %d');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[2]).to.be.equal(302);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with client IP from XFF header', function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseStatusCode).to.be.equal(200);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseLocation).not.to.be.defined;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal('Response with status %d');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[2]).to.be.equal(200);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with client IP from request if invalid XFF header', function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseStatusCode).to.be.equal(200);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseLocation).not.to.be.defined;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal('Response with status %d');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[2]).to.be.equal(200);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  var loggingMiddleware,
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      loggerSpy;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    var loggerMock = {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggerSpy = sinon.spy(loggerMock, 'info');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    var LoggingMiddleware = proxyquire('../../lib/logging', {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware = new LoggingMiddleware(loggerMock, {blacklist: ['/blacklist']});
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response', function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0]).to.be.equal('Response with status %d in %d ms.');
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal(200);
./examples/express/node_modules/express-logging/test/unit/logging-test.js:  it('should not log anything when the url path is in the blacklist', function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./examples/express/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.called).to.be.false;
./examples/express/node_modules/express-logging/README.md:# express-logging
./examples/express/node_modules/express-logging/README.md:Express middleware to log, using a configurable logger, each request and response.
./examples/express/node_modules/express-logging/README.md:[![npm version](https://badge.fury.io/js/express-logging.svg)](http://badge.fury.io/js/express-logging)
./examples/express/node_modules/express-logging/README.md:[![Build Status](https://travis-ci.org/telefonica/node-express-logging.svg)](https://travis-ci.org/telefonica/node-express-logging)
./examples/express/node_modules/express-logging/README.md:[![Coverage Status](https://img.shields.io/coveralls/telefonica/node-express-logging.svg)](https://coveralls.io/r/telefonica/node-express-logging)
./examples/express/node_modules/express-logging/README.md:npm install express-logging
./examples/express/node_modules/express-logging/README.md:    expressLogging = require('express-logging'),
./examples/express/node_modules/express-logging/README.md:    logger = require('logops');
./examples/express/node_modules/express-logging/README.md:app.use(expressLogging(logger));
./examples/express/node_modules/express-logging/README.md:An optional argument `options` can customize enhanced aspects for the logging. This argument is an object with the following elements:
./examples/express/node_modules/express-logging/README.md: - `blacklist` is available to prevent some resources from being logged (for example, static resources). This argument is an array of strings. If the URL path starts with any of the elements of the blacklist array, then the logging of this request/response is ignored.
./examples/express/node_modules/express-logging/README.md: - `policy` is a string to customize how the info is logged. It supports two values: `message` or `params`. The former serializes all the log entry into a single string message. The latter passes to the logger an object with the log entry parameters and a second argument with the message; this policy is useful in order to process these parameters by systems like logstash. The default value is `message`.
./examples/express/node_modules/express-logging/README.md:The following example would ignore any resource available at either `/images` or `/html`. It also activates the logging policy `params`.
./examples/express/node_modules/express-logging/README.md:app.use(expressLogging(logger, {blacklist: blacklist, policy: 'params'}));
./examples/express/node_modules/express-logging/README.md:The request is logged with:
./examples/express/node_modules/express-logging/README.md:logger.info('Request from %s: %s %s', clientIpAddress, requestMethod, requestUrl);
./examples/express/node_modules/express-logging/README.md:A response without `Location` header is logged with:
./examples/express/node_modules/express-logging/README.md:logger.info('Response with status %d in %d ms.', responseStatusCode, duration);
./examples/express/node_modules/express-logging/README.md:A response with `Location` header is logged with:
./examples/express/node_modules/express-logging/README.md:logger.info('Response with status %d in %d ms. Location: %s', responseStatusCode, duration, locationHeader);
./examples/express/node_modules/express-logging/README.md:Both response log entries include the `duration` of the whole transaction (between receiving the request until replying with the response).
./examples/express/node_modules/express-logging/README.md:The request is logged with:
./examples/express/node_modules/express-logging/README.md:logger.info(params, 'Request from %s: %s', requestMethod, requestUrl);
./examples/express/node_modules/express-logging/README.md:A response without `Location` header is logged with:
./examples/express/node_modules/express-logging/README.md:logger.info(params, 'Response with status %d', responseStatusCode);
./examples/express/node_modules/express-logging/README.md:A response with `Location` header is logged with:
./examples/express/node_modules/express-logging/README.md:logger.info(params, 'Response with status %d', responseStatusCode);
./examples/express/node_modules/express-logging/README.md:Both response log entries include the `duration` of the whole transaction (between receiving the request until replying with the response).
./examples/express/node_modules/express-logging/lib/logging.js: * Express middleware to log the request and response.
./examples/express/node_modules/express-logging/lib/logging.js: * @param {Object} logger
./examples/express/node_modules/express-logging/lib/logging.js: *      - policy: Policy to generate the log entry in the logger. Possible values:
./examples/express/node_modules/express-logging/lib/logging.js:module.exports = function(logger, opts) {
./examples/express/node_modules/express-logging/lib/logging.js:  return function loggingMiddleware(req, res, next) {
./examples/express/node_modules/express-logging/lib/logging.js:        logger.info(requestParams, 'Request: %s %s', req.method, req.originalUrl);
./examples/express/node_modules/express-logging/lib/logging.js:        logger.info('Request from %s: %s %s', getClientIp(req), req.method, req.originalUrl);
./examples/express/node_modules/express-logging/lib/logging.js:          logger.info(responseParams, 'Response with status %d', res.statusCode);
./examples/express/node_modules/express-logging/lib/logging.js:            logger.info('Response with status %d in %d ms. Location: %s', res.statusCode, duration, location);
./examples/express/node_modules/express-logging/lib/logging.js:            logger.info('Response with status %d in %d ms.', res.statusCode, duration);
./examples/express/node_modules/morgan/HISTORY.md:    - `clf` for the common log format
./examples/express/node_modules/morgan/HISTORY.md:  * Add `combined` log format
./examples/express/node_modules/morgan/HISTORY.md:  * Add `common` log format
./examples/express/node_modules/morgan/package.json:  "description": "HTTP request logger middleware for node.js",
./examples/express/node_modules/morgan/package.json:    "logger",
./examples/express/node_modules/morgan/package.json:  "readme": "# morgan\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nHTTP request logger middleware for node.js\n\n> Named after [Dexter](http://en.wikipedia.org/wiki/Dexter_Morgan), a show you should not watch until completion.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar morgan = require('morgan')\n```\n\n### morgan(format, options)\n\nCreate a new morgan logger middleware function using the given `format` and `options`.\nThe `format` argument may be a string of a predefined name (see below for the names),\na string of a format string, or a function that will produce a log entry.\n\nThe `format` function will be called with three arguments `tokens`, `req`, and `res`,\nwhere `tokens` is an object with all defined tokens, `req` is the HTTP request and `res`\nis the HTTP response. The function is expected to return a string that will be the log\nline, or `undefined` / `null` to skip logging.\n\n#### Using a predefined format string\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan('tiny')\n```\n\n#### Using format string of predefined tokens\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan(':method :url :status :res[content-length] - :response-time ms')\n```\n\n#### Using a custom format function\n\n<!-- eslint-disable no-undef -->\n\n``` js\nmorgan(function (tokens, req, res) {\n  return [\n    tokens.method(req, res),\n    tokens.url(req, res),\n    tokens.status(req, res),\n    tokens.res(req, res, 'content-length'), '-',\n    tokens['response-time'](req, res), 'ms'\n  ].join(' ')\n})\n```\n\n#### Options\n\nMorgan accepts these properties in the options object.\n\n##### immediate\n\nWrite log line on request instead of response. This means that a requests will\nbe logged even if the server crashes, _but data from the response (like the\nresponse code, content length, etc.) cannot be logged_.\n\n##### skip\n\nFunction to determine if logging is skipped, defaults to `false`. This function\nwill be called as `skip(req, res)`.\n\n<!-- eslint-disable no-undef -->\n\n```js\n// EXAMPLE: only log error responses\nmorgan('combined', {\n  skip: function (req, res) { return res.statusCode < 400 }\n})\n```\n\n##### stream\n\nOutput stream for writing log lines, defaults to `process.stdout`.\n\n#### Predefined Formats\n\nThere are various pre-defined formats provided:\n\n##### combined\n\nStandard Apache combined log output.\n\n```\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] \":referrer\" \":user-agent\"\n```\n\n##### common\n\nStandard Apache common log output.\n\n```\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length]\n```\n\n##### dev\n\nConcise output colored by response status for development use. The `:status`\ntoken will be colored red for server error codes, yellow for client error\ncodes, cyan for redirection codes, and uncolored for all other codes.\n\n```\n:method :url :status :response-time ms - :res[content-length]\n```\n\n##### short\n\nShorter than default, also including response time.\n\n```\n:remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms\n```\n\n##### tiny\n\nThe minimal output.\n\n```\n:method :url :status :res[content-length] - :response-time ms\n```\n\n#### Tokens\n\n##### Creating new tokens\n\nTo define a token, simply invoke `morgan.token()` with the name and a callback function.\nThis callback function is expected to return a string value. The value returned is then\navailable as \":type\" in this case:\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan.token('type', function (req, res) { return req.headers['content-type'] })\n```\n\nCalling `morgan.token()` using the same name as an existing token will overwrite that\ntoken definition.\n\nThe token function is expected to be called with the arguments `req` and `res`, representing\nthe HTTP request and HTTP response. Additionally, the token can accept further arguments of\nit's choosing to customize behavior.\n\n##### :date[format]\n\nThe current date and time in UTC. The available formats are:\n\n  - `clf` for the common log format (`\"10/Oct/2000:13:55:36 +0000\"`)\n  - `iso` for the common ISO 8601 date time format (`2000-10-10T13:55:36.000Z`)\n  - `web` for the common RFC 1123 date time format (`Tue, 10 Oct 2000 13:55:36 GMT`)\n\nIf no format is given, then the default is `web`.\n\n##### :http-version\n\nThe HTTP version of the request.\n\n##### :method\n\nThe HTTP method of the request.\n\n##### :referrer\n\nThe Referrer header of the request. This will use the standard mis-spelled Referer header if exists, otherwise Referrer.\n\n##### :remote-addr\n\nThe remote address of the request. This will use `req.ip`, otherwise the standard `req.connection.remoteAddress` value (socket address).\n\n##### :remote-user\n\nThe user authenticated as part of Basic auth for the request.\n\n##### :req[header]\n\nThe given `header` of the request.\n\n##### :res[header]\n\nThe given `header` of the response.\n\n##### :response-time[digits]\n\nThe time between the request coming into `morgan` and when the response\nheaders are written, in milliseconds.\n\nThe `digits` argument is a number that specifies the number of digits to\ninclude on the number, defaulting to `3`, which provides microsecond precision.\n\n##### :status\n\nThe status code of the response.\n\nIf the request/response cycle completes before a response was sent to the\nclient (for example, the TCP socket closed prematurely by a client aborting\nthe request), then the status will be empty (displayed as `\"-\"` in the log).\n\n##### :url\n\nThe URL of the request. This will use `req.originalUrl` if exists, otherwise `req.url`.\n\n##### :user-agent\n\nThe contents of the User-Agent header of the request.\n\n### morgan.compile(format)\n\nCompile a format string into a `format` function for use by `morgan`. A format string\nis a string that represents a single log line and can utilize token syntax.\nTokens are references by `:token-name`. If tokens accept arguments, they can\nbe passed using `[]`, for example: `:token-name[pretty]` would pass the string\n`'pretty'` as an argument to the token `token-name`.\n\nThe function returned from `morgan.compile` takes three arguments `tokens`, `req`, and\n`res`, where `tokens` is object with all defined tokens, `req` is the HTTP request and\n`res` is the HTTP response. The function will return a string that will be the log line,\nor `undefined` / `null` to skip logging.\n\nNormally formats are defined using `morgan.format(name, format)`, but for certain\nadvanced uses, this compile function is directly available.\n\n## Examples\n\n### express/connect\n\nSimple app that will log all request in the Apache combined format to STDOUT\n\n```js\nvar express = require('express')\nvar morgan = require('morgan')\n\nvar app = express()\n\napp.use(morgan('combined'))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### vanilla http server\n\nSimple app that will log all request in the Apache combined format to STDOUT\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar morgan = require('morgan')\n\n// create \"middleware\"\nvar logger = morgan('combined')\n\nhttp.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  logger(req, res, function (err) {\n    if (err) return done(err)\n\n    // respond to request\n    res.setHeader('content-type', 'text/plain')\n    res.end('hello, world!')\n  })\n})\n```\n\n### write logs to a file\n\n#### single file\n\nSimple app that will log all requests in the Apache combined format to the file\n`access.log`.\n\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar morgan = require('morgan')\nvar path = require('path')\n\nvar app = express()\n\n// create a write stream (in append mode)\nvar accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})\n\n// setup the logger\napp.use(morgan('combined', {stream: accessLogStream}))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n#### log file rotation\n\nSimple app that will log all requests in the Apache combined format to one log\nfile per day in the `log/` directory using the\n[rotating-file-stream module](https://www.npmjs.com/package/rotating-file-stream).\n\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar morgan = require('morgan')\nvar path = require('path')\nvar rfs = require('rotating-file-stream')\n\nvar app = express()\nvar logDirectory = path.join(__dirname, 'log')\n\n// ensure log directory exists\nfs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)\n\n// create a rotating write stream\nvar accessLogStream = rfs('access.log', {\n  interval: '1d', // rotate daily\n  path: logDirectory\n})\n\n// setup the logger\napp.use(morgan('combined', {stream: accessLogStream}))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### split / dual logging\n\nThe `morgan` middleware can be used as many times as needed, enabling\ncombinations like:\n\n  * Log entry on request and one on response\n  * Log all requests to file, but errors to console\n  * ... and more!\n\nSample app that will log all requests to a file using Apache format, but\nerror responses are logged to the console:\n\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar morgan = require('morgan')\nvar path = require('path')\n\nvar app = express()\n\n// log only 4xx and 5xx responses to console\napp.use(morgan('dev', {\n  skip: function (req, res) { return res.statusCode < 400 }\n}))\n\n// log all requests to access.log\napp.use(morgan('common', {\n  stream: fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})\n}))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### use custom token formats\n\nSample app that will use custom token formats. This adds an ID to all requests and displays it using the `:id` token.\n\n```js\nvar express = require('express')\nvar morgan = require('morgan')\nvar uuid = require('node-uuid')\n\nmorgan.token('id', function getId (req) {\n  return req.id\n})\n\nvar app = express()\n\napp.use(assignId)\napp.use(morgan(':id :method :url :response-time'))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n\nfunction assignId (req, res, next) {\n  req.id = uuid.v4()\n  next()\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/morgan.svg\n[npm-url]: https://npmjs.org/package/morgan\n[travis-image]: https://img.shields.io/travis/expressjs/morgan/master.svg\n[travis-url]: https://travis-ci.org/expressjs/morgan\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/morgan/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/morgan?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/morgan.svg\n[downloads-url]: https://npmjs.org/package/morgan\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./examples/express/node_modules/morgan/node_modules/depd/Readme.md:logging source.
./examples/express/node_modules/morgan/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n",
./examples/express/node_modules/morgan/node_modules/depd/index.js:    // call to self as log
./examples/express/node_modules/morgan/node_modules/depd/index.js:    log.call(deprecate, message)
./examples/express/node_modules/morgan/node_modules/depd/index.js:function log (message, site) {
./examples/express/node_modules/morgan/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./examples/express/node_modules/morgan/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/morgan/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/morgan/node_modules/debug/package.json:    "log",
./examples/express/node_modules/morgan/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./examples/express/node_modules/morgan/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./examples/express/node_modules/morgan/node_modules/debug/README.md:  change the behavior of the debug logging:
./examples/express/node_modules/morgan/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./examples/express/node_modules/morgan/node_modules/debug/README.md:var log = debug('app:log');
./examples/express/node_modules/morgan/node_modules/debug/README.md:// set this namespace to log via console.log
./examples/express/node_modules/morgan/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./examples/express/node_modules/morgan/node_modules/debug/README.md:log('goes to stdout');
./examples/express/node_modules/morgan/node_modules/debug/README.md:// overrides all per-namespace log settings
./examples/express/node_modules/morgan/node_modules/debug/README.md:debug.log = console.info.bind(console);
./examples/express/node_modules/morgan/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./examples/express/node_modules/morgan/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./examples/express/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./examples/express/node_modules/morgan/node_modules/debug/src/browser.js:exports.log = log;
./examples/express/node_modules/morgan/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./examples/express/node_modules/morgan/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./examples/express/node_modules/morgan/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./examples/express/node_modules/morgan/node_modules/debug/src/browser.js:function log() {
./examples/express/node_modules/morgan/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./examples/express/node_modules/morgan/node_modules/debug/src/browser.js:    && console.log
./examples/express/node_modules/morgan/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./examples/express/node_modules/morgan/node_modules/debug/src/node.js:exports.log = log;
./examples/express/node_modules/morgan/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./examples/express/node_modules/morgan/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./examples/express/node_modules/morgan/node_modules/debug/src/node.js:function log() {
./examples/express/node_modules/morgan/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./examples/express/node_modules/morgan/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./examples/express/node_modules/morgan/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./examples/express/node_modules/morgan/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./examples/express/node_modules/morgan/node_modules/debug/src/debug.js: * Previous log timestamp.
./examples/express/node_modules/morgan/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./examples/express/node_modules/morgan/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./examples/express/node_modules/morgan/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./examples/express/node_modules/morgan/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./examples/express/node_modules/morgan/node_modules/debug/karma.conf.js:    // level of logging
./examples/express/node_modules/morgan/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./examples/express/node_modules/morgan/node_modules/debug/component.json:    "log",
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/package.json:  "readme": "# safe-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/safe-buffer/master.svg\n[travis-url]: https://travis-ci.org/feross/safe-buffer\n[npm-image]: https://img.shields.io/npm/v/safe-buffer.svg\n[npm-url]: https://npmjs.org/package/safe-buffer\n[downloads-image]: https://img.shields.io/npm/dm/safe-buffer.svg\n[downloads-url]: https://npmjs.org/package/safe-buffer\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n#### Safer Node.js Buffer API\n\n**Use the new Node.js Buffer APIs (`Buffer.from`, `Buffer.alloc`,\n`Buffer.allocUnsafe`, `Buffer.allocUnsafeSlow`) in all versions of Node.js.**\n\n**Uses the built-in implementation when available.**\n\n## install\n\n```\nnpm install safe-buffer\n```\n\n## usage\n\nThe goal of this package is to provide a safe replacement for the node.js `Buffer`.\n\nIt's a drop-in replacement for `Buffer`. You can use it by adding one `require` line to\nthe top of your node.js modules:\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n\n// Existing buffer code will continue to work without issues:\n\nnew Buffer('hey', 'utf8')\nnew Buffer([1, 2, 3], 'utf8')\nnew Buffer(obj)\nnew Buffer(16) // create an uninitialized buffer (potentially unsafe)\n\n// But you can use these new explicit APIs to make clear what you want:\n\nBuffer.from('hey', 'utf8') // convert from many types to a Buffer\nBuffer.alloc(16) // create a zero-filled buffer (safe)\nBuffer.allocUnsafe(16) // create an uninitialized buffer (potentially unsafe)\n```\n\n## api\n\n### Class Method: Buffer.from(array)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `array` {Array}\n\nAllocates a new `Buffer` using an `array` of octets.\n\n```js\nconst buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]);\n  // creates a new Buffer containing ASCII bytes\n  // ['b','u','f','f','e','r']\n```\n\nA `TypeError` will be thrown if `array` is not an `Array`.\n\n### Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `arrayBuffer` {ArrayBuffer} The `.buffer` property of a `TypedArray` or\n  a `new ArrayBuffer()`\n* `byteOffset` {Number} Default: `0`\n* `length` {Number} Default: `arrayBuffer.length - byteOffset`\n\nWhen passed a reference to the `.buffer` property of a `TypedArray` instance,\nthe newly created `Buffer` will share the same allocated memory as the\nTypedArray.\n\n```js\nconst arr = new Uint16Array(2);\narr[0] = 5000;\narr[1] = 4000;\n\nconst buf = Buffer.from(arr.buffer); // shares the memory with arr;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 a0 0f>\n\n// changing the TypedArray changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 70 17>\n```\n\nThe optional `byteOffset` and `length` arguments specify a memory range within\nthe `arrayBuffer` that will be shared by the `Buffer`.\n\n```js\nconst ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\nconsole.log(buf.length);\n  // Prints: 2\n```\n\nA `TypeError` will be thrown if `arrayBuffer` is not an `ArrayBuffer`.\n\n### Class Method: Buffer.from(buffer)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `buffer` {Buffer}\n\nCopies the passed `buffer` data onto a new `Buffer` instance.\n\n```js\nconst buf1 = Buffer.from('buffer');\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\nconsole.log(buf1.toString());\n  // 'auffer'\nconsole.log(buf2.toString());\n  // 'buffer' (copy is not changed)\n```\n\nA `TypeError` will be thrown if `buffer` is not a `Buffer`.\n\n### Class Method: Buffer.from(str[, encoding])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `str` {String} String to encode.\n* `encoding` {String} Encoding to use, Default: `'utf8'`\n\nCreates a new `Buffer` containing the given JavaScript string `str`. If\nprovided, the `encoding` parameter identifies the character encoding.\nIf not provided, `encoding` defaults to `'utf8'`.\n\n```js\nconst buf1 = Buffer.from('this is a tést');\nconsole.log(buf1.toString());\n  // prints: this is a tést\nconsole.log(buf1.toString('ascii'));\n  // prints: this is a tC)st\n\nconst buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');\nconsole.log(buf2.toString());\n  // prints: this is a tést\n```\n\nA `TypeError` will be thrown if `str` is not a string.\n\n### Class Method: Buffer.alloc(size[, fill[, encoding]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n* `fill` {Value} Default: `undefined`\n* `encoding` {String} Default: `utf8`\n\nAllocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the\n`Buffer` will be *zero-filled*.\n\n```js\nconst buf = Buffer.alloc(5);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nThe `size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nIf `fill` is specified, the allocated `Buffer` will be initialized by calling\n`buf.fill(fill)`. See [`buf.fill()`][] for more information.\n\n```js\nconst buf = Buffer.alloc(5, 'a');\nconsole.log(buf);\n  // <Buffer 61 61 61 61 61>\n```\n\nIf both `fill` and `encoding` are specified, the allocated `Buffer` will be\ninitialized by calling `buf.fill(fill, encoding)`. For example:\n\n```js\nconst buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\nconsole.log(buf);\n  // <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n```\n\nCalling `Buffer.alloc(size)` can be significantly slower than the alternative\n`Buffer.allocUnsafe(size)` but ensures that the newly created `Buffer` instance\ncontents will *never contain sensitive data*.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### Class Method: Buffer.allocUnsafe(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* `Buffer` of `size` bytes.  The `size` must\nbe less than or equal to the value of `require('buffer').kMaxLength` (on 64-bit\narchitectures, `kMaxLength` is `(2^31)-1`). Otherwise, a [`RangeError`][] is\nthrown. A zero-length Buffer will be created if a `size` less than or equal to\n0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\n```js\nconst buf = Buffer.allocUnsafe(5);\nconsole.log(buf);\n  // <Buffer 78 e0 82 02 01>\n  // (octets will be different, every time)\nbuf.fill(0);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nA `TypeError` will be thrown if `size` is not a number.\n\nNote that the `Buffer` module pre-allocates an internal `Buffer` instance of\nsize `Buffer.poolSize` that is used as a pool for the fast allocation of new\n`Buffer` instances created using `Buffer.allocUnsafe(size)` (and the deprecated\n`new Buffer(size)` constructor) only when `size` is less than or equal to\n`Buffer.poolSize >> 1` (floor of `Buffer.poolSize` divided by two). The default\nvalue of `Buffer.poolSize` is `8192` but can be modified.\n\nUse of this pre-allocated internal memory pool is a key difference between\ncalling `Buffer.alloc(size, fill)` vs. `Buffer.allocUnsafe(size).fill(fill)`.\nSpecifically, `Buffer.alloc(size, fill)` will *never* use the internal Buffer\npool, while `Buffer.allocUnsafe(size).fill(fill)` *will* use the internal\nBuffer pool if `size` is less than or equal to half `Buffer.poolSize`. The\ndifference is subtle but can be important when an application requires the\nadditional performance that `Buffer.allocUnsafe(size)` provides.\n\n### Class Method: Buffer.allocUnsafeSlow(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* and non-pooled `Buffer` of `size` bytes.  The\n`size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\nWhen using `Buffer.allocUnsafe()` to allocate new `Buffer` instances,\nallocations under 4KB are, by default, sliced from a single pre-allocated\n`Buffer`. This allows applications to avoid the garbage collection overhead of\ncreating many individually allocated Buffers. This approach improves both\nperformance and memory usage by eliminating the need to track and cleanup as\nmany `Persistent` objects.\n\nHowever, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled Buffer instance using `Buffer.allocUnsafeSlow()` then\ncopy out the relevant bits.\n\n```js\n// need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on('readable', () => {\n  const data = socket.read();\n  // allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n  // copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n  store.push(sb);\n});\n```\n\nUse of `Buffer.allocUnsafeSlow()` should be used only as a last resort *after*\na developer has observed undue memory retention in their applications.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### All the Rest\n\nThe rest of the `Buffer` API is exactly the same as in node.js.\n[See the docs](https://nodejs.org/api/buffer.html).\n\n\n## Related links\n\n- [Node.js issue: Buffer(number) is unsafe](https://github.com/nodejs/node/issues/4660)\n- [Node.js Enhancement Proposal: Buffer.from/Buffer.alloc/Buffer.zalloc/Buffer() soft-deprecate](https://github.com/nodejs/node-eps/pull/4)\n\n## Why is `Buffer` unsafe?\n\nToday, the node.js `Buffer` constructor is overloaded to handle many different argument\ntypes like `String`, `Array`, `Object`, `TypedArrayView` (`Uint8Array`, etc.),\n`ArrayBuffer`, and also `Number`.\n\nThe API is optimized for convenience: you can throw any type at it, and it will try to do\nwhat you want.\n\nBecause the Buffer constructor is so powerful, you often see code like this:\n\n```js\n// Convert UTF-8 strings to hex\nfunction toHex (str) {\n  return new Buffer(str).toString('hex')\n}\n```\n\n***But what happens if `toHex` is called with a `Number` argument?***\n\n### Remote Memory Disclosure\n\nIf an attacker can make your program call the `Buffer` constructor with a `Number`\nargument, then they can make it allocate uninitialized memory from the node.js process.\nThis could potentially disclose TLS private keys, user data, or database passwords.\n\nWhen the `Buffer` constructor is passed a `Number` argument, it returns an\n**UNINITIALIZED** block of memory of the specified `size`. When you create a `Buffer` like\nthis, you **MUST** overwrite the contents before returning it to the user.\n\nFrom the [node.js docs](https://nodejs.org/api/buffer.html#buffer_new_buffer_size):\n\n> `new Buffer(size)`\n>\n> - `size` Number\n>\n> The underlying memory for `Buffer` instances created in this way is not initialized.\n> **The contents of a newly created `Buffer` are unknown and could contain sensitive\n> data.** Use `buf.fill(0)` to initialize a Buffer to zeroes.\n\n(Emphasis our own.)\n\nWhenever the programmer intended to create an uninitialized `Buffer` you often see code\nlike this:\n\n```js\nvar buf = new Buffer(16)\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### Would this ever be a problem in real code?\n\nYes. It's surprisingly common to forget to check the type of your variables in a\ndynamically-typed language like JavaScript.\n\nUsually the consequences of assuming the wrong type is that your program crashes with an\nuncaught exception. But the failure mode for forgetting to check the type of arguments to\nthe `Buffer` constructor is more catastrophic.\n\nHere's an example of a vulnerable service that takes a JSON payload and converts it to\nhex:\n\n```js\n// Take a JSON payload {str: \"some string\"} and convert it to hex\nvar server = http.createServer(function (req, res) {\n  var data = ''\n  req.setEncoding('utf8')\n  req.on('data', function (chunk) {\n    data += chunk\n  })\n  req.on('end', function () {\n    var body = JSON.parse(data)\n    res.end(new Buffer(body.str).toString('hex'))\n  })\n})\n\nserver.listen(8080)\n```\n\nIn this example, an http client just has to send:\n\n```json\n{\n  \"str\": 1000\n}\n```\n\nand it will get back 1,000 bytes of uninitialized memory from the server.\n\nThis is a very serious bug. It's similar in severity to the\n[the Heartbleed bug](http://heartbleed.com/) that allowed disclosure of OpenSSL process\nmemory by remote attackers.\n\n\n### Which real-world packages were vulnerable?\n\n#### [`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht)\n\n[Mathias Buus](https://github.com/mafintosh) and I\n([Feross Aboukhadijeh](http://feross.org/)) found this issue in one of our own packages,\n[`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht). The bug would allow\nanyone on the internet to send a series of messages to a user of `bittorrent-dht` and get\nthem to reveal 20 bytes at a time of uninitialized memory from the node.js process.\n\nHere's\n[the commit](https://github.com/feross/bittorrent-dht/commit/6c7da04025d5633699800a99ec3fbadf70ad35b8)\nthat fixed it. We released a new fixed version, created a\n[Node Security Project disclosure](https://nodesecurity.io/advisories/68), and deprecated all\nvulnerable versions on npm so users will get a warning to upgrade to a newer version.\n\n#### [`ws`](https://www.npmjs.com/package/ws)\n\nThat got us wondering if there were other vulnerable packages. Sure enough, within a short\nperiod of time, we found the same issue in [`ws`](https://www.npmjs.com/package/ws), the\nmost popular WebSocket implementation in node.js.\n\nIf certain APIs were called with `Number` parameters instead of `String` or `Buffer` as\nexpected, then uninitialized server memory would be disclosed to the remote peer.\n\nThese were the vulnerable methods:\n\n```js\nsocket.send(number)\nsocket.ping(number)\nsocket.pong(number)\n```\n\nHere's a vulnerable socket server with some echo functionality:\n\n```js\nserver.on('connection', function (socket) {\n  socket.on('message', function (message) {\n    message = JSON.parse(message)\n    if (message.type === 'echo') {\n      socket.send(message.data) // send back the user's message\n    }\n  })\n})\n```\n\n`socket.send(number)` called on the server, will disclose server memory.\n\nHere's [the release](https://github.com/websockets/ws/releases/tag/1.0.1) where the issue\nwas fixed, with a more detailed explanation. Props to\n[Arnout Kazemier](https://github.com/3rd-Eden) for the quick fix. Here's the\n[Node Security Project disclosure](https://nodesecurity.io/advisories/67).\n\n\n### What's the solution?\n\nIt's important that node.js offers a fast way to get memory otherwise performance-critical\napplications would needlessly get a lot slower.\n\nBut we need a better way to *signal our intent* as programmers. **When we want\nuninitialized memory, we should request it explicitly.**\n\nSensitive functionality should not be packed into a developer-friendly API that loosely\naccepts many different types. This type of API encourages the lazy practice of passing\nvariables in without checking the type very carefully.\n\n#### A new API: `Buffer.allocUnsafe(number)`\n\nThe functionality of creating buffers with uninitialized memory should be part of another\nAPI. We propose `Buffer.allocUnsafe(number)`. This way, it's not part of an API that\nfrequently gets user input of all sorts of different types passed into it.\n\n```js\nvar buf = Buffer.allocUnsafe(16) // careful, uninitialized memory!\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### How do we fix node.js core?\n\nWe sent [a PR to node.js core](https://github.com/nodejs/node/pull/4514) (merged as\n`semver-major`) which defends against one case:\n\n```js\nvar str = 16\nnew Buffer(str, 'utf8')\n```\n\nIn this situation, it's implied that the programmer intended the first argument to be a\nstring, since they passed an encoding as a second argument. Today, node.js will allocate\nuninitialized memory in the case of `new Buffer(number, encoding)`, which is probably not\nwhat the programmer intended.\n\nBut this is only a partial solution, since if the programmer does `new Buffer(variable)`\n(without an `encoding` parameter) there's no way to know what they intended. If `variable`\nis sometimes a number, then uninitialized memory will sometimes be returned.\n\n### What's the real long-term fix?\n\nWe could deprecate and remove `new Buffer(number)` and use `Buffer.allocUnsafe(number)` when\nwe need uninitialized memory. But that would break 1000s of packages.\n\n~~We believe the best solution is to:~~\n\n~~1. Change `new Buffer(number)` to return safe, zeroed-out memory~~\n\n~~2. Create a new API for creating uninitialized Buffers. We propose: `Buffer.allocUnsafe(number)`~~\n\n#### Update\n\nWe now support adding three new APIs:\n\n- `Buffer.from(value)` - convert from any type to a buffer\n- `Buffer.alloc(size)` - create a zero-filled buffer\n- `Buffer.allocUnsafe(size)` - create an uninitialized buffer with given size\n\nThis solves the core problem that affected `ws` and `bittorrent-dht` which is\n`Buffer(variable)` getting tricked into taking a number argument.\n\nThis way, existing code continues working and the impact on the npm ecosystem will be\nminimal. Over time, npm maintainers can migrate performance-critical code to use\n`Buffer.allocUnsafe(number)` instead of `new Buffer(number)`.\n\n\n### Conclusion\n\nWe think there's a serious design issue with the `Buffer` API as it exists today. It\npromotes insecure software by putting high-risk functionality into a convenient API\nwith friendly \"developer ergonomics\".\n\nThis wasn't merely a theoretical exercise because we found the issue in some of the\nmost popular npm packages.\n\nFortunately, there's an easy fix that can be applied today. Use `safe-buffer` in place of\n`buffer`.\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n```\n\nEventually, we hope that node.js core can switch to this new, safer behavior. We believe\nthe impact on the ecosystem would be minimal since it's not a breaking change.\nWell-maintained, popular packages would be updated to use `Buffer.alloc` quickly, while\nolder, insecure packages would magically become safe from this attack vector.\n\n\n## links\n\n- [Node.js PR: buffer: throw if both length and enc are passed](https://github.com/nodejs/node/pull/4514)\n- [Node Security Project disclosure for `ws`](https://nodesecurity.io/advisories/67)\n- [Node Security Project disclosure for`bittorrent-dht`](https://nodesecurity.io/advisories/68)\n\n\n## credit\n\nThe original issues in `bittorrent-dht`\n([disclosure](https://nodesecurity.io/advisories/68)) and\n`ws` ([disclosure](https://nodesecurity.io/advisories/67)) were discovered by\n[Mathias Buus](https://github.com/mafintosh) and\n[Feross Aboukhadijeh](http://feross.org/).\n\nThanks to [Adam Baldwin](https://github.com/evilpacket) for helping disclose these issues\nand for his work running the [Node Security Project](https://nodesecurity.io/).\n\nThanks to [John Hiesey](https://github.com/jhiesey) for proofreading this README and\nauditing the code.\n\n\n## license\n\nMIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org)\n",
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf.length);
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf1.toString('ascii'));
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/morgan/README.md:HTTP request logger middleware for node.js
./examples/express/node_modules/morgan/README.md:Create a new morgan logger middleware function using the given `format` and `options`.
./examples/express/node_modules/morgan/README.md:a string of a format string, or a function that will produce a log entry.
./examples/express/node_modules/morgan/README.md:is the HTTP response. The function is expected to return a string that will be the log
./examples/express/node_modules/morgan/README.md:line, or `undefined` / `null` to skip logging.
./examples/express/node_modules/morgan/README.md:Write log line on request instead of response. This means that a requests will
./examples/express/node_modules/morgan/README.md:be logged even if the server crashes, _but data from the response (like the
./examples/express/node_modules/morgan/README.md:response code, content length, etc.) cannot be logged_.
./examples/express/node_modules/morgan/README.md:Function to determine if logging is skipped, defaults to `false`. This function
./examples/express/node_modules/morgan/README.md:// EXAMPLE: only log error responses
./examples/express/node_modules/morgan/README.md:Output stream for writing log lines, defaults to `process.stdout`.
./examples/express/node_modules/morgan/README.md:Standard Apache combined log output.
./examples/express/node_modules/morgan/README.md:Standard Apache common log output.
./examples/express/node_modules/morgan/README.md:  - `clf` for the common log format (`"10/Oct/2000:13:55:36 +0000"`)
./examples/express/node_modules/morgan/README.md:the request), then the status will be empty (displayed as `"-"` in the log).
./examples/express/node_modules/morgan/README.md:is a string that represents a single log line and can utilize token syntax.
./examples/express/node_modules/morgan/README.md:`res` is the HTTP response. The function will return a string that will be the log line,
./examples/express/node_modules/morgan/README.md:or `undefined` / `null` to skip logging.
./examples/express/node_modules/morgan/README.md:Simple app that will log all request in the Apache combined format to STDOUT
./examples/express/node_modules/morgan/README.md:Simple app that will log all request in the Apache combined format to STDOUT
./examples/express/node_modules/morgan/README.md:var logger = morgan('combined')
./examples/express/node_modules/morgan/README.md:  logger(req, res, function (err) {
./examples/express/node_modules/morgan/README.md:### write logs to a file
./examples/express/node_modules/morgan/README.md:Simple app that will log all requests in the Apache combined format to the file
./examples/express/node_modules/morgan/README.md:`access.log`.
./examples/express/node_modules/morgan/README.md:var accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})
./examples/express/node_modules/morgan/README.md:// setup the logger
./examples/express/node_modules/morgan/README.md:#### log file rotation
./examples/express/node_modules/morgan/README.md:Simple app that will log all requests in the Apache combined format to one log
./examples/express/node_modules/morgan/README.md:file per day in the `log/` directory using the
./examples/express/node_modules/morgan/README.md:var logDirectory = path.join(__dirname, 'log')
./examples/express/node_modules/morgan/README.md:// ensure log directory exists
./examples/express/node_modules/morgan/README.md:fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)
./examples/express/node_modules/morgan/README.md:var accessLogStream = rfs('access.log', {
./examples/express/node_modules/morgan/README.md:  path: logDirectory
./examples/express/node_modules/morgan/README.md:// setup the logger
./examples/express/node_modules/morgan/README.md:### split / dual logging
./examples/express/node_modules/morgan/README.md:Sample app that will log all requests to a file using Apache format, but
./examples/express/node_modules/morgan/README.md:error responses are logged to the console:
./examples/express/node_modules/morgan/README.md:// log only 4xx and 5xx responses to console
./examples/express/node_modules/morgan/README.md:// log all requests to access.log
./examples/express/node_modules/morgan/README.md:  stream: fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})
./examples/express/node_modules/morgan/index.js: * Default log buffer duration.
./examples/express/node_modules/morgan/index.js: * Create a logger middleware.
./examples/express/node_modules/morgan/index.js:  // check if log entry should be skipped
./examples/express/node_modules/morgan/index.js:  return function logger (req, res, next) {
./examples/express/node_modules/morgan/index.js:    function logRequest () {
./examples/express/node_modules/morgan/index.js:      debug('log request')
./examples/express/node_modules/morgan/index.js:      // immediate log
./examples/express/node_modules/morgan/index.js:      logRequest()
./examples/express/node_modules/morgan/index.js:      // log when response finished
./examples/express/node_modules/morgan/index.js:      onFinished(res, logRequest)
./examples/express/node_modules/morgan/index.js: * Apache combined log format.
./examples/express/node_modules/morgan/index.js: * Apache common log format.
./examples/express/node_modules/morgan/index.js: * Format a Date in the common log format.
./examples/express/node_modules/log-requests/logger.js:const log = console.log.bind(console)
./examples/express/node_modules/log-requests/logger.js:module.exports = function logger (options) {
./examples/express/node_modules/log-requests/logger.js:    log(chalk.bold.inverse('\n\n________________REQUEST SUMMARY________________'))
./examples/express/node_modules/log-requests/logger.js:    log(prettyjson.render(summary))
./examples/express/node_modules/log-requests/package.json:  "name": "log-requests",
./examples/express/node_modules/log-requests/package.json:  "description": "A service that simply echos and logs all requests sent to it",
./examples/express/node_modules/log-requests/package.json:    "log-requests": "index.js"
./examples/express/node_modules/log-requests/package.json:    "url": "git+https://github.com/qubitdigital/log-requests.git"
./examples/express/node_modules/log-requests/package.json:    "url": "https://github.com/qubitdigital/log-requests/issues"
./examples/express/node_modules/log-requests/package.json:  "homepage": "https://github.com/qubitdigital/log-requests#readme",
./examples/express/node_modules/log-requests/package.json:  "readme": "# log-requests\nA service that simply echos and logs all requests sent to it\n\n## Usage\n```\nnpm install log-requests\nlog-requests --help\n\nUsage: log-requests [options]\n\nA service that simply echos and logs all requests sent to it\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -p, --port <port>  Specify port [2345]\n  -u, --url          Log url\n  -b, --body         Log body\n  -q, --query        Log query\n  -h, --headers      Log headers\n  -c, --cookies      Log cookies\n\nExamples:\n\n  to log requests to http://localhost:2345:\n\n  log-requests\n\n  to log requests to http://localhost:2000:\n\n  log-requests -p 2000\n  log-requests --port 2000\n\n  to log just the url and cookies for requests to http://localhost:2000:\n\n  log-requests -p 2000 -uc\n  log-requests --port 2000 --url --cookies\n\n  to log just the headers query and body for requests to http://localhost:2000:\n\n  log-requests -p 2000 -hqb\n  log-requests -p 2000 --headers --query --body\n\n```\n\n## Output\n```\nlog-requests\ncurl http://localhost:2345\n```\nResponse:\n```\n\n  {\"url\":\"/\",\"body\":{},\"query\":{},\"headers\":{\"host\":\"localhost:2345\",\"user-agent\":\"curl/7.43.0\",\"accept\":\"*/*\"},\"cookies\":{}}\n\n```\nLog:\n```\n\n  ________________REQUEST SUMMARY________________\n  url:     /\n  body:\n\n  query:\n\n  headers:\n    host:       localhost:2345\n    user-agent: curl/7.43.0\n    accept:     */*\n  cookies:\n```\n\n## Dependencies\nnodejs (https://nodejs.org/en/)\n",
./examples/express/node_modules/log-requests/package.json:  "_id": "log-requests@1.0.3",
./examples/express/node_modules/log-requests/package.json:  "_from": "log-requests@"
./examples/express/node_modules/log-requests/node_modules/chalk/package.json:    "log",
./examples/express/node_modules/log-requests/node_modules/chalk/package.json:    "logging",
./examples/express/node_modules/log-requests/node_modules/chalk/package.json:  "readme": "<h1 align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"https://cdn.rawgit.com/chalk/chalk/19935d6484811c5e468817f846b7b3d417d7bf4a/logo.svg\" alt=\"chalk\">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> Terminal string styling done right\n\n[![Build Status](https://travis-ci.org/chalk/chalk.svg?branch=master)](https://travis-ci.org/chalk/chalk)\n[![Coverage Status](https://coveralls.io/repos/chalk/chalk/badge.svg?branch=master)](https://coveralls.io/r/chalk/chalk?branch=master)\n[![](http://img.shields.io/badge/unicorn-approved-ff69b4.svg)](https://www.youtube.com/watch?v=9auOCbH5Ns4)\n\n\n[colors.js](https://github.com/Marak/colors.js) used to be the most popular string styling module, but it has serious deficiencies like extending `String.prototype` which causes all kinds of [problems](https://github.com/yeoman/yo/issues/68). Although there are other ones, they either do too much or not enough.\n\n**Chalk is a clean and focused alternative.**\n\n![](https://github.com/chalk/ansi-styles/raw/master/screenshot.png)\n\n\n## Why\n\n- Highly performant\n- Doesn't extend `String.prototype`\n- Expressive API\n- Ability to nest styles\n- Clean and focused\n- Auto-detects color support\n- Actively maintained\n- [Used by ~4500 modules](https://www.npmjs.com/browse/depended/chalk) as of July 15, 2015\n\n\n## Install\n\n```\n$ npm install --save chalk\n```\n\n\n## Usage\n\nChalk comes with an easy to use composable API where you just chain and nest the styles you want.\n\n```js\nvar chalk = require('chalk');\n\n// style a string\nchalk.blue('Hello world!');\n\n// combine styled and normal strings\nchalk.blue('Hello') + 'World' + chalk.red('!');\n\n// compose multiple styles using the chainable API\nchalk.blue.bgRed.bold('Hello world!');\n\n// pass in multiple arguments\nchalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz');\n\n// nest styles\nchalk.red('Hello', chalk.underline.bgBlue('world') + '!');\n\n// nest styles of the same type even (color, underline, background)\nchalk.green(\n\t'I am a green line ' +\n\tchalk.blue.underline.bold('with a blue substring') +\n\t' that becomes green again!'\n);\n```\n\nEasily define your own themes.\n\n```js\nvar chalk = require('chalk');\nvar error = chalk.bold.red;\nconsole.log(error('Error!'));\n```\n\nTake advantage of console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data).\n\n```js\nvar name = 'Sindre';\nconsole.log(chalk.green('Hello %s'), name);\n//=> Hello Sindre\n```\n\n\n## API\n\n### chalk.`<style>[.<style>...](string, [string...])`\n\nExample: `chalk.red.bold.underline('Hello', 'world');`\n\nChain [styles](#styles) and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that `Chalk.red.yellow.green` is equivalent to `Chalk.green`.\n\nMultiple arguments will be separated by space.\n\n### chalk.enabled\n\nColor support is automatically detected, but you can override it by setting the `enabled` property. You should however only do this in your own code as it applies globally to all chalk consumers.\n\nIf you need to change this in a reusable module create a new instance:\n\n```js\nvar ctx = new chalk.constructor({enabled: false});\n```\n\n### chalk.supportsColor\n\nDetect whether the terminal [supports color](https://github.com/chalk/supports-color). Used internally and handled for you, but exposed for convenience.\n\nCan be overridden by the user with the flags `--color` and `--no-color`. For situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`.\n\n### chalk.styles\n\nExposes the styles as [ANSI escape codes](https://github.com/chalk/ansi-styles).\n\nGenerally not useful, but you might need just the `.open` or `.close` escape code if you're mixing externally styled strings with your own.\n\n```js\nvar chalk = require('chalk');\n\nconsole.log(chalk.styles.red);\n//=> {open: '\\u001b[31m', close: '\\u001b[39m'}\n\nconsole.log(chalk.styles.red.open + 'Hello' + chalk.styles.red.close);\n```\n\n### chalk.hasColor(string)\n\nCheck whether a string [has color](https://github.com/chalk/has-ansi).\n\n### chalk.stripColor(string)\n\n[Strip color](https://github.com/chalk/strip-ansi) from a string.\n\nCan be useful in combination with `.supportsColor` to strip color on externally styled text when it's not supported.\n\nExample:\n\n```js\nvar chalk = require('chalk');\nvar styledString = getText();\n\nif (!chalk.supportsColor) {\n\tstyledString = chalk.stripColor(styledString);\n}\n```\n\n\n## Styles\n\n### Modifiers\n\n- `reset`\n- `bold`\n- `dim`\n- `italic` *(not widely supported)*\n- `underline`\n- `inverse`\n- `hidden`\n- `strikethrough` *(not widely supported)*\n\n### Colors\n\n- `black`\n- `red`\n- `green`\n- `yellow`\n- `blue` *(on Windows the bright version is used as normal blue is illegible)*\n- `magenta`\n- `cyan`\n- `white`\n- `gray`\n\n### Background colors\n\n- `bgBlack`\n- `bgRed`\n- `bgGreen`\n- `bgYellow`\n- `bgBlue`\n- `bgMagenta`\n- `bgCyan`\n- `bgWhite`\n\n\n## 256-colors\n\nChalk does not support anything other than the base eight colors, which guarantees it will work on all terminals and systems. Some terminals, specifically `xterm` compliant ones, will support the full range of 8-bit colors. For this the lower level [ansi-256-colors](https://github.com/jbnicolai/ansi-256-colors) package can be used.\n\n\n## Windows\n\nIf you're on Windows, do yourself a favor and use [`cmder`](http://bliker.github.io/cmder/) instead of `cmd.exe`.\n\n\n## Related\n\n- [chalk-cli](https://github.com/chalk/chalk-cli) - CLI for this module\n- [ansi-styles](https://github.com/chalk/ansi-styles/) - ANSI escape codes for styling strings in the terminal\n- [supports-color](https://github.com/chalk/supports-color/) - Detect whether a terminal supports color\n- [strip-ansi](https://github.com/chalk/strip-ansi) - Strip ANSI escape codes\n- [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes\n- [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes\n- [wrap-ansi](https://github.com/chalk/wrap-ansi) - Wordwrap a string with ANSI escape codes\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
./examples/express/node_modules/log-requests/node_modules/chalk/node_modules/ansi-styles/package.json:    "log",
./examples/express/node_modules/log-requests/node_modules/chalk/node_modules/ansi-styles/package.json:    "logging",
./examples/express/node_modules/log-requests/node_modules/chalk/node_modules/ansi-styles/package.json:  "readme": "# ansi-styles [![Build Status](https://travis-ci.org/chalk/ansi-styles.svg?branch=master)](https://travis-ci.org/chalk/ansi-styles)\n\n> [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) for styling strings in the terminal\n\nYou probably want the higher-level [chalk](https://github.com/chalk/chalk) module for styling your strings.\n\n![](screenshot.png)\n\n\n## Install\n\n```\n$ npm install --save ansi-styles\n```\n\n\n## Usage\n\n```js\nvar ansi = require('ansi-styles');\n\nconsole.log(ansi.green.open + 'Hello world!' + ansi.green.close);\n```\n\n\n## API\n\nEach style has an `open` and `close` property.\n\n\n## Styles\n\n### Modifiers\n\n- `reset`\n- `bold`\n- `dim`\n- `italic` *(not widely supported)*\n- `underline`\n- `inverse`\n- `hidden`\n- `strikethrough` *(not widely supported)*\n\n### Colors\n\n- `black`\n- `red`\n- `green`\n- `yellow`\n- `blue`\n- `magenta`\n- `cyan`\n- `white`\n- `gray`\n\n### Background colors\n\n- `bgBlack`\n- `bgRed`\n- `bgGreen`\n- `bgYellow`\n- `bgBlue`\n- `bgMagenta`\n- `bgCyan`\n- `bgWhite`\n\n\n## Advanced usage\n\nBy default you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module.\n\n- `ansi.modifiers`\n- `ansi.colors`\n- `ansi.bgColors`\n\n\n###### Example\n\n```js\nconsole.log(ansi.colors.green.open);\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
./examples/express/node_modules/log-requests/node_modules/chalk/node_modules/ansi-styles/readme.md:console.log(ansi.green.open + 'Hello world!' + ansi.green.close);
./examples/express/node_modules/log-requests/node_modules/chalk/node_modules/ansi-styles/readme.md:console.log(ansi.colors.green.open);
./examples/express/node_modules/log-requests/node_modules/chalk/node_modules/supports-color/package.json:  "readme": "# supports-color [![Build Status](https://travis-ci.org/chalk/supports-color.svg?branch=master)](https://travis-ci.org/chalk/supports-color)\n\n> Detect whether a terminal supports color\n\n\n## Install\n\n```\n$ npm install --save supports-color\n```\n\n\n## Usage\n\n```js\nvar supportsColor = require('supports-color');\n\nif (supportsColor) {\n\tconsole.log('Terminal supports color');\n}\n```\n\nIt obeys the `--color` and `--no-color` CLI flags.\n\nFor situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`.\n\n\n## Related\n\n- [supports-color-cli](https://github.com/chalk/supports-color-cli) - CLI for this module\n- [chalk](https://github.com/chalk/chalk) - Terminal string styling done right\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
./examples/express/node_modules/log-requests/node_modules/chalk/node_modules/supports-color/readme.md:	console.log('Terminal supports color');
./examples/express/node_modules/log-requests/node_modules/chalk/node_modules/strip-ansi/package.json:    "log",
./examples/express/node_modules/log-requests/node_modules/chalk/node_modules/strip-ansi/package.json:    "logging",
./examples/express/node_modules/log-requests/node_modules/chalk/readme.md:	<img width="360" src="https://cdn.rawgit.com/chalk/chalk/19935d6484811c5e468817f846b7b3d417d7bf4a/logo.svg" alt="chalk">
./examples/express/node_modules/log-requests/node_modules/chalk/readme.md:console.log(error('Error!'));
./examples/express/node_modules/log-requests/node_modules/chalk/readme.md:Take advantage of console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data).
./examples/express/node_modules/log-requests/node_modules/chalk/readme.md:console.log(chalk.green('Hello %s'), name);
./examples/express/node_modules/log-requests/node_modules/chalk/readme.md:console.log(chalk.styles.red);
./examples/express/node_modules/log-requests/node_modules/chalk/readme.md:console.log(chalk.styles.red.open + 'Hello' + chalk.styles.red.close);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/package.json:  "readme": "# safe-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/safe-buffer/master.svg\n[travis-url]: https://travis-ci.org/feross/safe-buffer\n[npm-image]: https://img.shields.io/npm/v/safe-buffer.svg\n[npm-url]: https://npmjs.org/package/safe-buffer\n[downloads-image]: https://img.shields.io/npm/dm/safe-buffer.svg\n[downloads-url]: https://npmjs.org/package/safe-buffer\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n#### Safer Node.js Buffer API\n\n**Use the new Node.js Buffer APIs (`Buffer.from`, `Buffer.alloc`,\n`Buffer.allocUnsafe`, `Buffer.allocUnsafeSlow`) in all versions of Node.js.**\n\n**Uses the built-in implementation when available.**\n\n## install\n\n```\nnpm install safe-buffer\n```\n\n## usage\n\nThe goal of this package is to provide a safe replacement for the node.js `Buffer`.\n\nIt's a drop-in replacement for `Buffer`. You can use it by adding one `require` line to\nthe top of your node.js modules:\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n\n// Existing buffer code will continue to work without issues:\n\nnew Buffer('hey', 'utf8')\nnew Buffer([1, 2, 3], 'utf8')\nnew Buffer(obj)\nnew Buffer(16) // create an uninitialized buffer (potentially unsafe)\n\n// But you can use these new explicit APIs to make clear what you want:\n\nBuffer.from('hey', 'utf8') // convert from many types to a Buffer\nBuffer.alloc(16) // create a zero-filled buffer (safe)\nBuffer.allocUnsafe(16) // create an uninitialized buffer (potentially unsafe)\n```\n\n## api\n\n### Class Method: Buffer.from(array)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `array` {Array}\n\nAllocates a new `Buffer` using an `array` of octets.\n\n```js\nconst buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]);\n  // creates a new Buffer containing ASCII bytes\n  // ['b','u','f','f','e','r']\n```\n\nA `TypeError` will be thrown if `array` is not an `Array`.\n\n### Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `arrayBuffer` {ArrayBuffer} The `.buffer` property of a `TypedArray` or\n  a `new ArrayBuffer()`\n* `byteOffset` {Number} Default: `0`\n* `length` {Number} Default: `arrayBuffer.length - byteOffset`\n\nWhen passed a reference to the `.buffer` property of a `TypedArray` instance,\nthe newly created `Buffer` will share the same allocated memory as the\nTypedArray.\n\n```js\nconst arr = new Uint16Array(2);\narr[0] = 5000;\narr[1] = 4000;\n\nconst buf = Buffer.from(arr.buffer); // shares the memory with arr;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 a0 0f>\n\n// changing the TypedArray changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 70 17>\n```\n\nThe optional `byteOffset` and `length` arguments specify a memory range within\nthe `arrayBuffer` that will be shared by the `Buffer`.\n\n```js\nconst ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\nconsole.log(buf.length);\n  // Prints: 2\n```\n\nA `TypeError` will be thrown if `arrayBuffer` is not an `ArrayBuffer`.\n\n### Class Method: Buffer.from(buffer)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `buffer` {Buffer}\n\nCopies the passed `buffer` data onto a new `Buffer` instance.\n\n```js\nconst buf1 = Buffer.from('buffer');\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\nconsole.log(buf1.toString());\n  // 'auffer'\nconsole.log(buf2.toString());\n  // 'buffer' (copy is not changed)\n```\n\nA `TypeError` will be thrown if `buffer` is not a `Buffer`.\n\n### Class Method: Buffer.from(str[, encoding])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `str` {String} String to encode.\n* `encoding` {String} Encoding to use, Default: `'utf8'`\n\nCreates a new `Buffer` containing the given JavaScript string `str`. If\nprovided, the `encoding` parameter identifies the character encoding.\nIf not provided, `encoding` defaults to `'utf8'`.\n\n```js\nconst buf1 = Buffer.from('this is a tést');\nconsole.log(buf1.toString());\n  // prints: this is a tést\nconsole.log(buf1.toString('ascii'));\n  // prints: this is a tC)st\n\nconst buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');\nconsole.log(buf2.toString());\n  // prints: this is a tést\n```\n\nA `TypeError` will be thrown if `str` is not a string.\n\n### Class Method: Buffer.alloc(size[, fill[, encoding]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n* `fill` {Value} Default: `undefined`\n* `encoding` {String} Default: `utf8`\n\nAllocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the\n`Buffer` will be *zero-filled*.\n\n```js\nconst buf = Buffer.alloc(5);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nThe `size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nIf `fill` is specified, the allocated `Buffer` will be initialized by calling\n`buf.fill(fill)`. See [`buf.fill()`][] for more information.\n\n```js\nconst buf = Buffer.alloc(5, 'a');\nconsole.log(buf);\n  // <Buffer 61 61 61 61 61>\n```\n\nIf both `fill` and `encoding` are specified, the allocated `Buffer` will be\ninitialized by calling `buf.fill(fill, encoding)`. For example:\n\n```js\nconst buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\nconsole.log(buf);\n  // <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n```\n\nCalling `Buffer.alloc(size)` can be significantly slower than the alternative\n`Buffer.allocUnsafe(size)` but ensures that the newly created `Buffer` instance\ncontents will *never contain sensitive data*.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### Class Method: Buffer.allocUnsafe(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* `Buffer` of `size` bytes.  The `size` must\nbe less than or equal to the value of `require('buffer').kMaxLength` (on 64-bit\narchitectures, `kMaxLength` is `(2^31)-1`). Otherwise, a [`RangeError`][] is\nthrown. A zero-length Buffer will be created if a `size` less than or equal to\n0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\n```js\nconst buf = Buffer.allocUnsafe(5);\nconsole.log(buf);\n  // <Buffer 78 e0 82 02 01>\n  // (octets will be different, every time)\nbuf.fill(0);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nA `TypeError` will be thrown if `size` is not a number.\n\nNote that the `Buffer` module pre-allocates an internal `Buffer` instance of\nsize `Buffer.poolSize` that is used as a pool for the fast allocation of new\n`Buffer` instances created using `Buffer.allocUnsafe(size)` (and the deprecated\n`new Buffer(size)` constructor) only when `size` is less than or equal to\n`Buffer.poolSize >> 1` (floor of `Buffer.poolSize` divided by two). The default\nvalue of `Buffer.poolSize` is `8192` but can be modified.\n\nUse of this pre-allocated internal memory pool is a key difference between\ncalling `Buffer.alloc(size, fill)` vs. `Buffer.allocUnsafe(size).fill(fill)`.\nSpecifically, `Buffer.alloc(size, fill)` will *never* use the internal Buffer\npool, while `Buffer.allocUnsafe(size).fill(fill)` *will* use the internal\nBuffer pool if `size` is less than or equal to half `Buffer.poolSize`. The\ndifference is subtle but can be important when an application requires the\nadditional performance that `Buffer.allocUnsafe(size)` provides.\n\n### Class Method: Buffer.allocUnsafeSlow(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* and non-pooled `Buffer` of `size` bytes.  The\n`size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\nWhen using `Buffer.allocUnsafe()` to allocate new `Buffer` instances,\nallocations under 4KB are, by default, sliced from a single pre-allocated\n`Buffer`. This allows applications to avoid the garbage collection overhead of\ncreating many individually allocated Buffers. This approach improves both\nperformance and memory usage by eliminating the need to track and cleanup as\nmany `Persistent` objects.\n\nHowever, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled Buffer instance using `Buffer.allocUnsafeSlow()` then\ncopy out the relevant bits.\n\n```js\n// need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on('readable', () => {\n  const data = socket.read();\n  // allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n  // copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n  store.push(sb);\n});\n```\n\nUse of `Buffer.allocUnsafeSlow()` should be used only as a last resort *after*\na developer has observed undue memory retention in their applications.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### All the Rest\n\nThe rest of the `Buffer` API is exactly the same as in node.js.\n[See the docs](https://nodejs.org/api/buffer.html).\n\n\n## Related links\n\n- [Node.js issue: Buffer(number) is unsafe](https://github.com/nodejs/node/issues/4660)\n- [Node.js Enhancement Proposal: Buffer.from/Buffer.alloc/Buffer.zalloc/Buffer() soft-deprecate](https://github.com/nodejs/node-eps/pull/4)\n\n## Why is `Buffer` unsafe?\n\nToday, the node.js `Buffer` constructor is overloaded to handle many different argument\ntypes like `String`, `Array`, `Object`, `TypedArrayView` (`Uint8Array`, etc.),\n`ArrayBuffer`, and also `Number`.\n\nThe API is optimized for convenience: you can throw any type at it, and it will try to do\nwhat you want.\n\nBecause the Buffer constructor is so powerful, you often see code like this:\n\n```js\n// Convert UTF-8 strings to hex\nfunction toHex (str) {\n  return new Buffer(str).toString('hex')\n}\n```\n\n***But what happens if `toHex` is called with a `Number` argument?***\n\n### Remote Memory Disclosure\n\nIf an attacker can make your program call the `Buffer` constructor with a `Number`\nargument, then they can make it allocate uninitialized memory from the node.js process.\nThis could potentially disclose TLS private keys, user data, or database passwords.\n\nWhen the `Buffer` constructor is passed a `Number` argument, it returns an\n**UNINITIALIZED** block of memory of the specified `size`. When you create a `Buffer` like\nthis, you **MUST** overwrite the contents before returning it to the user.\n\nFrom the [node.js docs](https://nodejs.org/api/buffer.html#buffer_new_buffer_size):\n\n> `new Buffer(size)`\n>\n> - `size` Number\n>\n> The underlying memory for `Buffer` instances created in this way is not initialized.\n> **The contents of a newly created `Buffer` are unknown and could contain sensitive\n> data.** Use `buf.fill(0)` to initialize a Buffer to zeroes.\n\n(Emphasis our own.)\n\nWhenever the programmer intended to create an uninitialized `Buffer` you often see code\nlike this:\n\n```js\nvar buf = new Buffer(16)\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### Would this ever be a problem in real code?\n\nYes. It's surprisingly common to forget to check the type of your variables in a\ndynamically-typed language like JavaScript.\n\nUsually the consequences of assuming the wrong type is that your program crashes with an\nuncaught exception. But the failure mode for forgetting to check the type of arguments to\nthe `Buffer` constructor is more catastrophic.\n\nHere's an example of a vulnerable service that takes a JSON payload and converts it to\nhex:\n\n```js\n// Take a JSON payload {str: \"some string\"} and convert it to hex\nvar server = http.createServer(function (req, res) {\n  var data = ''\n  req.setEncoding('utf8')\n  req.on('data', function (chunk) {\n    data += chunk\n  })\n  req.on('end', function () {\n    var body = JSON.parse(data)\n    res.end(new Buffer(body.str).toString('hex'))\n  })\n})\n\nserver.listen(8080)\n```\n\nIn this example, an http client just has to send:\n\n```json\n{\n  \"str\": 1000\n}\n```\n\nand it will get back 1,000 bytes of uninitialized memory from the server.\n\nThis is a very serious bug. It's similar in severity to the\n[the Heartbleed bug](http://heartbleed.com/) that allowed disclosure of OpenSSL process\nmemory by remote attackers.\n\n\n### Which real-world packages were vulnerable?\n\n#### [`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht)\n\n[Mathias Buus](https://github.com/mafintosh) and I\n([Feross Aboukhadijeh](http://feross.org/)) found this issue in one of our own packages,\n[`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht). The bug would allow\nanyone on the internet to send a series of messages to a user of `bittorrent-dht` and get\nthem to reveal 20 bytes at a time of uninitialized memory from the node.js process.\n\nHere's\n[the commit](https://github.com/feross/bittorrent-dht/commit/6c7da04025d5633699800a99ec3fbadf70ad35b8)\nthat fixed it. We released a new fixed version, created a\n[Node Security Project disclosure](https://nodesecurity.io/advisories/68), and deprecated all\nvulnerable versions on npm so users will get a warning to upgrade to a newer version.\n\n#### [`ws`](https://www.npmjs.com/package/ws)\n\nThat got us wondering if there were other vulnerable packages. Sure enough, within a short\nperiod of time, we found the same issue in [`ws`](https://www.npmjs.com/package/ws), the\nmost popular WebSocket implementation in node.js.\n\nIf certain APIs were called with `Number` parameters instead of `String` or `Buffer` as\nexpected, then uninitialized server memory would be disclosed to the remote peer.\n\nThese were the vulnerable methods:\n\n```js\nsocket.send(number)\nsocket.ping(number)\nsocket.pong(number)\n```\n\nHere's a vulnerable socket server with some echo functionality:\n\n```js\nserver.on('connection', function (socket) {\n  socket.on('message', function (message) {\n    message = JSON.parse(message)\n    if (message.type === 'echo') {\n      socket.send(message.data) // send back the user's message\n    }\n  })\n})\n```\n\n`socket.send(number)` called on the server, will disclose server memory.\n\nHere's [the release](https://github.com/websockets/ws/releases/tag/1.0.1) where the issue\nwas fixed, with a more detailed explanation. Props to\n[Arnout Kazemier](https://github.com/3rd-Eden) for the quick fix. Here's the\n[Node Security Project disclosure](https://nodesecurity.io/advisories/67).\n\n\n### What's the solution?\n\nIt's important that node.js offers a fast way to get memory otherwise performance-critical\napplications would needlessly get a lot slower.\n\nBut we need a better way to *signal our intent* as programmers. **When we want\nuninitialized memory, we should request it explicitly.**\n\nSensitive functionality should not be packed into a developer-friendly API that loosely\naccepts many different types. This type of API encourages the lazy practice of passing\nvariables in without checking the type very carefully.\n\n#### A new API: `Buffer.allocUnsafe(number)`\n\nThe functionality of creating buffers with uninitialized memory should be part of another\nAPI. We propose `Buffer.allocUnsafe(number)`. This way, it's not part of an API that\nfrequently gets user input of all sorts of different types passed into it.\n\n```js\nvar buf = Buffer.allocUnsafe(16) // careful, uninitialized memory!\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### How do we fix node.js core?\n\nWe sent [a PR to node.js core](https://github.com/nodejs/node/pull/4514) (merged as\n`semver-major`) which defends against one case:\n\n```js\nvar str = 16\nnew Buffer(str, 'utf8')\n```\n\nIn this situation, it's implied that the programmer intended the first argument to be a\nstring, since they passed an encoding as a second argument. Today, node.js will allocate\nuninitialized memory in the case of `new Buffer(number, encoding)`, which is probably not\nwhat the programmer intended.\n\nBut this is only a partial solution, since if the programmer does `new Buffer(variable)`\n(without an `encoding` parameter) there's no way to know what they intended. If `variable`\nis sometimes a number, then uninitialized memory will sometimes be returned.\n\n### What's the real long-term fix?\n\nWe could deprecate and remove `new Buffer(number)` and use `Buffer.allocUnsafe(number)` when\nwe need uninitialized memory. But that would break 1000s of packages.\n\n~~We believe the best solution is to:~~\n\n~~1. Change `new Buffer(number)` to return safe, zeroed-out memory~~\n\n~~2. Create a new API for creating uninitialized Buffers. We propose: `Buffer.allocUnsafe(number)`~~\n\n#### Update\n\nWe now support adding three new APIs:\n\n- `Buffer.from(value)` - convert from any type to a buffer\n- `Buffer.alloc(size)` - create a zero-filled buffer\n- `Buffer.allocUnsafe(size)` - create an uninitialized buffer with given size\n\nThis solves the core problem that affected `ws` and `bittorrent-dht` which is\n`Buffer(variable)` getting tricked into taking a number argument.\n\nThis way, existing code continues working and the impact on the npm ecosystem will be\nminimal. Over time, npm maintainers can migrate performance-critical code to use\n`Buffer.allocUnsafe(number)` instead of `new Buffer(number)`.\n\n\n### Conclusion\n\nWe think there's a serious design issue with the `Buffer` API as it exists today. It\npromotes insecure software by putting high-risk functionality into a convenient API\nwith friendly \"developer ergonomics\".\n\nThis wasn't merely a theoretical exercise because we found the issue in some of the\nmost popular npm packages.\n\nFortunately, there's an easy fix that can be applied today. Use `safe-buffer` in place of\n`buffer`.\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n```\n\nEventually, we hope that node.js core can switch to this new, safer behavior. We believe\nthe impact on the ecosystem would be minimal since it's not a breaking change.\nWell-maintained, popular packages would be updated to use `Buffer.alloc` quickly, while\nolder, insecure packages would magically become safe from this attack vector.\n\n\n## links\n\n- [Node.js PR: buffer: throw if both length and enc are passed](https://github.com/nodejs/node/pull/4514)\n- [Node Security Project disclosure for `ws`](https://nodesecurity.io/advisories/67)\n- [Node Security Project disclosure for`bittorrent-dht`](https://nodesecurity.io/advisories/68)\n\n\n## credit\n\nThe original issues in `bittorrent-dht`\n([disclosure](https://nodesecurity.io/advisories/68)) and\n`ws` ([disclosure](https://nodesecurity.io/advisories/67)) were discovered by\n[Mathias Buus](https://github.com/mafintosh) and\n[Feross Aboukhadijeh](http://feross.org/).\n\nThanks to [Adam Baldwin](https://github.com/evilpacket) for helping disclose these issues\nand for his work running the [Node Security Project](https://nodesecurity.io/).\n\nThanks to [John Hiesey](https://github.com/jhiesey) for proofreading this README and\nauditing the code.\n\n\n## license\n\nMIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org)\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf.length);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString('ascii'));
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/package.json:  "readme": "# mime-db\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nThis is a database of all mime types.\nIt consists of a single, public JSON file and does not include any logic,\nallowing it to remain as un-opinionated as possible with an API.\nIt aggregates data from the following sources:\n\n- http://www.iana.org/assignments/media-types/media-types.xhtml\n- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types\n\n## Installation\n\n```bash\nnpm install mime-db\n```\n\n### Database Download\n\nIf you're crazy enough to use this in the browser, you can just grab the\nJSON file using [RawGit](https://rawgit.com/). It is recommended to replace\n`master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the\nJSON format may change in the future.\n\n```\nhttps://cdn.rawgit.com/jshttp/mime-db/master/db.json\n```\n\n## Usage\n\n```js\nvar db = require('mime-db');\n\n// grab data on .js files\nvar data = db['application/javascript'];\n```\n\n## Data Structure\n\nThe JSON file is a map lookup for lowercased mime types.\nEach mime type has the following properties:\n\n- `.source` - where the mime type is defined.\n    If not set, it's probably a custom media type.\n    - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n    - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml)\n    - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types)\n- `.extensions[]` - known extensions associated with this mime type.\n- `.compressible` - whether a file of this type can be gzipped.\n- `.charset` - the default charset associated with this type, if any.\n\nIf unknown, every property could be `undefined`.\n\n## Contributing\n\nTo edit the database, only make PRs against `src/custom.json` or\n`src/custom-suffix.json`.\n\nThe `src/custom.json` file is a JSON object with the MIME type as the keys\nand the values being an object with the following keys:\n\n- `compressible` - leave out if you don't know, otherwise `true`/`false` for\n  if the data represented by the time is typically compressible.\n- `extensions` - include an array of file extensions that are associated with\n  the type.\n- `notes` - human-readable notes about the type, typically what the type is.\n- `sources` - include an array of URLs of where the MIME type and the associated\n  extensions are sourced from. This needs to be a [primary source](https://en.wikipedia.org/wiki/Primary_source);\n  links to type aggregating sites and Wikipedia are _not acceptible_.\n\nTo update the build, run `npm run build`.\n\n## Adding Custom Media Types\n\nThe best way to get new media types included in this library is to register\nthem with the IANA. The community registration procedure is outlined in\n[RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types\nregistered with the IANA are automatically pulled into this library.\n\n[npm-version-image]: https://img.shields.io/npm/v/mime-db.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg\n[npm-url]: https://npmjs.org/package/mime-db\n[travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg\n[travis-url]: https://travis-ci.org/jshttp/mime-db\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master\n[node-image]: https://img.shields.io/node/v/mime-db.svg\n[node-url]: https://nodejs.org/en/download/\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/dialog-info+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/sgml-open-catalog": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.flographit": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.iptc.g2.catalogitem+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.nokia.catalogs": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-audit-dialog+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-base+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-group+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-speech+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-transform+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:    "extensions": ["txt","text","conf","def","list","log","in","ini"]
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/prs.prop.logic": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/vnd.si.uricatalogue": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/README.md:It consists of a single, public JSON file and does not include any logic,
./examples/express/node_modules/log-requests/node_modules/express/node_modules/finalhandler/package.json:  "readme": "# finalhandler\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nNode.js function to invoke as the final step to respond to HTTP request.\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install finalhandler\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar finalhandler = require('finalhandler')\n```\n\n### finalhandler(req, res, [options])\n\nReturns function to be invoked as the final step for the given `req` and `res`.\nThis function is to be invoked as `fn(err)`. If `err` is falsy, the handler will\nwrite out a 404 response to the `res`. If it is truthy, an error response will\nbe written out to the `res`.\n\nWhen an error is written, the following information is added to the response:\n\n  * The `res.statusCode` is set from `err.status` (or `err.statusCode`). If\n    this value is outside the 4xx or 5xx range, it will be set to 500.\n  * The `res.statusMessage` is set according to the status code.\n  * The body will be the HTML of the status code message if `env` is\n    `'production'`, otherwise will be `err.stack`.\n  * Any headers specified in an `err.headers` object.\n\nThe final handler will also unpipe anything from `req` when it is invoked.\n\n#### options.env\n\nBy default, the environment is determined by `NODE_ENV` variable, but it can be\noverridden by this option.\n\n#### options.onerror\n\nProvide a function to be called with the `err` when it exists. Can be used for\nwriting errors to a central location without excessive function generation. Called\nas `onerror(err, req, res)`.\n\n## Examples\n\n### always 404\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  done()\n})\n\nserver.listen(3000)\n```\n\n### perform simple action\n\n```js\nvar finalhandler = require('finalhandler')\nvar fs = require('fs')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n\n  fs.readFile('index.html', function (err, buf) {\n    if (err) return done(err)\n    res.setHeader('Content-Type', 'text/html')\n    res.end(buf)\n  })\n})\n\nserver.listen(3000)\n```\n\n### use with middleware-style functions\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar serveStatic = require('serve-static')\n\nvar serve = serveStatic('public')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  serve(req, res, done)\n})\n\nserver.listen(3000)\n```\n\n### keep log of all errors\n\n```js\nvar finalhandler = require('finalhandler')\nvar fs = require('fs')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res, {onerror: logerror})\n\n  fs.readFile('index.html', function (err, buf) {\n    if (err) return done(err)\n    res.setHeader('Content-Type', 'text/html')\n    res.end(buf)\n  })\n})\n\nserver.listen(3000)\n\nfunction logerror (err) {\n  console.error(err.stack || err.toString())\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/finalhandler.svg\n[npm-url]: https://npmjs.org/package/finalhandler\n[node-image]: https://img.shields.io/node/v/finalhandler.svg\n[node-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/pillarjs/finalhandler.svg\n[travis-url]: https://travis-ci.org/pillarjs/finalhandler\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/finalhandler.svg\n[coveralls-url]: https://coveralls.io/r/pillarjs/finalhandler?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/finalhandler.svg\n[downloads-url]: https://npmjs.org/package/finalhandler\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/finalhandler/README.md:### keep log of all errors
./examples/express/node_modules/log-requests/node_modules/express/node_modules/finalhandler/README.md:  var done = finalhandler(req, res, {onerror: logerror})
./examples/express/node_modules/log-requests/node_modules/express/node_modules/finalhandler/README.md:function logerror (err) {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/package.json:  "readme": "# send\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nSend is a library for streaming files from the file system as a http response\nsupporting partial responses (Ranges), conditional-GET negotiation (If-Match,\nIf-Unmodified-Since, If-None-Match, If-Modified-Since), high test coverage,\nand granular events which may be leveraged to take appropriate actions in your\napplication or framework.\n\nLooking to serve up entire folders mapped to URLs? Try [serve-static](https://www.npmjs.org/package/serve-static).\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install send\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar send = require('send')\n```\n\n### send(req, path, [options])\n\nCreate a new `SendStream` for the given path to send to a `res`. The `req` is\nthe Node.js HTTP request and the `path` is a urlencoded path to send (urlencoded,\nnot the actual file-system path).\n\n#### Options\n\n##### acceptRanges\n\nEnable or disable accepting ranged requests, defaults to true.\nDisabling this will not send `Accept-Ranges` and ignore the contents\nof the `Range` request header.\n\n##### cacheControl\n\nEnable or disable setting `Cache-Control` response header, defaults to\ntrue. Disabling this will ignore the `immutable` and `maxAge` options.\n\n##### dotfiles\n\nSet how \"dotfiles\" are treated when encountered. A dotfile is a file\nor directory that begins with a dot (\".\"). Note this check is done on\nthe path itself without checking if the path actually exists on the\ndisk. If `root` is specified, only the dotfiles above the root are\nchecked (i.e. the root itself can be within a dotfile when when set\nto \"deny\").\n\n  - `'allow'` No special treatment for dotfiles.\n  - `'deny'` Send a 403 for any request for a dotfile.\n  - `'ignore'` Pretend like the dotfile does not exist and 404.\n\nThe default value is _similar_ to `'ignore'`, with the exception that\nthis default will not ignore the files within a directory that begins\nwith a dot, for backward-compatibility.\n\n##### end\n\nByte offset at which the stream ends, defaults to the length of the file\nminus 1. The end is inclusive in the stream, meaning `end: 3` will include\nthe 4th byte in the stream.\n\n##### etag\n\nEnable or disable etag generation, defaults to true.\n\n##### extensions\n\nIf a given file doesn't exist, try appending one of the given extensions,\nin the given order. By default, this is disabled (set to `false`). An\nexample value that will serve extension-less HTML files: `['html', 'htm']`.\nThis is skipped if the requested file already has an extension.\n\n##### immutable\n\nEnable or diable the `immutable` directive in the `Cache-Control` response\nheader, defaults to `false`. If set to `true`, the `maxAge` option should\nalso be specified to enable caching. The `immutable` directive will prevent\nsupported clients from making conditional requests during the life of the\n`maxAge` option to check if the file has changed.\n\n##### index\n\nBy default send supports \"index.html\" files, to disable this\nset `false` or to supply a new index pass a string or an array\nin preferred order.\n\n##### lastModified\n\nEnable or disable `Last-Modified` header, defaults to true. Uses the file\nsystem's last modified value.\n\n##### maxAge\n\nProvide a max-age in milliseconds for http caching, defaults to 0.\nThis can also be a string accepted by the\n[ms](https://www.npmjs.org/package/ms#readme) module.\n\n##### root\n\nServe files relative to `path`.\n\n##### start\n\nByte offset at which the stream starts, defaults to 0. The start is inclusive,\nmeaning `start: 2` will include the 3rd byte in the stream.\n\n#### Events\n\nThe `SendStream` is an event emitter and will emit the following events:\n\n  - `error` an error occurred `(err)`\n  - `directory` a directory was requested `(res, path)`\n  - `file` a file was requested `(path, stat)`\n  - `headers` the headers are about to be set on a file `(res, path, stat)`\n  - `stream` file streaming has started `(stream)`\n  - `end` streaming has completed\n\n#### .pipe\n\nThe `pipe` method is used to pipe the response into the Node.js HTTP response\nobject, typically `send(req, path, options).pipe(res)`.\n\n### .mime\n\nThe `mime` export is the global instance of of the\n[`mime` npm module](https://www.npmjs.com/package/mime).\n\nThis is used to configure the MIME types that are associated with file extensions\nas well as other options for how to resolve the MIME type of a file (like the\ndefault type to use for an unknown file extension).\n\n## Error-handling\n\nBy default when no `error` listeners are present an automatic response will be\nmade, otherwise you have full control over the response, aka you may show a 5xx\npage etc.\n\n## Caching\n\nIt does _not_ perform internal caching, you should use a reverse proxy cache\nsuch as Varnish for this, or those fancy things called CDNs. If your\napplication is small enough that it would benefit from single-node memory\ncaching, it's small enough that it does not need caching at all ;).\n\n## Debugging\n\nTo enable `debug()` instrumentation output export __DEBUG__:\n\n```\n$ DEBUG=send node app\n```\n\n## Running tests\n\n```\n$ npm install\n$ npm test\n```\n\n## Examples\n\n### Small example\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname).pipe(res)\n})\n\nserver.listen(3000)\n```\n\n### Custom file types\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Default unknown types to text/plain\nsend.mime.default_type = 'text/plain'\n\n// Add a custom type\nsend.mime.define({\n  'application/x-my-type': ['x-mt', 'x-mtt']\n})\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname).pipe(res)\n})\n\nserver.listen(3000)\n```\n\n### Custom directory index view\n\nThis is a example of serving up a structure of directories with a\ncustom function to render a listing of a directory.\n\n```js\nvar http = require('http')\nvar fs = require('fs')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Transfer arbitrary files from within /www/example.com/public/*\n// with a custom handler for directory listing\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname, {index: false, root: '/www/example.com/public'})\n  .once('directory', directory)\n  .pipe(res)\n})\n\nserver.listen(3000)\n\n// Custom directory handler\nfunction directory (res, path) {\n  var stream = this\n\n  // redirect to trailing slash for consistent url\n  if (!stream.hasTrailingSlash()) {\n    return stream.redirect(path)\n  }\n\n  // get directory list\n  fs.readdir(path, function onReaddir (err, list) {\n    if (err) return stream.error(err)\n\n    // render an index for the directory\n    res.setHeader('Content-Type', 'text/plain; charset=UTF-8')\n    res.end(list.join('\\n') + '\\n')\n  })\n}\n```\n\n### Serving from a root directory with custom error-handling\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  // your custom error-handling logic:\n  function error (err) {\n    res.statusCode = err.status || 500\n    res.end(err.message)\n  }\n\n  // your custom headers\n  function headers (res, path, stat) {\n    // serve all files for download\n    res.setHeader('Content-Disposition', 'attachment')\n  }\n\n  // your custom directory handling logic:\n  function redirect () {\n    res.statusCode = 301\n    res.setHeader('Location', req.url + '/')\n    res.end('Redirecting to ' + req.url + '/')\n  }\n\n  // transfer arbitrary files from within\n  // /www/example.com/public/*\n  send(req, parseUrl(req).pathname, {root: '/www/example.com/public'})\n  .on('error', error)\n  .on('directory', redirect)\n  .on('headers', headers)\n  .pipe(res)\n})\n\nserver.listen(3000)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/send.svg\n[npm-url]: https://npmjs.org/package/send\n[travis-image]: https://img.shields.io/travis/pillarjs/send/master.svg?label=linux\n[travis-url]: https://travis-ci.org/pillarjs/send\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/send/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/send\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/send/master.svg\n[coveralls-url]: https://coveralls.io/r/pillarjs/send?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/send.svg\n[downloads-url]: https://npmjs.org/package/send\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/package.json:  "readme": "# http-errors\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCreate HTTP errors for Express, Koa, Connect, etc. with ease.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install http-errors\n```\n\n## Example\n\n```js\nvar createError = require('http-errors')\nvar express = require('express')\nvar app = express()\n\napp.use(function (req, res, next) {\n  if (!req.user) return next(createError(401, 'Please login to view this page.'))\n  next()\n})\n```\n\n## API\n\nThis is the current API, currently extracted from Koa and subject to change.\n\nAll errors inherit from JavaScript `Error` and the exported `createError.HttpError`.\n\n### Error Properties\n\n- `expose` - can be used to signal if `message` should be sent to the client,\n  defaulting to `false` when `status` >= 500\n- `headers` - can be an object of header names to values to be sent to the\n  client, defaulting to `undefined`. When defined, the key names should all\n  be lower-cased\n- `message` - the traditional error message, which should be kept short and all\n  single line\n- `status` - the status code of the error, mirroring `statusCode` for general\n  compatibility\n- `statusCode` - the status code of the error, defaulting to `500`\n\n### createError([status], [message], [properties])\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = createError(404, 'This video does not exist!')\n```\n\n- `status: 500` - the status code as a number\n- `message` - the message of the error, defaulting to node's text for that status code.\n- `properties` - custom properties to attach to the object\n\n### new createError\\[code || name\\](\\[msg]\\))\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = new createError.NotFound()\n```\n\n- `code` - the status code as a number\n- `name` - the name of the error as a \"bumpy case\", i.e. `NotFound` or `InternalServerError`.\n\n#### List of all constructors\n\n|Status Code|Constructor Name             |\n|-----------|-----------------------------|\n|400        |BadRequest                   |\n|401        |Unauthorized                 |\n|402        |PaymentRequired              |\n|403        |Forbidden                    |\n|404        |NotFound                     |\n|405        |MethodNotAllowed             |\n|406        |NotAcceptable                |\n|407        |ProxyAuthenticationRequired  |\n|408        |RequestTimeout               |\n|409        |Conflict                     |\n|410        |Gone                         |\n|411        |LengthRequired               |\n|412        |PreconditionFailed           |\n|413        |PayloadTooLarge              |\n|414        |URITooLong                   |\n|415        |UnsupportedMediaType         |\n|416        |RangeNotSatisfiable          |\n|417        |ExpectationFailed            |\n|418        |ImATeapot                    |\n|421        |MisdirectedRequest           |\n|422        |UnprocessableEntity          |\n|423        |Locked                       |\n|424        |FailedDependency             |\n|425        |UnorderedCollection          |\n|426        |UpgradeRequired              |\n|428        |PreconditionRequired         |\n|429        |TooManyRequests              |\n|431        |RequestHeaderFieldsTooLarge  |\n|451        |UnavailableForLegalReasons   |\n|500        |InternalServerError          |\n|501        |NotImplemented               |\n|502        |BadGateway                   |\n|503        |ServiceUnavailable           |\n|504        |GatewayTimeout               |\n|505        |HTTPVersionNotSupported      |\n|506        |VariantAlsoNegotiates        |\n|507        |InsufficientStorage          |\n|508        |LoopDetected                 |\n|509        |BandwidthLimitExceeded       |\n|510        |NotExtended                  |\n|511        |NetworkAuthenticationRequired|\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/http-errors.svg\n[npm-url]: https://npmjs.org/package/http-errors\n[node-version-image]: https://img.shields.io/node/v/http-errors.svg\n[node-version-url]: https://nodejs.org/en/download/\n[travis-image]: https://img.shields.io/travis/jshttp/http-errors.svg\n[travis-url]: https://travis-ci.org/jshttp/http-errors\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/http-errors.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/http-errors\n[downloads-image]: https://img.shields.io/npm/dm/http-errors.svg\n[downloads-url]: https://npmjs.org/package/http-errors\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/Readme.md:logging source.
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    // call to self as log
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    log.call(deprecate, message)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:function log (message, site) {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/README.md:  if (!req.user) return next(createError(401, 'Please login to view this page.'))
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/mime/package.json:  "readme": "# mime\n\nComprehensive MIME type mapping API based on mime-db module.\n\n## Install\n\nInstall with [npm](http://github.com/isaacs/npm):\n\n    npm install mime\n\n## Contributing / Testing\n\n    npm run test\n\n## Command Line\n\n    mime [path_string]\n\nE.g.\n\n    > mime scripts/jquery.js\n    application/javascript\n\n## API - Queries\n\n### mime.lookup(path)\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\n\n```js\nvar mime = require('mime');\n\nmime.lookup('/path/to/file.txt');         // => 'text/plain'\nmime.lookup('file.txt');                  // => 'text/plain'\nmime.lookup('.TXT');                      // => 'text/plain'\nmime.lookup('htm');                       // => 'text/html'\n```\n\n### mime.default_type\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n\n### mime.extension(type)\nGet the default extension for `type`\n\n```js\nmime.extension('text/html');                 // => 'html'\nmime.extension('application/octet-stream');  // => 'bin'\n```\n\n### mime.charsets.lookup()\n\nMap mime-type to charset\n\n```js\nmime.charsets.lookup('text/plain');        // => 'UTF-8'\n```\n\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\n\n## API - Defining Custom Types\n\nCustom type mappings can be added on a per-project basis via the following APIs.\n\n### mime.define()\n\nAdd custom mime/extension mappings\n\n```js\nmime.define({\n    'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\n    'application/x-my-type': ['x-mt', 'x-mtt'],\n    // etc ...\n});\n\nmime.lookup('x-sft');                 // => 'text/x-some-format'\n```\n\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\n\n```js\nmime.extension('text/x-some-format'); // => 'x-sf'\n```\n\n### mime.load(filepath)\n\nLoad mappings from an Apache \".types\" format file\n\n```js\nmime.load('./my_project.types');\n```\nThe .types file format is simple -  See the `types` dir for examples.\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/mime/build/test.js:console.log('\nAll tests passed');
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/mime/build/build.js:console.log(JSON.stringify(mapByType));
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/mime/README.md:(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/mime/types.json:{"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":["woff"],"application/font-woff2":["woff2"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["dmg"],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":["bdoc"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-otf":["otf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-ttf":["ttf","ttc"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["iso"],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":["exe"],"application/x-msdownload":["exe","dll","com","bat","msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","wmz","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":["prc","pdb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["3gpp"],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":["mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":["wav"],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":["m4a"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":["ra"],"audio/x-wav":["wav"],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/otf":["otf"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jpeg":["jpeg","jpg","jpe"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":["bmp"],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":["rtf"],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":["org"],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":["xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/README.md:  // your custom error-handling logic:
./examples/express/node_modules/log-requests/node_modules/express/node_modules/send/README.md:  // your custom directory handling logic:
./examples/express/node_modules/log-requests/node_modules/express/node_modules/depd/Readme.md:logging source.
./examples/express/node_modules/log-requests/node_modules/express/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:    // call to self as log
./examples/express/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:    log.call(deprecate, message)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:function log (message, site) {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./examples/express/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/fresh/package.json:  "readme": "# fresh\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nHTTP response freshness testing\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```\n$ npm install fresh\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar fresh = require('fresh')\n```\n\n### fresh(reqHeaders, resHeaders)\n\nCheck freshness of the response using request and response headers.\n\nWhen the response is still \"fresh\" in the client's cache `true` is\nreturned, otherwise `false` is returned to indicate that the client\ncache is now stale and the full response should be sent.\n\nWhen a client sends the `Cache-Control: no-cache` request header to\nindicate an end-to-end reload request, this module will return `false`\nto make handling these requests transparent.\n\n## Known Issues\n\nThis module is designed to only follow the HTTP specifications, not\nto work-around all kinda of client bugs (especially since this module\ntypically does not recieve enough information to understand what the\nclient actually is).\n\nThere is a known issue that in certain versions of Safari, Safari\nwill incorrectly make a request that allows this module to validate\nfreshness of the resource even when Safari does not have a\nrepresentation of the resource in the cache. The module\n[jumanji](https://www.npmjs.com/package/jumanji) can be used in\nan Express application to work-around this issue and also provides\nlinks to further reading on this Safari bug.\n\n## Example\n\n### API usage\n\n<!-- eslint-disable no-redeclare, no-undef -->\n\n```js\nvar reqHeaders = { 'if-none-match': '\"foo\"' }\nvar resHeaders = { 'etag': '\"bar\"' }\nfresh(reqHeaders, resHeaders)\n// => false\n\nvar reqHeaders = { 'if-none-match': '\"foo\"' }\nvar resHeaders = { 'etag': '\"foo\"' }\nfresh(reqHeaders, resHeaders)\n// => true\n```\n\n### Using with Node.js http server\n\n```js\nvar fresh = require('fresh')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  // perform server logic\n  // ... including adding ETag / Last-Modified response headers\n\n  if (isFresh(req, res)) {\n    // client has a fresh copy of resource\n    res.statusCode = 304\n    res.end()\n    return\n  }\n\n  // send the resource\n  res.statusCode = 200\n  res.end('hello, world!')\n})\n\nfunction isFresh (req, res) {\n  return fresh(req.headers, {\n    'etag': res.getHeader('ETag'),\n    'last-modified': res.getHeader('Last-Modified')\n  })\n}\n\nserver.listen(3000)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/fresh.svg\n[npm-url]: https://npmjs.org/package/fresh\n[node-version-image]: https://img.shields.io/node/v/fresh.svg\n[node-version-url]: https://nodejs.org/en/\n[travis-image]: https://img.shields.io/travis/jshttp/fresh/master.svg\n[travis-url]: https://travis-ci.org/jshttp/fresh\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/fresh/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/fresh?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/fresh.svg\n[downloads-url]: https://npmjs.org/package/fresh\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/fresh/README.md:  // perform server logic
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/package.json:    "log",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:  change the behavior of the debug logging:
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:var log = debug('app:log');
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:// set this namespace to log via console.log
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:log('goes to stdout');
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:// overrides all per-namespace log settings
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:debug.log = console.info.bind(console);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js:exports.log = log;
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js:function log() {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js:    && console.log
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/node.js:exports.log = log;
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/node.js:function log() {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/debug.js: * Previous log timestamp.
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/karma.conf.js:    // level of logging
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./examples/express/node_modules/log-requests/node_modules/express/node_modules/debug/component.json:    "log",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/qs/package.json:  "readme": "# qs <sup>[![Version Badge][2]][1]</sup>\n\n[![Build Status][3]][4]\n[![dependency status][5]][6]\n[![dev dependency status][7]][8]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][11]][1]\n\nA querystring parsing and stringifying library with some added security.\n\nLead Maintainer: [Jordan Harband](https://github.com/ljharb)\n\nThe **qs** module was originally created and maintained by [TJ Holowaychuk](https://github.com/visionmedia/node-querystring).\n\n## Usage\n\n```javascript\nvar qs = require('qs');\nvar assert = require('assert');\n\nvar obj = qs.parse('a=c');\nassert.deepEqual(obj, { a: 'c' });\n\nvar str = qs.stringify(obj);\nassert.equal(str, 'a=c');\n```\n\n### Parsing Objects\n\n[](#preventEval)\n```javascript\nqs.parse(string, [options]);\n```\n\n**qs** allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets `[]`.\nFor example, the string `'foo[bar]=baz'` converts to:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar]=baz'), {\n    foo: {\n        bar: 'baz'\n    }\n});\n```\n\nWhen using the `plainObjects` option the parsed value is returned as a null object, created via `Object.create(null)` and as such you should be aware that prototype methods will not exist on it and a user may set those names to whatever value they like:\n\n```javascript\nvar nullObject = qs.parse('a[hasOwnProperty]=b', { plainObjects: true });\nassert.deepEqual(nullObject, { a: { hasOwnProperty: 'b' } });\n```\n\nBy default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use `plainObjects` as mentioned above, or set `allowPrototypes` to `true` which will allow user input to overwrite those properties. *WARNING* It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\n\n```javascript\nvar protoObject = qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true });\nassert.deepEqual(protoObject, { a: { hasOwnProperty: 'b' } });\n```\n\nURI encoded strings work too:\n\n```javascript\nassert.deepEqual(qs.parse('a%5Bb%5D=c'), {\n    a: { b: 'c' }\n});\n```\n\nYou can also nest your objects, like `'foo[bar][baz]=foobarbaz'`:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar][baz]=foobarbaz'), {\n    foo: {\n        bar: {\n            baz: 'foobarbaz'\n        }\n    }\n});\n```\n\nBy default, when nesting objects **qs** will only parse up to 5 children deep. This means if you attempt to parse a string like\n`'a[b][c][d][e][f][g][h][i]=j'` your resulting object will be:\n\n```javascript\nvar expected = {\n    a: {\n        b: {\n            c: {\n                d: {\n                    e: {\n                        f: {\n                            '[g][h][i]': 'j'\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nvar string = 'a[b][c][d][e][f][g][h][i]=j';\nassert.deepEqual(qs.parse(string), expected);\n```\n\nThis depth can be overridden by passing a `depth` option to `qs.parse(string, [options])`:\n\n```javascript\nvar deep = qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1 });\nassert.deepEqual(deep, { a: { b: { '[c][d][e][f][g][h][i]': 'j' } } });\n```\n\nThe depth limit helps mitigate abuse when **qs** is used to parse user input, and it is recommended to keep it a reasonably small number.\n\nFor similar reasons, by default **qs** will only parse up to 1000 parameters. This can be overridden by passing a `parameterLimit` option:\n\n```javascript\nvar limited = qs.parse('a=b&c=d', { parameterLimit: 1 });\nassert.deepEqual(limited, { a: 'b' });\n```\n\nTo bypass the leading question mark, use `ignoreQueryPrefix`:\n\n```javascript\nvar prefixed = qs.parse('?a=b&c=d', { ignoreQueryPrefix: true });\nassert.deepEqual(prefixed, { a: 'b', c: 'd' });\n```\n\nAn optional delimiter can also be passed:\n\n```javascript\nvar delimited = qs.parse('a=b;c=d', { delimiter: ';' });\nassert.deepEqual(delimited, { a: 'b', c: 'd' });\n```\n\nDelimiters can be a regular expression too:\n\n```javascript\nvar regexed = qs.parse('a=b;c=d,e=f', { delimiter: /[;,]/ });\nassert.deepEqual(regexed, { a: 'b', c: 'd', e: 'f' });\n```\n\nOption `allowDots` can be used to enable dot notation:\n\n```javascript\nvar withDots = qs.parse('a.b=c', { allowDots: true });\nassert.deepEqual(withDots, { a: { b: 'c' } });\n```\n\n### Parsing Arrays\n\n**qs** can also parse arrays using a similar `[]` notation:\n\n```javascript\nvar withArray = qs.parse('a[]=b&a[]=c');\nassert.deepEqual(withArray, { a: ['b', 'c'] });\n```\n\nYou may specify an index as well:\n\n```javascript\nvar withIndexes = qs.parse('a[1]=c&a[0]=b');\nassert.deepEqual(withIndexes, { a: ['b', 'c'] });\n```\n\nNote that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number\nto create an array. When creating arrays with specific indices, **qs** will compact a sparse array to only the existing values preserving\ntheir order:\n\n```javascript\nvar noSparse = qs.parse('a[1]=b&a[15]=c');\nassert.deepEqual(noSparse, { a: ['b', 'c'] });\n```\n\nNote that an empty string is also a value, and will be preserved:\n\n```javascript\nvar withEmptyString = qs.parse('a[]=&a[]=b');\nassert.deepEqual(withEmptyString, { a: ['', 'b'] });\n\nvar withIndexedEmptyString = qs.parse('a[0]=b&a[1]=&a[2]=c');\nassert.deepEqual(withIndexedEmptyString, { a: ['b', '', 'c'] });\n```\n\n**qs** will also limit specifying indices in an array to a maximum index of `20`. Any array members with an index of greater than `20` will\ninstead be converted to an object with the index as the key:\n\n```javascript\nvar withMaxIndex = qs.parse('a[100]=b');\nassert.deepEqual(withMaxIndex, { a: { '100': 'b' } });\n```\n\nThis limit can be overridden by passing an `arrayLimit` option:\n\n```javascript\nvar withArrayLimit = qs.parse('a[1]=b', { arrayLimit: 0 });\nassert.deepEqual(withArrayLimit, { a: { '1': 'b' } });\n```\n\nTo disable array parsing entirely, set `parseArrays` to `false`.\n\n```javascript\nvar noParsingArrays = qs.parse('a[]=b', { parseArrays: false });\nassert.deepEqual(noParsingArrays, { a: { '0': 'b' } });\n```\n\nIf you mix notations, **qs** will merge the two items into an object:\n\n```javascript\nvar mixedNotation = qs.parse('a[0]=b&a[b]=c');\nassert.deepEqual(mixedNotation, { a: { '0': 'b', b: 'c' } });\n```\n\nYou can also create arrays of objects:\n\n```javascript\nvar arraysOfObjects = qs.parse('a[][b]=c');\nassert.deepEqual(arraysOfObjects, { a: [{ b: 'c' }] });\n```\n\n### Stringifying\n\n[](#preventEval)\n```javascript\nqs.stringify(object, [options]);\n```\n\nWhen stringifying, **qs** by default URI encodes output. Objects are stringified as you would expect:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b' }), 'a=b');\nassert.equal(qs.stringify({ a: { b: 'c' } }), 'a%5Bb%5D=c');\n```\n\nThis encoding can be disabled by setting the `encode` option to `false`:\n\n```javascript\nvar unencoded = qs.stringify({ a: { b: 'c' } }, { encode: false });\nassert.equal(unencoded, 'a[b]=c');\n```\n\nEncoding can be disabled for keys by setting the `encodeValuesOnly` option to `true`:\n```javascript\nvar encodedValues = qs.stringify(\n    { a: 'b', c: ['d', 'e=f'], f: [['g'], ['h']] },\n    { encodeValuesOnly: true }\n);\nassert.equal(encodedValues,'a=b&c[0]=d&c[1]=e%3Df&f[0][0]=g&f[1][0]=h');\n```\n\nThis encoding can also be replaced by a custom encoding method set as `encoder` option:\n\n```javascript\nvar encoded = qs.stringify({ a: { b: 'c' } }, { encoder: function (str) {\n    // Passed in values `a`, `b`, `c`\n    return // Return encoded string\n}})\n```\n\n_(Note: the `encoder` option does not apply if `encode` is `false`)_\n\nAnalogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:\n\n```javascript\nvar decoded = qs.parse('x=z', { decoder: function (str) {\n    // Passed in values `x`, `z`\n    return // Return decoded string\n}})\n```\n\nExamples beyond this point will be shown as though the output is not URI encoded for clarity. Please note that the return values in these cases *will* be URI encoded during real usage.\n\nWhen arrays are stringified, by default they are given explicit indices:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] });\n// 'a[0]=b&a[1]=c&a[2]=d'\n```\n\nYou may override this by setting the `indices` option to `false`:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] }, { indices: false });\n// 'a=b&a=c&a=d'\n```\n\nYou may use the `arrayFormat` option to specify the format of the output array:\n\n```javascript\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' })\n// 'a[0]=b&a[1]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' })\n// 'a[]=b&a[]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' })\n// 'a=b&a=c'\n```\n\nWhen objects are stringified, by default they use bracket notation:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } });\n// 'a[b][c]=d&a[b][e]=f'\n```\n\nYou may override this to use dot notation by setting the `allowDots` option to `true`:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } }, { allowDots: true });\n// 'a.b.c=d&a.b.e=f'\n```\n\nEmpty strings and null values will omit the value, but the equals sign (=) remains in place:\n\n```javascript\nassert.equal(qs.stringify({ a: '' }), 'a=');\n```\n\nKey with no values (such as an empty object or array) will return nothing:\n\n```javascript\nassert.equal(qs.stringify({ a: [] }), '');\nassert.equal(qs.stringify({ a: {} }), '');\nassert.equal(qs.stringify({ a: [{}] }), '');\nassert.equal(qs.stringify({ a: { b: []} }), '');\nassert.equal(qs.stringify({ a: { b: {}} }), '');\n```\n\nProperties that are set to `undefined` will be omitted entirely:\n\n```javascript\nassert.equal(qs.stringify({ a: null, b: undefined }), 'a=');\n```\n\nThe query string may optionally be prepended with a question mark:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { addQueryPrefix: true }), '?a=b&c=d');\n```\n\nThe delimiter may be overridden with stringify as well:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { delimiter: ';' }), 'a=b;c=d');\n```\n\nIf you only want to override the serialization of `Date` objects, you can provide a `serializeDate` option:\n\n```javascript\nvar date = new Date(7);\nassert.equal(qs.stringify({ a: date }), 'a=1970-01-01T00:00:00.007Z'.replace(/:/g, '%3A'));\nassert.equal(\n    qs.stringify({ a: date }, { serializeDate: function (d) { return d.getTime(); } }),\n    'a=7'\n);\n```\n\nYou may use the `sort` option to affect the order of parameter keys:\n\n```javascript\nfunction alphabeticalSort(a, b) {\n    return a.localeCompare(b);\n}\nassert.equal(qs.stringify({ a: 'c', z: 'y', b : 'f' }, { sort: alphabeticalSort }), 'a=c&b=f&z=y');\n```\n\nFinally, you can use the `filter` option to restrict which keys will be included in the stringified output.\nIf you pass a function, it will be called for each key to obtain the replacement value. Otherwise, if you\npass an array, it will be used to select properties and array indices for stringification:\n\n```javascript\nfunction filterFunc(prefix, value) {\n    if (prefix == 'b') {\n        // Return an `undefined` value to omit a property.\n        return;\n    }\n    if (prefix == 'e[f]') {\n        return value.getTime();\n    }\n    if (prefix == 'e[g][0]') {\n        return value * 2;\n    }\n    return value;\n}\nqs.stringify({ a: 'b', c: 'd', e: { f: new Date(123), g: [2] } }, { filter: filterFunc });\n// 'a=b&c=d&e[f]=123&e[g][0]=4'\nqs.stringify({ a: 'b', c: 'd', e: 'f' }, { filter: ['a', 'e'] });\n// 'a=b&e=f'\nqs.stringify({ a: ['b', 'c', 'd'], e: 'f' }, { filter: ['a', 0, 2] });\n// 'a[0]=b&a[2]=d'\n```\n\n### Handling of `null` values\n\nBy default, `null` values are treated like empty strings:\n\n```javascript\nvar withNull = qs.stringify({ a: null, b: '' });\nassert.equal(withNull, 'a=&b=');\n```\n\nParsing does not distinguish between parameters with and without equal signs. Both are converted to empty strings.\n\n```javascript\nvar equalsInsensitive = qs.parse('a&b=');\nassert.deepEqual(equalsInsensitive, { a: '', b: '' });\n```\n\nTo distinguish between `null` values and empty strings use the `strictNullHandling` flag. In the result string the `null`\nvalues have no `=` sign:\n\n```javascript\nvar strictNull = qs.stringify({ a: null, b: '' }, { strictNullHandling: true });\nassert.equal(strictNull, 'a&b=');\n```\n\nTo parse values without `=` back to `null` use the `strictNullHandling` flag:\n\n```javascript\nvar parsedStrictNull = qs.parse('a&b=', { strictNullHandling: true });\nassert.deepEqual(parsedStrictNull, { a: null, b: '' });\n```\n\nTo completely skip rendering keys with `null` values, use the `skipNulls` flag:\n\n```javascript\nvar nullsSkipped = qs.stringify({ a: 'b', c: null}, { skipNulls: true });\nassert.equal(nullsSkipped, 'a=b');\n```\n\n### Dealing with special character sets\n\nBy default the encoding and decoding of characters is done in `utf-8`. If you\nwish to encode querystrings to a different character set (i.e.\n[Shift JIS](https://en.wikipedia.org/wiki/Shift_JIS)) you can use the\n[`qs-iconv`](https://github.com/martinheidegger/qs-iconv) library:\n\n```javascript\nvar encoder = require('qs-iconv/encoder')('shift_jis');\nvar shiftJISEncoded = qs.stringify({ a: 'こんにちは！' }, { encoder: encoder });\nassert.equal(shiftJISEncoded, 'a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I');\n```\n\nThis also works for decoding of query strings:\n\n```javascript\nvar decoder = require('qs-iconv/decoder')('shift_jis');\nvar obj = qs.parse('a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I', { decoder: decoder });\nassert.deepEqual(obj, { a: 'こんにちは！' });\n```\n\n### RFC 3986 and RFC 1738 space encoding\n\nRFC3986 used as default option and encodes ' ' to *%20* which is backward compatible.\nIn the same time, output can be stringified as per RFC1738 with ' ' equal to '+'.\n\n```\nassert.equal(qs.stringify({ a: 'b c' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC3986' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC1738' }), 'a=b+c');\n```\n\n[1]: https://npmjs.org/package/qs\n[2]: http://versionbadg.es/ljharb/qs.svg\n[3]: https://api.travis-ci.org/ljharb/qs.svg\n[4]: https://travis-ci.org/ljharb/qs\n[5]: https://david-dm.org/ljharb/qs.svg\n[6]: https://david-dm.org/ljharb/qs\n[7]: https://david-dm.org/ljharb/qs/dev-status.svg\n[8]: https://david-dm.org/ljharb/qs?type=dev\n[9]: https://ci.testling.com/ljharb/qs.png\n[10]: https://ci.testling.com/ljharb/qs\n[11]: https://nodei.co/npm/qs.png?downloads=true&stars=true\n[license-image]: http://img.shields.io/npm/l/qs.svg\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/qs.svg\n[downloads-url]: http://npm-stat.com/charts.html?package=qs\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/qs/README.md:Analogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:
./examples/express/node_modules/log-requests/node_modules/express/node_modules/qs/CHANGELOG.md:- [**#24**](https://github.com/ljharb/qs/issues/24) Changelog? Semver?
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/package.json:  "readme": "# mime-db\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nThis is a database of all mime types.\nIt consists of a single, public JSON file and does not include any logic,\nallowing it to remain as un-opinionated as possible with an API.\nIt aggregates data from the following sources:\n\n- http://www.iana.org/assignments/media-types/media-types.xhtml\n- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types\n\n## Installation\n\n```bash\nnpm install mime-db\n```\n\n### Database Download\n\nIf you're crazy enough to use this in the browser, you can just grab the\nJSON file using [RawGit](https://rawgit.com/). It is recommended to replace\n`master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the\nJSON format may change in the future.\n\n```\nhttps://cdn.rawgit.com/jshttp/mime-db/master/db.json\n```\n\n## Usage\n\n```js\nvar db = require('mime-db');\n\n// grab data on .js files\nvar data = db['application/javascript'];\n```\n\n## Data Structure\n\nThe JSON file is a map lookup for lowercased mime types.\nEach mime type has the following properties:\n\n- `.source` - where the mime type is defined.\n    If not set, it's probably a custom media type.\n    - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n    - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml)\n    - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types)\n- `.extensions[]` - known extensions associated with this mime type.\n- `.compressible` - whether a file of this type can be gzipped.\n- `.charset` - the default charset associated with this type, if any.\n\nIf unknown, every property could be `undefined`.\n\n## Contributing\n\nTo edit the database, only make PRs against `src/custom.json` or\n`src/custom-suffix.json`.\n\nThe `src/custom.json` file is a JSON object with the MIME type as the keys\nand the values being an object with the following keys:\n\n- `compressible` - leave out if you don't know, otherwise `true`/`false` for\n  if the data represented by the time is typically compressible.\n- `extensions` - include an array of file extensions that are associated with\n  the type.\n- `notes` - human-readable notes about the type, typically what the type is.\n- `sources` - include an array of URLs of where the MIME type and the associated\n  extensions are sourced from. This needs to be a [primary source](https://en.wikipedia.org/wiki/Primary_source);\n  links to type aggregating sites and Wikipedia are _not acceptible_.\n\nTo update the build, run `npm run build`.\n\n## Adding Custom Media Types\n\nThe best way to get new media types included in this library is to register\nthem with the IANA. The community registration procedure is outlined in\n[RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types\nregistered with the IANA are automatically pulled into this library.\n\n[npm-version-image]: https://img.shields.io/npm/v/mime-db.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg\n[npm-url]: https://npmjs.org/package/mime-db\n[travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg\n[travis-url]: https://travis-ci.org/jshttp/mime-db\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master\n[node-image]: https://img.shields.io/node/v/mime-db.svg\n[node-url]: https://nodejs.org/en/download/\n",
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/dialog-info+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/sgml-open-catalog": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.flographit": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.iptc.g2.catalogitem+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.nokia.catalogs": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-audit-dialog+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-base+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-group+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-speech+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-transform+xml": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:    "extensions": ["txt","text","conf","def","list","log","in","ini"]
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "text/prs.prop.logic": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "text/vnd.si.uricatalogue": {
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/README.md:It consists of a single, public JSON file and does not include any logic,
./examples/express/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/negotiator/package.json:      "url": "http://blog.izs.me/"
./examples/express/node_modules/log-requests/node_modules/express/lib/response.js: *    res.location('../login');
./examples/express/node_modules/log-requests/node_modules/express/lib/response.js: *    res.redirect('../login'); // /blog/post/1 -> /blog/login
./examples/express/node_modules/log-requests/node_modules/express/lib/application.js:    onerror: logerror.bind(this)
./examples/express/node_modules/log-requests/node_modules/express/lib/application.js: * was mounted as "/blog" then the
./examples/express/node_modules/log-requests/node_modules/express/lib/application.js: * return value would be "/blog/admin".
./examples/express/node_modules/log-requests/node_modules/express/lib/application.js:function logerror(err) {
./examples/express/node_modules/log-requests/node_modules/express/lib/router/index.js:  // param logic
./examples/express/node_modules/log-requests/node_modules/express/lib/express.js:  'logger',
./examples/express/node_modules/log-requests/node_modules/express/History.md:  * Fix regression where `"Request aborted"` is logged using `res.sendFile`
./examples/express/node_modules/log-requests/node_modules/express/History.md:  * Fix `res.sendfile` logging standard write errors
./examples/express/node_modules/log-requests/node_modules/express/History.md:  * Fix `res.sendFile` logging standard write errors
./examples/express/node_modules/log-requests/node_modules/express/History.md:   - `app.configure` - use logic in your own app code
./examples/express/node_modules/log-requests/node_modules/express/History.md:    - Fix accepting non-object arguments to `logger`
./examples/express/node_modules/log-requests/node_modules/express/History.md:    - Fix backwards compatibility in `logger`
./examples/express/node_modules/log-requests/node_modules/express/History.md:  * Removed _pids/logs_ creation from express(1)
./examples/express/node_modules/log-requests/node_modules/express/History.md:  * Added support for `app.param(fn)` to define param logic
./examples/express/node_modules/log-requests/node_modules/express/History.md:  * Fixed blog example
./examples/express/node_modules/log-requests/node_modules/express/History.md:  * Added `app.param()` to map route params to async/sync logic
./examples/express/node_modules/log-requests/node_modules/express/History.md:    to do this with CommonJS modules. Also view the _blog_ example for
./examples/express/node_modules/log-requests/node_modules/express/History.md:  * Fixed missing space for combined log format
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log('you ordered a pizza with:');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:if (program.peppers) console.log('  - peppers');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:if (program.pineapple) console.log('  - pineapple');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:if (program.bbqSauce) console.log('  - bbq');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log('  - %s cheese', program.cheese);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log('you ordered a pizza');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:if (program.sauce) console.log('  with sauce');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:else console.log(' without sauce');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('remove ' + dir + (cmd.recursive ? ' recursively' : ''))
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' int: %j', program.integer);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' float: %j', program.float);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' optional: %j', program.optional);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' range: %j..%j', program.range[0], program.range[1]);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' list: %j', program.list);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' collect: %j', program.collect);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' verbosity: %j', program.verbose);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' args: %j', program.args);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' size: %j', program.size);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' drink: %j', program.drink);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('rmdir %s', dir);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:        console.log('rmdir %s', oDir);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log('command:', cmdValue);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log('environment:', envValue || "no environment given");
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:  console.log('  Examples:');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:  console.log('');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:  console.log('    $ custom-help --help');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:  console.log('    $ custom-help -h');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:  console.log('');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:console.log('stuff');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('setup for %s env(s) with %s mode', env, mode);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('exec "%s" using %s mode', cmd, options.exec_mode);
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('  Examples:');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:    console.log();
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('    $ deploy exec sequential');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('    $ deploy exec async');
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:    console.log();
./examples/express/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('deploying "%s"', env);
./examples/express/node_modules/log-requests/node_modules/commander/package.json:  "readme": "# Commander.js\n\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Join the chat at https://gitter.im/tj/commander.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tj/commander.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).  \n  [API documentation](http://tj.github.com/commander.js/)\n\n\n## Installation\n\n    $ npm install commander --save\n\n## Option parsing\n\nOptions with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-P, --pineapple', 'Add pineapple')\n  .option('-b, --bbq-sauce', 'Add bbq sauce')\n  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n  .parse(process.argv);\n\nconsole.log('you ordered a pizza with:');\nif (program.peppers) console.log('  - peppers');\nif (program.pineapple) console.log('  - pineapple');\nif (program.bbqSauce) console.log('  - bbq');\nconsole.log('  - %s cheese', program.cheese);\n```\n\nShort flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc.\n\nNote that multi-word options starting with `--no` prefix negate the boolean value of the following word. For example, `--no-sauce` sets the value of `program.sauce` to false. \n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .parse(process.argv);\n\nconsole.log('you ordered a pizza');\nif (program.sauce) console.log('  with sauce');\nelse console.log(' without sauce');\n```\n\n## Version option\n\nCalling the `version` implicitly adds the `-V` and `--version` options to the command.\nWhen either of these options is present, the command prints the version number and exits.\n\n    $ ./examples/pizza -V\n    0.0.1\n\nIf you want your program to respond to the `-v` option instead of the `-V` option, simply pass custom flags to the `version` method using the same syntax as the `option` method.\n\n```js\nprogram\n  .version('0.0.1', '-v, --version')\n```\n\nThe version flags can be named anything, but the long option is required.\n\n## Command-specific options\n\nYou can attach options to a command.\n\n```js\n#!/usr/bin/env node\n\nvar program = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmd) {\n    console.log('remove ' + dir + (cmd.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nA command's options are validated when the command is used. Any unknown options will be reported as an error. However, if an action-based command does not define an action, then the options are not validated.\n\n## Coercion\n\n```js\nfunction range(val) {\n  return val.split('..').map(Number);\n}\n\nfunction list(val) {\n  return val.split(',');\n}\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nfunction increaseVerbosity(v, total) {\n  return total + 1;\n}\n\nprogram\n  .version('0.1.0')\n  .usage('[options] <file ...>')\n  .option('-i, --integer <n>', 'An integer argument', parseInt)\n  .option('-f, --float <n>', 'A float argument', parseFloat)\n  .option('-r, --range <a>..<b>', 'A range', range)\n  .option('-l, --list <items>', 'A list', list)\n  .option('-o, --optional [value]', 'An optional value')\n  .option('-c, --collect [value]', 'A repeatable value', collect, [])\n  .option('-v, --verbose', 'A value that can be increased', increaseVerbosity, 0)\n  .parse(process.argv);\n\nconsole.log(' int: %j', program.integer);\nconsole.log(' float: %j', program.float);\nconsole.log(' optional: %j', program.optional);\nprogram.range = program.range || [];\nconsole.log(' range: %j..%j', program.range[0], program.range[1]);\nconsole.log(' list: %j', program.list);\nconsole.log(' collect: %j', program.collect);\nconsole.log(' verbosity: %j', program.verbose);\nconsole.log(' args: %j', program.args);\n```\n\n## Regular Expression\n```js\nprogram\n  .version('0.1.0')\n  .option('-s --size <size>', 'Pizza size', /^(large|medium|small)$/i, 'medium')\n  .option('-d --drink [drink]', 'Drink', /^(coke|pepsi|izze)$/i)\n  .parse(process.argv);\n  \nconsole.log(' size: %j', program.size);\nconsole.log(' drink: %j', program.drink);\n```\n\n## Variadic arguments\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you have to\n append `...` to the argument name.  Here is an example:\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\n An `Array` is used for the value of a variadic argument.  This applies to `program.args` as well as the argument passed\n to your action as demonstrated above.\n\n## Specify the argument syntax\n\n```js\n#!/usr/bin/env node\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n     cmdValue = cmd;\n     envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n   console.error('no command given!');\n   process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\nAngled brackets (e.g. `<cmd>`) indicate required input. Square brackets (e.g. `[env]`) indicate optional input.\n\n## Git-style sub-commands\n\n```js\n// file: ./examples/pm\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nWhen `.command()` is invoked with a description argument, no `.action(callback)` should be called to handle sub-commands, otherwise there will be an error. This tells commander that you're going to use separate executables for sub-commands, much like `git(1)` and other popular tools.  \nThe commander will try to search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-command`, like `pm-install`, `pm-search`.\n\nOptions can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the option from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified.\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### `--harmony`\n\nYou can enable `--harmony` option in two ways:\n* Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. Note some os version don’t support this pattern.\n* Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```  \n $ ./examples/pizza --help\n\n   Usage: pizza [options]\n\n   An application for pizzas ordering\n\n   Options:\n\n     -h, --help           output usage information\n     -V, --version        output the version number\n     -p, --peppers        Add peppers\n     -P, --pineapple      Add pineapple\n     -b, --bbq            Add bbq sauce\n     -c, --cheese <type>  Add the specified type of cheese [marble]\n     -C, --no-cheese      You do not want any cheese\n\n```\n\n## Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for \"--help\". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviours, for example\n in the following executable \"stuff\" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-f, --foo', 'enable some foo')\n  .option('-b, --bar', 'enable some bar')\n  .option('-B, --baz', 'enable some baz');\n\n// must be before .parse() since\n// node's emit() is immediate\n\nprogram.on('--help', function(){\n  console.log('  Examples:');\n  console.log('');\n  console.log('    $ custom-help --help');\n  console.log('    $ custom-help -h');\n  console.log('');\n});\n\nprogram.parse(process.argv);\n\nconsole.log('stuff');\n```\n\nYields the following help output when `node script-name.js -h` or `node script-name.js --help` are run:\n\n```\n\nUsage: custom-help [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n\n  $ custom-help --help\n  $ custom-help -h\n\n```\n\n## .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\nIf you want to display help by default (e.g. if no command was provided), you can use something like:\n\n```js\nvar program = require('commander');\nvar colors = require('colors');\n\nprogram\n  .version('0.1.0')\n  .command('getstream [url]', 'get stream URL')\n  .parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp(make_red);\n}\n\nfunction make_red(txt) {\n  return colors.red(txt); //display the help text in red on the console\n}\n```\n\n## .help(cb)\n\n  Output help information and exit immediately.\n  Optional callback cb allows post-processing of help text before it is displayed.\n\n## Examples\n\n```js\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    var mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('  Examples:');\n    console.log();\n    console.log('    $ deploy exec sequential');\n    console.log('    $ deploy exec async');\n    console.log();\n  });\n\nprogram\n  .command('*')\n  .action(function(env){\n    console.log('deploying \"%s\"', env);\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\nMIT\n",
./examples/express/node_modules/log-requests/node_modules/commander/index.js: *          console.log('setup');
./examples/express/node_modules/log-requests/node_modules/commander/index.js: *          console.log('exec "%s"', cmd);
./examples/express/node_modules/log-requests/node_modules/commander/index.js: *          console.log('dir "%s"', dir);
./examples/express/node_modules/log-requests/node_modules/commander/index.js: *              console.log('dir "%s"', oDir);
./examples/express/node_modules/log-requests/node_modules/commander/index.js: *          console.log('deploying "%s"', env);
./examples/express/node_modules/log-requests/node_modules/commander/typings/index.d.ts:     *          console.log('setup');
./examples/express/node_modules/log-requests/node_modules/commander/typings/index.d.ts:     *          console.log('exec "%s"', cmd);
./examples/express/node_modules/log-requests/node_modules/commander/typings/index.d.ts:     *          console.log('dir "%s"', dir);
./examples/express/node_modules/log-requests/node_modules/commander/typings/index.d.ts:     *              console.log('dir "%s"', oDir);
./examples/express/node_modules/log-requests/node_modules/commander/typings/index.d.ts:     *          console.log('deploying "%s"', env);
./examples/express/node_modules/log-requests/node_modules/js-yaml/dist/js-yaml.js:      // Break this `while` cycle and go to the funciton's epilogue.
./examples/express/node_modules/log-requests/node_modules/js-yaml/dist/js-yaml.js:      break; // Reading is done. Go to the epilogue.
./examples/express/node_modules/log-requests/node_modules/js-yaml/dist/js-yaml.js:  // Epilogue.
./examples/express/node_modules/log-requests/node_modules/js-yaml/package.json:      "url": "http://got-ravings.blogspot.com"
./examples/express/node_modules/log-requests/node_modules/js-yaml/package.json:  "readme": "JS-YAML - YAML 1.2 parser / writer for JavaScript\n=================================================\n\n[![Build Status](https://travis-ci.org/nodeca/js-yaml.svg?branch=master)](https://travis-ci.org/nodeca/js-yaml)\n[![NPM version](https://img.shields.io/npm/v/js-yaml.svg)](https://www.npmjs.org/package/js-yaml)\n\n__[Online Demo](http://nodeca.github.com/js-yaml/)__\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human-friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install -g js-yaml\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<!-- esprima required only for !!js/function -->\n<script src=\"esprima.js\"></script>\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for the online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\nNotes:\n\n1. We have no resources to support browserified version. Don't expect it to be\n   well tested. Don't expect fast fixes if something goes wrong there.\n2. `!!js/function` in browser bundle will not work by default. If you really need\n   it - load `esprima` parser first (via amd or directly).\n3. `!!bin` in browser will return `Array`, because browsers do not support\n   node.js `Buffer` and adding Buffer shims is completely useless on practice.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\n``` javascript\nyaml = require('js-yaml');\nfs   = require('fs');\n\n// Get document, or throw exception on error\ntry {\n  var doc = yaml.safeLoad(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\nobject or throws `YAMLException` on error. By default, does not support regexps,\nfunctions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `onWarning` _(default: null)_ - function to call on warning messages.\n  Loader will throw on warnings if this function is not provided.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n- `json` _(default: false)_ - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, the JSON schema is not as strictly defined in the YAML specification.\nIt allows numbers in any notation, use `Null` and `NULL` as `null`, etc.\nThe core schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources, you\nmust additionally validate object structure to avoid injections:\n\n``` javascript\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string [, iterator] [, options ])\n\nSame as `safeLoad()`, but understands multi-document sources. Applies\n`iterator` to each document if specified, or returns array of documents.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string [, iterator] [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as a YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow an exception if you try to dump regexps or functions. However, you can\ndisable exceptions by setting the `skipInvalid` option to `true`.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n- `sortKeys` _(default: `false`)_ - if `true`, sort keys when dumping YAML. If a\n  function, use the function to sort the keys.\n- `lineWidth` _(default: `80`)_ - set max line width.\n- `noRefs` _(default: `false`)_ - if `true`, don't convert duplicate objects into references\n- `noCompatMode` _(default: `false`)_ - if `true` don't try to be compatible with older\n  yaml versions. Currently: don't quote \"yes\", \"no\" and so on, as required for YAML 1.1\n- `condenseFlow` _(default: `false`)_ - if `true` flow sequences will be condensed, omitting the space between `a, b`. Eg. `'[a,b]'`, and omitting the space between `key: value` and quoting the key. Eg. `'{\"a\":b}'` Can be useful when using yaml for pretty URL query params as spaces are %-encoded.\n\nThe following table show availlable styles (e.g. \"canonical\",\n\"binary\"...) available for each tag (.e.g. !!null, !!int ...). Yaml\noutput is shown on the right side after `=>` (default setting) or `->`:\n\n``` none\n!!null\n  \"canonical\"   -> \"~\"\n  \"lowercase\"   => \"null\"\n  \"uppercase\"   -> \"NULL\"\n  \"camelcase\"   -> \"Null\"\n\n!!int\n  \"binary\"      -> \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       -> \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" -> \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!bool\n  \"lowercase\"   => \"true\", \"false\"\n  \"uppercase\"   -> \"TRUE\", \"FALSE\"\n  \"camelcase\"   -> \"True\", \"False\"\n\n!!float\n  \"lowercase\"   => \".nan\", '.inf'\n  \"uppercase\"   -> \".NAN\", '.INF'\n  \"camelcase\"   -> \".NaN\", '.Inf'\n```\n\nExample:\n\n``` javascript\nsafeDump (object, {\n  'styles': {\n    '!!null': 'canonical' // dump null as ~\n  },\n  'sortKeys': true        // sort object keys\n});\n```\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS does not allow objects\nor arrays as keys, and stringifies (by calling `toString()` method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\nBreaking changes in 2.x.x -> 3.x.x\n----------------------------------\n\nIf you have not used __custom__ tags or loader classes and not loaded yaml\nfiles via `require()`, no changes are needed. Just upgrade the library.\n\nOtherwise, you should:\n\n1. Replace all occurrences of `require('xxxx.yml')` by `fs.readFileSync()` +\n  `yaml.safeLoad()`.\n2. rewrite your custom tags constructors and custom loader\n  classes, to conform the new API. See\n  [examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n  [wiki](https://github.com/nodeca/js-yaml/wiki) for details.\n\n\nLicense\n-------\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n",
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/package.json:  "readme": "argparse\n========\n\n[![Build Status](https://secure.travis-ci.org/nodeca/argparse.svg?branch=master)](http://travis-ci.org/nodeca/argparse)\n[![NPM version](https://img.shields.io/npm/v/argparse.svg)](https://www.npmjs.org/package/argparse)\n\nCLI arguments parser for node.js. Javascript port of python's\n[argparse](http://docs.python.org/dev/library/argparse.html) module\n(original version 3.2). That's a full port, except some very rare options,\nrecorded in issue tracker.\n\n**NB. Difference with original.**\n\n- Method names changed to camelCase. See [generated docs](http://nodeca.github.com/argparse/).\n- Use `defaultValue` instead of `default`.\n- Use `argparse.Const.REMAINDER` instead of `argparse.REMAINDER`, and\n  similarly for constant values `OPTIONAL`, `ZERO_OR_MORE`, and `ONE_OR_MORE`\n  (aliases for `nargs` values `'?'`, `'*'`, `'+'`, respectively), and\n  `SUPPRESS`.\n\n\nExample\n=======\n\ntest.js file:\n\n```javascript\n#!/usr/bin/env node\n'use strict';\n\nvar ArgumentParser = require('../lib/argparse').ArgumentParser;\nvar parser = new ArgumentParser({\n  version: '0.0.1',\n  addHelp:true,\n  description: 'Argparse example'\n});\nparser.addArgument(\n  [ '-f', '--foo' ],\n  {\n    help: 'foo bar'\n  }\n);\nparser.addArgument(\n  [ '-b', '--bar' ],\n  {\n    help: 'bar foo'\n  }\n);\nparser.addArgument(\n  '--baz',\n  {\n    help: 'baz bar'\n  }\n);\nvar args = parser.parseArgs();\nconsole.dir(args);\n```\n\nDisplay help:\n\n```\n$ ./test.js -h\nusage: example.js [-h] [-v] [-f FOO] [-b BAR] [--baz BAZ]\n\nArgparse example\n\nOptional arguments:\n  -h, --help         Show this help message and exit.\n  -v, --version      Show program's version number and exit.\n  -f FOO, --foo FOO  foo bar\n  -b BAR, --bar BAR  bar foo\n  --baz BAZ          baz bar\n```\n\nParse arguments:\n\n```\n$ ./test.js -f=3 --bar=4 --baz 5\n{ foo: '3', bar: '4', baz: '5' }\n```\n\nMore [examples](https://github.com/nodeca/argparse/tree/master/examples).\n\n\nArgumentParser objects\n======================\n\n```\nnew ArgumentParser({parameters hash});\n```\n\nCreates a new ArgumentParser object.\n\n**Supported params:**\n\n- ```description``` - Text to display before the argument help.\n- ```epilog``` - Text to display after the argument help.\n- ```addHelp``` - Add a -h/–help option to the parser. (default: true)\n- ```argumentDefault``` - Set the global default value for arguments. (default: null)\n- ```parents``` - A list of ArgumentParser objects whose arguments should also be included.\n- ```prefixChars``` - The set of characters that prefix optional arguments. (default: ‘-‘)\n- ```formatterClass``` - A class for customizing the help output.\n- ```prog``` - The name of the program (default: `path.basename(process.argv[1])`)\n- ```usage``` - The string describing the program usage (default: generated)\n- ```conflictHandler``` - Usually unnecessary, defines strategy for resolving conflicting optionals.\n\n**Not supported yet**\n\n- ```fromfilePrefixChars``` - The set of characters that prefix files from which additional arguments should be read.\n\n\nDetails in [original ArgumentParser guide](http://docs.python.org/dev/library/argparse.html#argumentparser-objects)\n\n\naddArgument() method\n====================\n\n```\nArgumentParser.addArgument(name or flag or [name] or [flags...], {options})\n```\n\nDefines how a single command-line argument should be parsed.\n\n- ```name or flag or [name] or [flags...]``` - Either a positional name\n  (e.g., `'foo'`), a single option (e.g., `'-f'` or `'--foo'`), an array\n  of a single positional name (e.g., `['foo']`), or an array of options\n  (e.g., `['-f', '--foo']`).\n\nOptions:\n\n- ```action``` - The basic type of action to be taken when this argument is encountered at the command line.\n- ```nargs```- The number of command-line arguments that should be consumed.\n- ```constant``` - A constant value required by some action and nargs selections.\n- ```defaultValue``` - The value produced if the argument is absent from the command line.\n- ```type``` - The type to which the command-line argument should be converted.\n- ```choices``` - A container of the allowable values for the argument.\n- ```required``` - Whether or not the command-line option may be omitted (optionals only).\n- ```help``` - A brief description of what the argument does.\n- ```metavar``` - A name for the argument in usage messages.\n- ```dest``` - The name of the attribute to be added to the object returned by parseArgs().\n\nDetails in [original add_argument guide](http://docs.python.org/dev/library/argparse.html#the-add-argument-method)\n\n\nAction (some details)\n================\n\nArgumentParser objects associate command-line arguments with actions.\nThese actions can do just about anything with the command-line arguments associated\nwith them, though most actions simply add an attribute to the object returned by\nparseArgs(). The action keyword argument specifies how the command-line arguments\nshould be handled. The supported actions are:\n\n- ```store``` - Just stores the argument’s value. This is the default action.\n- ```storeConst``` - Stores value, specified by the const keyword argument.\n  (Note that the const keyword argument defaults to the rather unhelpful None.)\n  The 'storeConst' action is most commonly used with optional arguments, that\n  specify some sort of flag.\n- ```storeTrue``` and ```storeFalse``` - Stores values True and False\n  respectively. These are special cases of 'storeConst'.\n- ```append``` - Stores a list, and appends each argument value to the list.\n  This is useful to allow an option to be specified multiple times.\n- ```appendConst``` - Stores a list, and appends value, specified by the\n  const keyword argument to the list. (Note, that the const keyword argument defaults\n  is None.) The 'appendConst' action is typically used when multiple arguments need\n  to store constants to the same list.\n- ```count``` - Counts the number of times a keyword argument occurs. For example,\n  used for increasing verbosity levels.\n- ```help``` - Prints a complete help message for all the options in the current\n  parser and then exits. By default a help action is automatically added to the parser.\n  See ArgumentParser for details of how the output is created.\n- ```version``` - Prints version information and exit. Expects a `version=`\n  keyword argument in the addArgument() call.\n\nDetails in [original action guide](http://docs.python.org/dev/library/argparse.html#action)\n\n\nSub-commands\n============\n\nArgumentParser.addSubparsers()\n\nMany programs split their functionality into a number of sub-commands, for\nexample, the svn program can invoke sub-commands like `svn checkout`, `svn update`,\nand `svn commit`. Splitting up functionality this way can be a particularly good\nidea when a program performs several different functions which require different\nkinds of command-line arguments. `ArgumentParser` supports creation of such\nsub-commands with `addSubparsers()` method. The `addSubparsers()` method is\nnormally called with no arguments and returns an special action object.\nThis object has a single method `addParser()`, which takes a command name and\nany `ArgumentParser` constructor arguments, and returns an `ArgumentParser` object\nthat can be modified as usual.\n\nExample:\n\nsub_commands.js\n```javascript\n#!/usr/bin/env node\n'use strict';\n\nvar ArgumentParser = require('../lib/argparse').ArgumentParser;\nvar parser = new ArgumentParser({\n  version: '0.0.1',\n  addHelp:true,\n  description: 'Argparse examples: sub-commands',\n});\n\nvar subparsers = parser.addSubparsers({\n  title:'subcommands',\n  dest:\"subcommand_name\"\n});\n\nvar bar = subparsers.addParser('c1', {addHelp:true});\nbar.addArgument(\n  [ '-f', '--foo' ],\n  {\n    action: 'store',\n    help: 'foo3 bar3'\n  }\n);\nvar bar = subparsers.addParser(\n  'c2',\n  {aliases:['co'], addHelp:true}\n);\nbar.addArgument(\n  [ '-b', '--bar' ],\n  {\n    action: 'store',\n    type: 'int',\n    help: 'foo3 bar3'\n  }\n);\n\nvar args = parser.parseArgs();\nconsole.dir(args);\n\n```\n\nDetails in [original sub-commands guide](http://docs.python.org/dev/library/argparse.html#sub-commands)\n\n\nContributors\n============\n\n- [Eugene Shkuropat](https://github.com/shkuropat)\n- [Paul Jacobson](https://github.com/hpaulj)\n\n[others](https://github.com/nodeca/argparse/graphs/contributors)\n\nLicense\n=======\n\nCopyright (c) 2012 [Vitaly Puzrin](https://github.com/puzrin).\nReleased under the MIT license. See\n[LICENSE](https://github.com/nodeca/argparse/blob/master/LICENSE) for details.\n\n\n",
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/README.md:- ```epilog``` - Text to display after the argument help.
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/lib/argument_parser.js: * - `epilog`  Text following the argument descriptions
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/lib/argument_parser.js:  this.epilog = options.epilog;
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/lib/argument_parser.js:  // epilog
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/lib/argument_parser.js:  formatter.addText(this.epilog);
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/lib/help/formatter.js: *      formatter.addText(this.epilog);
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	        var logical = (operator === '||' || operator === '&&');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	        var body = this.parseDirectivePrologues();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	    Parser.prototype.parseDirectivePrologues = function () {
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	        var body = this.parseDirectivePrologues();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	        var body = this.parseDirectivePrologues();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	// to catch a logic error. The condition shall be fulfilled in normal case.
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/package.json:    "profile": "node --prof test/profile.js && mv isolate*.log v8.log && node-tick-processor",
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console = { log: print };
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('Usage:');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('   esvalidate [options] [file.js...]');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('Available options:');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('  --format=type  Set the report format, plain (default) or junit');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('  -v, --version  Print program version');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:        console.log('ECMAScript Validator (using Esprima version', esprima.version, ')');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:        console.log();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log('Error: unknown report format ' + options.format + '.');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:        console.log('Error: unknown option ' + entry + '.');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('<?xml version="1.0" encoding="UTF-8"?>');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('<testsuites>');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log('<testsuite name="' + fname + '" errors="0" ' +
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:                console.log('  <testcase name="Line ' + error.lineNumber + ': ' + msg + '" ' +
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:                console.log('    <error type="SyntaxError" message="' + error.message + '">' +
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:                console.log('  </testcase>');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log('</testsuite>');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:                console.log(msg);
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log('<testsuite name="' + fname + '" errors="1" failures="0" tests="1" ' +
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log(' <testcase name="' + e.message + '" ' + ' time="0">');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log(' <error type="ParseError" message="' + e.message + '">' +
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log(' </testcase>');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log('</testsuite>');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log(fname + ':' + e.lineNumber + ': ' + e.message.replace(/^Line\ [0-9]*\:\ /, ''));
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:        console.log('</testsuites>');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console = { log: print };
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('Usage:');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('   esparse [options] [file.js]');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('Available options:');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --comment      Gather all line and block comments in an array');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --loc          Include line-column location info for each syntax node');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --range        Include index-based range for each syntax node');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --raw          Display the raw value of literals');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --tokens       List all tokens in an array');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --tolerant     Tolerate errors on a best-effort basis (experimental)');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  -v, --version  Shows program version');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:            console.log('Error: more than one input file.');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:        console.log('ECMAScript Parser (using Esprima version', esprima.version, ')');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:        console.log();
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:        console.log('Error: unknown option ' + entry + '.');
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log(JSON.stringify(syntax, adjustRegexLiteral, 4));
./examples/express/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('Error: ' + e.message);
./examples/express/node_modules/log-requests/node_modules/js-yaml/README.md:  console.log(doc);
./examples/express/node_modules/log-requests/node_modules/js-yaml/README.md:  console.log(e);
./examples/express/node_modules/log-requests/node_modules/js-yaml/README.md:  console.log(doc);
./examples/express/node_modules/log-requests/node_modules/js-yaml/lib/js-yaml/loader.js:      // Break this `while` cycle and go to the funciton's epilogue.
./examples/express/node_modules/log-requests/node_modules/js-yaml/lib/js-yaml/loader.js:      break; // Reading is done. Go to the epilogue.
./examples/express/node_modules/log-requests/node_modules/js-yaml/lib/js-yaml/loader.js:  // Epilogue.
./examples/express/node_modules/log-requests/node_modules/js-yaml/bin/js-yaml.js:  if (isYaml) console.log(JSON.stringify(output, null, '  '));
./examples/express/node_modules/log-requests/node_modules/js-yaml/bin/js-yaml.js:  else console.log(yaml.dump(output));
./examples/express/node_modules/log-requests/node_modules/prettyjson/package.json:    "changelog": "git log $(git describe --tags --abbrev=0)..HEAD --pretty='* %s' --first-parent"
./examples/express/node_modules/log-requests/node_modules/prettyjson/package.json:  "readme": "# prettyjson [![Build Status](https://secure.travis-ci.org/rafeca/prettyjson.png)](http://travis-ci.org/rafeca/prettyjson) [![NPM version](https://badge.fury.io/js/prettyjson.png)](http://badge.fury.io/js/prettyjson) [![Coverage Status](https://coveralls.io/repos/rafeca/prettyjson/badge.png?branch=master)](https://coveralls.io/r/rafeca/prettyjson?branch=master)\n\nPackage for formatting JSON data in a coloured YAML-style, perfect for CLI output.\n\n## How to install\n\nJust install it via NPM:\n\n```bash\n$ npm install -g prettyjson\n```\n\nThis will install `prettyjson` globally, so it will be added automatically\nto your `PATH`.\n\n## Using it (from the CLI)\n\nThis package installs a command line interface to render JSON data in a more\nconvenient way. You can use the CLI in three different ways:\n\n**Decode a JSON file:** If you want to see the contents of a JSON file, just pass\nit as the first argument to the CLI:\n\n```bash\n$ prettyjson package.json\n```\n\n![Example 1](https://raw.github.com/rafeca/prettyjson/master/images/example3.png)\n\n**Decode the stdin:** You can also pipe the result of a command (for example an\nHTTP request) to the CLI to see the JSON result in a clearer way:\n\n```bash\n$ curl https://api.github.com/users/rafeca | prettyjson\n```\n\n![Example 2](https://raw.github.com/rafeca/prettyjson/master/images/example4.png)\n\n**Decode random strings:** if you call the CLI with no arguments, you'll get a\nprompt where you can past JSON strings and they'll be automatically displayed in a clearer way:\n\n![Example 3](https://raw.github.com/rafeca/prettyjson/master/images/example5.png)\n\n### Command line options\n\nIt's possible to customize the output through some command line options:\n\n```bash\n# Change colors\n$ prettyjson --string=red --keys=blue --dash=yellow --number=green package.json\n\n# Do not use colors\n$ prettyjson --nocolor=1 package.json\n\n# Change indentation\n$ prettyjson --indent=4 package.json\n\n# Render arrays elements in a single line\n$ prettyjson --inline-arrays=1 package.json\n```\n\n**Deprecation Notice**: The old configuration through environment variables is\ndeprecated and it will be removed in the next major version (1.0.0).\n\n## Using it (from Node.js)\n\nIt's pretty easy to use it. You just have to include it in your script and call\nthe `render()` method:\n\n```javascript\nvar prettyjson = require('prettyjson');\n\nvar data = {\n  username: 'rafeca',\n  url: 'https://github.com/rafeca',\n  twitter_account: 'https://twitter.com/rafeca',\n  projects: ['prettyprint', 'connfu']\n};\n\nvar options = {\n  noColor: true\n};\n\nconsole.log(prettyjson.render(data, options));\n```\n\nAnd will output:\n\n![Example 4](https://raw.github.com/rafeca/prettyjson/master/images/example1.png)\n\nYou can also configure the colors of the hash keys and array dashes\n(using [colors.js](https://github.com/Marak/colors.js) colors syntax):\n\n```javascript\nvar prettyjson = require('prettyjson');\n\nvar data = {\n  username: 'rafeca',\n  url: 'https://github.com/rafeca',\n  twitter_account: 'https://twitter.com/rafeca',\n  projects: ['prettyprint', 'connfu']\n};\n\nconsole.log(prettyjson.render(data, {\n  keysColor: 'rainbow',\n  dashColor: 'magenta',\n  stringColor: 'white'\n}));\n```\n\nWill output something like:\n\n![Example 5](https://raw.github.com/rafeca/prettyjson/master/images/example2.png)\n\n## Running Tests\n\nTo run the test suite first invoke the following command within the repo,\ninstalling the development dependencies:\n\n```bash\n$ npm install\n```\n\nthen run the tests:\n\n```bash\n$ npm test\n```\n\nOn windows, you can run the tests with:\n\n```cmd\nC:\\git\\prettyjson> npm run-script testwin\n```\n",
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/package.json:  "readme": "# colors.js\r\n[![Build Status](https://travis-ci.org/Marak/colors.js.svg?branch=master)](https://travis-ci.org/Marak/colors.js)\r\n[![version](https://img.shields.io/npm/v/colors.svg)](https://www.npmjs.org/package/colors)\r\n[![dependencies](https://david-dm.org/Marak/colors.js.svg)](https://david-dm.org/Marak/colors.js)\r\n[![devDependencies](https://david-dm.org/Marak/colors.js/dev-status.svg)](https://david-dm.org/Marak/colors.js#info=devDependencies)\r\n\r\nPlease check out the [roadmap](ROADMAP.md) for upcoming features and releases.  Please open Issues to provide feedback, and check the `develop` branch for the latest bleeding-edge updates.\r\n\r\n## get color and style in your node.js console\r\n\r\n![Demo](https://raw.githubusercontent.com/Marak/colors.js/master/screenshots/colors.png)\r\n\r\n## Installation\r\n\r\n    npm install colors\r\n\r\n## colors and styles!\r\n\r\n### text colors\r\n\r\n  - black\r\n  - red\r\n  - green\r\n  - yellow\r\n  - blue\r\n  - magenta\r\n  - cyan\r\n  - white\r\n  - gray\r\n  - grey\r\n\r\n### background colors\r\n\r\n  - bgBlack\r\n  - bgRed\r\n  - bgGreen\r\n  - bgYellow\r\n  - bgBlue\r\n  - bgMagenta\r\n  - bgCyan\r\n  - bgWhite\r\n\r\n### styles\r\n\r\n  - reset\r\n  - bold\r\n  - dim\r\n  - italic\r\n  - underline\r\n  - inverse\r\n  - hidden\r\n  - strikethrough\r\n\r\n### extras\r\n\r\n  - rainbow\r\n  - zebra\r\n  - america\r\n  - trap\r\n  - random\r\n\r\n\r\n## Usage\r\n\r\nBy popular demand, `colors` now ships with two types of usages!\r\n\r\nThe super nifty way\r\n\r\n```js\r\nvar colors = require('colors');\r\n\r\nconsole.log('hello'.green); // outputs green text\r\nconsole.log('i like cake and pies'.underline.red) // outputs red underlined text\r\nconsole.log('inverse the color'.inverse); // inverses the color\r\nconsole.log('OMG Rainbows!'.rainbow); // rainbow\r\nconsole.log('Run the trap'.trap); // Drops the bass\r\n\r\n```\r\n\r\nor a slightly less nifty way which doesn't extend `String.prototype`\r\n\r\n```js\r\nvar colors = require('colors/safe');\r\n\r\nconsole.log(colors.green('hello')); // outputs green text\r\nconsole.log(colors.red.underline('i like cake and pies')) // outputs red underlined text\r\nconsole.log(colors.inverse('inverse the color')); // inverses the color\r\nconsole.log(colors.rainbow('OMG Rainbows!')); // rainbow\r\nconsole.log(colors.trap('Run the trap')); // Drops the bass\r\n\r\n```\r\n\r\nI prefer the first way. Some people seem to be afraid of extending `String.prototype` and prefer the second way. \r\n\r\nIf you are writing good code you will never have an issue with the first approach. If you really don't want to touch `String.prototype`, the second usage will not touch `String` native object.\r\n\r\n## Disabling Colors\r\n\r\nTo disable colors you can pass the following arguments in the command line to your application:\r\n\r\n```bash\r\nnode myapp.js --no-color\r\n```\r\n\r\n## Console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data)\r\n\r\n```js\r\nvar name = 'Marak';\r\nconsole.log(colors.green('Hello %s'), name);\r\n// outputs -> 'Hello Marak'\r\n```\r\n\r\n## Custom themes\r\n\r\n### Using standard API\r\n\r\n```js\r\n\r\nvar colors = require('colors');\r\n\r\ncolors.setTheme({\r\n  silly: 'rainbow',\r\n  input: 'grey',\r\n  verbose: 'cyan',\r\n  prompt: 'grey',\r\n  info: 'green',\r\n  data: 'grey',\r\n  help: 'cyan',\r\n  warn: 'yellow',\r\n  debug: 'blue',\r\n  error: 'red'\r\n});\r\n\r\n// outputs red text\r\nconsole.log(\"this is an error\".error);\r\n\r\n// outputs yellow text\r\nconsole.log(\"this is a warning\".warn);\r\n```\r\n\r\n### Using string safe API\r\n\r\n```js\r\nvar colors = require('colors/safe');\r\n\r\n// set single property\r\nvar error = colors.red;\r\nerror('this is red');\r\n\r\n// set theme\r\ncolors.setTheme({\r\n  silly: 'rainbow',\r\n  input: 'grey',\r\n  verbose: 'cyan',\r\n  prompt: 'grey',\r\n  info: 'green',\r\n  data: 'grey',\r\n  help: 'cyan',\r\n  warn: 'yellow',\r\n  debug: 'blue',\r\n  error: 'red'\r\n});\r\n\r\n// outputs red text\r\nconsole.log(colors.error(\"this is an error\"));\r\n\r\n// outputs yellow text\r\nconsole.log(colors.warn(\"this is a warning\"));\r\n\r\n```\r\n\r\n### Combining Colors\r\n\r\n```javascript\r\nvar colors = require('colors');\r\n\r\ncolors.setTheme({\r\n  custom: ['red', 'underline']\r\n});\r\n\r\nconsole.log('test'.custom);\r\n```\r\n\r\n*Protip: There is a secret undocumented style in `colors`. If you find the style you can summon him.*\r\n",
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('hello'.green); // outputs green text
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('i like cake and pies'.underline.red) // outputs red underlined text
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('inverse the color'.inverse); // inverses the color
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('OMG Rainbows!'.rainbow); // rainbow
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('Run the trap'.trap); // Drops the bass
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.green('hello')); // outputs green text
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.red.underline('i like cake and pies')) // outputs red underlined text
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.inverse('inverse the color')); // inverses the color
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.rainbow('OMG Rainbows!')); // rainbow
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.trap('Run the trap')); // Drops the bass
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:## Console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data)
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.green('Hello %s'), name);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log("this is an error".error);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log("this is a warning".warn);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.error("this is an error"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.warn("this is a warning"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('test'.custom);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.yellow("First some yellow text"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.yellow.underline("Underline that text"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.red.bold("Make it bold and red"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.rainbow("Double Raindows All Day Long"))
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.trap("Drop the bass"))
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.rainbow(colors.trap("DROP THE RAINBOW BASS")));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.bold.italic.underline.red('Chains are also cool.')); // styles not widely supported
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.green('So ') + colors.underline('are') + ' ' + colors.inverse('inverse') + colors.yellow.bold(' styles! ')); // styles not widely supported
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.zebra("Zebras are so fun!"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log("This is " + colors.strikethrough("not") + " fun.");
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.black.bgWhite('Background color attack!'));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.random('Use random styles on everything!'))
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.america('America, Heck Yeah!'));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log('Setting themes is useful')
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js://console.log('Generic logging theme as JSON'.green.bold.underline);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.error("this is an error"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.warn("this is a warning"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.input("this is an input"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:// console.log('Generic logging theme as file'.green.bold.underline);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:colors.setTheme(__dirname + '/../themes/generic-logging.js');
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.error("this is an error"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.warn("this is a warning"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.input("this is an input"));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:// console.log(colors.zalgo("Don't summon him"))
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("First some yellow text".yellow);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("Underline that text".yellow.underline);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("Make it bold and red".red.bold);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log(("Double Raindows All Day Long").rainbow)
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("Drop the bass".trap)
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("DROP THE RAINBOW BASS".trap.rainbow)
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Chains are also cool.'.bold.italic.underline.red); // styles not widely supported
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('So '.green + 'are'.underline + ' ' + 'inverse'.inverse + ' styles! '.yellow.bold); // styles not widely supported
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("Zebras are so fun!".zebra);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("This is " + "not".strikethrough + " fun.");
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Background color attack!'.black.bgWhite)
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Use random styles on everything!'.random)
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('America, Heck Yeah!'.america)
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Setting themes is useful')
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Generic logging theme as JSON'.green.bold.underline);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is an error".error);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is a warning".warn);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is an input".input);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Generic logging theme as file'.green.bold.underline);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:  colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:  console.log(err);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is an error".error);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is a warning".warn);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is an input".input);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js://console.log("Don't summon".zalgo)
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/lib/extendStringPrototype.js:        console.log('warn: '.red + ('String.prototype' + prop).magenta + ' is probably something you don\'t want to override. Ignoring style name');
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/lib/extendStringPrototype.js:        console.log(err);
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/lib/colors.js:    console.log('colors.setTheme now only accepts an object, not a string.  ' +
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/lib/colors.js:      'The old syntax looked like colors.setTheme(__dirname + \'/../themes/generic-logging.js\'); ' +
./examples/express/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/lib/colors.js:      'The new syntax looks like colors.setTheme(require(__dirname + \'/../themes/generic-logging.js\'));');
./examples/express/node_modules/log-requests/node_modules/prettyjson/README.md:console.log(prettyjson.render(data, options));
./examples/express/node_modules/log-requests/node_modules/prettyjson/README.md:console.log(prettyjson.render(data, {
./examples/express/node_modules/log-requests/node_modules/prettyjson/bin/prettyjson:  console.log(prettyjson.renderString(input, options));
./examples/express/node_modules/log-requests/node_modules/prettyjson/CONTRIBUTING.md:8. Commit your changes in logical chunks; use git's [interactive
./examples/express/node_modules/log-requests/node_modules/body-parser/package.json:  "readme": "# body-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nNode.js body parsing middleware.\n\nParse incoming request bodies in a middleware before your handlers, available\nunder the `req.body` property.\n\n[Learn about the anatomy of an HTTP transaction in Node.js](https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/).\n\n_This does not handle multipart bodies_, due to their complex and typically\nlarge nature. For multipart bodies, you may be interested in the following\nmodules:\n\n  * [busboy](https://www.npmjs.org/package/busboy#readme) and\n    [connect-busboy](https://www.npmjs.org/package/connect-busboy#readme)\n  * [multiparty](https://www.npmjs.org/package/multiparty#readme) and\n    [connect-multiparty](https://www.npmjs.org/package/connect-multiparty#readme)\n  * [formidable](https://www.npmjs.org/package/formidable#readme)\n  * [multer](https://www.npmjs.org/package/multer#readme)\n\nThis module provides the following parsers:\n\n  * [JSON body parser](#bodyparserjsonoptions)\n  * [Raw body parser](#bodyparserrawoptions)\n  * [Text body parser](#bodyparsertextoptions)\n  * [URL-encoded form body parser](#bodyparserurlencodedoptions)\n\nOther body parsers you might be interested in:\n\n- [body](https://www.npmjs.org/package/body#readme)\n- [co-body](https://www.npmjs.org/package/co-body#readme)\n\n## Installation\n\n```sh\n$ npm install body-parser\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar bodyParser = require('body-parser')\n```\n\nThe `bodyParser` object exposes various factories to create middlewares. All\nmiddlewares will populate the `req.body` property with the parsed body when\nthe `Content-Type` request header matches the `type` option, or an empty\nobject (`{}`) if there was no body to parse, the `Content-Type` was not matched,\nor an error occurred.\n\nThe various errors returned by this module are described in the\n[errors section](#errors).\n\n### bodyParser.json([options])\n\nReturns middleware that only parses `json` and only looks at requests where\nthe `Content-Type` header matches the `type` option. This parser accepts any\nUnicode encoding of the body and supports automatic inflation of `gzip` and\n`deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`).\n\n#### Options\n\nThe `json` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### reviver\n\nThe `reviver` option is passed directly to `JSON.parse` as the second\nargument. You can find more information on this argument\n[in the MDN documentation about JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter).\n\n##### strict\n\nWhen set to `true`, will only accept arrays and objects; when `false` will\naccept anything `JSON.parse` accepts. Defaults to `true`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `json`), a mime type (like\n`application/json`), or a mime type with a wildcard (like `*/*` or `*/json`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `application/json`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.raw([options])\n\nReturns middleware that parses all bodies as a `Buffer` and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a `Buffer` object\nof the body.\n\n#### Options\n\nThe `raw` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `bin`), a mime type (like\n`application/octet-stream`), or a mime type with a wildcard (like `*/*` or\n`application/*`). If a function, the `type` option is called as `fn(req)`\nand the request is parsed if it returns a truthy value. Defaults to\n`application/octet-stream`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.text([options])\n\nReturns middleware that parses all bodies as a string and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` string containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a string of the\nbody.\n\n#### Options\n\nThe `text` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### defaultCharset\n\nSpecify the default character set for the text content if the charset is not\nspecified in the `Content-Type` header of the request. Defaults to `utf-8`.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `txt`), a mime type (like\n`text/plain`), or a mime type with a wildcard (like `*/*` or `text/*`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `text/plain`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.urlencoded([options])\n\nReturns middleware that only parses `urlencoded` bodies and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser accepts only UTF-8 encoding of the body and supports automatic\ninflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This object will contain\nkey-value pairs, where the value can be a string or array (when `extended` is\n`false`), or any type (when `extended` is `true`).\n\n#### Options\n\nThe `urlencoded` function takes an optional `options` object that may contain\nany of the following keys:\n\n##### extended\n\nThe `extended` option allows to choose between parsing the URL-encoded data\nwith the `querystring` library (when `false`) or the `qs` library (when\n`true`). The \"extended\" syntax allows for rich objects and arrays to be\nencoded into the URL-encoded format, allowing for a JSON-like experience\nwith URL-encoded. For more information, please\n[see the qs library](https://www.npmjs.org/package/qs#readme).\n\nDefaults to `true`, but using the default has been deprecated. Please\nresearch into the difference between `qs` and `querystring` and choose the\nappropriate setting.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### parameterLimit\n\nThe `parameterLimit` option controls the maximum number of parameters that\nare allowed in the URL-encoded data. If a request contains more parameters\nthan this value, a 413 will be returned to the client. Defaults to `1000`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `urlencoded`), a mime type (like\n`application/x-www-form-urlencoded`), or a mime type with a wildcard (like\n`*/x-www-form-urlencoded`). If a function, the `type` option is called as\n`fn(req)` and the request is parsed if it returns a truthy value. Defaults\nto `application/x-www-form-urlencoded`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n## Errors\n\nThe middlewares provided by this module create errors depending on the error\ncondition during parsing. The errors will typically have a `status`/`statusCode`\nproperty that contains the suggested HTTP response code, an `expose` property\nto determine if the `message` property should be displayed to the client, a\n`type` property to determine the type of error without matching against the\n`message`, and a `body` property containing the read body, if available.\n\nThe following are the common errors emitted, though any error can come through\nfor various reasons.\n\n### content encoding unsupported\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an encoding but the \"inflation\" option was set to `false`. The\n`status` property is set to `415`, the `type` property is set to\n`'encoding.unsupported'`, and the `charset` property will be set to the\nencoding that is unsupported.\n\n### request aborted\n\nThis error will occur when the request is aborted by the client before reading\nthe body has finished. The `received` property will be set to the number of\nbytes received before the request was aborted and the `expected` property is\nset to the number of expected bytes. The `status` property is set to `400`\nand `type` property is set to `'request.aborted'`.\n\n### request entity too large\n\nThis error will occur when the request body's size is larger than the \"limit\"\noption. The `limit` property will be set to the byte limit and the `length`\nproperty will be set to the request body's length. The `status` property is\nset to `413` and the `type` property is set to `'entity.too.large'`.\n\n### request size did not match content length\n\nThis error will occur when the request's length did not match the length from\nthe `Content-Length` header. This typically occurs when the request is malformed,\ntypically when the `Content-Length` header was calculated based on characters\ninstead of bytes. The `status` property is set to `400` and the `type` property\nis set to `'request.size.invalid'`.\n\n### stream encoding should not be set\n\nThis error will occur when something called the `req.setEncoding` method prior\nto this middleware. This module operates directly on bytes only and you cannot\ncall `req.setEncoding` when using this module. The `status` property is set to\n`500` and the `type` property is set to `'stream.encoding.set'`.\n\n### too many parameters\n\nThis error will occur when the content of the request exceeds the configured\n`parameterLimit` for the `urlencoded` parser. The `status` property is set to\n`413` and the `type` property is set to `'parameters.too.many'`.\n\n### unsupported charset \"BOGUS\"\n\nThis error will occur when the request had a charset parameter in the\n`Content-Type` header, but the `iconv-lite` module does not support it OR the\nparser does not support it. The charset is contained in the message as well\nas in the `charset` property. The `status` property is set to `415`, the\n`type` property is set to `'charset.unsupported'`, and the `charset` property\nis set to the charset that is unsupported.\n\n### unsupported content encoding \"bogus\"\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an unsupported encoding. The encoding is contained in the message\nas well as in the `encoding` property. The `status` property is set to `415`,\nthe `type` property is set to `'encoding.unsupported'`, and the `encoding`\nproperty is set to the encoding that is unsupported.\n\n## Examples\n\n### Express/Connect top-level generic\n\nThis example demonstrates adding a generic JSON and URL-encoded parser as a\ntop-level middleware, which will parse the bodies of all incoming requests.\nThis is the simplest setup.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n```\n\n### Express route-specific\n\nThis example demonstrates adding body parsers specifically to the routes that\nneed them. In general, this is the most recommended way to use body-parser with\nExpress.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// create application/json parser\nvar jsonParser = bodyParser.json()\n\n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n\n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  res.send('welcome, ' + req.body.username)\n})\n\n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  // create user in req.body\n})\n```\n\n### Change accepted type for parsers\n\nAll the parsers accept a `type` option which allows you to change the\n`Content-Type` that the middleware will parse.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse various different custom JSON types as JSON\napp.use(bodyParser.json({ type: 'application/*+json' }))\n\n// parse some custom thing into a Buffer\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\n\n// parse an HTML body into a string\napp.use(bodyParser.text({ type: 'text/html' }))\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/body-parser.svg\n[npm-url]: https://npmjs.org/package/body-parser\n[travis-image]: https://img.shields.io/travis/expressjs/body-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/body-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/body-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/body-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/body-parser.svg\n[downloads-url]: https://npmjs.org/package/body-parser\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/package.json:  "readme": "# mime-db\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nThis is a database of all mime types.\nIt consists of a single, public JSON file and does not include any logic,\nallowing it to remain as un-opinionated as possible with an API.\nIt aggregates data from the following sources:\n\n- http://www.iana.org/assignments/media-types/media-types.xhtml\n- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types\n\n## Installation\n\n```bash\nnpm install mime-db\n```\n\n### Database Download\n\nIf you're crazy enough to use this in the browser, you can just grab the\nJSON file using [RawGit](https://rawgit.com/). It is recommended to replace\n`master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the\nJSON format may change in the future.\n\n```\nhttps://cdn.rawgit.com/jshttp/mime-db/master/db.json\n```\n\n## Usage\n\n```js\nvar db = require('mime-db');\n\n// grab data on .js files\nvar data = db['application/javascript'];\n```\n\n## Data Structure\n\nThe JSON file is a map lookup for lowercased mime types.\nEach mime type has the following properties:\n\n- `.source` - where the mime type is defined.\n    If not set, it's probably a custom media type.\n    - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n    - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml)\n    - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types)\n- `.extensions[]` - known extensions associated with this mime type.\n- `.compressible` - whether a file of this type can be gzipped.\n- `.charset` - the default charset associated with this type, if any.\n\nIf unknown, every property could be `undefined`.\n\n## Contributing\n\nTo edit the database, only make PRs against `src/custom.json` or\n`src/custom-suffix.json`.\n\nThe `src/custom.json` file is a JSON object with the MIME type as the keys\nand the values being an object with the following keys:\n\n- `compressible` - leave out if you don't know, otherwise `true`/`false` for\n  if the data represented by the time is typically compressible.\n- `extensions` - include an array of file extensions that are associated with\n  the type.\n- `notes` - human-readable notes about the type, typically what the type is.\n- `sources` - include an array of URLs of where the MIME type and the associated\n  extensions are sourced from. This needs to be a [primary source](https://en.wikipedia.org/wiki/Primary_source);\n  links to type aggregating sites and Wikipedia are _not acceptible_.\n\nTo update the build, run `npm run build`.\n\n## Adding Custom Media Types\n\nThe best way to get new media types included in this library is to register\nthem with the IANA. The community registration procedure is outlined in\n[RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types\nregistered with the IANA are automatically pulled into this library.\n\n[npm-version-image]: https://img.shields.io/npm/v/mime-db.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg\n[npm-url]: https://npmjs.org/package/mime-db\n[travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg\n[travis-url]: https://travis-ci.org/jshttp/mime-db\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master\n[node-image]: https://img.shields.io/node/v/mime-db.svg\n[node-url]: https://nodejs.org/en/download/\n",
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/dialog-info+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/sgml-open-catalog": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.flographit": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.iptc.g2.catalogitem+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.nokia.catalogs": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-audit-dialog+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-base+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-group+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-speech+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-transform+xml": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:    "extensions": ["txt","text","conf","def","list","log","in","ini"]
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/prs.prop.logic": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/vnd.si.uricatalogue": {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/README.md:It consists of a single, public JSON file and does not include any logic,
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/package.json:  "readme": "# http-errors\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCreate HTTP errors for Express, Koa, Connect, etc. with ease.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install http-errors\n```\n\n## Example\n\n```js\nvar createError = require('http-errors')\nvar express = require('express')\nvar app = express()\n\napp.use(function (req, res, next) {\n  if (!req.user) return next(createError(401, 'Please login to view this page.'))\n  next()\n})\n```\n\n## API\n\nThis is the current API, currently extracted from Koa and subject to change.\n\nAll errors inherit from JavaScript `Error` and the exported `createError.HttpError`.\n\n### Error Properties\n\n- `expose` - can be used to signal if `message` should be sent to the client,\n  defaulting to `false` when `status` >= 500\n- `headers` - can be an object of header names to values to be sent to the\n  client, defaulting to `undefined`. When defined, the key names should all\n  be lower-cased\n- `message` - the traditional error message, which should be kept short and all\n  single line\n- `status` - the status code of the error, mirroring `statusCode` for general\n  compatibility\n- `statusCode` - the status code of the error, defaulting to `500`\n\n### createError([status], [message], [properties])\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = createError(404, 'This video does not exist!')\n```\n\n- `status: 500` - the status code as a number\n- `message` - the message of the error, defaulting to node's text for that status code.\n- `properties` - custom properties to attach to the object\n\n### new createError\\[code || name\\](\\[msg]\\))\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = new createError.NotFound()\n```\n\n- `code` - the status code as a number\n- `name` - the name of the error as a \"bumpy case\", i.e. `NotFound` or `InternalServerError`.\n\n#### List of all constructors\n\n|Status Code|Constructor Name             |\n|-----------|-----------------------------|\n|400        |BadRequest                   |\n|401        |Unauthorized                 |\n|402        |PaymentRequired              |\n|403        |Forbidden                    |\n|404        |NotFound                     |\n|405        |MethodNotAllowed             |\n|406        |NotAcceptable                |\n|407        |ProxyAuthenticationRequired  |\n|408        |RequestTimeout               |\n|409        |Conflict                     |\n|410        |Gone                         |\n|411        |LengthRequired               |\n|412        |PreconditionFailed           |\n|413        |PayloadTooLarge              |\n|414        |URITooLong                   |\n|415        |UnsupportedMediaType         |\n|416        |RangeNotSatisfiable          |\n|417        |ExpectationFailed            |\n|418        |ImATeapot                    |\n|421        |MisdirectedRequest           |\n|422        |UnprocessableEntity          |\n|423        |Locked                       |\n|424        |FailedDependency             |\n|425        |UnorderedCollection          |\n|426        |UpgradeRequired              |\n|428        |PreconditionRequired         |\n|429        |TooManyRequests              |\n|431        |RequestHeaderFieldsTooLarge  |\n|451        |UnavailableForLegalReasons   |\n|500        |InternalServerError          |\n|501        |NotImplemented               |\n|502        |BadGateway                   |\n|503        |ServiceUnavailable           |\n|504        |GatewayTimeout               |\n|505        |HTTPVersionNotSupported      |\n|506        |VariantAlsoNegotiates        |\n|507        |InsufficientStorage          |\n|508        |LoopDetected                 |\n|509        |BandwidthLimitExceeded       |\n|510        |NotExtended                  |\n|511        |NetworkAuthenticationRequired|\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/http-errors.svg\n[npm-url]: https://npmjs.org/package/http-errors\n[node-version-image]: https://img.shields.io/node/v/http-errors.svg\n[node-version-url]: https://nodejs.org/en/download/\n[travis-image]: https://img.shields.io/travis/jshttp/http-errors.svg\n[travis-url]: https://travis-ci.org/jshttp/http-errors\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/http-errors.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/http-errors\n[downloads-image]: https://img.shields.io/npm/dm/http-errors.svg\n[downloads-url]: https://npmjs.org/package/http-errors\n",
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/Readme.md:logging source.
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    // call to self as log
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    log.call(deprecate, message)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:function log (message, site) {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/README.md:  if (!req.user) return next(createError(401, 'Please login to view this page.'))
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/depd/Readme.md:logging source.
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n",
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:    // call to self as log
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:    log.call(deprecate, message)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:function log (message, site) {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/package.json:    "log",
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:  change the behavior of the debug logging:
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:var log = debug('app:log');
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:// set this namespace to log via console.log
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:log('goes to stdout');
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:// overrides all per-namespace log settings
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:debug.log = console.info.bind(console);
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js:exports.log = log;
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js:function log() {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js:    && console.log
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/node.js:exports.log = log;
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/node.js:function log() {
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/debug.js: * Previous log timestamp.
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/karma.conf.js:    // level of logging
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/debug/component.json:    "log",
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/iconv-lite/package.json:  "readme": "## Pure JS character encoding conversion [![Build Status](https://travis-ci.org/ashtuchkin/iconv-lite.svg?branch=master)](https://travis-ci.org/ashtuchkin/iconv-lite)\n\n * Doesn't need native code compilation. Works on Windows and in sandboxed environments like [Cloud9](http://c9.io).\n * Used in popular projects like [Express.js (body_parser)](https://github.com/expressjs/body-parser), \n   [Grunt](http://gruntjs.com/), [Nodemailer](http://www.nodemailer.com/), [Yeoman](http://yeoman.io/) and others.\n * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\n * Intuitive encode/decode API\n * Streaming support for Node v0.10+\n * [Deprecated] Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings.\n * In-browser usage via [Browserify](https://github.com/substack/node-browserify) (~180k gzip compressed with Buffer shim included).\n * Typescript [type definition file](https://github.com/ashtuchkin/iconv-lite/blob/master/lib/index.d.ts) included.\n * React Native is supported (need to explicitly `npm install` two more modules: `buffer` and `stream`).\n * License: MIT.\n\n[![NPM Stats](https://nodei.co/npm/iconv-lite.png?downloads=true&downloadRank=true)](https://npmjs.org/packages/iconv-lite/)\n\n## Usage\n### Basic API\n```javascript\nvar iconv = require('iconv-lite');\n\n// Convert from an encoded buffer to js string.\nstr = iconv.decode(new Buffer([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');\n\n// Convert from js string to an encoded buffer.\nbuf = iconv.encode(\"Sample input string\", 'win1251');\n\n// Check if encoding is supported\niconv.encodingExists(\"us-ascii\")\n```\n\n### Streaming API (Node v0.10+)\n```javascript\n\n// Decode stream (from binary stream to js strings)\nhttp.createServer(function(req, res) {\n    var converterStream = iconv.decodeStream('win1251');\n    req.pipe(converterStream);\n\n    converterStream.on('data', function(str) {\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\n    });\n});\n\n// Convert encoding streaming example\nfs.createReadStream('file-in-win1251.txt')\n    .pipe(iconv.decodeStream('win1251'))\n    .pipe(iconv.encodeStream('ucs2'))\n    .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\nhttp.createServer(function(req, res) {\n    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n        assert(typeof body == 'string');\n        console.log(body); // full request body string\n    });\n});\n```\n\n### [Deprecated] Extend Node.js own encodings\n> NOTE: This doesn't work on latest Node versions. See [details](https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility).\n\n```javascript\n// After this call all Node basic primitives will understand iconv-lite encodings.\niconv.extendNodeEncodings();\n\n// Examples:\nbuf = new Buffer(str, 'win1251');\nbuf.write(str, 'gbk');\nstr = buf.toString('latin1');\nassert(Buffer.isEncoding('iso-8859-15'));\nBuffer.byteLength(str, 'us-ascii');\n\nhttp.createServer(function(req, res) {\n    req.setEncoding('big5');\n    req.collect(function(err, body) {\n        console.log(body);\n    });\n});\n\nfs.createReadStream(\"file.txt\", \"shift_jis\");\n\n// External modules are also supported (if they use Node primitives, which they probably do).\nrequest = require('request');\nrequest({\n    url: \"http://github.com/\", \n    encoding: \"cp932\"\n});\n\n// To remove extensions\niconv.undoExtendNodeEncodings();\n```\n\n## Supported encodings\n\n *  All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex.\n *  Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap.\n *  All widespread singlebyte encodings: Windows 125x family, ISO-8859 family, \n    IBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library. \n    Aliases like 'latin1', 'us-ascii' also supported.\n *  All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2312, GBK, GB18030, Big5, Shift_JIS, EUC-JP.\n\nSee [all supported encodings on wiki](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).\n\nMost singlebyte encodings are generated automatically from [node-iconv](https://github.com/bnoordhuis/node-iconv). Thank you Ben Noordhuis and libiconv authors!\n\nMultibyte encodings are generated from [Unicode.org mappings](http://www.unicode.org/Public/MAPPINGS/) and [WHATWG Encoding Standard mappings](http://encoding.spec.whatwg.org/). Thank you, respective authors!\n\n\n## Encoding/decoding speed\n\nComparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0). \nNote: your results may vary, so please always check on your hardware.\n\n    operation             iconv@2.1.4   iconv-lite@0.4.7\n    ----------------------------------------------------------\n    encode('win1251')     ~96 Mb/s      ~320 Mb/s\n    decode('win1251')     ~95 Mb/s      ~246 Mb/s\n\n## BOM handling\n\n * Decoding: BOM is stripped by default, unless overridden by passing `stripBOM: false` in options\n   (f.ex. `iconv.decode(buf, enc, {stripBOM: false})`).\n   A callback might also be given as a `stripBOM` parameter - it'll be called if BOM character was actually found.\n * If you want to detect UTF-8 BOM when decoding other encodings, use [node-autodetect-decoder-stream](https://github.com/danielgindi/node-autodetect-decoder-stream) module.\n * Encoding: No BOM added, unless overridden by `addBOM: true` option.\n\n## UTF-16 Encodings\n\nThis library supports UTF-16LE, UTF-16BE and UTF-16 encodings. First two are straightforward, but UTF-16 is trying to be\nsmart about endianness in the following ways:\n * Decoding: uses BOM and 'spaces heuristic' to determine input endianness. Default is UTF-16LE, but can be \n   overridden with `defaultEncoding: 'utf-16be'` option. Strips BOM unless `stripBOM: false`.\n * Encoding: uses UTF-16LE and writes BOM by default. Use `addBOM: false` to override.\n\n## Other notes\n\nWhen decoding, be sure to supply a Buffer to decode() method, otherwise [bad things usually happen](https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding).  \nUntranslatable characters are set to � or ?. No transliteration is currently supported.  \nNode versions 0.10.31 and 0.11.13 are buggy, don't use them (see #65, #77).  \n\n## Testing\n\n```bash\n$ git clone git@github.com:ashtuchkin/iconv-lite.git\n$ cd iconv-lite\n$ npm install\n$ npm test\n    \n$ # To view performance:\n$ node test/performance.js\n\n$ # To view test coverage:\n$ npm run coverage\n$ open coverage/lcov-report/index.html\n```\n\n## Adoption\n[![NPM](https://nodei.co/npm-dl/iconv-lite.png)](https://nodei.co/npm/iconv-lite/)\n[![Codeship Status for ashtuchkin/iconv-lite](https://www.codeship.com/projects/81670840-fa72-0131-4520-4a01a6c01acc/status)](https://www.codeship.com/projects/29053)\n",
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(str); // Do something with decoded strings, chunk-by-chunk.
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(body); // full request body string
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(body);
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/qs/package.json:  "readme": "# qs <sup>[![Version Badge][2]][1]</sup>\n\n[![Build Status][3]][4]\n[![dependency status][5]][6]\n[![dev dependency status][7]][8]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][11]][1]\n\nA querystring parsing and stringifying library with some added security.\n\nLead Maintainer: [Jordan Harband](https://github.com/ljharb)\n\nThe **qs** module was originally created and maintained by [TJ Holowaychuk](https://github.com/visionmedia/node-querystring).\n\n## Usage\n\n```javascript\nvar qs = require('qs');\nvar assert = require('assert');\n\nvar obj = qs.parse('a=c');\nassert.deepEqual(obj, { a: 'c' });\n\nvar str = qs.stringify(obj);\nassert.equal(str, 'a=c');\n```\n\n### Parsing Objects\n\n[](#preventEval)\n```javascript\nqs.parse(string, [options]);\n```\n\n**qs** allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets `[]`.\nFor example, the string `'foo[bar]=baz'` converts to:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar]=baz'), {\n    foo: {\n        bar: 'baz'\n    }\n});\n```\n\nWhen using the `plainObjects` option the parsed value is returned as a null object, created via `Object.create(null)` and as such you should be aware that prototype methods will not exist on it and a user may set those names to whatever value they like:\n\n```javascript\nvar nullObject = qs.parse('a[hasOwnProperty]=b', { plainObjects: true });\nassert.deepEqual(nullObject, { a: { hasOwnProperty: 'b' } });\n```\n\nBy default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use `plainObjects` as mentioned above, or set `allowPrototypes` to `true` which will allow user input to overwrite those properties. *WARNING* It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\n\n```javascript\nvar protoObject = qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true });\nassert.deepEqual(protoObject, { a: { hasOwnProperty: 'b' } });\n```\n\nURI encoded strings work too:\n\n```javascript\nassert.deepEqual(qs.parse('a%5Bb%5D=c'), {\n    a: { b: 'c' }\n});\n```\n\nYou can also nest your objects, like `'foo[bar][baz]=foobarbaz'`:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar][baz]=foobarbaz'), {\n    foo: {\n        bar: {\n            baz: 'foobarbaz'\n        }\n    }\n});\n```\n\nBy default, when nesting objects **qs** will only parse up to 5 children deep. This means if you attempt to parse a string like\n`'a[b][c][d][e][f][g][h][i]=j'` your resulting object will be:\n\n```javascript\nvar expected = {\n    a: {\n        b: {\n            c: {\n                d: {\n                    e: {\n                        f: {\n                            '[g][h][i]': 'j'\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nvar string = 'a[b][c][d][e][f][g][h][i]=j';\nassert.deepEqual(qs.parse(string), expected);\n```\n\nThis depth can be overridden by passing a `depth` option to `qs.parse(string, [options])`:\n\n```javascript\nvar deep = qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1 });\nassert.deepEqual(deep, { a: { b: { '[c][d][e][f][g][h][i]': 'j' } } });\n```\n\nThe depth limit helps mitigate abuse when **qs** is used to parse user input, and it is recommended to keep it a reasonably small number.\n\nFor similar reasons, by default **qs** will only parse up to 1000 parameters. This can be overridden by passing a `parameterLimit` option:\n\n```javascript\nvar limited = qs.parse('a=b&c=d', { parameterLimit: 1 });\nassert.deepEqual(limited, { a: 'b' });\n```\n\nTo bypass the leading question mark, use `ignoreQueryPrefix`:\n\n```javascript\nvar prefixed = qs.parse('?a=b&c=d', { ignoreQueryPrefix: true });\nassert.deepEqual(prefixed, { a: 'b', c: 'd' });\n```\n\nAn optional delimiter can also be passed:\n\n```javascript\nvar delimited = qs.parse('a=b;c=d', { delimiter: ';' });\nassert.deepEqual(delimited, { a: 'b', c: 'd' });\n```\n\nDelimiters can be a regular expression too:\n\n```javascript\nvar regexed = qs.parse('a=b;c=d,e=f', { delimiter: /[;,]/ });\nassert.deepEqual(regexed, { a: 'b', c: 'd', e: 'f' });\n```\n\nOption `allowDots` can be used to enable dot notation:\n\n```javascript\nvar withDots = qs.parse('a.b=c', { allowDots: true });\nassert.deepEqual(withDots, { a: { b: 'c' } });\n```\n\n### Parsing Arrays\n\n**qs** can also parse arrays using a similar `[]` notation:\n\n```javascript\nvar withArray = qs.parse('a[]=b&a[]=c');\nassert.deepEqual(withArray, { a: ['b', 'c'] });\n```\n\nYou may specify an index as well:\n\n```javascript\nvar withIndexes = qs.parse('a[1]=c&a[0]=b');\nassert.deepEqual(withIndexes, { a: ['b', 'c'] });\n```\n\nNote that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number\nto create an array. When creating arrays with specific indices, **qs** will compact a sparse array to only the existing values preserving\ntheir order:\n\n```javascript\nvar noSparse = qs.parse('a[1]=b&a[15]=c');\nassert.deepEqual(noSparse, { a: ['b', 'c'] });\n```\n\nNote that an empty string is also a value, and will be preserved:\n\n```javascript\nvar withEmptyString = qs.parse('a[]=&a[]=b');\nassert.deepEqual(withEmptyString, { a: ['', 'b'] });\n\nvar withIndexedEmptyString = qs.parse('a[0]=b&a[1]=&a[2]=c');\nassert.deepEqual(withIndexedEmptyString, { a: ['b', '', 'c'] });\n```\n\n**qs** will also limit specifying indices in an array to a maximum index of `20`. Any array members with an index of greater than `20` will\ninstead be converted to an object with the index as the key:\n\n```javascript\nvar withMaxIndex = qs.parse('a[100]=b');\nassert.deepEqual(withMaxIndex, { a: { '100': 'b' } });\n```\n\nThis limit can be overridden by passing an `arrayLimit` option:\n\n```javascript\nvar withArrayLimit = qs.parse('a[1]=b', { arrayLimit: 0 });\nassert.deepEqual(withArrayLimit, { a: { '1': 'b' } });\n```\n\nTo disable array parsing entirely, set `parseArrays` to `false`.\n\n```javascript\nvar noParsingArrays = qs.parse('a[]=b', { parseArrays: false });\nassert.deepEqual(noParsingArrays, { a: { '0': 'b' } });\n```\n\nIf you mix notations, **qs** will merge the two items into an object:\n\n```javascript\nvar mixedNotation = qs.parse('a[0]=b&a[b]=c');\nassert.deepEqual(mixedNotation, { a: { '0': 'b', b: 'c' } });\n```\n\nYou can also create arrays of objects:\n\n```javascript\nvar arraysOfObjects = qs.parse('a[][b]=c');\nassert.deepEqual(arraysOfObjects, { a: [{ b: 'c' }] });\n```\n\n### Stringifying\n\n[](#preventEval)\n```javascript\nqs.stringify(object, [options]);\n```\n\nWhen stringifying, **qs** by default URI encodes output. Objects are stringified as you would expect:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b' }), 'a=b');\nassert.equal(qs.stringify({ a: { b: 'c' } }), 'a%5Bb%5D=c');\n```\n\nThis encoding can be disabled by setting the `encode` option to `false`:\n\n```javascript\nvar unencoded = qs.stringify({ a: { b: 'c' } }, { encode: false });\nassert.equal(unencoded, 'a[b]=c');\n```\n\nEncoding can be disabled for keys by setting the `encodeValuesOnly` option to `true`:\n```javascript\nvar encodedValues = qs.stringify(\n    { a: 'b', c: ['d', 'e=f'], f: [['g'], ['h']] },\n    { encodeValuesOnly: true }\n);\nassert.equal(encodedValues,'a=b&c[0]=d&c[1]=e%3Df&f[0][0]=g&f[1][0]=h');\n```\n\nThis encoding can also be replaced by a custom encoding method set as `encoder` option:\n\n```javascript\nvar encoded = qs.stringify({ a: { b: 'c' } }, { encoder: function (str) {\n    // Passed in values `a`, `b`, `c`\n    return // Return encoded string\n}})\n```\n\n_(Note: the `encoder` option does not apply if `encode` is `false`)_\n\nAnalogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:\n\n```javascript\nvar decoded = qs.parse('x=z', { decoder: function (str) {\n    // Passed in values `x`, `z`\n    return // Return decoded string\n}})\n```\n\nExamples beyond this point will be shown as though the output is not URI encoded for clarity. Please note that the return values in these cases *will* be URI encoded during real usage.\n\nWhen arrays are stringified, by default they are given explicit indices:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] });\n// 'a[0]=b&a[1]=c&a[2]=d'\n```\n\nYou may override this by setting the `indices` option to `false`:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] }, { indices: false });\n// 'a=b&a=c&a=d'\n```\n\nYou may use the `arrayFormat` option to specify the format of the output array:\n\n```javascript\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' })\n// 'a[0]=b&a[1]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' })\n// 'a[]=b&a[]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' })\n// 'a=b&a=c'\n```\n\nWhen objects are stringified, by default they use bracket notation:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } });\n// 'a[b][c]=d&a[b][e]=f'\n```\n\nYou may override this to use dot notation by setting the `allowDots` option to `true`:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } }, { allowDots: true });\n// 'a.b.c=d&a.b.e=f'\n```\n\nEmpty strings and null values will omit the value, but the equals sign (=) remains in place:\n\n```javascript\nassert.equal(qs.stringify({ a: '' }), 'a=');\n```\n\nKey with no values (such as an empty object or array) will return nothing:\n\n```javascript\nassert.equal(qs.stringify({ a: [] }), '');\nassert.equal(qs.stringify({ a: {} }), '');\nassert.equal(qs.stringify({ a: [{}] }), '');\nassert.equal(qs.stringify({ a: { b: []} }), '');\nassert.equal(qs.stringify({ a: { b: {}} }), '');\n```\n\nProperties that are set to `undefined` will be omitted entirely:\n\n```javascript\nassert.equal(qs.stringify({ a: null, b: undefined }), 'a=');\n```\n\nThe query string may optionally be prepended with a question mark:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { addQueryPrefix: true }), '?a=b&c=d');\n```\n\nThe delimiter may be overridden with stringify as well:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { delimiter: ';' }), 'a=b;c=d');\n```\n\nIf you only want to override the serialization of `Date` objects, you can provide a `serializeDate` option:\n\n```javascript\nvar date = new Date(7);\nassert.equal(qs.stringify({ a: date }), 'a=1970-01-01T00:00:00.007Z'.replace(/:/g, '%3A'));\nassert.equal(\n    qs.stringify({ a: date }, { serializeDate: function (d) { return d.getTime(); } }),\n    'a=7'\n);\n```\n\nYou may use the `sort` option to affect the order of parameter keys:\n\n```javascript\nfunction alphabeticalSort(a, b) {\n    return a.localeCompare(b);\n}\nassert.equal(qs.stringify({ a: 'c', z: 'y', b : 'f' }, { sort: alphabeticalSort }), 'a=c&b=f&z=y');\n```\n\nFinally, you can use the `filter` option to restrict which keys will be included in the stringified output.\nIf you pass a function, it will be called for each key to obtain the replacement value. Otherwise, if you\npass an array, it will be used to select properties and array indices for stringification:\n\n```javascript\nfunction filterFunc(prefix, value) {\n    if (prefix == 'b') {\n        // Return an `undefined` value to omit a property.\n        return;\n    }\n    if (prefix == 'e[f]') {\n        return value.getTime();\n    }\n    if (prefix == 'e[g][0]') {\n        return value * 2;\n    }\n    return value;\n}\nqs.stringify({ a: 'b', c: 'd', e: { f: new Date(123), g: [2] } }, { filter: filterFunc });\n// 'a=b&c=d&e[f]=123&e[g][0]=4'\nqs.stringify({ a: 'b', c: 'd', e: 'f' }, { filter: ['a', 'e'] });\n// 'a=b&e=f'\nqs.stringify({ a: ['b', 'c', 'd'], e: 'f' }, { filter: ['a', 0, 2] });\n// 'a[0]=b&a[2]=d'\n```\n\n### Handling of `null` values\n\nBy default, `null` values are treated like empty strings:\n\n```javascript\nvar withNull = qs.stringify({ a: null, b: '' });\nassert.equal(withNull, 'a=&b=');\n```\n\nParsing does not distinguish between parameters with and without equal signs. Both are converted to empty strings.\n\n```javascript\nvar equalsInsensitive = qs.parse('a&b=');\nassert.deepEqual(equalsInsensitive, { a: '', b: '' });\n```\n\nTo distinguish between `null` values and empty strings use the `strictNullHandling` flag. In the result string the `null`\nvalues have no `=` sign:\n\n```javascript\nvar strictNull = qs.stringify({ a: null, b: '' }, { strictNullHandling: true });\nassert.equal(strictNull, 'a&b=');\n```\n\nTo parse values without `=` back to `null` use the `strictNullHandling` flag:\n\n```javascript\nvar parsedStrictNull = qs.parse('a&b=', { strictNullHandling: true });\nassert.deepEqual(parsedStrictNull, { a: null, b: '' });\n```\n\nTo completely skip rendering keys with `null` values, use the `skipNulls` flag:\n\n```javascript\nvar nullsSkipped = qs.stringify({ a: 'b', c: null}, { skipNulls: true });\nassert.equal(nullsSkipped, 'a=b');\n```\n\n### Dealing with special character sets\n\nBy default the encoding and decoding of characters is done in `utf-8`. If you\nwish to encode querystrings to a different character set (i.e.\n[Shift JIS](https://en.wikipedia.org/wiki/Shift_JIS)) you can use the\n[`qs-iconv`](https://github.com/martinheidegger/qs-iconv) library:\n\n```javascript\nvar encoder = require('qs-iconv/encoder')('shift_jis');\nvar shiftJISEncoded = qs.stringify({ a: 'こんにちは！' }, { encoder: encoder });\nassert.equal(shiftJISEncoded, 'a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I');\n```\n\nThis also works for decoding of query strings:\n\n```javascript\nvar decoder = require('qs-iconv/decoder')('shift_jis');\nvar obj = qs.parse('a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I', { decoder: decoder });\nassert.deepEqual(obj, { a: 'こんにちは！' });\n```\n\n### RFC 3986 and RFC 1738 space encoding\n\nRFC3986 used as default option and encodes ' ' to *%20* which is backward compatible.\nIn the same time, output can be stringified as per RFC1738 with ' ' equal to '+'.\n\n```\nassert.equal(qs.stringify({ a: 'b c' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC3986' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC1738' }), 'a=b+c');\n```\n\n[1]: https://npmjs.org/package/qs\n[2]: http://versionbadg.es/ljharb/qs.svg\n[3]: https://api.travis-ci.org/ljharb/qs.svg\n[4]: https://travis-ci.org/ljharb/qs\n[5]: https://david-dm.org/ljharb/qs.svg\n[6]: https://david-dm.org/ljharb/qs\n[7]: https://david-dm.org/ljharb/qs/dev-status.svg\n[8]: https://david-dm.org/ljharb/qs?type=dev\n[9]: https://ci.testling.com/ljharb/qs.png\n[10]: https://ci.testling.com/ljharb/qs\n[11]: https://nodei.co/npm/qs.png?downloads=true&stars=true\n[license-image]: http://img.shields.io/npm/l/qs.svg\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/qs.svg\n[downloads-url]: http://npm-stat.com/charts.html?package=qs\n",
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/qs/README.md:Analogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:
./examples/express/node_modules/log-requests/node_modules/body-parser/node_modules/qs/CHANGELOG.md:- [**#24**](https://github.com/ljharb/qs/issues/24) Changelog? Semver?
./examples/express/node_modules/log-requests/node_modules/body-parser/README.md:// POST /login gets urlencoded bodies
./examples/express/node_modules/log-requests/node_modules/body-parser/README.md:app.post('/login', urlencodedParser, function (req, res) {
./examples/express/node_modules/log-requests/node_modules/cookie-parser/package.json:  "readme": "# cookie-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nParse `Cookie` header and populate `req.cookies` with an object keyed by the cookie\nnames. Optionally you may enable signed cookie support by passing a `secret` string,\nwhich assigns `req.secret` so it may be used by other middleware.\n\n## Installation\n\n```sh\n$ npm install cookie-parser\n```\n\n## API\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n```\n\n### cookieParser(secret, options)\n\n- `secret` a string or array used for signing cookies. This is optional and if not specified, will not parse signed cookies. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n- `options` an object that is passed to `cookie.parse` as the second option. See [cookie](https://www.npmjs.org/package/cookie) for more information.\n  - `decode` a function to decode the value of the cookie\n\n### cookieParser.JSONCookie(str)\n\nParse a cookie value as a JSON cookie. This will return the parsed JSON value if it was a JSON cookie, otherwise it will return the passed value.\n\n### cookieParser.JSONCookies(cookies)\n\nGiven an object, this will iterate over the keys and call `JSONCookie` on each value. This will return the same object passed in.\n\n### cookieParser.signedCookie(str, secret)\n\nParse a cookie value as a signed cookie. This will return the parsed unsigned value if it was a signed cookie and the signature was valid, otherwise it will return the passed value.\n\nThe `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n\n### cookieParser.signedCookies(cookies, secret)\n\nGiven an object, this will iterate over the keys and check if any value is a signed cookie. If it is a signed cookie and the signature is valid, the key will be deleted from the object and added to the new object that is returned.\n\nThe `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n\n## Example\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n\napp.get('/', function(req, res) {\n  console.log('Cookies: ', req.cookies)\n})\n\napp.listen(8080)\n\n// curl command that sends an HTTP request with two cookies\n// curl http://127.0.0.1:8080 --cookie \"Cho=Kim;Greet=Hello\"\n```\n\n### [MIT Licensed](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie-parser.svg\n[npm-url]: https://npmjs.org/package/cookie-parser\n[node-version-image]: https://img.shields.io/node/v/cookie-parser.svg\n[node-version-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/expressjs/cookie-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/cookie-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/cookie-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie-parser.svg\n[downloads-url]: https://npmjs.org/package/cookie-parser\n",
./examples/express/node_modules/log-requests/node_modules/cookie-parser/README.md:  console.log('Cookies: ', req.cookies)
./examples/express/node_modules/log-requests/node_modules/lodash/string/template.js:  // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
./examples/express/node_modules/log-requests/node_modules/lodash/package.json:  "readme": "# lodash v3.10.1\n\nThe [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash](https://lodash.com/) exported as [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) modules.\n\nGenerated using [lodash-cli](https://www.npmjs.com/package/lodash-cli):\n```bash\n$ lodash modularize modern exports=node -o ./\n$ lodash modern -d -o ./index.js\n```\n\n## Installation\n\nUsing npm:\n\n```bash\n$ {sudo -H} npm i -g npm\n$ npm i --save lodash\n```\n\nIn Node.js/io.js:\n\n```js\n// load the modern build\nvar _ = require('lodash');\n// or a method category\nvar array = require('lodash/array');\n// or a method (great for smaller builds with browserify/webpack)\nvar chunk = require('lodash/array/chunk');\n```\n\nSee the [package source](https://github.com/lodash/lodash/tree/3.10.1-npm) for more details.\n\n**Note:**<br>\nDon’t assign values to the [special variable](http://nodejs.org/api/repl.html#repl_repl_features) `_` when in the REPL.<br>\nInstall [n_](https://www.npmjs.com/package/n_) for a REPL that includes lodash by default.\n\n## Module formats\n\nlodash is also available in a variety of other builds & module formats.\n\n * npm packages for [modern](https://www.npmjs.com/package/lodash), [compatibility](https://www.npmjs.com/package/lodash-compat), & [per method](https://www.npmjs.com/browse/keyword/lodash-modularized) builds\n * AMD modules for [modern](https://github.com/lodash/lodash/tree/3.10.1-amd) & [compatibility](https://github.com/lodash/lodash-compat/tree/3.10.1-amd) builds\n * ES modules for the [modern](https://github.com/lodash/lodash/tree/3.10.1-es) build\n\n## Further Reading\n\n  * [API Documentation](https://lodash.com/docs)\n  * [Build Differences](https://github.com/lodash/lodash/wiki/Build-Differences)\n  * [Changelog](https://github.com/lodash/lodash/wiki/Changelog)\n  * [Roadmap](https://github.com/lodash/lodash/wiki/Roadmap)\n  * [More Resources](https://github.com/lodash/lodash/wiki/Resources)\n\n## Features\n\n * ~100% [code coverage](https://coveralls.io/r/lodash)\n * Follows [semantic versioning](http://semver.org/) for releases\n * [Lazily evaluated](http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/) chaining\n * [_(…)](https://lodash.com/docs#_) supports implicit chaining\n * [_.ary](https://lodash.com/docs#ary) & [_.rearg](https://lodash.com/docs#rearg) to change function argument limits & order\n * [_.at](https://lodash.com/docs#at) for cherry-picking collection values\n * [_.attempt](https://lodash.com/docs#attempt) to execute functions which may error without a try-catch\n * [_.before](https://lodash.com/docs#before) to complement [_.after](https://lodash.com/docs#after)\n * [_.bindKey](https://lodash.com/docs#bindKey) for binding [*“lazy”*](http://michaux.ca/articles/lazy-function-definition-pattern) defined methods\n * [_.chunk](https://lodash.com/docs#chunk) for splitting an array into chunks of a given size\n * [_.clone](https://lodash.com/docs#clone) supports shallow cloning of `Date` & `RegExp` objects\n * [_.cloneDeep](https://lodash.com/docs#cloneDeep) for deep cloning arrays & objects\n * [_.curry](https://lodash.com/docs#curry) & [_.curryRight](https://lodash.com/docs#curryRight) for creating [curried](http://hughfdjackson.com/javascript/why-curry-helps/) functions\n * [_.debounce](https://lodash.com/docs#debounce) & [_.throttle](https://lodash.com/docs#throttle) are cancelable & accept options for more control\n * [_.defaultsDeep](https://lodash.com/docs#defaultsDeep) for recursively assigning default properties\n * [_.fill](https://lodash.com/docs#fill) to fill arrays with values\n * [_.findKey](https://lodash.com/docs#findKey) for finding keys\n * [_.flow](https://lodash.com/docs#flow) to complement [_.flowRight](https://lodash.com/docs#flowRight) (a.k.a `_.compose`)\n * [_.forEach](https://lodash.com/docs#forEach) supports exiting early\n * [_.forIn](https://lodash.com/docs#forIn) for iterating all enumerable properties\n * [_.forOwn](https://lodash.com/docs#forOwn) for iterating own properties\n * [_.get](https://lodash.com/docs#get) & [_.set](https://lodash.com/docs#set) for deep property getting & setting\n * [_.gt](https://lodash.com/docs#gt), [_.gte](https://lodash.com/docs#gte), [_.lt](https://lodash.com/docs#lt), & [_.lte](https://lodash.com/docs#lte) relational methods\n * [_.inRange](https://lodash.com/docs#inRange) for checking whether a number is within a given range\n * [_.isNative](https://lodash.com/docs#isNative) to check for native functions\n * [_.isPlainObject](https://lodash.com/docs#isPlainObject) & [_.toPlainObject](https://lodash.com/docs#toPlainObject) to check for & convert to `Object` objects\n * [_.isTypedArray](https://lodash.com/docs#isTypedArray) to check for typed arrays\n * [_.mapKeys](https://lodash.com/docs#mapKeys) for mapping keys to an object\n * [_.matches](https://lodash.com/docs#matches) supports deep object comparisons\n * [_.matchesProperty](https://lodash.com/docs#matchesProperty) to complement [_.matches](https://lodash.com/docs#matches) & [_.property](https://lodash.com/docs#property)\n * [_.merge](https://lodash.com/docs#merge) for a deep [_.extend](https://lodash.com/docs#extend)\n * [_.method](https://lodash.com/docs#method) & [_.methodOf](https://lodash.com/docs#methodOf) to create functions that invoke methods\n * [_.modArgs](https://lodash.com/docs#modArgs) for more advanced functional composition\n * [_.parseInt](https://lodash.com/docs#parseInt) for consistent cross-environment behavior\n * [_.pull](https://lodash.com/docs#pull), [_.pullAt](https://lodash.com/docs#pullAt), & [_.remove](https://lodash.com/docs#remove) for mutating arrays\n * [_.random](https://lodash.com/docs#random) supports returning floating-point numbers\n * [_.restParam](https://lodash.com/docs#restParam) & [_.spread](https://lodash.com/docs#spread) for applying rest parameters & spreading arguments to functions\n * [_.runInContext](https://lodash.com/docs#runInContext) for collisionless mixins & easier mocking\n * [_.slice](https://lodash.com/docs#slice) for creating subsets of array-like values\n * [_.sortByAll](https://lodash.com/docs#sortByAll) & [_.sortByOrder](https://lodash.com/docs#sortByOrder) for sorting by multiple properties & orders\n * [_.support](https://lodash.com/docs#support) for flagging environment features\n * [_.template](https://lodash.com/docs#template) supports [*“imports”*](https://lodash.com/docs#templateSettings-imports) options & [ES template delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components)\n * [_.transform](https://lodash.com/docs#transform) as a powerful alternative to [_.reduce](https://lodash.com/docs#reduce) for transforming objects\n * [_.unzipWith](https://lodash.com/docs#unzipWith) & [_.zipWith](https://lodash.com/docs#zipWith) to specify how grouped values should be combined\n * [_.valuesIn](https://lodash.com/docs#valuesIn) for getting values of all enumerable properties\n * [_.xor](https://lodash.com/docs#xor) to complement [_.difference](https://lodash.com/docs#difference), [_.intersection](https://lodash.com/docs#intersection), & [_.union](https://lodash.com/docs#union)\n * [_.add](https://lodash.com/docs#add), [_.round](https://lodash.com/docs#round), [_.sum](https://lodash.com/docs#sum), &\n   [more](https://lodash.com/docs \"_.ceil & _.floor\") math methods\n * [_.bind](https://lodash.com/docs#bind), [_.curry](https://lodash.com/docs#curry), [_.partial](https://lodash.com/docs#partial), &\n   [more](https://lodash.com/docs \"_.bindKey, _.curryRight, _.partialRight\") support customizable argument placeholders\n * [_.capitalize](https://lodash.com/docs#capitalize), [_.trim](https://lodash.com/docs#trim), &\n   [more](https://lodash.com/docs \"_.camelCase, _.deburr, _.endsWith, _.escapeRegExp, _.kebabCase, _.pad, _.padLeft, _.padRight, _.repeat, _.snakeCase, _.startCase, _.startsWith, _.trimLeft, _.trimRight, _.trunc, _.words\") string methods\n * [_.clone](https://lodash.com/docs#clone), [_.isEqual](https://lodash.com/docs#isEqual), &\n   [more](https://lodash.com/docs \"_.assign, _.cloneDeep, _.merge\") accept customizer callbacks\n * [_.dropWhile](https://lodash.com/docs#dropWhile), [_.takeWhile](https://lodash.com/docs#takeWhile), &\n   [more](https://lodash.com/docs \"_.drop, _.dropRight, _.dropRightWhile, _.take, _.takeRight, _.takeRightWhile\") to complement [_.first](https://lodash.com/docs#first), [_.initial](https://lodash.com/docs#initial), [_.last](https://lodash.com/docs#last), & [_.rest](https://lodash.com/docs#rest)\n * [_.findLast](https://lodash.com/docs#findLast), [_.findLastKey](https://lodash.com/docs#findLastKey), &\n   [more](https://lodash.com/docs \"_.curryRight, _.dropRight, _.dropRightWhile, _.flowRight, _.forEachRight, _.forInRight, _.forOwnRight, _.padRight, partialRight, _.takeRight, _.trimRight, _.takeRightWhile\") right-associative methods\n * [_.includes](https://lodash.com/docs#includes), [_.toArray](https://lodash.com/docs#toArray), &\n   [more](https://lodash.com/docs \"_.at, _.countBy, _.every, _.filter, _.find, _.findLast, _.findWhere, _.forEach, _.forEachRight, _.groupBy, _.indexBy, _.invoke, _.map, _.max, _.min, _.partition, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.size, _.some, _.sortBy, _.sortByAll, _.sortByOrder, _.sum, _.where\") accept strings\n * [_#commit](https://lodash.com/docs#prototype-commit) & [_#plant](https://lodash.com/docs#prototype-plant) for working with chain sequences\n * [_#thru](https://lodash.com/docs#thru) to pass values thru a chain sequence\n\n## Support\n\nTested in Chrome 43-44, Firefox 38-39, IE 6-11, MS Edge, Safari 5-8, ChakraNode 0.12.2, io.js 2.5.0, Node.js 0.8.28, 0.10.40, & 0.12.7, PhantomJS 1.9.8, RingoJS 0.11, & Rhino 1.7.6.\nAutomated [browser](https://saucelabs.com/u/lodash) & [CI](https://travis-ci.org/lodash/lodash/) test runs are available. Special thanks to [Sauce Labs](https://saucelabs.com/) for providing automated browser testing.\n",
./examples/express/node_modules/log-requests/node_modules/lodash/array/fill.js: * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/array/remove.js: * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/array/remove.js: * console.log(evens);
./examples/express/node_modules/log-requests/node_modules/lodash/array/pullAt.js: * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/array/pullAt.js: * console.log(evens);
./examples/express/node_modules/log-requests/node_modules/lodash/array/pull.js: * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/chain/wrapperCommit.js: * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/chain/wrapperCommit.js: * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/chain/wrapperCommit.js: * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/chain/wrapperConcat.js: * console.log(wrapped.value());
./examples/express/node_modules/log-requests/node_modules/lodash/chain/wrapperConcat.js: * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/chain/wrapperReverse.js: * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/README.md:  * [Changelog](https://github.com/lodash/lodash/wiki/Changelog)
./examples/express/node_modules/log-requests/node_modules/lodash/README.md: * [Lazily evaluated](http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/) chaining
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(evens);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(evens);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(wrapped.value());
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(n);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs each value from left to right and returns the array
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(n, key);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(n);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs each value from right to left and returns the array
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(_.now() - stamp);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs the number of milliseconds it took for the deferred function to be invoked
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log('done saving!');
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'done saving!' after the two async saves have completed
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *     console.log('clicked ' + this.label);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'clicked docs' when the element is clicked
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(text);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // logs 'deferred' after one or more milliseconds
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(text);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'later' after one second
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(key);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(key);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(key);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'a' and 'b' (iteration order is not guaranteed)
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(key);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(object.a[0].b.c);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(object.x[0].y.z);
./examples/express/node_modules/log-requests/node_modules/lodash/index.js:      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
./examples/express/node_modules/log-requests/node_modules/lodash/date/now.js: *   console.log(_.now() - stamp);
./examples/express/node_modules/log-requests/node_modules/lodash/date/now.js: * // => logs the number of milliseconds it took for the deferred function to be invoked
./examples/express/node_modules/log-requests/node_modules/lodash/collection/forEachRight.js: *   console.log(n);
./examples/express/node_modules/log-requests/node_modules/lodash/collection/forEachRight.js: * // => logs each value from right to left and returns the array
./examples/express/node_modules/log-requests/node_modules/lodash/collection/forEach.js: *   console.log(n);
./examples/express/node_modules/log-requests/node_modules/lodash/collection/forEach.js: * // => logs each value from left to right and returns the array
./examples/express/node_modules/log-requests/node_modules/lodash/collection/forEach.js: *   console.log(n, key);
./examples/express/node_modules/log-requests/node_modules/lodash/collection/forEach.js: * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
./examples/express/node_modules/log-requests/node_modules/lodash/object/set.js: * console.log(object.a[0].b.c);
./examples/express/node_modules/log-requests/node_modules/lodash/object/set.js: * console.log(object.x[0].y.z);
./examples/express/node_modules/log-requests/node_modules/lodash/object/forIn.js: *   console.log(key);
./examples/express/node_modules/log-requests/node_modules/lodash/object/forIn.js: * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
./examples/express/node_modules/log-requests/node_modules/lodash/object/forOwnRight.js: *   console.log(key);
./examples/express/node_modules/log-requests/node_modules/lodash/object/forOwnRight.js: * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
./examples/express/node_modules/log-requests/node_modules/lodash/object/forInRight.js: *   console.log(key);
./examples/express/node_modules/log-requests/node_modules/lodash/object/forInRight.js: * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
./examples/express/node_modules/log-requests/node_modules/lodash/object/forOwn.js: *   console.log(key);
./examples/express/node_modules/log-requests/node_modules/lodash/object/forOwn.js: * // => logs 'a' and 'b' (iteration order is not guaranteed)
./examples/express/node_modules/log-requests/node_modules/lodash/function/delay.js: *   console.log(text);
./examples/express/node_modules/log-requests/node_modules/lodash/function/delay.js: * // => logs 'later' after one second
./examples/express/node_modules/log-requests/node_modules/lodash/function/after.js: *   console.log('done saving!');
./examples/express/node_modules/log-requests/node_modules/lodash/function/after.js: * // => logs 'done saving!' after the two async saves have completed
./examples/express/node_modules/log-requests/node_modules/lodash/function/bindAll.js: *     console.log('clicked ' + this.label);
./examples/express/node_modules/log-requests/node_modules/lodash/function/bindAll.js: * // => logs 'clicked docs' when the element is clicked
./examples/express/node_modules/log-requests/node_modules/lodash/function/defer.js: *   console.log(text);
./examples/express/node_modules/log-requests/node_modules/lodash/function/defer.js: * // logs 'deferred' after one or more milliseconds
./examples/express/node_modules/log-requests/README.md:# log-requests
./examples/express/node_modules/log-requests/README.md:A service that simply echos and logs all requests sent to it
./examples/express/node_modules/log-requests/README.md:npm install log-requests
./examples/express/node_modules/log-requests/README.md:log-requests --help
./examples/express/node_modules/log-requests/README.md:Usage: log-requests [options]
./examples/express/node_modules/log-requests/README.md:A service that simply echos and logs all requests sent to it
./examples/express/node_modules/log-requests/README.md:  to log requests to http://localhost:2345:
./examples/express/node_modules/log-requests/README.md:  log-requests
./examples/express/node_modules/log-requests/README.md:  to log requests to http://localhost:2000:
./examples/express/node_modules/log-requests/README.md:  log-requests -p 2000
./examples/express/node_modules/log-requests/README.md:  log-requests --port 2000
./examples/express/node_modules/log-requests/README.md:  to log just the url and cookies for requests to http://localhost:2000:
./examples/express/node_modules/log-requests/README.md:  log-requests -p 2000 -uc
./examples/express/node_modules/log-requests/README.md:  log-requests --port 2000 --url --cookies
./examples/express/node_modules/log-requests/README.md:  to log just the headers query and body for requests to http://localhost:2000:
./examples/express/node_modules/log-requests/README.md:  log-requests -p 2000 -hqb
./examples/express/node_modules/log-requests/README.md:  log-requests -p 2000 --headers --query --body
./examples/express/node_modules/log-requests/README.md:log-requests
./examples/express/node_modules/log-requests/index.js:const logger = require('./logger')
./examples/express/node_modules/log-requests/index.js:  .description('A service that simply echos and logs all requests sent to it')
./examples/express/node_modules/log-requests/index.js:  console.log(`  Examples:
./examples/express/node_modules/log-requests/index.js:    to log requests to http://localhost:2345:
./examples/express/node_modules/log-requests/index.js:    ${chalk.green('log-requests')}
./examples/express/node_modules/log-requests/index.js:    to log requests to http://localhost:2000:
./examples/express/node_modules/log-requests/index.js:    ${chalk.green('log-requests -p 2000')}
./examples/express/node_modules/log-requests/index.js:    ${chalk.green('log-requests --port 2000')}
./examples/express/node_modules/log-requests/index.js:    to log just the url and cookies for requests to http://localhost:2000:
./examples/express/node_modules/log-requests/index.js:    ${chalk.green('log-requests -p 2000 -uc')}
./examples/express/node_modules/log-requests/index.js:    ${chalk.green('log-requests --port 2000 --url --cookies')}
./examples/express/node_modules/log-requests/index.js:    to log just the headers query and body for requests to http://localhost:2000:
./examples/express/node_modules/log-requests/index.js:    ${chalk.green('log-requests -p 2000 -hqb')}
./examples/express/node_modules/log-requests/index.js:    ${chalk.green('log-requests -p 2000 --headers --query --body')}
./examples/express/node_modules/log-requests/index.js:logger(program.parse(process.argv))
./examples/express/node_modules/express/node_modules/safe-buffer/package.json:  "readme": "# safe-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/safe-buffer/master.svg\n[travis-url]: https://travis-ci.org/feross/safe-buffer\n[npm-image]: https://img.shields.io/npm/v/safe-buffer.svg\n[npm-url]: https://npmjs.org/package/safe-buffer\n[downloads-image]: https://img.shields.io/npm/dm/safe-buffer.svg\n[downloads-url]: https://npmjs.org/package/safe-buffer\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n#### Safer Node.js Buffer API\n\n**Use the new Node.js Buffer APIs (`Buffer.from`, `Buffer.alloc`,\n`Buffer.allocUnsafe`, `Buffer.allocUnsafeSlow`) in all versions of Node.js.**\n\n**Uses the built-in implementation when available.**\n\n## install\n\n```\nnpm install safe-buffer\n```\n\n## usage\n\nThe goal of this package is to provide a safe replacement for the node.js `Buffer`.\n\nIt's a drop-in replacement for `Buffer`. You can use it by adding one `require` line to\nthe top of your node.js modules:\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n\n// Existing buffer code will continue to work without issues:\n\nnew Buffer('hey', 'utf8')\nnew Buffer([1, 2, 3], 'utf8')\nnew Buffer(obj)\nnew Buffer(16) // create an uninitialized buffer (potentially unsafe)\n\n// But you can use these new explicit APIs to make clear what you want:\n\nBuffer.from('hey', 'utf8') // convert from many types to a Buffer\nBuffer.alloc(16) // create a zero-filled buffer (safe)\nBuffer.allocUnsafe(16) // create an uninitialized buffer (potentially unsafe)\n```\n\n## api\n\n### Class Method: Buffer.from(array)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `array` {Array}\n\nAllocates a new `Buffer` using an `array` of octets.\n\n```js\nconst buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]);\n  // creates a new Buffer containing ASCII bytes\n  // ['b','u','f','f','e','r']\n```\n\nA `TypeError` will be thrown if `array` is not an `Array`.\n\n### Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `arrayBuffer` {ArrayBuffer} The `.buffer` property of a `TypedArray` or\n  a `new ArrayBuffer()`\n* `byteOffset` {Number} Default: `0`\n* `length` {Number} Default: `arrayBuffer.length - byteOffset`\n\nWhen passed a reference to the `.buffer` property of a `TypedArray` instance,\nthe newly created `Buffer` will share the same allocated memory as the\nTypedArray.\n\n```js\nconst arr = new Uint16Array(2);\narr[0] = 5000;\narr[1] = 4000;\n\nconst buf = Buffer.from(arr.buffer); // shares the memory with arr;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 a0 0f>\n\n// changing the TypedArray changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 70 17>\n```\n\nThe optional `byteOffset` and `length` arguments specify a memory range within\nthe `arrayBuffer` that will be shared by the `Buffer`.\n\n```js\nconst ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\nconsole.log(buf.length);\n  // Prints: 2\n```\n\nA `TypeError` will be thrown if `arrayBuffer` is not an `ArrayBuffer`.\n\n### Class Method: Buffer.from(buffer)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `buffer` {Buffer}\n\nCopies the passed `buffer` data onto a new `Buffer` instance.\n\n```js\nconst buf1 = Buffer.from('buffer');\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\nconsole.log(buf1.toString());\n  // 'auffer'\nconsole.log(buf2.toString());\n  // 'buffer' (copy is not changed)\n```\n\nA `TypeError` will be thrown if `buffer` is not a `Buffer`.\n\n### Class Method: Buffer.from(str[, encoding])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `str` {String} String to encode.\n* `encoding` {String} Encoding to use, Default: `'utf8'`\n\nCreates a new `Buffer` containing the given JavaScript string `str`. If\nprovided, the `encoding` parameter identifies the character encoding.\nIf not provided, `encoding` defaults to `'utf8'`.\n\n```js\nconst buf1 = Buffer.from('this is a tést');\nconsole.log(buf1.toString());\n  // prints: this is a tést\nconsole.log(buf1.toString('ascii'));\n  // prints: this is a tC)st\n\nconst buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');\nconsole.log(buf2.toString());\n  // prints: this is a tést\n```\n\nA `TypeError` will be thrown if `str` is not a string.\n\n### Class Method: Buffer.alloc(size[, fill[, encoding]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n* `fill` {Value} Default: `undefined`\n* `encoding` {String} Default: `utf8`\n\nAllocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the\n`Buffer` will be *zero-filled*.\n\n```js\nconst buf = Buffer.alloc(5);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nThe `size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nIf `fill` is specified, the allocated `Buffer` will be initialized by calling\n`buf.fill(fill)`. See [`buf.fill()`][] for more information.\n\n```js\nconst buf = Buffer.alloc(5, 'a');\nconsole.log(buf);\n  // <Buffer 61 61 61 61 61>\n```\n\nIf both `fill` and `encoding` are specified, the allocated `Buffer` will be\ninitialized by calling `buf.fill(fill, encoding)`. For example:\n\n```js\nconst buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\nconsole.log(buf);\n  // <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n```\n\nCalling `Buffer.alloc(size)` can be significantly slower than the alternative\n`Buffer.allocUnsafe(size)` but ensures that the newly created `Buffer` instance\ncontents will *never contain sensitive data*.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### Class Method: Buffer.allocUnsafe(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* `Buffer` of `size` bytes.  The `size` must\nbe less than or equal to the value of `require('buffer').kMaxLength` (on 64-bit\narchitectures, `kMaxLength` is `(2^31)-1`). Otherwise, a [`RangeError`][] is\nthrown. A zero-length Buffer will be created if a `size` less than or equal to\n0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\n```js\nconst buf = Buffer.allocUnsafe(5);\nconsole.log(buf);\n  // <Buffer 78 e0 82 02 01>\n  // (octets will be different, every time)\nbuf.fill(0);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nA `TypeError` will be thrown if `size` is not a number.\n\nNote that the `Buffer` module pre-allocates an internal `Buffer` instance of\nsize `Buffer.poolSize` that is used as a pool for the fast allocation of new\n`Buffer` instances created using `Buffer.allocUnsafe(size)` (and the deprecated\n`new Buffer(size)` constructor) only when `size` is less than or equal to\n`Buffer.poolSize >> 1` (floor of `Buffer.poolSize` divided by two). The default\nvalue of `Buffer.poolSize` is `8192` but can be modified.\n\nUse of this pre-allocated internal memory pool is a key difference between\ncalling `Buffer.alloc(size, fill)` vs. `Buffer.allocUnsafe(size).fill(fill)`.\nSpecifically, `Buffer.alloc(size, fill)` will *never* use the internal Buffer\npool, while `Buffer.allocUnsafe(size).fill(fill)` *will* use the internal\nBuffer pool if `size` is less than or equal to half `Buffer.poolSize`. The\ndifference is subtle but can be important when an application requires the\nadditional performance that `Buffer.allocUnsafe(size)` provides.\n\n### Class Method: Buffer.allocUnsafeSlow(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* and non-pooled `Buffer` of `size` bytes.  The\n`size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\nWhen using `Buffer.allocUnsafe()` to allocate new `Buffer` instances,\nallocations under 4KB are, by default, sliced from a single pre-allocated\n`Buffer`. This allows applications to avoid the garbage collection overhead of\ncreating many individually allocated Buffers. This approach improves both\nperformance and memory usage by eliminating the need to track and cleanup as\nmany `Persistent` objects.\n\nHowever, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled Buffer instance using `Buffer.allocUnsafeSlow()` then\ncopy out the relevant bits.\n\n```js\n// need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on('readable', () => {\n  const data = socket.read();\n  // allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n  // copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n  store.push(sb);\n});\n```\n\nUse of `Buffer.allocUnsafeSlow()` should be used only as a last resort *after*\na developer has observed undue memory retention in their applications.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### All the Rest\n\nThe rest of the `Buffer` API is exactly the same as in node.js.\n[See the docs](https://nodejs.org/api/buffer.html).\n\n\n## Related links\n\n- [Node.js issue: Buffer(number) is unsafe](https://github.com/nodejs/node/issues/4660)\n- [Node.js Enhancement Proposal: Buffer.from/Buffer.alloc/Buffer.zalloc/Buffer() soft-deprecate](https://github.com/nodejs/node-eps/pull/4)\n\n## Why is `Buffer` unsafe?\n\nToday, the node.js `Buffer` constructor is overloaded to handle many different argument\ntypes like `String`, `Array`, `Object`, `TypedArrayView` (`Uint8Array`, etc.),\n`ArrayBuffer`, and also `Number`.\n\nThe API is optimized for convenience: you can throw any type at it, and it will try to do\nwhat you want.\n\nBecause the Buffer constructor is so powerful, you often see code like this:\n\n```js\n// Convert UTF-8 strings to hex\nfunction toHex (str) {\n  return new Buffer(str).toString('hex')\n}\n```\n\n***But what happens if `toHex` is called with a `Number` argument?***\n\n### Remote Memory Disclosure\n\nIf an attacker can make your program call the `Buffer` constructor with a `Number`\nargument, then they can make it allocate uninitialized memory from the node.js process.\nThis could potentially disclose TLS private keys, user data, or database passwords.\n\nWhen the `Buffer` constructor is passed a `Number` argument, it returns an\n**UNINITIALIZED** block of memory of the specified `size`. When you create a `Buffer` like\nthis, you **MUST** overwrite the contents before returning it to the user.\n\nFrom the [node.js docs](https://nodejs.org/api/buffer.html#buffer_new_buffer_size):\n\n> `new Buffer(size)`\n>\n> - `size` Number\n>\n> The underlying memory for `Buffer` instances created in this way is not initialized.\n> **The contents of a newly created `Buffer` are unknown and could contain sensitive\n> data.** Use `buf.fill(0)` to initialize a Buffer to zeroes.\n\n(Emphasis our own.)\n\nWhenever the programmer intended to create an uninitialized `Buffer` you often see code\nlike this:\n\n```js\nvar buf = new Buffer(16)\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### Would this ever be a problem in real code?\n\nYes. It's surprisingly common to forget to check the type of your variables in a\ndynamically-typed language like JavaScript.\n\nUsually the consequences of assuming the wrong type is that your program crashes with an\nuncaught exception. But the failure mode for forgetting to check the type of arguments to\nthe `Buffer` constructor is more catastrophic.\n\nHere's an example of a vulnerable service that takes a JSON payload and converts it to\nhex:\n\n```js\n// Take a JSON payload {str: \"some string\"} and convert it to hex\nvar server = http.createServer(function (req, res) {\n  var data = ''\n  req.setEncoding('utf8')\n  req.on('data', function (chunk) {\n    data += chunk\n  })\n  req.on('end', function () {\n    var body = JSON.parse(data)\n    res.end(new Buffer(body.str).toString('hex'))\n  })\n})\n\nserver.listen(8080)\n```\n\nIn this example, an http client just has to send:\n\n```json\n{\n  \"str\": 1000\n}\n```\n\nand it will get back 1,000 bytes of uninitialized memory from the server.\n\nThis is a very serious bug. It's similar in severity to the\n[the Heartbleed bug](http://heartbleed.com/) that allowed disclosure of OpenSSL process\nmemory by remote attackers.\n\n\n### Which real-world packages were vulnerable?\n\n#### [`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht)\n\n[Mathias Buus](https://github.com/mafintosh) and I\n([Feross Aboukhadijeh](http://feross.org/)) found this issue in one of our own packages,\n[`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht). The bug would allow\nanyone on the internet to send a series of messages to a user of `bittorrent-dht` and get\nthem to reveal 20 bytes at a time of uninitialized memory from the node.js process.\n\nHere's\n[the commit](https://github.com/feross/bittorrent-dht/commit/6c7da04025d5633699800a99ec3fbadf70ad35b8)\nthat fixed it. We released a new fixed version, created a\n[Node Security Project disclosure](https://nodesecurity.io/advisories/68), and deprecated all\nvulnerable versions on npm so users will get a warning to upgrade to a newer version.\n\n#### [`ws`](https://www.npmjs.com/package/ws)\n\nThat got us wondering if there were other vulnerable packages. Sure enough, within a short\nperiod of time, we found the same issue in [`ws`](https://www.npmjs.com/package/ws), the\nmost popular WebSocket implementation in node.js.\n\nIf certain APIs were called with `Number` parameters instead of `String` or `Buffer` as\nexpected, then uninitialized server memory would be disclosed to the remote peer.\n\nThese were the vulnerable methods:\n\n```js\nsocket.send(number)\nsocket.ping(number)\nsocket.pong(number)\n```\n\nHere's a vulnerable socket server with some echo functionality:\n\n```js\nserver.on('connection', function (socket) {\n  socket.on('message', function (message) {\n    message = JSON.parse(message)\n    if (message.type === 'echo') {\n      socket.send(message.data) // send back the user's message\n    }\n  })\n})\n```\n\n`socket.send(number)` called on the server, will disclose server memory.\n\nHere's [the release](https://github.com/websockets/ws/releases/tag/1.0.1) where the issue\nwas fixed, with a more detailed explanation. Props to\n[Arnout Kazemier](https://github.com/3rd-Eden) for the quick fix. Here's the\n[Node Security Project disclosure](https://nodesecurity.io/advisories/67).\n\n\n### What's the solution?\n\nIt's important that node.js offers a fast way to get memory otherwise performance-critical\napplications would needlessly get a lot slower.\n\nBut we need a better way to *signal our intent* as programmers. **When we want\nuninitialized memory, we should request it explicitly.**\n\nSensitive functionality should not be packed into a developer-friendly API that loosely\naccepts many different types. This type of API encourages the lazy practice of passing\nvariables in without checking the type very carefully.\n\n#### A new API: `Buffer.allocUnsafe(number)`\n\nThe functionality of creating buffers with uninitialized memory should be part of another\nAPI. We propose `Buffer.allocUnsafe(number)`. This way, it's not part of an API that\nfrequently gets user input of all sorts of different types passed into it.\n\n```js\nvar buf = Buffer.allocUnsafe(16) // careful, uninitialized memory!\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### How do we fix node.js core?\n\nWe sent [a PR to node.js core](https://github.com/nodejs/node/pull/4514) (merged as\n`semver-major`) which defends against one case:\n\n```js\nvar str = 16\nnew Buffer(str, 'utf8')\n```\n\nIn this situation, it's implied that the programmer intended the first argument to be a\nstring, since they passed an encoding as a second argument. Today, node.js will allocate\nuninitialized memory in the case of `new Buffer(number, encoding)`, which is probably not\nwhat the programmer intended.\n\nBut this is only a partial solution, since if the programmer does `new Buffer(variable)`\n(without an `encoding` parameter) there's no way to know what they intended. If `variable`\nis sometimes a number, then uninitialized memory will sometimes be returned.\n\n### What's the real long-term fix?\n\nWe could deprecate and remove `new Buffer(number)` and use `Buffer.allocUnsafe(number)` when\nwe need uninitialized memory. But that would break 1000s of packages.\n\n~~We believe the best solution is to:~~\n\n~~1. Change `new Buffer(number)` to return safe, zeroed-out memory~~\n\n~~2. Create a new API for creating uninitialized Buffers. We propose: `Buffer.allocUnsafe(number)`~~\n\n#### Update\n\nWe now support adding three new APIs:\n\n- `Buffer.from(value)` - convert from any type to a buffer\n- `Buffer.alloc(size)` - create a zero-filled buffer\n- `Buffer.allocUnsafe(size)` - create an uninitialized buffer with given size\n\nThis solves the core problem that affected `ws` and `bittorrent-dht` which is\n`Buffer(variable)` getting tricked into taking a number argument.\n\nThis way, existing code continues working and the impact on the npm ecosystem will be\nminimal. Over time, npm maintainers can migrate performance-critical code to use\n`Buffer.allocUnsafe(number)` instead of `new Buffer(number)`.\n\n\n### Conclusion\n\nWe think there's a serious design issue with the `Buffer` API as it exists today. It\npromotes insecure software by putting high-risk functionality into a convenient API\nwith friendly \"developer ergonomics\".\n\nThis wasn't merely a theoretical exercise because we found the issue in some of the\nmost popular npm packages.\n\nFortunately, there's an easy fix that can be applied today. Use `safe-buffer` in place of\n`buffer`.\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n```\n\nEventually, we hope that node.js core can switch to this new, safer behavior. We believe\nthe impact on the ecosystem would be minimal since it's not a breaking change.\nWell-maintained, popular packages would be updated to use `Buffer.alloc` quickly, while\nolder, insecure packages would magically become safe from this attack vector.\n\n\n## links\n\n- [Node.js PR: buffer: throw if both length and enc are passed](https://github.com/nodejs/node/pull/4514)\n- [Node Security Project disclosure for `ws`](https://nodesecurity.io/advisories/67)\n- [Node Security Project disclosure for`bittorrent-dht`](https://nodesecurity.io/advisories/68)\n\n\n## credit\n\nThe original issues in `bittorrent-dht`\n([disclosure](https://nodesecurity.io/advisories/68)) and\n`ws` ([disclosure](https://nodesecurity.io/advisories/67)) were discovered by\n[Mathias Buus](https://github.com/mafintosh) and\n[Feross Aboukhadijeh](http://feross.org/).\n\nThanks to [Adam Baldwin](https://github.com/evilpacket) for helping disclose these issues\nand for his work running the [Node Security Project](https://nodesecurity.io/).\n\nThanks to [John Hiesey](https://github.com/jhiesey) for proofreading this README and\nauditing the code.\n\n\n## license\n\nMIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org)\n",
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf.length);
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString('ascii'));
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/package.json:  "readme": "# mime-db\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nThis is a database of all mime types.\nIt consists of a single, public JSON file and does not include any logic,\nallowing it to remain as un-opinionated as possible with an API.\nIt aggregates data from the following sources:\n\n- http://www.iana.org/assignments/media-types/media-types.xhtml\n- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types\n\n## Installation\n\n```bash\nnpm install mime-db\n```\n\n### Database Download\n\nIf you're crazy enough to use this in the browser, you can just grab the\nJSON file using [RawGit](https://rawgit.com/). It is recommended to replace\n`master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the\nJSON format may change in the future.\n\n```\nhttps://cdn.rawgit.com/jshttp/mime-db/master/db.json\n```\n\n## Usage\n\n```js\nvar db = require('mime-db');\n\n// grab data on .js files\nvar data = db['application/javascript'];\n```\n\n## Data Structure\n\nThe JSON file is a map lookup for lowercased mime types.\nEach mime type has the following properties:\n\n- `.source` - where the mime type is defined.\n    If not set, it's probably a custom media type.\n    - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n    - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml)\n    - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types)\n- `.extensions[]` - known extensions associated with this mime type.\n- `.compressible` - whether a file of this type can be gzipped.\n- `.charset` - the default charset associated with this type, if any.\n\nIf unknown, every property could be `undefined`.\n\n## Contributing\n\nTo edit the database, only make PRs against `src/custom.json` or\n`src/custom-suffix.json`.\n\nThe `src/custom.json` file is a JSON object with the MIME type as the keys\nand the values being an object with the following keys:\n\n- `compressible` - leave out if you don't know, otherwise `true`/`false` for\n  if the data represented by the time is typically compressible.\n- `extensions` - include an array of file extensions that are associated with\n  the type.\n- `notes` - human-readable notes about the type, typically what the type is.\n- `sources` - include an array of URLs of where the MIME type and the associated\n  extensions are sourced from. This needs to be a [primary source](https://en.wikipedia.org/wiki/Primary_source);\n  links to type aggregating sites and Wikipedia are _not acceptible_.\n\nTo update the build, run `npm run build`.\n\n## Adding Custom Media Types\n\nThe best way to get new media types included in this library is to register\nthem with the IANA. The community registration procedure is outlined in\n[RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types\nregistered with the IANA are automatically pulled into this library.\n\n[npm-version-image]: https://img.shields.io/npm/v/mime-db.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg\n[npm-url]: https://npmjs.org/package/mime-db\n[travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg\n[travis-url]: https://travis-ci.org/jshttp/mime-db\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master\n[node-image]: https://img.shields.io/node/v/mime-db.svg\n[node-url]: https://nodejs.org/en/download/\n",
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/dialog-info+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/sgml-open-catalog": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.flographit": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.iptc.g2.catalogitem+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.nokia.catalogs": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-audit-dialog+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-base+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-group+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-speech+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-transform+xml": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:    "extensions": ["txt","text","conf","def","list","log","in","ini"]
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/prs.prop.logic": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/vnd.si.uricatalogue": {
./examples/express/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/README.md:It consists of a single, public JSON file and does not include any logic,
./examples/express/node_modules/express/node_modules/finalhandler/package.json:  "readme": "# finalhandler\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nNode.js function to invoke as the final step to respond to HTTP request.\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install finalhandler\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar finalhandler = require('finalhandler')\n```\n\n### finalhandler(req, res, [options])\n\nReturns function to be invoked as the final step for the given `req` and `res`.\nThis function is to be invoked as `fn(err)`. If `err` is falsy, the handler will\nwrite out a 404 response to the `res`. If it is truthy, an error response will\nbe written out to the `res`.\n\nWhen an error is written, the following information is added to the response:\n\n  * The `res.statusCode` is set from `err.status` (or `err.statusCode`). If\n    this value is outside the 4xx or 5xx range, it will be set to 500.\n  * The `res.statusMessage` is set according to the status code.\n  * The body will be the HTML of the status code message if `env` is\n    `'production'`, otherwise will be `err.stack`.\n  * Any headers specified in an `err.headers` object.\n\nThe final handler will also unpipe anything from `req` when it is invoked.\n\n#### options.env\n\nBy default, the environment is determined by `NODE_ENV` variable, but it can be\noverridden by this option.\n\n#### options.onerror\n\nProvide a function to be called with the `err` when it exists. Can be used for\nwriting errors to a central location without excessive function generation. Called\nas `onerror(err, req, res)`.\n\n## Examples\n\n### always 404\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  done()\n})\n\nserver.listen(3000)\n```\n\n### perform simple action\n\n```js\nvar finalhandler = require('finalhandler')\nvar fs = require('fs')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n\n  fs.readFile('index.html', function (err, buf) {\n    if (err) return done(err)\n    res.setHeader('Content-Type', 'text/html')\n    res.end(buf)\n  })\n})\n\nserver.listen(3000)\n```\n\n### use with middleware-style functions\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar serveStatic = require('serve-static')\n\nvar serve = serveStatic('public')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  serve(req, res, done)\n})\n\nserver.listen(3000)\n```\n\n### keep log of all errors\n\n```js\nvar finalhandler = require('finalhandler')\nvar fs = require('fs')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res, {onerror: logerror})\n\n  fs.readFile('index.html', function (err, buf) {\n    if (err) return done(err)\n    res.setHeader('Content-Type', 'text/html')\n    res.end(buf)\n  })\n})\n\nserver.listen(3000)\n\nfunction logerror (err) {\n  console.error(err.stack || err.toString())\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/finalhandler.svg\n[npm-url]: https://npmjs.org/package/finalhandler\n[node-image]: https://img.shields.io/node/v/finalhandler.svg\n[node-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/pillarjs/finalhandler.svg\n[travis-url]: https://travis-ci.org/pillarjs/finalhandler\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/finalhandler.svg\n[coveralls-url]: https://coveralls.io/r/pillarjs/finalhandler?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/finalhandler.svg\n[downloads-url]: https://npmjs.org/package/finalhandler\n",
./examples/express/node_modules/express/node_modules/finalhandler/README.md:### keep log of all errors
./examples/express/node_modules/express/node_modules/finalhandler/README.md:  var done = finalhandler(req, res, {onerror: logerror})
./examples/express/node_modules/express/node_modules/finalhandler/README.md:function logerror (err) {
./examples/express/node_modules/express/node_modules/send/package.json:  "readme": "# send\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nSend is a library for streaming files from the file system as a http response\nsupporting partial responses (Ranges), conditional-GET negotiation (If-Match,\nIf-Unmodified-Since, If-None-Match, If-Modified-Since), high test coverage,\nand granular events which may be leveraged to take appropriate actions in your\napplication or framework.\n\nLooking to serve up entire folders mapped to URLs? Try [serve-static](https://www.npmjs.org/package/serve-static).\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install send\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar send = require('send')\n```\n\n### send(req, path, [options])\n\nCreate a new `SendStream` for the given path to send to a `res`. The `req` is\nthe Node.js HTTP request and the `path` is a urlencoded path to send (urlencoded,\nnot the actual file-system path).\n\n#### Options\n\n##### acceptRanges\n\nEnable or disable accepting ranged requests, defaults to true.\nDisabling this will not send `Accept-Ranges` and ignore the contents\nof the `Range` request header.\n\n##### cacheControl\n\nEnable or disable setting `Cache-Control` response header, defaults to\ntrue. Disabling this will ignore the `immutable` and `maxAge` options.\n\n##### dotfiles\n\nSet how \"dotfiles\" are treated when encountered. A dotfile is a file\nor directory that begins with a dot (\".\"). Note this check is done on\nthe path itself without checking if the path actually exists on the\ndisk. If `root` is specified, only the dotfiles above the root are\nchecked (i.e. the root itself can be within a dotfile when when set\nto \"deny\").\n\n  - `'allow'` No special treatment for dotfiles.\n  - `'deny'` Send a 403 for any request for a dotfile.\n  - `'ignore'` Pretend like the dotfile does not exist and 404.\n\nThe default value is _similar_ to `'ignore'`, with the exception that\nthis default will not ignore the files within a directory that begins\nwith a dot, for backward-compatibility.\n\n##### end\n\nByte offset at which the stream ends, defaults to the length of the file\nminus 1. The end is inclusive in the stream, meaning `end: 3` will include\nthe 4th byte in the stream.\n\n##### etag\n\nEnable or disable etag generation, defaults to true.\n\n##### extensions\n\nIf a given file doesn't exist, try appending one of the given extensions,\nin the given order. By default, this is disabled (set to `false`). An\nexample value that will serve extension-less HTML files: `['html', 'htm']`.\nThis is skipped if the requested file already has an extension.\n\n##### immutable\n\nEnable or diable the `immutable` directive in the `Cache-Control` response\nheader, defaults to `false`. If set to `true`, the `maxAge` option should\nalso be specified to enable caching. The `immutable` directive will prevent\nsupported clients from making conditional requests during the life of the\n`maxAge` option to check if the file has changed.\n\n##### index\n\nBy default send supports \"index.html\" files, to disable this\nset `false` or to supply a new index pass a string or an array\nin preferred order.\n\n##### lastModified\n\nEnable or disable `Last-Modified` header, defaults to true. Uses the file\nsystem's last modified value.\n\n##### maxAge\n\nProvide a max-age in milliseconds for http caching, defaults to 0.\nThis can also be a string accepted by the\n[ms](https://www.npmjs.org/package/ms#readme) module.\n\n##### root\n\nServe files relative to `path`.\n\n##### start\n\nByte offset at which the stream starts, defaults to 0. The start is inclusive,\nmeaning `start: 2` will include the 3rd byte in the stream.\n\n#### Events\n\nThe `SendStream` is an event emitter and will emit the following events:\n\n  - `error` an error occurred `(err)`\n  - `directory` a directory was requested `(res, path)`\n  - `file` a file was requested `(path, stat)`\n  - `headers` the headers are about to be set on a file `(res, path, stat)`\n  - `stream` file streaming has started `(stream)`\n  - `end` streaming has completed\n\n#### .pipe\n\nThe `pipe` method is used to pipe the response into the Node.js HTTP response\nobject, typically `send(req, path, options).pipe(res)`.\n\n### .mime\n\nThe `mime` export is the global instance of of the\n[`mime` npm module](https://www.npmjs.com/package/mime).\n\nThis is used to configure the MIME types that are associated with file extensions\nas well as other options for how to resolve the MIME type of a file (like the\ndefault type to use for an unknown file extension).\n\n## Error-handling\n\nBy default when no `error` listeners are present an automatic response will be\nmade, otherwise you have full control over the response, aka you may show a 5xx\npage etc.\n\n## Caching\n\nIt does _not_ perform internal caching, you should use a reverse proxy cache\nsuch as Varnish for this, or those fancy things called CDNs. If your\napplication is small enough that it would benefit from single-node memory\ncaching, it's small enough that it does not need caching at all ;).\n\n## Debugging\n\nTo enable `debug()` instrumentation output export __DEBUG__:\n\n```\n$ DEBUG=send node app\n```\n\n## Running tests\n\n```\n$ npm install\n$ npm test\n```\n\n## Examples\n\n### Small example\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname).pipe(res)\n})\n\nserver.listen(3000)\n```\n\n### Custom file types\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Default unknown types to text/plain\nsend.mime.default_type = 'text/plain'\n\n// Add a custom type\nsend.mime.define({\n  'application/x-my-type': ['x-mt', 'x-mtt']\n})\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname).pipe(res)\n})\n\nserver.listen(3000)\n```\n\n### Custom directory index view\n\nThis is a example of serving up a structure of directories with a\ncustom function to render a listing of a directory.\n\n```js\nvar http = require('http')\nvar fs = require('fs')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Transfer arbitrary files from within /www/example.com/public/*\n// with a custom handler for directory listing\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname, {index: false, root: '/www/example.com/public'})\n  .once('directory', directory)\n  .pipe(res)\n})\n\nserver.listen(3000)\n\n// Custom directory handler\nfunction directory (res, path) {\n  var stream = this\n\n  // redirect to trailing slash for consistent url\n  if (!stream.hasTrailingSlash()) {\n    return stream.redirect(path)\n  }\n\n  // get directory list\n  fs.readdir(path, function onReaddir (err, list) {\n    if (err) return stream.error(err)\n\n    // render an index for the directory\n    res.setHeader('Content-Type', 'text/plain; charset=UTF-8')\n    res.end(list.join('\\n') + '\\n')\n  })\n}\n```\n\n### Serving from a root directory with custom error-handling\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  // your custom error-handling logic:\n  function error (err) {\n    res.statusCode = err.status || 500\n    res.end(err.message)\n  }\n\n  // your custom headers\n  function headers (res, path, stat) {\n    // serve all files for download\n    res.setHeader('Content-Disposition', 'attachment')\n  }\n\n  // your custom directory handling logic:\n  function redirect () {\n    res.statusCode = 301\n    res.setHeader('Location', req.url + '/')\n    res.end('Redirecting to ' + req.url + '/')\n  }\n\n  // transfer arbitrary files from within\n  // /www/example.com/public/*\n  send(req, parseUrl(req).pathname, {root: '/www/example.com/public'})\n  .on('error', error)\n  .on('directory', redirect)\n  .on('headers', headers)\n  .pipe(res)\n})\n\nserver.listen(3000)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/send.svg\n[npm-url]: https://npmjs.org/package/send\n[travis-image]: https://img.shields.io/travis/pillarjs/send/master.svg?label=linux\n[travis-url]: https://travis-ci.org/pillarjs/send\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/send/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/send\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/send/master.svg\n[coveralls-url]: https://coveralls.io/r/pillarjs/send?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/send.svg\n[downloads-url]: https://npmjs.org/package/send\n",
./examples/express/node_modules/express/node_modules/send/node_modules/http-errors/package.json:  "readme": "# http-errors\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCreate HTTP errors for Express, Koa, Connect, etc. with ease.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install http-errors\n```\n\n## Example\n\n```js\nvar createError = require('http-errors')\nvar express = require('express')\nvar app = express()\n\napp.use(function (req, res, next) {\n  if (!req.user) return next(createError(401, 'Please login to view this page.'))\n  next()\n})\n```\n\n## API\n\nThis is the current API, currently extracted from Koa and subject to change.\n\nAll errors inherit from JavaScript `Error` and the exported `createError.HttpError`.\n\n### Error Properties\n\n- `expose` - can be used to signal if `message` should be sent to the client,\n  defaulting to `false` when `status` >= 500\n- `headers` - can be an object of header names to values to be sent to the\n  client, defaulting to `undefined`. When defined, the key names should all\n  be lower-cased\n- `message` - the traditional error message, which should be kept short and all\n  single line\n- `status` - the status code of the error, mirroring `statusCode` for general\n  compatibility\n- `statusCode` - the status code of the error, defaulting to `500`\n\n### createError([status], [message], [properties])\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = createError(404, 'This video does not exist!')\n```\n\n- `status: 500` - the status code as a number\n- `message` - the message of the error, defaulting to node's text for that status code.\n- `properties` - custom properties to attach to the object\n\n### new createError\\[code || name\\](\\[msg]\\))\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = new createError.NotFound()\n```\n\n- `code` - the status code as a number\n- `name` - the name of the error as a \"bumpy case\", i.e. `NotFound` or `InternalServerError`.\n\n#### List of all constructors\n\n|Status Code|Constructor Name             |\n|-----------|-----------------------------|\n|400        |BadRequest                   |\n|401        |Unauthorized                 |\n|402        |PaymentRequired              |\n|403        |Forbidden                    |\n|404        |NotFound                     |\n|405        |MethodNotAllowed             |\n|406        |NotAcceptable                |\n|407        |ProxyAuthenticationRequired  |\n|408        |RequestTimeout               |\n|409        |Conflict                     |\n|410        |Gone                         |\n|411        |LengthRequired               |\n|412        |PreconditionFailed           |\n|413        |PayloadTooLarge              |\n|414        |URITooLong                   |\n|415        |UnsupportedMediaType         |\n|416        |RangeNotSatisfiable          |\n|417        |ExpectationFailed            |\n|418        |ImATeapot                    |\n|421        |MisdirectedRequest           |\n|422        |UnprocessableEntity          |\n|423        |Locked                       |\n|424        |FailedDependency             |\n|425        |UnorderedCollection          |\n|426        |UpgradeRequired              |\n|428        |PreconditionRequired         |\n|429        |TooManyRequests              |\n|431        |RequestHeaderFieldsTooLarge  |\n|451        |UnavailableForLegalReasons   |\n|500        |InternalServerError          |\n|501        |NotImplemented               |\n|502        |BadGateway                   |\n|503        |ServiceUnavailable           |\n|504        |GatewayTimeout               |\n|505        |HTTPVersionNotSupported      |\n|506        |VariantAlsoNegotiates        |\n|507        |InsufficientStorage          |\n|508        |LoopDetected                 |\n|509        |BandwidthLimitExceeded       |\n|510        |NotExtended                  |\n|511        |NetworkAuthenticationRequired|\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/http-errors.svg\n[npm-url]: https://npmjs.org/package/http-errors\n[node-version-image]: https://img.shields.io/node/v/http-errors.svg\n[node-version-url]: https://nodejs.org/en/download/\n[travis-image]: https://img.shields.io/travis/jshttp/http-errors.svg\n[travis-url]: https://travis-ci.org/jshttp/http-errors\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/http-errors.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/http-errors\n[downloads-image]: https://img.shields.io/npm/dm/http-errors.svg\n[downloads-url]: https://npmjs.org/package/http-errors\n",
./examples/express/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/Readme.md:logging source.
./examples/express/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./examples/express/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    // call to self as log
./examples/express/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    log.call(deprecate, message)
./examples/express/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:function log (message, site) {
./examples/express/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./examples/express/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/express/node_modules/send/node_modules/http-errors/README.md:  if (!req.user) return next(createError(401, 'Please login to view this page.'))
./examples/express/node_modules/express/node_modules/send/node_modules/mime/package.json:  "readme": "# mime\n\nComprehensive MIME type mapping API based on mime-db module.\n\n## Install\n\nInstall with [npm](http://github.com/isaacs/npm):\n\n    npm install mime\n\n## Contributing / Testing\n\n    npm run test\n\n## Command Line\n\n    mime [path_string]\n\nE.g.\n\n    > mime scripts/jquery.js\n    application/javascript\n\n## API - Queries\n\n### mime.lookup(path)\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\n\n```js\nvar mime = require('mime');\n\nmime.lookup('/path/to/file.txt');         // => 'text/plain'\nmime.lookup('file.txt');                  // => 'text/plain'\nmime.lookup('.TXT');                      // => 'text/plain'\nmime.lookup('htm');                       // => 'text/html'\n```\n\n### mime.default_type\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n\n### mime.extension(type)\nGet the default extension for `type`\n\n```js\nmime.extension('text/html');                 // => 'html'\nmime.extension('application/octet-stream');  // => 'bin'\n```\n\n### mime.charsets.lookup()\n\nMap mime-type to charset\n\n```js\nmime.charsets.lookup('text/plain');        // => 'UTF-8'\n```\n\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\n\n## API - Defining Custom Types\n\nCustom type mappings can be added on a per-project basis via the following APIs.\n\n### mime.define()\n\nAdd custom mime/extension mappings\n\n```js\nmime.define({\n    'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\n    'application/x-my-type': ['x-mt', 'x-mtt'],\n    // etc ...\n});\n\nmime.lookup('x-sft');                 // => 'text/x-some-format'\n```\n\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\n\n```js\nmime.extension('text/x-some-format'); // => 'x-sf'\n```\n\n### mime.load(filepath)\n\nLoad mappings from an Apache \".types\" format file\n\n```js\nmime.load('./my_project.types');\n```\nThe .types file format is simple -  See the `types` dir for examples.\n",
./examples/express/node_modules/express/node_modules/send/node_modules/mime/build/test.js:console.log('\nAll tests passed');
./examples/express/node_modules/express/node_modules/send/node_modules/mime/build/build.js:console.log(JSON.stringify(mapByType));
./examples/express/node_modules/express/node_modules/send/node_modules/mime/README.md:(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)
./examples/express/node_modules/express/node_modules/send/node_modules/mime/types.json:{"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":["woff"],"application/font-woff2":["woff2"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["dmg"],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":["bdoc"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-otf":["otf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-ttf":["ttf","ttc"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["iso"],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":["exe"],"application/x-msdownload":["exe","dll","com","bat","msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","wmz","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":["prc","pdb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["3gpp"],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":["mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":["wav"],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":["m4a"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":["ra"],"audio/x-wav":["wav"],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/otf":["otf"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jpeg":["jpeg","jpg","jpe"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":["bmp"],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":["rtf"],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":["org"],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":["xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}
./examples/express/node_modules/express/node_modules/send/README.md:  // your custom error-handling logic:
./examples/express/node_modules/express/node_modules/send/README.md:  // your custom directory handling logic:
./examples/express/node_modules/express/node_modules/depd/Readme.md:logging source.
./examples/express/node_modules/express/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n",
./examples/express/node_modules/express/node_modules/depd/index.js:    // call to self as log
./examples/express/node_modules/express/node_modules/depd/index.js:    log.call(deprecate, message)
./examples/express/node_modules/express/node_modules/depd/index.js:function log (message, site) {
./examples/express/node_modules/express/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./examples/express/node_modules/express/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/express/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/express/node_modules/fresh/package.json:  "readme": "# fresh\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nHTTP response freshness testing\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```\n$ npm install fresh\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar fresh = require('fresh')\n```\n\n### fresh(reqHeaders, resHeaders)\n\nCheck freshness of the response using request and response headers.\n\nWhen the response is still \"fresh\" in the client's cache `true` is\nreturned, otherwise `false` is returned to indicate that the client\ncache is now stale and the full response should be sent.\n\nWhen a client sends the `Cache-Control: no-cache` request header to\nindicate an end-to-end reload request, this module will return `false`\nto make handling these requests transparent.\n\n## Known Issues\n\nThis module is designed to only follow the HTTP specifications, not\nto work-around all kinda of client bugs (especially since this module\ntypically does not recieve enough information to understand what the\nclient actually is).\n\nThere is a known issue that in certain versions of Safari, Safari\nwill incorrectly make a request that allows this module to validate\nfreshness of the resource even when Safari does not have a\nrepresentation of the resource in the cache. The module\n[jumanji](https://www.npmjs.com/package/jumanji) can be used in\nan Express application to work-around this issue and also provides\nlinks to further reading on this Safari bug.\n\n## Example\n\n### API usage\n\n<!-- eslint-disable no-redeclare, no-undef -->\n\n```js\nvar reqHeaders = { 'if-none-match': '\"foo\"' }\nvar resHeaders = { 'etag': '\"bar\"' }\nfresh(reqHeaders, resHeaders)\n// => false\n\nvar reqHeaders = { 'if-none-match': '\"foo\"' }\nvar resHeaders = { 'etag': '\"foo\"' }\nfresh(reqHeaders, resHeaders)\n// => true\n```\n\n### Using with Node.js http server\n\n```js\nvar fresh = require('fresh')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  // perform server logic\n  // ... including adding ETag / Last-Modified response headers\n\n  if (isFresh(req, res)) {\n    // client has a fresh copy of resource\n    res.statusCode = 304\n    res.end()\n    return\n  }\n\n  // send the resource\n  res.statusCode = 200\n  res.end('hello, world!')\n})\n\nfunction isFresh (req, res) {\n  return fresh(req.headers, {\n    'etag': res.getHeader('ETag'),\n    'last-modified': res.getHeader('Last-Modified')\n  })\n}\n\nserver.listen(3000)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/fresh.svg\n[npm-url]: https://npmjs.org/package/fresh\n[node-version-image]: https://img.shields.io/node/v/fresh.svg\n[node-version-url]: https://nodejs.org/en/\n[travis-image]: https://img.shields.io/travis/jshttp/fresh/master.svg\n[travis-url]: https://travis-ci.org/jshttp/fresh\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/fresh/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/fresh?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/fresh.svg\n[downloads-url]: https://npmjs.org/package/fresh\n",
./examples/express/node_modules/express/node_modules/fresh/README.md:  // perform server logic
./examples/express/node_modules/express/node_modules/debug/package.json:    "log",
./examples/express/node_modules/express/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./examples/express/node_modules/express/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./examples/express/node_modules/express/node_modules/debug/README.md:  change the behavior of the debug logging:
./examples/express/node_modules/express/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./examples/express/node_modules/express/node_modules/debug/README.md:var log = debug('app:log');
./examples/express/node_modules/express/node_modules/debug/README.md:// set this namespace to log via console.log
./examples/express/node_modules/express/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./examples/express/node_modules/express/node_modules/debug/README.md:log('goes to stdout');
./examples/express/node_modules/express/node_modules/debug/README.md:// overrides all per-namespace log settings
./examples/express/node_modules/express/node_modules/debug/README.md:debug.log = console.info.bind(console);
./examples/express/node_modules/express/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./examples/express/node_modules/express/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./examples/express/node_modules/express/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./examples/express/node_modules/express/node_modules/debug/src/browser.js:exports.log = log;
./examples/express/node_modules/express/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./examples/express/node_modules/express/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./examples/express/node_modules/express/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./examples/express/node_modules/express/node_modules/debug/src/browser.js:function log() {
./examples/express/node_modules/express/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./examples/express/node_modules/express/node_modules/debug/src/browser.js:    && console.log
./examples/express/node_modules/express/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./examples/express/node_modules/express/node_modules/debug/src/node.js:exports.log = log;
./examples/express/node_modules/express/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./examples/express/node_modules/express/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./examples/express/node_modules/express/node_modules/debug/src/node.js:function log() {
./examples/express/node_modules/express/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./examples/express/node_modules/express/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./examples/express/node_modules/express/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./examples/express/node_modules/express/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./examples/express/node_modules/express/node_modules/debug/src/debug.js: * Previous log timestamp.
./examples/express/node_modules/express/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./examples/express/node_modules/express/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./examples/express/node_modules/express/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./examples/express/node_modules/express/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./examples/express/node_modules/express/node_modules/debug/karma.conf.js:    // level of logging
./examples/express/node_modules/express/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./examples/express/node_modules/express/node_modules/debug/component.json:    "log",
./examples/express/node_modules/express/node_modules/body-parser/package.json:  "readme": "# body-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nNode.js body parsing middleware.\n\nParse incoming request bodies in a middleware before your handlers, available\nunder the `req.body` property.\n\n[Learn about the anatomy of an HTTP transaction in Node.js](https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/).\n\n_This does not handle multipart bodies_, due to their complex and typically\nlarge nature. For multipart bodies, you may be interested in the following\nmodules:\n\n  * [busboy](https://www.npmjs.org/package/busboy#readme) and\n    [connect-busboy](https://www.npmjs.org/package/connect-busboy#readme)\n  * [multiparty](https://www.npmjs.org/package/multiparty#readme) and\n    [connect-multiparty](https://www.npmjs.org/package/connect-multiparty#readme)\n  * [formidable](https://www.npmjs.org/package/formidable#readme)\n  * [multer](https://www.npmjs.org/package/multer#readme)\n\nThis module provides the following parsers:\n\n  * [JSON body parser](#bodyparserjsonoptions)\n  * [Raw body parser](#bodyparserrawoptions)\n  * [Text body parser](#bodyparsertextoptions)\n  * [URL-encoded form body parser](#bodyparserurlencodedoptions)\n\nOther body parsers you might be interested in:\n\n- [body](https://www.npmjs.org/package/body#readme)\n- [co-body](https://www.npmjs.org/package/co-body#readme)\n\n## Installation\n\n```sh\n$ npm install body-parser\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar bodyParser = require('body-parser')\n```\n\nThe `bodyParser` object exposes various factories to create middlewares. All\nmiddlewares will populate the `req.body` property with the parsed body when\nthe `Content-Type` request header matches the `type` option, or an empty\nobject (`{}`) if there was no body to parse, the `Content-Type` was not matched,\nor an error occurred.\n\nThe various errors returned by this module are described in the\n[errors section](#errors).\n\n### bodyParser.json([options])\n\nReturns middleware that only parses `json` and only looks at requests where\nthe `Content-Type` header matches the `type` option. This parser accepts any\nUnicode encoding of the body and supports automatic inflation of `gzip` and\n`deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`).\n\n#### Options\n\nThe `json` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### reviver\n\nThe `reviver` option is passed directly to `JSON.parse` as the second\nargument. You can find more information on this argument\n[in the MDN documentation about JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter).\n\n##### strict\n\nWhen set to `true`, will only accept arrays and objects; when `false` will\naccept anything `JSON.parse` accepts. Defaults to `true`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `json`), a mime type (like\n`application/json`), or a mime type with a wildcard (like `*/*` or `*/json`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `application/json`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.raw([options])\n\nReturns middleware that parses all bodies as a `Buffer` and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a `Buffer` object\nof the body.\n\n#### Options\n\nThe `raw` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `bin`), a mime type (like\n`application/octet-stream`), or a mime type with a wildcard (like `*/*` or\n`application/*`). If a function, the `type` option is called as `fn(req)`\nand the request is parsed if it returns a truthy value. Defaults to\n`application/octet-stream`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.text([options])\n\nReturns middleware that parses all bodies as a string and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` string containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a string of the\nbody.\n\n#### Options\n\nThe `text` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### defaultCharset\n\nSpecify the default character set for the text content if the charset is not\nspecified in the `Content-Type` header of the request. Defaults to `utf-8`.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `txt`), a mime type (like\n`text/plain`), or a mime type with a wildcard (like `*/*` or `text/*`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `text/plain`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.urlencoded([options])\n\nReturns middleware that only parses `urlencoded` bodies and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser accepts only UTF-8 encoding of the body and supports automatic\ninflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This object will contain\nkey-value pairs, where the value can be a string or array (when `extended` is\n`false`), or any type (when `extended` is `true`).\n\n#### Options\n\nThe `urlencoded` function takes an optional `options` object that may contain\nany of the following keys:\n\n##### extended\n\nThe `extended` option allows to choose between parsing the URL-encoded data\nwith the `querystring` library (when `false`) or the `qs` library (when\n`true`). The \"extended\" syntax allows for rich objects and arrays to be\nencoded into the URL-encoded format, allowing for a JSON-like experience\nwith URL-encoded. For more information, please\n[see the qs library](https://www.npmjs.org/package/qs#readme).\n\nDefaults to `true`, but using the default has been deprecated. Please\nresearch into the difference between `qs` and `querystring` and choose the\nappropriate setting.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### parameterLimit\n\nThe `parameterLimit` option controls the maximum number of parameters that\nare allowed in the URL-encoded data. If a request contains more parameters\nthan this value, a 413 will be returned to the client. Defaults to `1000`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `urlencoded`), a mime type (like\n`application/x-www-form-urlencoded`), or a mime type with a wildcard (like\n`*/x-www-form-urlencoded`). If a function, the `type` option is called as\n`fn(req)` and the request is parsed if it returns a truthy value. Defaults\nto `application/x-www-form-urlencoded`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n## Errors\n\nThe middlewares provided by this module create errors depending on the error\ncondition during parsing. The errors will typically have a `status`/`statusCode`\nproperty that contains the suggested HTTP response code, an `expose` property\nto determine if the `message` property should be displayed to the client, a\n`type` property to determine the type of error without matching against the\n`message`, and a `body` property containing the read body, if available.\n\nThe following are the common errors emitted, though any error can come through\nfor various reasons.\n\n### content encoding unsupported\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an encoding but the \"inflation\" option was set to `false`. The\n`status` property is set to `415`, the `type` property is set to\n`'encoding.unsupported'`, and the `charset` property will be set to the\nencoding that is unsupported.\n\n### request aborted\n\nThis error will occur when the request is aborted by the client before reading\nthe body has finished. The `received` property will be set to the number of\nbytes received before the request was aborted and the `expected` property is\nset to the number of expected bytes. The `status` property is set to `400`\nand `type` property is set to `'request.aborted'`.\n\n### request entity too large\n\nThis error will occur when the request body's size is larger than the \"limit\"\noption. The `limit` property will be set to the byte limit and the `length`\nproperty will be set to the request body's length. The `status` property is\nset to `413` and the `type` property is set to `'entity.too.large'`.\n\n### request size did not match content length\n\nThis error will occur when the request's length did not match the length from\nthe `Content-Length` header. This typically occurs when the request is malformed,\ntypically when the `Content-Length` header was calculated based on characters\ninstead of bytes. The `status` property is set to `400` and the `type` property\nis set to `'request.size.invalid'`.\n\n### stream encoding should not be set\n\nThis error will occur when something called the `req.setEncoding` method prior\nto this middleware. This module operates directly on bytes only and you cannot\ncall `req.setEncoding` when using this module. The `status` property is set to\n`500` and the `type` property is set to `'stream.encoding.set'`.\n\n### too many parameters\n\nThis error will occur when the content of the request exceeds the configured\n`parameterLimit` for the `urlencoded` parser. The `status` property is set to\n`413` and the `type` property is set to `'parameters.too.many'`.\n\n### unsupported charset \"BOGUS\"\n\nThis error will occur when the request had a charset parameter in the\n`Content-Type` header, but the `iconv-lite` module does not support it OR the\nparser does not support it. The charset is contained in the message as well\nas in the `charset` property. The `status` property is set to `415`, the\n`type` property is set to `'charset.unsupported'`, and the `charset` property\nis set to the charset that is unsupported.\n\n### unsupported content encoding \"bogus\"\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an unsupported encoding. The encoding is contained in the message\nas well as in the `encoding` property. The `status` property is set to `415`,\nthe `type` property is set to `'encoding.unsupported'`, and the `encoding`\nproperty is set to the encoding that is unsupported.\n\n## Examples\n\n### Express/Connect top-level generic\n\nThis example demonstrates adding a generic JSON and URL-encoded parser as a\ntop-level middleware, which will parse the bodies of all incoming requests.\nThis is the simplest setup.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n```\n\n### Express route-specific\n\nThis example demonstrates adding body parsers specifically to the routes that\nneed them. In general, this is the most recommended way to use body-parser with\nExpress.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// create application/json parser\nvar jsonParser = bodyParser.json()\n\n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n\n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  res.send('welcome, ' + req.body.username)\n})\n\n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  // create user in req.body\n})\n```\n\n### Change accepted type for parsers\n\nAll the parsers accept a `type` option which allows you to change the\n`Content-Type` that the middleware will parse.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse various different custom JSON types as JSON\napp.use(bodyParser.json({ type: 'application/*+json' }))\n\n// parse some custom thing into a Buffer\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\n\n// parse an HTML body into a string\napp.use(bodyParser.text({ type: 'text/html' }))\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/body-parser.svg\n[npm-url]: https://npmjs.org/package/body-parser\n[travis-image]: https://img.shields.io/travis/expressjs/body-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/body-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/body-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/body-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/body-parser.svg\n[downloads-url]: https://npmjs.org/package/body-parser\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./examples/express/node_modules/express/node_modules/body-parser/node_modules/http-errors/package.json:  "readme": "# http-errors\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCreate HTTP errors for Express, Koa, Connect, etc. with ease.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install http-errors\n```\n\n## Example\n\n```js\nvar createError = require('http-errors')\nvar express = require('express')\nvar app = express()\n\napp.use(function (req, res, next) {\n  if (!req.user) return next(createError(401, 'Please login to view this page.'))\n  next()\n})\n```\n\n## API\n\nThis is the current API, currently extracted from Koa and subject to change.\n\nAll errors inherit from JavaScript `Error` and the exported `createError.HttpError`.\n\n### Error Properties\n\n- `expose` - can be used to signal if `message` should be sent to the client,\n  defaulting to `false` when `status` >= 500\n- `headers` - can be an object of header names to values to be sent to the\n  client, defaulting to `undefined`. When defined, the key names should all\n  be lower-cased\n- `message` - the traditional error message, which should be kept short and all\n  single line\n- `status` - the status code of the error, mirroring `statusCode` for general\n  compatibility\n- `statusCode` - the status code of the error, defaulting to `500`\n\n### createError([status], [message], [properties])\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = createError(404, 'This video does not exist!')\n```\n\n- `status: 500` - the status code as a number\n- `message` - the message of the error, defaulting to node's text for that status code.\n- `properties` - custom properties to attach to the object\n\n### new createError\\[code || name\\](\\[msg]\\))\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = new createError.NotFound()\n```\n\n- `code` - the status code as a number\n- `name` - the name of the error as a \"bumpy case\", i.e. `NotFound` or `InternalServerError`.\n\n#### List of all constructors\n\n|Status Code|Constructor Name             |\n|-----------|-----------------------------|\n|400        |BadRequest                   |\n|401        |Unauthorized                 |\n|402        |PaymentRequired              |\n|403        |Forbidden                    |\n|404        |NotFound                     |\n|405        |MethodNotAllowed             |\n|406        |NotAcceptable                |\n|407        |ProxyAuthenticationRequired  |\n|408        |RequestTimeout               |\n|409        |Conflict                     |\n|410        |Gone                         |\n|411        |LengthRequired               |\n|412        |PreconditionFailed           |\n|413        |PayloadTooLarge              |\n|414        |URITooLong                   |\n|415        |UnsupportedMediaType         |\n|416        |RangeNotSatisfiable          |\n|417        |ExpectationFailed            |\n|418        |ImATeapot                    |\n|421        |MisdirectedRequest           |\n|422        |UnprocessableEntity          |\n|423        |Locked                       |\n|424        |FailedDependency             |\n|425        |UnorderedCollection          |\n|426        |UpgradeRequired              |\n|428        |PreconditionRequired         |\n|429        |TooManyRequests              |\n|431        |RequestHeaderFieldsTooLarge  |\n|451        |UnavailableForLegalReasons   |\n|500        |InternalServerError          |\n|501        |NotImplemented               |\n|502        |BadGateway                   |\n|503        |ServiceUnavailable           |\n|504        |GatewayTimeout               |\n|505        |HTTPVersionNotSupported      |\n|506        |VariantAlsoNegotiates        |\n|507        |InsufficientStorage          |\n|508        |LoopDetected                 |\n|509        |BandwidthLimitExceeded       |\n|510        |NotExtended                  |\n|511        |NetworkAuthenticationRequired|\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/http-errors.svg\n[npm-url]: https://npmjs.org/package/http-errors\n[node-version-image]: https://img.shields.io/node/v/http-errors.svg\n[node-version-url]: https://nodejs.org/en/download/\n[travis-image]: https://img.shields.io/travis/jshttp/http-errors.svg\n[travis-url]: https://travis-ci.org/jshttp/http-errors\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/http-errors.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/http-errors\n[downloads-image]: https://img.shields.io/npm/dm/http-errors.svg\n[downloads-url]: https://npmjs.org/package/http-errors\n",
./examples/express/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/Readme.md:logging source.
./examples/express/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./examples/express/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    // call to self as log
./examples/express/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    log.call(deprecate, message)
./examples/express/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:function log (message, site) {
./examples/express/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./examples/express/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./examples/express/node_modules/express/node_modules/body-parser/node_modules/http-errors/README.md:  if (!req.user) return next(createError(401, 'Please login to view this page.'))
./examples/express/node_modules/express/node_modules/body-parser/node_modules/iconv-lite/package.json:  "readme": "## Pure JS character encoding conversion [![Build Status](https://travis-ci.org/ashtuchkin/iconv-lite.svg?branch=master)](https://travis-ci.org/ashtuchkin/iconv-lite)\n\n * Doesn't need native code compilation. Works on Windows and in sandboxed environments like [Cloud9](http://c9.io).\n * Used in popular projects like [Express.js (body_parser)](https://github.com/expressjs/body-parser), \n   [Grunt](http://gruntjs.com/), [Nodemailer](http://www.nodemailer.com/), [Yeoman](http://yeoman.io/) and others.\n * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\n * Intuitive encode/decode API\n * Streaming support for Node v0.10+\n * [Deprecated] Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings.\n * In-browser usage via [Browserify](https://github.com/substack/node-browserify) (~180k gzip compressed with Buffer shim included).\n * Typescript [type definition file](https://github.com/ashtuchkin/iconv-lite/blob/master/lib/index.d.ts) included.\n * React Native is supported (need to explicitly `npm install` two more modules: `buffer` and `stream`).\n * License: MIT.\n\n[![NPM Stats](https://nodei.co/npm/iconv-lite.png?downloads=true&downloadRank=true)](https://npmjs.org/packages/iconv-lite/)\n\n## Usage\n### Basic API\n```javascript\nvar iconv = require('iconv-lite');\n\n// Convert from an encoded buffer to js string.\nstr = iconv.decode(new Buffer([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');\n\n// Convert from js string to an encoded buffer.\nbuf = iconv.encode(\"Sample input string\", 'win1251');\n\n// Check if encoding is supported\niconv.encodingExists(\"us-ascii\")\n```\n\n### Streaming API (Node v0.10+)\n```javascript\n\n// Decode stream (from binary stream to js strings)\nhttp.createServer(function(req, res) {\n    var converterStream = iconv.decodeStream('win1251');\n    req.pipe(converterStream);\n\n    converterStream.on('data', function(str) {\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\n    });\n});\n\n// Convert encoding streaming example\nfs.createReadStream('file-in-win1251.txt')\n    .pipe(iconv.decodeStream('win1251'))\n    .pipe(iconv.encodeStream('ucs2'))\n    .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\nhttp.createServer(function(req, res) {\n    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n        assert(typeof body == 'string');\n        console.log(body); // full request body string\n    });\n});\n```\n\n### [Deprecated] Extend Node.js own encodings\n> NOTE: This doesn't work on latest Node versions. See [details](https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility).\n\n```javascript\n// After this call all Node basic primitives will understand iconv-lite encodings.\niconv.extendNodeEncodings();\n\n// Examples:\nbuf = new Buffer(str, 'win1251');\nbuf.write(str, 'gbk');\nstr = buf.toString('latin1');\nassert(Buffer.isEncoding('iso-8859-15'));\nBuffer.byteLength(str, 'us-ascii');\n\nhttp.createServer(function(req, res) {\n    req.setEncoding('big5');\n    req.collect(function(err, body) {\n        console.log(body);\n    });\n});\n\nfs.createReadStream(\"file.txt\", \"shift_jis\");\n\n// External modules are also supported (if they use Node primitives, which they probably do).\nrequest = require('request');\nrequest({\n    url: \"http://github.com/\", \n    encoding: \"cp932\"\n});\n\n// To remove extensions\niconv.undoExtendNodeEncodings();\n```\n\n## Supported encodings\n\n *  All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex.\n *  Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap.\n *  All widespread singlebyte encodings: Windows 125x family, ISO-8859 family, \n    IBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library. \n    Aliases like 'latin1', 'us-ascii' also supported.\n *  All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2312, GBK, GB18030, Big5, Shift_JIS, EUC-JP.\n\nSee [all supported encodings on wiki](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).\n\nMost singlebyte encodings are generated automatically from [node-iconv](https://github.com/bnoordhuis/node-iconv). Thank you Ben Noordhuis and libiconv authors!\n\nMultibyte encodings are generated from [Unicode.org mappings](http://www.unicode.org/Public/MAPPINGS/) and [WHATWG Encoding Standard mappings](http://encoding.spec.whatwg.org/). Thank you, respective authors!\n\n\n## Encoding/decoding speed\n\nComparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0). \nNote: your results may vary, so please always check on your hardware.\n\n    operation             iconv@2.1.4   iconv-lite@0.4.7\n    ----------------------------------------------------------\n    encode('win1251')     ~96 Mb/s      ~320 Mb/s\n    decode('win1251')     ~95 Mb/s      ~246 Mb/s\n\n## BOM handling\n\n * Decoding: BOM is stripped by default, unless overridden by passing `stripBOM: false` in options\n   (f.ex. `iconv.decode(buf, enc, {stripBOM: false})`).\n   A callback might also be given as a `stripBOM` parameter - it'll be called if BOM character was actually found.\n * If you want to detect UTF-8 BOM when decoding other encodings, use [node-autodetect-decoder-stream](https://github.com/danielgindi/node-autodetect-decoder-stream) module.\n * Encoding: No BOM added, unless overridden by `addBOM: true` option.\n\n## UTF-16 Encodings\n\nThis library supports UTF-16LE, UTF-16BE and UTF-16 encodings. First two are straightforward, but UTF-16 is trying to be\nsmart about endianness in the following ways:\n * Decoding: uses BOM and 'spaces heuristic' to determine input endianness. Default is UTF-16LE, but can be \n   overridden with `defaultEncoding: 'utf-16be'` option. Strips BOM unless `stripBOM: false`.\n * Encoding: uses UTF-16LE and writes BOM by default. Use `addBOM: false` to override.\n\n## Other notes\n\nWhen decoding, be sure to supply a Buffer to decode() method, otherwise [bad things usually happen](https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding).  \nUntranslatable characters are set to � or ?. No transliteration is currently supported.  \nNode versions 0.10.31 and 0.11.13 are buggy, don't use them (see #65, #77).  \n\n## Testing\n\n```bash\n$ git clone git@github.com:ashtuchkin/iconv-lite.git\n$ cd iconv-lite\n$ npm install\n$ npm test\n    \n$ # To view performance:\n$ node test/performance.js\n\n$ # To view test coverage:\n$ npm run coverage\n$ open coverage/lcov-report/index.html\n```\n\n## Adoption\n[![NPM](https://nodei.co/npm-dl/iconv-lite.png)](https://nodei.co/npm/iconv-lite/)\n[![Codeship Status for ashtuchkin/iconv-lite](https://www.codeship.com/projects/81670840-fa72-0131-4520-4a01a6c01acc/status)](https://www.codeship.com/projects/29053)\n",
./examples/express/node_modules/express/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(str); // Do something with decoded strings, chunk-by-chunk.
./examples/express/node_modules/express/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(body); // full request body string
./examples/express/node_modules/express/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(body);
./examples/express/node_modules/express/node_modules/body-parser/README.md:// POST /login gets urlencoded bodies
./examples/express/node_modules/express/node_modules/body-parser/README.md:app.post('/login', urlencodedParser, function (req, res) {
./examples/express/node_modules/express/node_modules/qs/package.json:  "readme": "# qs <sup>[![Version Badge][2]][1]</sup>\n\n[![Build Status][3]][4]\n[![dependency status][5]][6]\n[![dev dependency status][7]][8]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][11]][1]\n\nA querystring parsing and stringifying library with some added security.\n\nLead Maintainer: [Jordan Harband](https://github.com/ljharb)\n\nThe **qs** module was originally created and maintained by [TJ Holowaychuk](https://github.com/visionmedia/node-querystring).\n\n## Usage\n\n```javascript\nvar qs = require('qs');\nvar assert = require('assert');\n\nvar obj = qs.parse('a=c');\nassert.deepEqual(obj, { a: 'c' });\n\nvar str = qs.stringify(obj);\nassert.equal(str, 'a=c');\n```\n\n### Parsing Objects\n\n[](#preventEval)\n```javascript\nqs.parse(string, [options]);\n```\n\n**qs** allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets `[]`.\nFor example, the string `'foo[bar]=baz'` converts to:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar]=baz'), {\n    foo: {\n        bar: 'baz'\n    }\n});\n```\n\nWhen using the `plainObjects` option the parsed value is returned as a null object, created via `Object.create(null)` and as such you should be aware that prototype methods will not exist on it and a user may set those names to whatever value they like:\n\n```javascript\nvar nullObject = qs.parse('a[hasOwnProperty]=b', { plainObjects: true });\nassert.deepEqual(nullObject, { a: { hasOwnProperty: 'b' } });\n```\n\nBy default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use `plainObjects` as mentioned above, or set `allowPrototypes` to `true` which will allow user input to overwrite those properties. *WARNING* It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\n\n```javascript\nvar protoObject = qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true });\nassert.deepEqual(protoObject, { a: { hasOwnProperty: 'b' } });\n```\n\nURI encoded strings work too:\n\n```javascript\nassert.deepEqual(qs.parse('a%5Bb%5D=c'), {\n    a: { b: 'c' }\n});\n```\n\nYou can also nest your objects, like `'foo[bar][baz]=foobarbaz'`:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar][baz]=foobarbaz'), {\n    foo: {\n        bar: {\n            baz: 'foobarbaz'\n        }\n    }\n});\n```\n\nBy default, when nesting objects **qs** will only parse up to 5 children deep. This means if you attempt to parse a string like\n`'a[b][c][d][e][f][g][h][i]=j'` your resulting object will be:\n\n```javascript\nvar expected = {\n    a: {\n        b: {\n            c: {\n                d: {\n                    e: {\n                        f: {\n                            '[g][h][i]': 'j'\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nvar string = 'a[b][c][d][e][f][g][h][i]=j';\nassert.deepEqual(qs.parse(string), expected);\n```\n\nThis depth can be overridden by passing a `depth` option to `qs.parse(string, [options])`:\n\n```javascript\nvar deep = qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1 });\nassert.deepEqual(deep, { a: { b: { '[c][d][e][f][g][h][i]': 'j' } } });\n```\n\nThe depth limit helps mitigate abuse when **qs** is used to parse user input, and it is recommended to keep it a reasonably small number.\n\nFor similar reasons, by default **qs** will only parse up to 1000 parameters. This can be overridden by passing a `parameterLimit` option:\n\n```javascript\nvar limited = qs.parse('a=b&c=d', { parameterLimit: 1 });\nassert.deepEqual(limited, { a: 'b' });\n```\n\nTo bypass the leading question mark, use `ignoreQueryPrefix`:\n\n```javascript\nvar prefixed = qs.parse('?a=b&c=d', { ignoreQueryPrefix: true });\nassert.deepEqual(prefixed, { a: 'b', c: 'd' });\n```\n\nAn optional delimiter can also be passed:\n\n```javascript\nvar delimited = qs.parse('a=b;c=d', { delimiter: ';' });\nassert.deepEqual(delimited, { a: 'b', c: 'd' });\n```\n\nDelimiters can be a regular expression too:\n\n```javascript\nvar regexed = qs.parse('a=b;c=d,e=f', { delimiter: /[;,]/ });\nassert.deepEqual(regexed, { a: 'b', c: 'd', e: 'f' });\n```\n\nOption `allowDots` can be used to enable dot notation:\n\n```javascript\nvar withDots = qs.parse('a.b=c', { allowDots: true });\nassert.deepEqual(withDots, { a: { b: 'c' } });\n```\n\n### Parsing Arrays\n\n**qs** can also parse arrays using a similar `[]` notation:\n\n```javascript\nvar withArray = qs.parse('a[]=b&a[]=c');\nassert.deepEqual(withArray, { a: ['b', 'c'] });\n```\n\nYou may specify an index as well:\n\n```javascript\nvar withIndexes = qs.parse('a[1]=c&a[0]=b');\nassert.deepEqual(withIndexes, { a: ['b', 'c'] });\n```\n\nNote that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number\nto create an array. When creating arrays with specific indices, **qs** will compact a sparse array to only the existing values preserving\ntheir order:\n\n```javascript\nvar noSparse = qs.parse('a[1]=b&a[15]=c');\nassert.deepEqual(noSparse, { a: ['b', 'c'] });\n```\n\nNote that an empty string is also a value, and will be preserved:\n\n```javascript\nvar withEmptyString = qs.parse('a[]=&a[]=b');\nassert.deepEqual(withEmptyString, { a: ['', 'b'] });\n\nvar withIndexedEmptyString = qs.parse('a[0]=b&a[1]=&a[2]=c');\nassert.deepEqual(withIndexedEmptyString, { a: ['b', '', 'c'] });\n```\n\n**qs** will also limit specifying indices in an array to a maximum index of `20`. Any array members with an index of greater than `20` will\ninstead be converted to an object with the index as the key:\n\n```javascript\nvar withMaxIndex = qs.parse('a[100]=b');\nassert.deepEqual(withMaxIndex, { a: { '100': 'b' } });\n```\n\nThis limit can be overridden by passing an `arrayLimit` option:\n\n```javascript\nvar withArrayLimit = qs.parse('a[1]=b', { arrayLimit: 0 });\nassert.deepEqual(withArrayLimit, { a: { '1': 'b' } });\n```\n\nTo disable array parsing entirely, set `parseArrays` to `false`.\n\n```javascript\nvar noParsingArrays = qs.parse('a[]=b', { parseArrays: false });\nassert.deepEqual(noParsingArrays, { a: { '0': 'b' } });\n```\n\nIf you mix notations, **qs** will merge the two items into an object:\n\n```javascript\nvar mixedNotation = qs.parse('a[0]=b&a[b]=c');\nassert.deepEqual(mixedNotation, { a: { '0': 'b', b: 'c' } });\n```\n\nYou can also create arrays of objects:\n\n```javascript\nvar arraysOfObjects = qs.parse('a[][b]=c');\nassert.deepEqual(arraysOfObjects, { a: [{ b: 'c' }] });\n```\n\n### Stringifying\n\n[](#preventEval)\n```javascript\nqs.stringify(object, [options]);\n```\n\nWhen stringifying, **qs** by default URI encodes output. Objects are stringified as you would expect:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b' }), 'a=b');\nassert.equal(qs.stringify({ a: { b: 'c' } }), 'a%5Bb%5D=c');\n```\n\nThis encoding can be disabled by setting the `encode` option to `false`:\n\n```javascript\nvar unencoded = qs.stringify({ a: { b: 'c' } }, { encode: false });\nassert.equal(unencoded, 'a[b]=c');\n```\n\nEncoding can be disabled for keys by setting the `encodeValuesOnly` option to `true`:\n```javascript\nvar encodedValues = qs.stringify(\n    { a: 'b', c: ['d', 'e=f'], f: [['g'], ['h']] },\n    { encodeValuesOnly: true }\n);\nassert.equal(encodedValues,'a=b&c[0]=d&c[1]=e%3Df&f[0][0]=g&f[1][0]=h');\n```\n\nThis encoding can also be replaced by a custom encoding method set as `encoder` option:\n\n```javascript\nvar encoded = qs.stringify({ a: { b: 'c' } }, { encoder: function (str) {\n    // Passed in values `a`, `b`, `c`\n    return // Return encoded string\n}})\n```\n\n_(Note: the `encoder` option does not apply if `encode` is `false`)_\n\nAnalogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:\n\n```javascript\nvar decoded = qs.parse('x=z', { decoder: function (str) {\n    // Passed in values `x`, `z`\n    return // Return decoded string\n}})\n```\n\nExamples beyond this point will be shown as though the output is not URI encoded for clarity. Please note that the return values in these cases *will* be URI encoded during real usage.\n\nWhen arrays are stringified, by default they are given explicit indices:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] });\n// 'a[0]=b&a[1]=c&a[2]=d'\n```\n\nYou may override this by setting the `indices` option to `false`:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] }, { indices: false });\n// 'a=b&a=c&a=d'\n```\n\nYou may use the `arrayFormat` option to specify the format of the output array:\n\n```javascript\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' })\n// 'a[0]=b&a[1]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' })\n// 'a[]=b&a[]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' })\n// 'a=b&a=c'\n```\n\nWhen objects are stringified, by default they use bracket notation:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } });\n// 'a[b][c]=d&a[b][e]=f'\n```\n\nYou may override this to use dot notation by setting the `allowDots` option to `true`:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } }, { allowDots: true });\n// 'a.b.c=d&a.b.e=f'\n```\n\nEmpty strings and null values will omit the value, but the equals sign (=) remains in place:\n\n```javascript\nassert.equal(qs.stringify({ a: '' }), 'a=');\n```\n\nKey with no values (such as an empty object or array) will return nothing:\n\n```javascript\nassert.equal(qs.stringify({ a: [] }), '');\nassert.equal(qs.stringify({ a: {} }), '');\nassert.equal(qs.stringify({ a: [{}] }), '');\nassert.equal(qs.stringify({ a: { b: []} }), '');\nassert.equal(qs.stringify({ a: { b: {}} }), '');\n```\n\nProperties that are set to `undefined` will be omitted entirely:\n\n```javascript\nassert.equal(qs.stringify({ a: null, b: undefined }), 'a=');\n```\n\nThe query string may optionally be prepended with a question mark:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { addQueryPrefix: true }), '?a=b&c=d');\n```\n\nThe delimiter may be overridden with stringify as well:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { delimiter: ';' }), 'a=b;c=d');\n```\n\nIf you only want to override the serialization of `Date` objects, you can provide a `serializeDate` option:\n\n```javascript\nvar date = new Date(7);\nassert.equal(qs.stringify({ a: date }), 'a=1970-01-01T00:00:00.007Z'.replace(/:/g, '%3A'));\nassert.equal(\n    qs.stringify({ a: date }, { serializeDate: function (d) { return d.getTime(); } }),\n    'a=7'\n);\n```\n\nYou may use the `sort` option to affect the order of parameter keys:\n\n```javascript\nfunction alphabeticalSort(a, b) {\n    return a.localeCompare(b);\n}\nassert.equal(qs.stringify({ a: 'c', z: 'y', b : 'f' }, { sort: alphabeticalSort }), 'a=c&b=f&z=y');\n```\n\nFinally, you can use the `filter` option to restrict which keys will be included in the stringified output.\nIf you pass a function, it will be called for each key to obtain the replacement value. Otherwise, if you\npass an array, it will be used to select properties and array indices for stringification:\n\n```javascript\nfunction filterFunc(prefix, value) {\n    if (prefix == 'b') {\n        // Return an `undefined` value to omit a property.\n        return;\n    }\n    if (prefix == 'e[f]') {\n        return value.getTime();\n    }\n    if (prefix == 'e[g][0]') {\n        return value * 2;\n    }\n    return value;\n}\nqs.stringify({ a: 'b', c: 'd', e: { f: new Date(123), g: [2] } }, { filter: filterFunc });\n// 'a=b&c=d&e[f]=123&e[g][0]=4'\nqs.stringify({ a: 'b', c: 'd', e: 'f' }, { filter: ['a', 'e'] });\n// 'a=b&e=f'\nqs.stringify({ a: ['b', 'c', 'd'], e: 'f' }, { filter: ['a', 0, 2] });\n// 'a[0]=b&a[2]=d'\n```\n\n### Handling of `null` values\n\nBy default, `null` values are treated like empty strings:\n\n```javascript\nvar withNull = qs.stringify({ a: null, b: '' });\nassert.equal(withNull, 'a=&b=');\n```\n\nParsing does not distinguish between parameters with and without equal signs. Both are converted to empty strings.\n\n```javascript\nvar equalsInsensitive = qs.parse('a&b=');\nassert.deepEqual(equalsInsensitive, { a: '', b: '' });\n```\n\nTo distinguish between `null` values and empty strings use the `strictNullHandling` flag. In the result string the `null`\nvalues have no `=` sign:\n\n```javascript\nvar strictNull = qs.stringify({ a: null, b: '' }, { strictNullHandling: true });\nassert.equal(strictNull, 'a&b=');\n```\n\nTo parse values without `=` back to `null` use the `strictNullHandling` flag:\n\n```javascript\nvar parsedStrictNull = qs.parse('a&b=', { strictNullHandling: true });\nassert.deepEqual(parsedStrictNull, { a: null, b: '' });\n```\n\nTo completely skip rendering keys with `null` values, use the `skipNulls` flag:\n\n```javascript\nvar nullsSkipped = qs.stringify({ a: 'b', c: null}, { skipNulls: true });\nassert.equal(nullsSkipped, 'a=b');\n```\n\n### Dealing with special character sets\n\nBy default the encoding and decoding of characters is done in `utf-8`. If you\nwish to encode querystrings to a different character set (i.e.\n[Shift JIS](https://en.wikipedia.org/wiki/Shift_JIS)) you can use the\n[`qs-iconv`](https://github.com/martinheidegger/qs-iconv) library:\n\n```javascript\nvar encoder = require('qs-iconv/encoder')('shift_jis');\nvar shiftJISEncoded = qs.stringify({ a: 'こんにちは！' }, { encoder: encoder });\nassert.equal(shiftJISEncoded, 'a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I');\n```\n\nThis also works for decoding of query strings:\n\n```javascript\nvar decoder = require('qs-iconv/decoder')('shift_jis');\nvar obj = qs.parse('a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I', { decoder: decoder });\nassert.deepEqual(obj, { a: 'こんにちは！' });\n```\n\n### RFC 3986 and RFC 1738 space encoding\n\nRFC3986 used as default option and encodes ' ' to *%20* which is backward compatible.\nIn the same time, output can be stringified as per RFC1738 with ' ' equal to '+'.\n\n```\nassert.equal(qs.stringify({ a: 'b c' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC3986' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC1738' }), 'a=b+c');\n```\n\n[1]: https://npmjs.org/package/qs\n[2]: http://versionbadg.es/ljharb/qs.svg\n[3]: https://api.travis-ci.org/ljharb/qs.svg\n[4]: https://travis-ci.org/ljharb/qs\n[5]: https://david-dm.org/ljharb/qs.svg\n[6]: https://david-dm.org/ljharb/qs\n[7]: https://david-dm.org/ljharb/qs/dev-status.svg\n[8]: https://david-dm.org/ljharb/qs?type=dev\n[9]: https://ci.testling.com/ljharb/qs.png\n[10]: https://ci.testling.com/ljharb/qs\n[11]: https://nodei.co/npm/qs.png?downloads=true&stars=true\n[license-image]: http://img.shields.io/npm/l/qs.svg\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/qs.svg\n[downloads-url]: http://npm-stat.com/charts.html?package=qs\n",
./examples/express/node_modules/express/node_modules/qs/README.md:Analogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:
./examples/express/node_modules/express/node_modules/qs/CHANGELOG.md:- [**#24**](https://github.com/ljharb/qs/issues/24) Changelog? Semver?
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/package.json:  "readme": "# mime-db\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nThis is a database of all mime types.\nIt consists of a single, public JSON file and does not include any logic,\nallowing it to remain as un-opinionated as possible with an API.\nIt aggregates data from the following sources:\n\n- http://www.iana.org/assignments/media-types/media-types.xhtml\n- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types\n\n## Installation\n\n```bash\nnpm install mime-db\n```\n\n### Database Download\n\nIf you're crazy enough to use this in the browser, you can just grab the\nJSON file using [RawGit](https://rawgit.com/). It is recommended to replace\n`master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the\nJSON format may change in the future.\n\n```\nhttps://cdn.rawgit.com/jshttp/mime-db/master/db.json\n```\n\n## Usage\n\n```js\nvar db = require('mime-db');\n\n// grab data on .js files\nvar data = db['application/javascript'];\n```\n\n## Data Structure\n\nThe JSON file is a map lookup for lowercased mime types.\nEach mime type has the following properties:\n\n- `.source` - where the mime type is defined.\n    If not set, it's probably a custom media type.\n    - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n    - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml)\n    - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types)\n- `.extensions[]` - known extensions associated with this mime type.\n- `.compressible` - whether a file of this type can be gzipped.\n- `.charset` - the default charset associated with this type, if any.\n\nIf unknown, every property could be `undefined`.\n\n## Contributing\n\nTo edit the database, only make PRs against `src/custom.json` or\n`src/custom-suffix.json`.\n\nThe `src/custom.json` file is a JSON object with the MIME type as the keys\nand the values being an object with the following keys:\n\n- `compressible` - leave out if you don't know, otherwise `true`/`false` for\n  if the data represented by the time is typically compressible.\n- `extensions` - include an array of file extensions that are associated with\n  the type.\n- `notes` - human-readable notes about the type, typically what the type is.\n- `sources` - include an array of URLs of where the MIME type and the associated\n  extensions are sourced from. This needs to be a [primary source](https://en.wikipedia.org/wiki/Primary_source);\n  links to type aggregating sites and Wikipedia are _not acceptible_.\n\nTo update the build, run `npm run build`.\n\n## Adding Custom Media Types\n\nThe best way to get new media types included in this library is to register\nthem with the IANA. The community registration procedure is outlined in\n[RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types\nregistered with the IANA are automatically pulled into this library.\n\n[npm-version-image]: https://img.shields.io/npm/v/mime-db.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg\n[npm-url]: https://npmjs.org/package/mime-db\n[travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg\n[travis-url]: https://travis-ci.org/jshttp/mime-db\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master\n[node-image]: https://img.shields.io/node/v/mime-db.svg\n[node-url]: https://nodejs.org/en/download/\n",
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/dialog-info+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/sgml-open-catalog": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.flographit": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.iptc.g2.catalogitem+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.nokia.catalogs": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-audit-dialog+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-base+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-group+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-speech+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-transform+xml": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:    "extensions": ["txt","text","conf","def","list","log","in","ini"]
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "text/prs.prop.logic": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "text/vnd.si.uricatalogue": {
./examples/express/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/README.md:It consists of a single, public JSON file and does not include any logic,
./examples/express/node_modules/express/node_modules/accepts/node_modules/negotiator/package.json:      "url": "http://blog.izs.me/"
./examples/express/node_modules/express/lib/response.js: *    res.location('../login');
./examples/express/node_modules/express/lib/response.js: *    res.redirect('../login'); // /blog/post/1 -> /blog/login
./examples/express/node_modules/express/lib/application.js:    onerror: logerror.bind(this)
./examples/express/node_modules/express/lib/application.js: * was mounted as "/blog" then the
./examples/express/node_modules/express/lib/application.js: * return value would be "/blog/admin".
./examples/express/node_modules/express/lib/application.js:function logerror(err) {
./examples/express/node_modules/express/lib/router/index.js:  // param logic
./examples/express/node_modules/express/lib/express.js:  'logger',
./examples/express/node_modules/express/History.md:  * Fix regression where `"Request aborted"` is logged using `res.sendFile`
./examples/express/node_modules/express/History.md:  * Fix `res.sendfile` logging standard write errors
./examples/express/node_modules/express/History.md:  * Fix `res.sendFile` logging standard write errors
./examples/express/node_modules/express/History.md:   - `app.configure` - use logic in your own app code
./examples/express/node_modules/express/History.md:    - Fix accepting non-object arguments to `logger`
./examples/express/node_modules/express/History.md:    - Fix backwards compatibility in `logger`
./examples/express/node_modules/express/History.md:  * Removed _pids/logs_ creation from express(1)
./examples/express/node_modules/express/History.md:  * Added support for `app.param(fn)` to define param logic
./examples/express/node_modules/express/History.md:  * Fixed blog example
./examples/express/node_modules/express/History.md:  * Added `app.param()` to map route params to async/sync logic
./examples/express/node_modules/express/History.md:    to do this with CommonJS modules. Also view the _blog_ example for
./examples/express/node_modules/express/History.md:  * Fixed missing space for combined log format
./examples/express/node_modules/express-http-proxy/.npmignore:*.log
./examples/express/node_modules/express-http-proxy/node_modules/raw-body/node_modules/iconv-lite/package.json:  "readme": "## Pure JS character encoding conversion\n\n<!-- [![Build Status](https://secure.travis-ci.org/ashtuchkin/iconv-lite.png?branch=master)](http://travis-ci.org/ashtuchkin/iconv-lite) -->\n\n * Doesn't need native code compilation. Works on Windows and in sandboxed environments like [Cloud9](http://c9.io).\n * Used in popular projects like [Express.js (body_parser)](https://github.com/expressjs/body-parser), \n   [Grunt](http://gruntjs.com/), [Nodemailer](http://www.nodemailer.com/), [Yeoman](http://yeoman.io/) and others.\n * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\n * Intuitive encode/decode API\n * Streaming support for Node v0.10+\n * Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings.\n * In-browser usage via [Browserify](https://github.com/substack/node-browserify) (~180k gzip compressed with Buffer shim included).\n * License: MIT.\n\n[![NPM Stats](https://nodei.co/npm/iconv-lite.png?downloads=true&downloadRank=true)](https://npmjs.org/packages/iconv-lite/)\n\n## Usage\n### Basic API\n```javascript\nvar iconv = require('iconv-lite');\n\n// Convert from an encoded buffer to js string.\nstr = iconv.decode(new Buffer([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');\n\n// Convert from js string to an encoded buffer.\nbuf = iconv.encode(\"Sample input string\", 'win1251');\n\n// Check if encoding is supported\niconv.encodingExists(\"us-ascii\")\n```\n\n### Streaming API (Node v0.10+)\n```javascript\n\n// Decode stream (from binary stream to js strings)\nhttp.createServer(function(req, res) {\n    var converterStream = iconv.decodeStream('win1251');\n    req.pipe(converterStream);\n\n    converterStream.on('data', function(str) {\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\n    });\n});\n\n// Convert encoding streaming example\nfs.createReadStream('file-in-win1251.txt')\n    .pipe(iconv.decodeStream('win1251'))\n    .pipe(iconv.encodeStream('ucs2'))\n    .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\nhttp.createServer(function(req, res) {\n    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n        assert(typeof body == 'string');\n        console.log(body); // full request body string\n    });\n});\n```\n\n### Extend Node.js own encodings\n```javascript\n// After this call all Node basic primitives will understand iconv-lite encodings.\niconv.extendNodeEncodings();\n\n// Examples:\nbuf = new Buffer(str, 'win1251');\nbuf.write(str, 'gbk');\nstr = buf.toString('latin1');\nassert(Buffer.isEncoding('iso-8859-15'));\nBuffer.byteLength(str, 'us-ascii');\n\nhttp.createServer(function(req, res) {\n    req.setEncoding('big5');\n    req.collect(function(err, body) {\n        console.log(body);\n    });\n});\n\nfs.createReadStream(\"file.txt\", \"shift_jis\");\n\n// External modules are also supported (if they use Node primitives, which they probably do).\nrequest = require('request');\nrequest({\n    url: \"http://github.com/\", \n    encoding: \"cp932\"\n});\n\n// To remove extensions\niconv.undoExtendNodeEncodings();\n```\n\n## Supported encodings\n\n *  All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex.\n *  Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap.\n *  All widespread singlebyte encodings: Windows 125x family, ISO-8859 family, \n    IBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library. \n    Aliases like 'latin1', 'us-ascii' also supported.\n *  All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2313, GBK, GB18030, Big5, Shift_JIS, EUC-JP.\n\nSee [all supported encodings on wiki](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).\n\nMost singlebyte encodings are generated automatically from [node-iconv](https://github.com/bnoordhuis/node-iconv). Thank you Ben Noordhuis and libiconv authors!\n\nMultibyte encodings are generated from [Unicode.org mappings](http://www.unicode.org/Public/MAPPINGS/) and [WHATWG Encoding Standard mappings](http://encoding.spec.whatwg.org/). Thank you, respective authors!\n\n\n## Encoding/decoding speed\n\nComparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0). \nNote: your results may vary, so please always check on your hardware.\n\n    operation             iconv@2.1.4   iconv-lite@0.4.7\n    ----------------------------------------------------------\n    encode('win1251')     ~96 Mb/s      ~320 Mb/s\n    decode('win1251')     ~95 Mb/s      ~246 Mb/s\n\n\n## Notes\n\nWhen decoding, be sure to supply a Buffer to decode() method, otherwise [bad things usually happen](https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding).  \nUntranslatable characters are set to � or ?. No transliteration is currently supported.  \nUses BOM to determine endianness, but doesn't remove it. Use ['strip-bom' module](https://github.com/sindresorhus/strip-bom).  \nNode versions 0.10.31 and 0.11.13 are buggy, don't use them (see #65, #77).  \n\n## Testing\n\n```bash\n$ git clone git@github.com:ashtuchkin/iconv-lite.git\n$ cd iconv-lite\n$ npm install\n$ npm test\n    \n$ # To view performance:\n$ node test/performance.js\n\n$ # To view test coverage:\n$ npm run coverage\n$ open coverage/lcov-report/index.html\n```\n\n## Adoption\n[![NPM](https://nodei.co/npm-dl/iconv-lite.png)](https://nodei.co/npm/iconv-lite/)\n[![Codeship Status for ashtuchkin/iconv-lite](https://www.codeship.io/projects/81670840-fa72-0131-4520-4a01a6c01acc/status)](https://www.codeship.io/projects/29053)\n",
./examples/express/node_modules/express-http-proxy/node_modules/raw-body/node_modules/iconv-lite/README.md:        console.log(str); // Do something with decoded strings, chunk-by-chunk.
./examples/express/node_modules/express-http-proxy/node_modules/raw-body/node_modules/iconv-lite/README.md:        console.log(body); // full request body string
./examples/express/node_modules/express-http-proxy/node_modules/raw-body/node_modules/iconv-lite/README.md:        console.log(body);
./examples/express/node_modules/opn/node_modules/is-wsl/package.json:  "readme": "# is-wsl [![Build Status](https://travis-ci.org/sindresorhus/is-wsl.svg?branch=master)](https://travis-ci.org/sindresorhus/is-wsl)\n\n> Check if the process is running inside [Windows Subsystem for Linux](https://msdn.microsoft.com/commandline/wsl/about) (Bash on Windows)\n\nCan be useful if you need to work around unimplemented or buggy features in WSL.\n\n\n## Install\n\n```\n$ npm install --save is-wsl\n```\n\n\n## Usage\n\n```js\nconst isWsl = require('is-wsl');\n\n// When running inside Windows Subsystem for Linux\nconsole.log(isWsl);\n//=> true\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
./examples/express/node_modules/opn/node_modules/is-wsl/readme.md:console.log(isWsl);
./examples/express/node_modules/micromatch/package.json:  "readme": "# micromatch [![NPM version](https://img.shields.io/npm/v/micromatch.svg?style=flat)](https://www.npmjs.com/package/micromatch) [![NPM monthly downloads](https://img.shields.io/npm/dm/micromatch.svg?style=flat)](https://npmjs.org/package/micromatch) [![NPM total downloads](https://img.shields.io/npm/dt/micromatch.svg?style=flat)](https://npmjs.org/package/micromatch) [![Linux Build Status](https://img.shields.io/travis/micromatch/micromatch.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/micromatch) [![Windows Build Status](https://img.shields.io/appveyor/ci/micromatch/micromatch.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/micromatch/micromatch)\n\n> Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Table of Contents\n\n<details>\n<summary><strong>Details</strong></summary>\n\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Why use micromatch?](#why-use-micromatch)\n  * [Matching features](#matching-features)\n- [Switching to micromatch](#switching-to-micromatch)\n  * [From minimatch](#from-minimatch)\n  * [From multimatch](#from-multimatch)\n- [API](#api)\n- [Options](#options)\n  * [options.basename](#optionsbasename)\n  * [options.bash](#optionsbash)\n  * [options.cache](#optionscache)\n  * [options.dot](#optionsdot)\n  * [options.failglob](#optionsfailglob)\n  * [options.ignore](#optionsignore)\n  * [options.matchBase](#optionsmatchbase)\n  * [options.nobrace](#optionsnobrace)\n  * [options.nocase](#optionsnocase)\n  * [options.nodupes](#optionsnodupes)\n  * [options.noext](#optionsnoext)\n  * [options.nonegate](#optionsnonegate)\n  * [options.noglobstar](#optionsnoglobstar)\n  * [options.nonull](#optionsnonull)\n  * [options.nullglob](#optionsnullglob)\n  * [options.snapdragon](#optionssnapdragon)\n  * [options.sourcemap](#optionssourcemap)\n  * [options.unescape](#optionsunescape)\n  * [options.unixify](#optionsunixify)\n- [Extended globbing](#extended-globbing)\n  * [extglobs](#extglobs)\n  * [braces](#braces)\n  * [regex character classes](#regex-character-classes)\n  * [regex groups](#regex-groups)\n  * [POSIX bracket expressions](#posix-bracket-expressions)\n- [Notes](#notes)\n  * [Bash 4.3 parity](#bash-43-parity)\n  * [Backslashes](#backslashes)\n- [Contributing](#contributing)\n- [Benchmarks](#benchmarks)\n  * [Running benchmarks](#running-benchmarks)\n  * [Latest results](#latest-results)\n- [About](#about)\n\n</details>\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save micromatch\n```\n\n## Quickstart\n\n```js\nvar mm = require('micromatch');\nmm(list, patterns[, options]);\n```\n\nThe [main export](#micromatch) takes a list of strings and one or more glob patterns:\n\n```js\nconsole.log(mm(['foo', 'bar', 'qux'], ['f*', 'b*'])); \n//=> ['foo', 'bar']\n```\n\nUse [.isMatch()](#ismatch) to get true/false:\n\n```js\nconsole.log(mm.isMatch('foo', 'f*'));  \n//=> true\n```\n\n[Switching](#switching-to-micromatch) from minimatch and multimatch is easy!\n\n## Why use micromatch?\n\n> micromatch is a [drop-in replacement](#switching-to-micromatch) for minimatch and multimatch\n\n* Supports all of the same matching features as [minimatch](https://github.com/isaacs/minimatch) and [multimatch](https://github.com/sindresorhus/multimatch)\n* Micromatch uses [snapdragon](https://github.com/jonschlinkert/snapdragon) for parsing and compiling globs, which provides granular control over the entire conversion process in a way that is easy to understand, reason about, and maintain.\n* More consistently accurate matching [than minimatch](https://github.com/yarnpkg/yarn/pull/3339), with more than 36,000 [test assertions](./test) to prove it.\n* More complete support for the Bash 4.3 specification than minimatch and multimatch. In fact, micromatch passes _all of the spec tests_ from bash, including some that bash still fails.\n* [Faster matching](#benchmarks), from a combination of optimized glob patterns, faster algorithms, and regex caching.\n* [Micromatch is safer](https://github.com/micromatch/braces#braces-is-safe), and is not subject to DoS with brace patterns, like minimatch and multimatch.\n* More reliable windows support than minimatch and multimatch.\n\n### Matching features\n\n* Support for multiple glob patterns (no need for wrappers like multimatch)\n* Wildcards (`**`, `*.js`)\n* Negation (`'!a/*.js'`, `'*!(b).js']`)\n* [extglobs](https://github.com/micromatch/extglob) (`+(x|y)`, `!(a|b)`)\n* [POSIX character classes](https://github.com/micromatch/expand-brackets) (`[[:alpha:][:digit:]]`)\n* [brace expansion](https://github.com/micromatch/braces) (`foo/{1..5}.md`, `bar/{a,b,c}.js`)\n* regex character classes (`foo-[1-5].js`)\n* regex logical \"or\" (`foo/(abc|xyz).js`)\n\nYou can mix and match these features to create whatever patterns you need!\n\n## Switching to micromatch\n\nThere is one notable difference between micromatch and minimatch in regards to how backslashes are handled. See [the notes about backslashes](#backslashes) for more information.\n\n### From minimatch\n\nUse [mm.isMatch()](#ismatch) instead of `minimatch()`:\n\n```js\nmm.isMatch('foo', 'b*');\n//=> false\n```\n\nUse [mm.match()](#match) instead of `minimatch.match()`:\n\n```js\nmm.match(['foo', 'bar'], 'b*');\n//=> 'bar'\n```\n\n### From multimatch\n\nSame signature:\n\n```js\nmm(['foo', 'bar', 'baz'], ['f*', '*z']);\n//=> ['foo', 'baz']\n```\n\n## API\n\n### [micromatch](index.js#L41)\n\nThe main function takes a list of strings and one or more glob patterns to use for matching.\n\n**Params**\n\n* `list` **{Array}**: A list of strings to match\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm(list, patterns[, options]);\n\nconsole.log(mm(['a.js', 'a.txt'], ['*.js']));\n//=> [ 'a.js' ]\n```\n\n### [.match](index.js#L93)\n\nSimilar to the main function, but `pattern` must be a string.\n\n**Params**\n\n* `list` **{Array}**: Array of strings to match\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.match(list, pattern[, options]);\n\nconsole.log(mm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));\n//=> ['a.a', 'a.aa']\n```\n\n### [.isMatch](index.js#L154)\n\nReturns true if the specified `string` matches the given glob `pattern`.\n\n**Params**\n\n* `string` **{String}**: String to match\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if the string matches the glob pattern.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.isMatch(string, pattern[, options]);\n\nconsole.log(mm.isMatch('a.a', '*.a'));\n//=> true\nconsole.log(mm.isMatch('a.b', '*.a'));\n//=> false\n```\n\n### [.some](index.js#L192)\n\nReturns true if some of the strings in the given `list` match any of the given glob `patterns`.\n\n**Params**\n\n* `list` **{String|Array}**: The string or array of strings to test. Returns as soon as the first match is found.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.some(list, patterns[, options]);\n\nconsole.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// true\nconsole.log(mm.some(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n### [.every](index.js#L228)\n\nReturns true if every string in the given `list` matches any of the given glob `patterns`.\n\n**Params**\n\n* `list` **{String|Array}**: The string or array of strings to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.every(list, patterns[, options]);\n\nconsole.log(mm.every('foo.js', ['foo.js']));\n// true\nconsole.log(mm.every(['foo.js', 'bar.js'], ['*.js']));\n// true\nconsole.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// false\nconsole.log(mm.every(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n### [.any](index.js#L260)\n\nReturns true if **any** of the given glob `patterns` match the specified `string`.\n\n**Params**\n\n* `str` **{String|Array}**: The string to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.any(string, patterns[, options]);\n\nconsole.log(mm.any('a.a', ['b.*', '*.a']));\n//=> true\nconsole.log(mm.any('a.a', 'b.*'));\n//=> false\n```\n\n### [.all](index.js#L308)\n\nReturns true if **all** of the given `patterns` match the specified string.\n\n**Params**\n\n* `str` **{String|Array}**: The string to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.all(string, patterns[, options]);\n\nconsole.log(mm.all('foo.js', ['foo.js']));\n// true\n\nconsole.log(mm.all('foo.js', ['*.js', '!foo.js']));\n// false\n\nconsole.log(mm.all('foo.js', ['*.js', 'foo.js']));\n// true\n\nconsole.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n// true\n```\n\n### [.not](index.js#L340)\n\nReturns a list of strings that _**do not match any**_ of the given `patterns`.\n\n**Params**\n\n* `list` **{Array}**: Array of strings to match.\n* `patterns` **{String|Array}**: One or more glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of strings that **do not match** the given patterns.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.not(list, patterns[, options]);\n\nconsole.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n//=> ['b.b', 'c.c']\n```\n\n### [.contains](index.js#L376)\n\nReturns true if the given `string` contains the given pattern. Similar to [.isMatch](#isMatch) but the pattern can match any part of the string.\n\n**Params**\n\n* `str` **{String}**: The string to match.\n* `patterns` **{String|Array}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if the patter matches any part of `str`.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.contains(string, pattern[, options]);\n\nconsole.log(mm.contains('aa/bb/cc', '*b'));\n//=> true\nconsole.log(mm.contains('aa/bb/cc', '*d'));\n//=> false\n```\n\n### [.matchKeys](index.js#L432)\n\nFilter the keys of the given object with the given `glob` pattern and `options`. Does not attempt to match nested keys. If you need this feature, use [glob-object](https://github.com/jonschlinkert/glob-object) instead.\n\n**Params**\n\n* `object` **{Object}**: The object with keys to filter.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Object}**: Returns an object with only keys that match the given patterns.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.matchKeys(object, patterns[, options]);\n\nvar obj = { aa: 'a', ab: 'b', ac: 'c' };\nconsole.log(mm.matchKeys(obj, '*b'));\n//=> { ab: 'b' }\n```\n\n### [.matcher](index.js#L461)\n\nReturns a memoized matcher function from the given glob `pattern` and `options`. The returned function takes a string to match as its only argument and returns true if the string is a match.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed.\n* `returns` **{Function}**: Returns a matcher function.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.matcher(pattern[, options]);\n\nvar isMatch = mm.matcher('*.!(*a)');\nconsole.log(isMatch('a.a'));\n//=> false\nconsole.log(isMatch('a.b'));\n//=> true\n```\n\n### [.capture](index.js#L536)\n\nReturns an array of matches captured by `pattern` in `string, or`null` if the pattern did not match.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `string` **{String}**: String to match\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns an array of captures if the string matches the glob pattern, otherwise `null`.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.capture(pattern, string[, options]);\n\nconsole.log(mm.capture('test/*.js', 'test/foo.js'));\n//=> ['foo']\nconsole.log(mm.capture('test/*.js', 'foo/bar.css'));\n//=> null\n```\n\n### [.makeRe](index.js#L571)\n\nCreate a regular expression from the given glob `pattern`.\n\n**Params**\n\n* `pattern` **{String}**: A glob pattern to convert to regex.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed.\n* `returns` **{RegExp}**: Returns a regex created from the given pattern.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.makeRe(pattern[, options]);\n\nconsole.log(mm.makeRe('*.js'));\n//=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n```\n\n### [.braces](index.js#L618)\n\nExpand the given brace `pattern`.\n\n**Params**\n\n* `pattern` **{String}**: String with brace pattern to expand.\n* `options` **{Object}**: Any [options](#options) to change how expansion is performed. See the [braces](https://github.com/micromatch/braces) library for all available options.\n* `returns` **{Array}**\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nconsole.log(mm.braces('foo/{a,b}/bar'));\n//=> ['foo/(a|b)/bar']\n\nconsole.log(mm.braces('foo/{a,b}/bar', {expand: true}));\n//=> ['foo/(a|b)/bar']\n```\n\n### [.create](index.js#L685)\n\nParses the given glob `pattern` and returns an array of abstract syntax trees (ASTs), with the compiled `output` and optional source `map` on each AST.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern to parse and compile.\n* `options` **{Object}**: Any [options](#options) to change how parsing and compiling is performed.\n* `returns` **{Object}**: Returns an object with the parsed AST, compiled string and optional source map.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.create(pattern[, options]);\n\nconsole.log(mm.create('abc/*.js'));\n// [{ options: { source: 'string', sourcemap: true },\n//   state: {},\n//   compilers:\n//    { ... },\n//   output: '(\\\\.[\\\\\\\\\\\\/])?abc\\\\/(?!\\\\.)(?=.)[^\\\\/]*?\\\\.js',\n//   ast:\n//    { type: 'root',\n//      errors: [],\n//      nodes:\n//       [ ... ],\n//      dot: false,\n//      input: 'abc/*.js' },\n//   parsingErrors: [],\n//   map:\n//    { version: 3,\n//      sources: [ 'string' ],\n//      names: [],\n//      mappings: 'AAAA,GAAG,EAAC,kBAAC,EAAC,EAAE',\n//      sourcesContent: [ 'abc/*.js' ] },\n//   position: { line: 1, column: 28 },\n//   content: {},\n//   files: {},\n//   idx: 6 }]\n```\n\n### [.parse](index.js#L732)\n\nParse the given `str` with the given `options`.\n\n**Params**\n\n* `str` **{String}**\n* `options` **{Object}**\n* `returns` **{Object}**: Returns an AST\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.parse(pattern[, options]);\n\nvar ast = mm.parse('a/{b,c}/d');\nconsole.log(ast);\n// { type: 'root',\n//   errors: [],\n//   input: 'a/{b,c}/d',\n//   nodes:\n//    [ { type: 'bos', val: '' },\n//      { type: 'text', val: 'a/' },\n//      { type: 'brace',\n//        nodes:\n//         [ { type: 'brace.open', val: '{' },\n//           { type: 'text', val: 'b,c' },\n//           { type: 'brace.close', val: '}' } ] },\n//      { type: 'text', val: '/d' },\n//      { type: 'eos', val: '' } ] }\n```\n\n### [.compile](index.js#L780)\n\nCompile the given `ast` or string with the given `options`.\n\n**Params**\n\n* `ast` **{Object|String}**\n* `options` **{Object}**\n* `returns` **{Object}**: Returns an object that has an `output` property with the compiled string.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.compile(ast[, options]);\n\nvar ast = mm.parse('a/{b,c}/d');\nconsole.log(mm.compile(ast));\n// { options: { source: 'string' },\n//   state: {},\n//   compilers:\n//    { eos: [Function],\n//      noop: [Function],\n//      bos: [Function],\n//      brace: [Function],\n//      'brace.open': [Function],\n//      text: [Function],\n//      'brace.close': [Function] },\n//   output: [ 'a/(b|c)/d' ],\n//   ast:\n//    { ... },\n//   parsingErrors: [] }\n```\n\n### [.clearCache](index.js#L801)\n\nClear the regex cache.\n\n**Example**\n\n```js\nmm.clearCache();\n```\n\n## Options\n\n* [basename](#optionsbasename)\n* [bash](#optionsbash)\n* [cache](#optionscache)\n* [dot](#optionsdot)\n* [failglob](#optionsfailglob)\n* [ignore](#optionsignore)\n* [matchBase](#optionsmatchBase)\n* [nobrace](#optionsnobrace)\n* [nocase](#optionsnocase)\n* [nodupes](#optionsnodupes)\n* [noext](#optionsnoext)\n* [noglobstar](#optionsnoglobstar)\n* [nonull](#optionsnonull)\n* [nullglob](#optionsnullglob)\n* [snapdragon](#optionssnapdragon)\n* [sourcemap](#optionssourcemap)\n* [unescape](#optionsunescape)\n* [unixify](#optionsunixify)\n\n### options.basename\n\nAllow glob patterns without slashes to match a file path based on its basename. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `matchBase`.\n\n**Type**: `Boolean`\n\n**Default**: `false`\n\n**Example**\n\n```js\nmm(['a/b.js', 'a/c.md'], '*.js');\n//=> []\n\nmm(['a/b.js', 'a/c.md'], '*.js', {matchBase: true});\n//=> ['a/b.js']\n```\n\n### options.bash\n\nEnabled by default, this option enforces bash-like behavior with stars immediately following a bracket expression. Bash bracket expressions are similar to regex character classes, but unlike regex, a star following a bracket expression **does not repeat the bracketed characters**. Instead, the star is treated the same as an other star.\n\n**Type**: `Boolean`\n\n**Default**: `true`\n\n**Example**\n\n```js\nvar files = ['abc', 'ajz'];\nconsole.log(mm(files, '[a-c]*'));\n//=> ['abc', 'ajz']\n\nconsole.log(mm(files, '[a-c]*', {bash: false}));\n```\n\n### options.cache\n\nDisable regex and function memoization.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.dot\n\nMatch dotfiles. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `dot`.\n\n**Type**: `Boolean`\n\n**Default**: `false`\n\n### options.failglob\n\nSimilar to the `--failglob` behavior in Bash, throws an error when no matches are found.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.ignore\n\nString or array of glob patterns to match files to ignore.\n\n**Type**: `String|Array`\n\n**Default**: `undefined`\n\n### options.matchBase\n\nAlias for [options.basename](#options-basename).\n\n### options.nobrace\n\nDisable expansion of brace patterns. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `nobrace`.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nSee [braces](https://github.com/micromatch/braces) for more information about extended brace expansion.\n\n### options.nocase\n\nUse a case-insensitive regex for matching files. Same behavior as [minimatch](https://github.com/isaacs/minimatch).\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.nodupes\n\nRemove duplicate elements from the result array.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Example**\n\nExample of using the `unescape` and `nodupes` options together:\n\n```js\nmm.match(['a/b/c', 'a/b/c'], 'a/b/c');\n//=> ['a/b/c', 'a/b/c']\n\nmm.match(['a/b/c', 'a/b/c'], 'a/b/c', {nodupes: true});\n//=> ['abc']\n```\n\n### options.noext\n\nDisable extglob support, so that extglobs are regarded as literal characters.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Examples**\n\n```js\nmm(['a/z', 'a/b', 'a/!(z)'], 'a/!(z)');\n//=> ['a/b', 'a/!(z)']\n\nmm(['a/z', 'a/b', 'a/!(z)'], 'a/!(z)', {noext: true});\n//=> ['a/!(z)'] (matches only as literal characters)\n```\n\n### options.nonegate\n\nDisallow negation (`!`) patterns, and treat leading `!` as a literal character to match.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.noglobstar\n\nDisable matching with globstars (`**`).\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n```js\nmm(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**');\n//=> ['a/b', 'a/b/c', 'a/b/c/d']\n\nmm(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**', {noglobstar: true});\n//=> ['a/b']\n```\n\n### options.nonull\n\nAlias for [options.nullglob](#options-nullglob).\n\n### options.nullglob\n\nIf `true`, when no matches are found the actual (arrayified) glob pattern is returned instead of an empty array. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `nonull`.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.snapdragon\n\nPass your own instance of [snapdragon](https://github.com/jonschlinkert/snapdragon), to customize parsers or compilers.\n\n**Type**: `Object`\n\n**Default**: `undefined`\n\n### options.sourcemap\n\nGenerate a source map by enabling the `sourcemap` option with the `.parse`, `.compile`, or `.create` methods.\n\n_(Note that sourcemaps are currently not enabled for brace patterns)_\n\n**Examples**\n\n``` js\nvar mm = require('micromatch');\nvar pattern = '*(*(of*(a)x)z)';\n\nvar res = mm.create('abc/*.js', {sourcemap: true});\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'string' ],\n//   names: [],\n//   mappings: 'AAAA,GAAG,EAAC,iBAAC,EAAC,EAAE',\n//   sourcesContent: [ 'abc/*.js' ] }\n\nvar ast = mm.parse('abc/**/*.js');\nvar res = mm.compile(ast, {sourcemap: true});\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'string' ],\n//   names: [],\n//   mappings: 'AAAA,GAAG,EAAC,2BAAE,EAAC,iBAAC,EAAC,EAAE',\n//   sourcesContent: [ 'abc/**/*.js' ] }\n\nvar ast = mm.parse(pattern);\nvar res = mm.compile(ast, {sourcemap: true});\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'string' ],\n//   names: [],\n//   mappings: 'AAAA,CAAE,CAAE,EAAE,CAAE,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC',\n//   sourcesContent: [ '*(*(of*(a)x)z)' ] }\n```\n\n### options.unescape\n\nRemove backslashes from returned matches.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Example**\n\nIn this example we want to match a literal `*`:\n\n```js\nmm.match(['abc', 'a\\\\*c'], 'a\\\\*c');\n//=> ['a\\\\*c']\n\nmm.match(['abc', 'a\\\\*c'], 'a\\\\*c', {unescape: true});\n//=> ['a*c']\n```\n\n### options.unixify\n\nConvert path separators on returned files to posix/unix-style forward slashes.\n\n**Type**: `Boolean`\n\n**Default**: `true` on windows, `false` everywhere else\n\n**Example**\n\n```js\nmm.match(['a\\\\b\\\\c'], 'a/**');\n//=> ['a/b/c']\n\nmm.match(['a\\\\b\\\\c'], {unixify: false});\n//=> ['a\\\\b\\\\c']\n```\n\n## Extended globbing\n\nMicromatch also supports extended globbing features.\n\n### extglobs\n\nExtended globbing, as described by the bash man page:\n\n| **pattern** | **regex equivalent** | **description** | \n| --- | --- | --- |\n| `?(pattern)` | `(pattern)?` | Matches zero or one occurrence of the given patterns |\n| `*(pattern)` | `(pattern)*` | Matches zero or more occurrences of the given patterns |\n| `+(pattern)` | `(pattern)+` | Matches one or more occurrences of the given patterns |\n| `@(pattern)` | `(pattern)` <sup>*</sup> | Matches one of the given patterns |\n| `!(pattern)` | N/A (equivalent regex is much more complicated) | Matches anything except one of the given patterns |\n\n<sup><strong>*</strong></sup> Note that `@` isn't a RegEx character.\n\nPowered by [extglob](https://github.com/micromatch/extglob). Visit that library for the full range of options or to report extglob related issues.\n\n### braces\n\nBrace patterns can be used to match specific ranges or sets of characters. For example, the pattern `*/{1..3}/*` would match any of following strings:\n\n```\nfoo/1/bar\nfoo/2/bar\nfoo/3/bar\nbaz/1/qux\nbaz/2/qux\nbaz/3/qux\n```\n\nVisit [braces](https://github.com/micromatch/braces) to see the full range of features and options related to brace expansion, or to create brace matching or expansion related issues.\n\n### regex character classes\n\nGiven the list: `['a.js', 'b.js', 'c.js', 'd.js', 'E.js']`:\n\n* `[ac].js`: matches both `a` and `c`, returning `['a.js', 'c.js']`\n* `[b-d].js`: matches from `b` to `d`, returning `['b.js', 'c.js', 'd.js']`\n* `[b-d].js`: matches from `b` to `d`, returning `['b.js', 'c.js', 'd.js']`\n* `a/[A-Z].js`: matches and uppercase letter, returning `['a/E.md']`\n\nLearn about [regex character classes](http://www.regular-expressions.info/charclass.html).\n\n### regex groups\n\nGiven `['a.js', 'b.js', 'c.js', 'd.js', 'E.js']`:\n\n* `(a|c).js`: would match either `a` or `c`, returning `['a.js', 'c.js']`\n* `(b|d).js`: would match either `b` or `d`, returning `['b.js', 'd.js']`\n* `(b|[A-Z]).js`: would match either `b` or an uppercase letter, returning `['b.js', 'E.js']`\n\nAs with regex, parens can be nested, so patterns like `((a|b)|c)/b` will work. Although brace expansion might be friendlier to use, depending on preference.\n\n### POSIX bracket expressions\n\nPOSIX brackets are intended to be more user-friendly than regex character classes. This of course is in the eye of the beholder.\n\n**Example**\n\n```js\nmm.isMatch('a1', '[[:alpha:][:digit:]]');\n//=> true\n\nmm.isMatch('a1', '[[:alpha:][:alpha:]]');\n//=> false\n```\n\nSee [expand-brackets](https://github.com/jonschlinkert/expand-brackets) for more information about bracket expressions.\n\n***\n\n## Notes\n\n### Bash 4.3 parity\n\nWhenever possible matching behavior is based on behavior Bash 4.3, which is mostly consistent with minimatch.\n\nHowever, it's suprising how many edge cases and rabbit holes there are with glob matching, and since there is no real glob specification, and micromatch is more accurate than both Bash and minimatch, there are cases where best-guesses were made for behavior. In a few cases where Bash had no answers, we used wildmatch (used by git) as a fallback.\n\n### Backslashes\n\nThere is an important, notable difference between minimatch and micromatch _in regards to how backslashes are handled_ in glob patterns.\n\n* Micromatch exclusively and explicitly reserves backslashes for escaping characters in a glob pattern, even on windows. This is consistent with bash behavior.\n* Minimatch converts all backslashes to forward slashes, which means you can't use backslashes to escape any characters in your glob patterns.\n\nWe made this decision for micromatch for a couple of reasons:\n\n* consistency with bash conventions.\n* glob patterns are not filepaths. They are a type of [regular language](https://en.wikipedia.org/wiki/Regular_language) that is converted to a JavaScript regular expression. Thus, when forward slashes are defined in a glob pattern, the resulting regular expression will match windows or POSIX path separators just fine.\n\n**A note about joining paths to globs**\n\nNote that when you pass something like `path.join('foo', '*')` to micromatch, you are creating a filepath and expecting it to still work as a glob pattern. This causes problems on windows, since the `path.sep` is `\\\\`.\n\nIn other words, since `\\\\` is reserved as an escape character in globs, on windows `path.join('foo', '*')` would result in `foo\\\\*`, which tells micromatch to match `*` as a literal character. This is the same behavior as bash.\n\n## Contributing\n\nAll contributions are welcome! Please read [the contributing guide](.github/contributing.md) to get started.\n\n**Bug reports**\n\nPlease create an issue if you encounter a bug or matching behavior that doesn't seem correct. If you find a matching-related issue, please:\n\n* [research existing issues first](../../issues) (open and closed)\n* visit the [GNU Bash documentation](https://www.gnu.org/software/bash/manual/) to see how Bash deals with the pattern\n* visit the [minimatch](https://github.com/isaacs/minimatch) documentation to cross-check expected behavior in node.js\n* if all else fails, since there is no real specification for globs we will probably need to discuss expected behavior and decide how to resolve it. which means any detail you can provide to help with this discussion would be greatly appreciated.\n\n**Platform issues**\n\nIt's important to us that micromatch work consistently on all platforms. If you encounter any platform-specific matching or path related issues, please let us know (pull requests are also greatly appreciated).\n\n## Benchmarks\n\n### Running benchmarks\n\nInstall dev dependencies:\n\n```bash\nnpm i -d && npm run benchmark\n```\n\n### Latest results\n\nAs of February 18, 2018 (longer bars are better):\n\n```sh\n# braces-globstar-large-list (485691 bytes)\n  micromatch ██████████████████████████████████████████████████ (517 ops/sec ±0.49%)\n  minimatch  █ (18.92 ops/sec ±0.54%)\n  multimatch █ (18.94 ops/sec ±0.62%)\n\n  micromatch is faster by an avg. of 2,733%\n\n# braces-multiple (3362 bytes)\n  micromatch ██████████████████████████████████████████████████ (33,625 ops/sec ±0.45%)\n  minimatch   (2.92 ops/sec ±3.26%)\n  multimatch  (2.90 ops/sec ±2.76%)\n\n  micromatch is faster by an avg. of 1,156,935%\n\n# braces-range (727 bytes)\n  micromatch █████████████████████████████████████████████████ (155,220 ops/sec ±0.56%)\n  minimatch  ██████ (20,186 ops/sec ±1.27%)\n  multimatch ██████ (19,809 ops/sec ±0.60%)\n\n  micromatch is faster by an avg. of 776%\n\n# braces-set (2858 bytes)\n  micromatch █████████████████████████████████████████████████ (24,354 ops/sec ±0.92%)\n  minimatch  █████ (2,566 ops/sec ±0.56%)\n  multimatch ████ (2,431 ops/sec ±1.25%)\n\n  micromatch is faster by an avg. of 975%\n\n# globstar-large-list (485686 bytes)\n  micromatch █████████████████████████████████████████████████ (504 ops/sec ±0.45%)\n  minimatch  ███ (33.36 ops/sec ±1.08%)\n  multimatch ███ (33.19 ops/sec ±1.35%)\n\n  micromatch is faster by an avg. of 1,514%\n\n# globstar-long-list (90647 bytes)\n  micromatch ██████████████████████████████████████████████████ (2,694 ops/sec ±1.08%)\n  minimatch  ████████████████ (870 ops/sec ±1.09%)\n  multimatch ████████████████ (862 ops/sec ±0.84%)\n\n  micromatch is faster by an avg. of 311%\n\n# globstar-short-list (182 bytes)\n  micromatch ██████████████████████████████████████████████████ (328,921 ops/sec ±1.06%)\n  minimatch  █████████ (64,808 ops/sec ±1.42%)\n  multimatch ████████ (57,991 ops/sec ±2.11%)\n\n  micromatch is faster by an avg. of 536%\n\n# no-glob (701 bytes)\n  micromatch █████████████████████████████████████████████████ (415,935 ops/sec ±0.36%)\n  minimatch  ███████████ (92,730 ops/sec ±1.44%)\n  multimatch █████████ (81,958 ops/sec ±2.13%)\n\n  micromatch is faster by an avg. of 476%\n\n# star-basename-long (12339 bytes)\n  micromatch █████████████████████████████████████████████████ (7,963 ops/sec ±0.36%)\n  minimatch  ███████████████████████████████ (5,072 ops/sec ±0.83%)\n  multimatch ███████████████████████████████ (5,028 ops/sec ±0.40%)\n\n  micromatch is faster by an avg. of 158%\n\n# star-basename-short (349 bytes)\n  micromatch ██████████████████████████████████████████████████ (269,552 ops/sec ±0.70%)\n  minimatch  ██████████████████████ (122,457 ops/sec ±1.39%)\n  multimatch ████████████████████ (110,788 ops/sec ±1.99%)\n\n  micromatch is faster by an avg. of 231%\n\n# star-folder-long (19207 bytes)\n  micromatch █████████████████████████████████████████████████ (3,806 ops/sec ±0.38%)\n  minimatch  ████████████████████████████ (2,204 ops/sec ±0.32%)\n  multimatch ██████████████████████████ (2,020 ops/sec ±1.07%)\n\n  micromatch is faster by an avg. of 180%\n\n# star-folder-short (551 bytes)\n  micromatch ██████████████████████████████████████████████████ (249,077 ops/sec ±0.40%)\n  minimatch  ███████████ (59,431 ops/sec ±1.67%)\n  multimatch ███████████ (55,569 ops/sec ±1.43%)\n\n  micromatch is faster by an avg. of 433%\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [braces](https://www.npmjs.com/package/braces): Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support… [more](https://github.com/micromatch/braces) | [homepage](https://github.com/micromatch/braces \"Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.\")\n* [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/jonschlinkert/expand-brackets \"Expand POSIX bracket expressions (character classes) in glob patterns.\")\n* [extglob](https://www.npmjs.com/package/extglob): Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob… [more](https://github.com/micromatch/extglob) | [homepage](https://github.com/micromatch/extglob \"Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\")\n* [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n* [nanomatch](https://www.npmjs.com/package/nanomatch): Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash… [more](https://github.com/micromatch/nanomatch) | [homepage](https://github.com/micromatch/nanomatch \"Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash 4.3 wildcard support only (no support for exglobs, posix brackets or braces)\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 457 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 12 | [es128](https://github.com/es128) |\n| 8 | [doowb](https://github.com/doowb) |\n| 3 | [paulmillr](https://github.com/paulmillr) |\n| 2 | [TrySound](https://github.com/TrySound) |\n| 2 | [MartinKolarik](https://github.com/MartinKolarik) |\n| 2 | [charlike-old](https://github.com/charlike-old) |\n| 1 | [amilajack](https://github.com/amilajack) |\n| 1 | [mrmlnc](https://github.com/mrmlnc) |\n| 1 | [devongovett](https://github.com/devongovett) |\n| 1 | [DianeLooney](https://github.com/DianeLooney) |\n| 1 | [UltCombo](https://github.com/UltCombo) |\n| 1 | [tomByrer](https://github.com/tomByrer) |\n| 1 | [fidian](https://github.com/fidian) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 18, 2018._",
./examples/express/node_modules/micromatch/node_modules/extglob/package.json:    "helper-changelog": "^0.3.0",
./examples/express/node_modules/micromatch/node_modules/extglob/package.json:      "helper-changelog"
./examples/express/node_modules/micromatch/node_modules/extglob/package.json:  "readme": "# extglob [![NPM version](https://img.shields.io/npm/v/extglob.svg?style=flat)](https://www.npmjs.com/package/extglob) [![NPM monthly downloads](https://img.shields.io/npm/dm/extglob.svg?style=flat)](https://npmjs.org/package/extglob) [![NPM total downloads](https://img.shields.io/npm/dt/extglob.svg?style=flat)](https://npmjs.org/package/extglob) [![Linux Build Status](https://img.shields.io/travis/micromatch/extglob.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/extglob) [![Windows Build Status](https://img.shields.io/appveyor/ci/micromatch/extglob.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/micromatch/extglob)\n\n> Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save extglob\n```\n\n* Convert an extglob string to a regex-compatible string.\n* More complete (and correct) support than [minimatch](https://github.com/isaacs/minimatch) (minimatch fails a large percentage of the extglob tests)\n* Handles [negation patterns](#extglob-patterns)\n* Handles [nested patterns](#extglob-patterns)\n* Organized code base, easy to maintain and make changes when edge cases arise\n* As you can see by the [benchmarks](#benchmarks), extglob doesn't pay with speed for it's completeness, accuracy and quality.\n\n**Heads up!**: This library only supports extglobs, to handle full glob patterns and other extended globbing features use [micromatch](https://github.com/jonschlinkert/micromatch) instead.\n\n## Usage\n\nThe main export is a function that takes a string and options, and returns an object with the parsed AST and the compiled `.output`, which is a regex-compatible string that can be used for matching.\n\n```js\nvar extglob = require('extglob');\nconsole.log(extglob('!(xyz)*.js'));\n```\n\n## Extglob cheatsheet\n\nExtended globbing patterns can be defined as follows (as described by the [bash man page](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html)):\n\n| **pattern** | **regex equivalent** | **description** | \n| --- | --- | --- |\n| `?(pattern-list)` | `(...|...)?` | Matches zero or one occurrence of the given pattern(s) |\n| `*(pattern-list)` | `(...|...)*` | Matches zero or more occurrences of the given pattern(s) |\n| `+(pattern-list)` | `(...|...)+` | Matches one or more occurrences of the given pattern(s) |\n| `@(pattern-list)` | `(...|...)` <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> | Matches one of the given pattern(s) |\n| `!(pattern-list)` | N/A | Matches anything except one of the given pattern(s) |\n\n## API\n\n### [extglob](index.js#L36)\n\nConvert the given `extglob` pattern into a regex-compatible string. Returns an object with the compiled result and the parsed AST.\n\n**Params**\n\n* `pattern` **{String}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nconsole.log(extglob('*.!(*a)'));\n//=> '(?!\\\\.)[^/]*?\\\\.(?!(?!\\\\.)[^/]*?a\\\\b).*?'\n```\n\n### [.match](index.js#L56)\n\nTakes an array of strings and an extglob pattern and returns a new array that contains only the strings that match the pattern.\n\n**Params**\n\n* `list` **{Array}**: Array of strings to match\n* `pattern` **{String}**: Extglob pattern\n* `options` **{Object}**\n* `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nconsole.log(extglob.match(['a.a', 'a.b', 'a.c'], '*.!(*a)'));\n//=> ['a.b', 'a.c']\n```\n\n### [.isMatch](index.js#L111)\n\nReturns true if the specified `string` matches the given extglob `pattern`.\n\n**Params**\n\n* `string` **{String}**: String to match\n* `pattern` **{String}**: Extglob pattern\n* `options` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar extglob = require('extglob');\n\nconsole.log(extglob.isMatch('a.a', '*.!(*a)'));\n//=> false\nconsole.log(extglob.isMatch('a.b', '*.!(*a)'));\n//=> true\n```\n\n### [.contains](index.js#L150)\n\nReturns true if the given `string` contains the given pattern. Similar to `.isMatch` but the pattern can match any part of the string.\n\n**Params**\n\n* `str` **{String}**: The string to match.\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `options` **{Object}**\n* `returns` **{Boolean}**: Returns true if the patter matches any part of `str`.\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nconsole.log(extglob.contains('aa/bb/cc', '*b'));\n//=> true\nconsole.log(extglob.contains('aa/bb/cc', '*d'));\n//=> false\n```\n\n### [.matcher](index.js#L184)\n\nTakes an extglob pattern and returns a matcher function. The returned function takes the string to match as its only argument.\n\n**Params**\n\n* `pattern` **{String}**: Extglob pattern\n* `options` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nvar isMatch = extglob.matcher('*.!(*a)');\n\nconsole.log(isMatch('a.a'));\n//=> false\nconsole.log(isMatch('a.b'));\n//=> true\n```\n\n### [.create](index.js#L214)\n\nConvert the given `extglob` pattern into a regex-compatible string. Returns an object with the compiled result and the parsed AST.\n\n**Params**\n\n* `str` **{String}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nconsole.log(extglob.create('*.!(*a)').output);\n//=> '(?!\\\\.)[^/]*?\\\\.(?!(?!\\\\.)[^/]*?a\\\\b).*?'\n```\n\n### [.capture](index.js#L248)\n\nReturns an array of matches captured by `pattern` in `string`, or `null` if the pattern did not match.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `string` **{String}**: String to match\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns an array of captures if the string matches the glob pattern, otherwise `null`.\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nextglob.capture(pattern, string[, options]);\n\nconsole.log(extglob.capture('test/*.js', 'test/foo.js'));\n//=> ['foo']\nconsole.log(extglob.capture('test/*.js', 'foo/bar.css'));\n//=> null\n```\n\n### [.makeRe](index.js#L281)\n\nCreate a regular expression from the given `pattern` and `options`.\n\n**Params**\n\n* `pattern` **{String}**: The pattern to convert to regex.\n* `options` **{Object}**\n* `returns` **{RegExp}**\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nvar re = extglob.makeRe('*.!(*a)');\nconsole.log(re);\n//=> /^[^\\/]*?\\.(?![^\\/]*?a)[^\\/]*?$/\n```\n\n## Options\n\nAvailable options are based on the options from Bash (and the option names used in bash).\n\n### options.nullglob\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nWhen enabled, the pattern itself will be returned when no matches are found.\n\n### options.nonull\n\nAlias for [options.nullglob](#optionsnullglob), included for parity with minimatch.\n\n### options.cache\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nFunctions are memoized based on the given glob patterns and options. Disable memoization by setting `options.cache` to false.\n\n### options.failglob\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nThrow an error is no matches are found.\n\n## Benchmarks\n\nLast run on December 21, 2017\n\n```sh\n# negation-nested (49 bytes)\n  extglob x 2,228,255 ops/sec ±0.98% (89 runs sampled)\n  minimatch x 207,875 ops/sec ±0.61% (91 runs sampled)\n\n  fastest is extglob (by 1072% avg)\n\n# negation-simple (43 bytes)\n  extglob x 2,205,668 ops/sec ±1.00% (91 runs sampled)\n  minimatch x 311,923 ops/sec ±1.25% (91 runs sampled)\n\n  fastest is extglob (by 707% avg)\n\n# range-false (57 bytes)\n  extglob x 2,263,877 ops/sec ±0.40% (94 runs sampled)\n  minimatch x 271,372 ops/sec ±1.02% (91 runs sampled)\n\n  fastest is extglob (by 834% avg)\n\n# range-true (56 bytes)\n  extglob x 2,161,891 ops/sec ±0.41% (92 runs sampled)\n  minimatch x 268,265 ops/sec ±1.17% (91 runs sampled)\n\n  fastest is extglob (by 806% avg)\n\n# star-simple (46 bytes)\n  extglob x 2,211,081 ops/sec ±0.49% (92 runs sampled)\n  minimatch x 343,319 ops/sec ±0.59% (91 runs sampled)\n\n  fastest is extglob (by 644% avg)\n\n```\n\n## Differences from Bash\n\nThis library has complete parity with Bash 4.3 with only a couple of minor differences.\n\n* In some cases Bash returns true if the given string \"contains\" the pattern, whereas this library returns true if the string is an exact match for the pattern. You can relax this by setting `options.contains` to true.\n* This library is more accurate than Bash and thus does not fail some of the tests that Bash 4.3 still lists as failing in their unit tests\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [braces](https://www.npmjs.com/package/braces): Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support… [more](https://github.com/micromatch/braces) | [homepage](https://github.com/micromatch/braces \"Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.\")\n* [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/jonschlinkert/expand-brackets \"Expand POSIX bracket expressions (character classes) in glob patterns.\")\n* [expand-range](https://www.npmjs.com/package/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. Used… [more](https://github.com/jonschlinkert/expand-range) | [homepage](https://github.com/jonschlinkert/expand-range \"Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. Used by [micromatch].\")\n* [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/micromatch/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 49 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [isiahmeadows](https://github.com/isiahmeadows) |\n| 1 | [doowb](https://github.com/doowb) |\n| 1 | [devongovett](https://github.com/devongovett) |\n| 1 | [mjbvz](https://github.com/mjbvz) |\n| 1 | [shinnn](https://github.com/shinnn) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on December 21, 2017._\n\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\"  class=\"footnote-item\">`@` isn \"'t a RegEx character.\" <a href=\"#fnref1\" class=\"footnote-backref\">↩</a>\n\n</li>\n</ol>\n</section>",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/package.json:    "helper-changelog": "^0.3.0",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/package.json:      "helper-changelog"
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/package.json:  "readme": "# expand-brackets [![NPM version](https://img.shields.io/npm/v/expand-brackets.svg?style=flat)](https://www.npmjs.com/package/expand-brackets) [![NPM monthly downloads](https://img.shields.io/npm/dm/expand-brackets.svg?style=flat)](https://npmjs.org/package/expand-brackets)  [![NPM total downloads](https://img.shields.io/npm/dt/expand-brackets.svg?style=flat)](https://npmjs.org/package/expand-brackets) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/expand-brackets.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/expand-brackets) [![Windows Build Status](https://img.shields.io/appveyor/ci/jonschlinkert/expand-brackets.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/jonschlinkert/expand-brackets)\n\n> Expand POSIX bracket expressions (character classes) in glob patterns.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save expand-brackets\n```\n\n## Usage\n\n```js\nvar brackets = require('expand-brackets');\nbrackets(string[, options]);\n```\n\n**Params**\n\nThe main export is a function that takes the following parameters:\n\n* `pattern` **{String}**: the pattern to convert\n* `options` **{Object}**: optionally supply an options object\n* `returns` **{String}**: returns a string that can be used to create a regex\n\n**Example**\n\n```js\nconsole.log(brackets('[![:lower:]]'));\n//=> '[^a-z]'\n```\n\n## API\n\n### [brackets](index.js#L29)\n\nParses the given POSIX character class `pattern` and returns a\nstring that can be used for creating regular expressions for matching.\n\n**Params**\n\n* `pattern` **{String}**\n* `options` **{Object}**\n* `returns` **{Object}**\n\n### [.match](index.js#L54)\n\nTakes an array of strings and a POSIX character class pattern, and returns a new array with only the strings that matched the pattern.\n\n**Example**\n\n```js\nvar brackets = require('expand-brackets');\nconsole.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));\n//=> ['a']\n\nconsole.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));\n//=> ['a', 'ab']\n```\n\n**Params**\n\n* `arr` **{Array}**: Array of strings to match\n* `pattern` **{String}**: POSIX character class pattern(s)\n* `options` **{Object}**\n* `returns` **{Array}**\n\n### [.isMatch](index.js#L100)\n\nReturns true if the specified `string` matches the given brackets `pattern`.\n\n**Example**\n\n```js\nvar brackets = require('expand-brackets');\n\nconsole.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));\n//=> true\nconsole.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));\n//=> false\n```\n\n**Params**\n\n* `string` **{String}**: String to match\n* `pattern` **{String}**: Poxis pattern\n* `options` **{String}**\n* `returns` **{Boolean}**\n\n### [.matcher](index.js#L123)\n\nTakes a POSIX character class pattern and returns a matcher function. The returned function takes the string to match as its only argument.\n\n**Example**\n\n```js\nvar brackets = require('expand-brackets');\nvar isMatch = brackets.matcher('[[:lower:]].[[:upper:]]');\n\nconsole.log(isMatch('a.a'));\n//=> false\nconsole.log(isMatch('a.A'));\n//=> true\n```\n\n**Params**\n\n* `pattern` **{String}**: Poxis pattern\n* `options` **{String}**\n* `returns` **{Boolean}**\n\n### [.makeRe](index.js#L145)\n\nCreate a regular expression from the given `pattern`.\n\n**Example**\n\n```js\nvar brackets = require('expand-brackets');\nvar re = brackets.makeRe('[[:alpha:]]');\nconsole.log(re);\n//=> /^(?:[a-zA-Z])$/\n```\n\n**Params**\n\n* `pattern` **{String}**: The pattern to convert to regex.\n* `options` **{Object}**\n* `returns` **{RegExp}**\n\n### [.create](index.js#L187)\n\nParses the given POSIX character class `pattern` and returns an object with the compiled `output` and optional source `map`.\n\n**Example**\n\n```js\nvar brackets = require('expand-brackets');\nconsole.log(brackets('[[:alpha:]]'));\n// { options: { source: 'string' },\n//   input: '[[:alpha:]]',\n//   state: {},\n//   compilers:\n//    { eos: [Function],\n//      noop: [Function],\n//      bos: [Function],\n//      not: [Function],\n//      escape: [Function],\n//      text: [Function],\n//      posix: [Function],\n//      bracket: [Function],\n//      'bracket.open': [Function],\n//      'bracket.inner': [Function],\n//      'bracket.literal': [Function],\n//      'bracket.close': [Function] },\n//   output: '[a-zA-Z]',\n//   ast:\n//    { type: 'root',\n//      errors: [],\n//      nodes: [ [Object], [Object], [Object] ] },\n//   parsingErrors: [] }\n```\n\n**Params**\n\n* `pattern` **{String}**\n* `options` **{Object}**\n* `returns` **{Object}**\n\n## Options\n\n### options.sourcemap\n\nGenerate a source map for the given pattern.\n\n**Example**\n\n```js\nvar res = brackets('[:alpha:]', {sourcemap: true});\n\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'brackets' ],\n//   names: [],\n//   mappings: 'AAAA,MAAS',\n//   sourcesContent: [ '[:alpha:]' ] }\n```\n\n### POSIX Character classes\n\nThe following named POSIX bracket expressions are supported:\n\n* `[:alnum:]`: Alphanumeric characters (`a-zA-Z0-9]`)\n* `[:alpha:]`: Alphabetic characters (`a-zA-Z]`)\n* `[:blank:]`: Space and tab (`[ t]`)\n* `[:digit:]`: Digits (`[0-9]`)\n* `[:lower:]`: Lowercase letters (`[a-z]`)\n* `[:punct:]`: Punctuation and symbols. (`[!\"#$%&'()*+, -./:;<=>?@ [\\]^_``{|}~]`)\n* `[:upper:]`: Uppercase letters (`[A-Z]`)\n* `[:word:]`: Word characters (letters, numbers and underscores) (`[A-Za-z0-9_]`)\n* `[:xdigit:]`: Hexadecimal digits (`[A-Fa-f0-9]`)\n\nSee [posix-character-classes](https://github.com/jonschlinkert/posix-character-classes) for more details.\n\n**Not supported**\n\n* [equivalence classes](https://www.gnu.org/software/gawk/manual/html_node/Bracket-Expressions.html) are not supported\n* [POSIX.2 collating symbols](https://www.gnu.org/software/gawk/manual/html_node/Bracket-Expressions.html) are not supported\n\n## Changelog\n\n### v2.0.0\n\n**Breaking changes**\n\n* The main export now returns the compiled string, instead of the object returned from the compiler\n\n**Added features**\n\n* Adds a `.create` method to do what the main function did before v2.0.0\n\n### v0.2.0\n\nIn addition to performance and matching improvements, the v0.2.0 refactor adds complete POSIX character class support, with the exception of equivalence classes and POSIX.2 collating symbols which are not relevant to node.js usage.\n\n**Added features**\n\n* parser is exposed, so that expand-brackets parsers can be used by upstream parsers (like [micromatch](https://github.com/jonschlinkert/micromatch))\n* compiler is exposed, so that expand-brackets compilers can be used by upstream compilers\n* source maps\n\n**source map example**\n\n```js\nvar brackets = require('expand-brackets');\nvar res = brackets('[:alpha:]');\nconsole.log(res.map);\n\n{ version: 3,\n     sources: [ 'brackets' ],\n     names: [],\n     mappings: 'AAAA,MAAS',\n     sourcesContent: [ '[:alpha:]' ] }\n```\n\n## About\n\n### Related projects\n\n* [braces](https://www.npmjs.com/package/braces): Fast, comprehensive, bash-like brace expansion implemented in JavaScript. Complete support for the Bash 4.3 braces… [more](https://github.com/jonschlinkert/braces) | [homepage](https://github.com/jonschlinkert/braces \"Fast, comprehensive, bash-like brace expansion implemented in JavaScript. Complete support for the Bash 4.3 braces specification, without sacrificing speed.\")\n* [extglob](https://www.npmjs.com/package/extglob): Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob… [more](https://github.com/jonschlinkert/extglob) | [homepage](https://github.com/jonschlinkert/extglob \"Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n* [nanomatch](https://www.npmjs.com/package/nanomatch): Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash… [more](https://github.com/jonschlinkert/nanomatch) | [homepage](https://github.com/jonschlinkert/nanomatch \"Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash 4.3 wildcard support only (no support for exglobs, posix brackets or braces)\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor**<br/> | \n| --- | --- |\n| 66 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [MartinKolarik](https://github.com/MartinKolarik) |\n| 2 | [es128](https://github.com/es128) |\n| 1 | [eush77](https://github.com/eush77) |\n\n### Building docs\n\n_(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/expand-brackets/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.2.0, on December 12, 2016._",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/package.json:    "log",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:  change the behavior of the debug logging:
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:var log = debug('app:log');
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:// set this namespace to log via console.log
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:log('goes to stdout');
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:// overrides all per-namespace log settings
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:debug.log = console.info.bind(console);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js:exports.log = log;
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js:function log() {
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js:    && console.log
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/node.js:exports.log = log;
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/node.js:function log() {
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/debug.js: * Previous log timestamp.
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/karma.conf.js:    // level of logging
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/component.json:    "log",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://badge.fury.io/js/define-property.svg)](http://badge.fury.io/js/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i define-property --save\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## Related projects\n\n* [delegate-object](https://www.npmjs.com/package/delegate-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/delegate-object) | [homepage](https://github.com/doowb/delegate-object)\n* [forward-object](https://www.npmjs.com/package/forward-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/forward-object) | [homepage](https://github.com/doowb/forward-object)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n* [mixin-object](https://www.npmjs.com/package/mixin-object): Mixin the own and inherited properties of other objects onto the first object. Pass an… [more](https://www.npmjs.com/package/mixin-object) | [homepage](https://github.com/jonschlinkert/mixin-object)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/define-property/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on August 31, 2015._\n",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/package.json:  "readme": "# kind-of [![NPM version](https://img.shields.io/npm/v/kind-of.svg?style=flat)](https://www.npmjs.com/package/kind-of) [![NPM monthly downloads](https://img.shields.io/npm/dm/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![NPM total downloads](https://img.shields.io/npm/dt/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/kind-of.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/kind-of)\n\n> Get the native type of a value.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save kind-of\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install kind-of --save\n```\n\n## Why use this?\n\n1. [it's fast](#benchmarks) | [optimizations](#optimizations)\n2. [better type checking](#better-type-checking)\n\n## Usage\n\n> es5, browser and es6 ready\n\n```js\nvar kindOf = require('kind-of');\n\nkindOf(undefined);\n//=> 'undefined'\n\nkindOf(null);\n//=> 'null'\n\nkindOf(true);\n//=> 'boolean'\n\nkindOf(false);\n//=> 'boolean'\n\nkindOf(new Boolean(true));\n//=> 'boolean'\n\nkindOf(new Buffer(''));\n//=> 'buffer'\n\nkindOf(42);\n//=> 'number'\n\nkindOf(new Number(42));\n//=> 'number'\n\nkindOf('str');\n//=> 'string'\n\nkindOf(new String('str'));\n//=> 'string'\n\nkindOf(arguments);\n//=> 'arguments'\n\nkindOf({});\n//=> 'object'\n\nkindOf(Object.create(null));\n//=> 'object'\n\nkindOf(new Test());\n//=> 'object'\n\nkindOf(new Date());\n//=> 'date'\n\nkindOf([]);\n//=> 'array'\n\nkindOf([1, 2, 3]);\n//=> 'array'\n\nkindOf(new Array());\n//=> 'array'\n\nkindOf(/foo/);\n//=> 'regexp'\n\nkindOf(new RegExp('foo'));\n//=> 'regexp'\n\nkindOf(function () {});\n//=> 'function'\n\nkindOf(function * () {});\n//=> 'function'\n\nkindOf(new Function());\n//=> 'function'\n\nkindOf(new Map());\n//=> 'map'\n\nkindOf(new WeakMap());\n//=> 'weakmap'\n\nkindOf(new Set());\n//=> 'set'\n\nkindOf(new WeakSet());\n//=> 'weakset'\n\nkindOf(Symbol('str'));\n//=> 'symbol'\n\nkindOf(new Int8Array());\n//=> 'int8array'\n\nkindOf(new Uint8Array());\n//=> 'uint8array'\n\nkindOf(new Uint8ClampedArray());\n//=> 'uint8clampedarray'\n\nkindOf(new Int16Array());\n//=> 'int16array'\n\nkindOf(new Uint16Array());\n//=> 'uint16array'\n\nkindOf(new Int32Array());\n//=> 'int32array'\n\nkindOf(new Uint32Array());\n//=> 'uint32array'\n\nkindOf(new Float32Array());\n//=> 'float32array'\n\nkindOf(new Float64Array());\n//=> 'float64array'\n```\n\n## Release history\n\n### v4.0.0\n\n**Added**\n\n* `promise` support\n\n### v5.0.0\n\n**Added**\n\n* `Set Iterator` and `Map Iterator` support\n\n**Fixed**\n\n* Now returns `generatorfunction` for generator functions\n\n## Benchmarks\n\nBenchmarked against [typeof](http://github.com/CodingFu/typeof) and [type-of](https://github.com/ForbesLindesay/type-of).\nNote that performaces is slower for es6 features `Map`, `WeakMap`, `Set` and `WeakSet`.\n\n```bash\n#1: array\n  current x 23,329,397 ops/sec ±0.82% (94 runs sampled)\n  lib-type-of x 4,170,273 ops/sec ±0.55% (94 runs sampled)\n  lib-typeof x 9,686,935 ops/sec ±0.59% (98 runs sampled)\n\n#2: boolean\n  current x 27,197,115 ops/sec ±0.85% (94 runs sampled)\n  lib-type-of x 3,145,791 ops/sec ±0.73% (97 runs sampled)\n  lib-typeof x 9,199,562 ops/sec ±0.44% (99 runs sampled)\n\n#3: date\n  current x 20,190,117 ops/sec ±0.86% (92 runs sampled)\n  lib-type-of x 5,166,970 ops/sec ±0.74% (94 runs sampled)\n  lib-typeof x 9,610,821 ops/sec ±0.50% (96 runs sampled)\n\n#4: function\n  current x 23,855,460 ops/sec ±0.60% (97 runs sampled)\n  lib-type-of x 5,667,740 ops/sec ±0.54% (100 runs sampled)\n  lib-typeof x 10,010,644 ops/sec ±0.44% (100 runs sampled)\n\n#5: null\n  current x 27,061,047 ops/sec ±0.97% (96 runs sampled)\n  lib-type-of x 13,965,573 ops/sec ±0.62% (97 runs sampled)\n  lib-typeof x 8,460,194 ops/sec ±0.61% (97 runs sampled)\n\n#6: number\n  current x 25,075,682 ops/sec ±0.53% (99 runs sampled)\n  lib-type-of x 2,266,405 ops/sec ±0.41% (98 runs sampled)\n  lib-typeof x 9,821,481 ops/sec ±0.45% (99 runs sampled)\n\n#7: object\n  current x 3,348,980 ops/sec ±0.49% (99 runs sampled)\n  lib-type-of x 3,245,138 ops/sec ±0.60% (94 runs sampled)\n  lib-typeof x 9,262,952 ops/sec ±0.59% (99 runs sampled)\n\n#8: regex\n  current x 21,284,827 ops/sec ±0.72% (96 runs sampled)\n  lib-type-of x 4,689,241 ops/sec ±0.43% (100 runs sampled)\n  lib-typeof x 8,957,593 ops/sec ±0.62% (98 runs sampled)\n\n#9: string\n  current x 25,379,234 ops/sec ±0.58% (96 runs sampled)\n  lib-type-of x 3,635,148 ops/sec ±0.76% (93 runs sampled)\n  lib-typeof x 9,494,134 ops/sec ±0.49% (98 runs sampled)\n\n#10: undef\n  current x 27,459,221 ops/sec ±1.01% (93 runs sampled)\n  lib-type-of x 14,360,433 ops/sec ±0.52% (99 runs sampled)\n  lib-typeof x 23,202,868 ops/sec ±0.59% (94 runs sampled)\n\n```\n\n## Optimizations\n\nIn 7 out of 8 cases, this library is 2x-10x faster than other top libraries included in the benchmarks. There are a few things that lead to this performance advantage, none of them hard and fast rules, but all of them simple and repeatable in almost any code library:\n\n1. Optimize around the fastest and most common use cases first. Of course, this will change from project-to-project, but I took some time to understand how and why `typeof` checks were being used in my own libraries and other libraries I use a lot.\n2. Optimize around bottlenecks - In other words, the order in which conditionals are implemented is significant, because each check is only as fast as the failing checks that came before it. Here, the biggest bottleneck by far is checking for plain objects (an object that was created by the `Object` constructor). I opted to make this check happen by process of elimination rather than brute force up front (e.g. by using something like `val.constructor.name`), so that every other type check would not be penalized it.\n3. Don't do uneccessary processing - why do `.slice(8, -1).toLowerCase();` just to get the word `regex`? It's much faster to do `if (type === '[object RegExp]') return 'regex'`\n4. There is no reason to make the code in a microlib as terse as possible, just to win points for making it shorter. It's always better to favor performant code over terse code. You will always only be using a single `require()` statement to use the library anyway, regardless of how the code is written.\n\n## Better type checking\n\nkind-of is more correct than other type checking libs I've looked at. For example, here are some differing results from other popular libs:\n\n### [typeof](https://github.com/CodingFu/typeof) lib\n\nIncorrectly tests instances of custom constructors (pretty common):\n\n```js\nvar typeOf = require('typeof');\nfunction Test() {}\nconsole.log(typeOf(new Test()));\n//=> 'test'\n```\n\nReturns `object` instead of `arguments`:\n\n```js\nfunction foo() {\n  console.log(typeOf(arguments)) //=> 'object'\n}\nfoo();\n```\n\n### [type-of](https://github.com/ForbesLindesay/type-of) lib\n\nIncorrectly returns `object` for generator functions, buffers, `Map`, `Set`, `WeakMap` and `WeakSet`:\n\n```js\nfunction * foo() {}\nconsole.log(typeOf(foo));\n//=> 'object'\nconsole.log(typeOf(new Buffer('')));\n//=> 'object'\nconsole.log(typeOf(new Map()));\n//=> 'object'\nconsole.log(typeOf(new Set()));\n//=> 'object'\nconsole.log(typeOf(new WeakMap()));\n//=> 'object'\nconsole.log(typeOf(new WeakSet()));\n//=> 'object'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n<details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n<details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n<details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-number](https://www.npmjs.com/package/is-number): Returns true if the value is a number. comprehensive tests. | [homepage](https://github.com/jonschlinkert/is-number \"Returns true if the value is a number. comprehensive tests.\")\n* [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive.  | [homepage](https://github.com/jonschlinkert/is-primitive \"Returns `true` if the value is a primitive. \")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 82 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 3 | [aretecode](https://github.com/aretecode) |\n| 2 | [miguelmota](https://github.com/miguelmota) |\n| 1 | [dtothefp](https://github.com/dtothefp) |\n| 1 | [ksheedlo](https://github.com/ksheedlo) |\n| 1 | [pdehaan](https://github.com/pdehaan) |\n| 1 | [laggingreflex](https://github.com/laggingreflex) |\n| 1 | [charlike](https://github.com/charlike) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on October 13, 2017._",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Test()));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:  console.log(typeOf(arguments)) //=> 'object'
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(foo));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Buffer('')));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Map()));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Set()));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakMap()));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakSet()));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg)](https://www.npmjs.com/package/is-data-descriptor) [![Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm i is-data-descriptor --save\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## Related projects\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor)\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://www.npmjs.com/package/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor)\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-data-descriptor/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 [Jon Schlinkert](https://github.com/jonschlinkert)\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb) on December 28, 2015._",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/posix-character-classes/package.json:  "readme": "# posix-character-classes [![NPM version](https://img.shields.io/npm/v/posix-character-classes.svg?style=flat)](https://www.npmjs.com/package/posix-character-classes) [![NPM monthly downloads](https://img.shields.io/npm/dm/posix-character-classes.svg?style=flat)](https://npmjs.org/package/posix-character-classes)  [![NPM total downloads](https://img.shields.io/npm/dt/posix-character-classes.svg?style=flat)](https://npmjs.org/package/posix-character-classes) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/posix-character-classes.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/posix-character-classes)\n\n> POSIX character classes for creating regular expressions.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save posix-character-classes\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add posix-character-classes\n```\n\n## Usage\n\n```js\nvar posix = require('posix-character-classes');\nconsole.log(posix.alpha);\n//=> 'A-Za-z'\n```\n\n## POSIX Character classes\n\nThe POSIX standard supports the following classes or categories of charactersh (note that classes must be defined within brackets)<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>:\n\n| **POSIX class** | **Equivalent to** | **Matches** | \n| --- | --- | --- |\n| `[:alnum:]` | `[A-Za-z0-9]` | digits, uppercase and lowercase letters |\n| `[:alpha:]` | `[A-Za-z]` | upper- and lowercase letters |\n| `[:ascii:]` | `[\\x00-\\x7F]` | ASCII characters |\n| `[:blank:]` | `[ \\t]` | space and TAB characters only |\n| `[:cntrl:]` | `[\\x00-\\x1F\\x7F]` | Control characters |\n| `[:digit:]` | `[0-9]` | digits |\n| `[:graph:]` | `[^[:cntrl:]]` | graphic characters (all characters which have graphic representation) |\n| `[:lower:]` | `[a-z]` | lowercase letters |\n| `[:print:]` | `[[:graph] ]` | graphic characters and space |\n| `[:punct:]` | ``[-!\"#$%&'()*+,./:;<=>?@[]^_`{ | }~]`` | all punctuation characters (all graphic characters except letters and digits) |\n| `[:space:]` | `[ \\t\\n\\r\\f\\v]` | all blank (whitespace) characters, including spaces, tabs, new lines, carriage returns, form feeds, and vertical tabs |\n| `[:upper:]` | `[A-Z]` | uppercase letters |\n| `[:word:]` | `[A-Za-z0-9_]` | word characters |\n| `[:xdigit:]` | `[0-9A-Fa-f]` | hexadecimal digits |\n\n## Examples\n\n* `a[[:digit:]]b` matches `a0b`, `a1b`, ..., `a9b`.\n* `a[:digit:]b` is invalid, character classes must be enclosed in brackets\n* `[[:digit:]abc]` matches any digit, as well as `a`, `b`, and `c`.\n* `[abc[:digit:]]` is the same as the previous, matching any digit, as well as `a`, `b`, and `c`\n* `[^ABZ[:lower:]]` matches any character except lowercase letters, `A`, `B`, and `Z`.\n\n## About\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 20, 2017._\n\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\"  class=\"footnote-item\">table and examples are based on the WikiBooks page for [Regular Expressions/POSIX Basic Regular Expressions](https://en.wikibooks.org/wiki/Regular_Expressions/POSIX_Basic_Regular_Expressions), which is available under the [Creative Commons Attribution-ShareAlike License](https://creativecommons.org/licenses/by-sa/3.0/). <a href=\"#fnref1\" class=\"footnote-backref\">↩</a>\n\n</li>\n</ol>\n</section>",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/posix-character-classes/README.md:console.log(posix.alpha);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets('[![:lower:]]'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(isMatch('a.a'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(isMatch('a.A'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(re);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets('[[:alpha:]]'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(res.map);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:## Changelog
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(res.map);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(isMatch('a.a'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(isMatch('a.A'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(re);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(brackets('[[:alpha:]]'));
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://img.shields.io/npm/v/define-property.svg?style=flat)](https://www.npmjs.com/package/define-property) [![NPM monthly downloads](https://img.shields.io/npm/dm/define-property.svg?style=flat)](https://npmjs.org/package/define-property)  [![NPM total downloads](https://img.shields.io/npm/dt/define-property.svg?style=flat)](https://npmjs.org/package/define-property) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/define-property.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save define-property\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add define-property\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## About\n\n### Related projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target… [more](https://github.com/jonschlinkert/assign-deep) | [homepage](https://github.com/jonschlinkert/assign-deep \"Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target (first) object.\")\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow \"Extend an object with the properties of additional objects. node.js/javascript util.\")\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep \"Recursively merge values in a javascript object.\")\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep \"Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 20, 2017._",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg?style=flat)](https://www.npmjs.com/package/is-data-descriptor) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![NPM total downloads](https://img.shields.io/npm/dt/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-data-descriptor\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor \"Returns true if a value has the characteristics of a valid JavaScript accessor descriptor.\")\n* [is-data-descriptor](https://www.npmjs.com/package/is-data-descriptor): Returns true if a value has the characteristics of a valid JavaScript data descriptor. | [homepage](https://github.com/jonschlinkert/is-data-descriptor \"Returns true if a value has the characteristics of a valid JavaScript data descriptor.\")\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://github.com/jonschlinkert/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor \"Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for data descriptors and accessor descriptors.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 21 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [realityking](https://github.com/realityking) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 01, 2017._",
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/define-property/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/extglob/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob('!(xyz)*.js'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob('*.!(*a)'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.match(['a.a', 'a.b', 'a.c'], '*.!(*a)'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.isMatch('a.a', '*.!(*a)'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.isMatch('a.b', '*.!(*a)'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.contains('aa/bb/cc', '*b'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.contains('aa/bb/cc', '*d'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(isMatch('a.a'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(isMatch('a.b'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.create('*.!(*a)').output);
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.capture('test/*.js', 'test/foo.js'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.capture('test/*.js', 'foo/bar.css'));
./examples/express/node_modules/micromatch/node_modules/extglob/README.md:console.log(re);
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob('*.!(*a)'));
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.match(['a.a', 'a.b', 'a.c'], '*.!(*a)'));
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.isMatch('a.a', '*.!(*a)'));
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.isMatch('a.b', '*.!(*a)'));
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.contains('aa/bb/cc', '*b'));
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.contains('aa/bb/cc', '*d'));
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(isMatch('a.a'));
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(isMatch('a.b'));
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.create('*.!(*a)').output);
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.capture('test/*.js', 'test/foo.js'));
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.capture('test/*.js', 'foo/bar.css'));
./examples/express/node_modules/micromatch/node_modules/extglob/index.js: * console.log(re);
./examples/express/node_modules/micromatch/node_modules/braces/package.json:  "readme": "# braces [![NPM version](https://img.shields.io/npm/v/braces.svg?style=flat)](https://www.npmjs.com/package/braces) [![NPM monthly downloads](https://img.shields.io/npm/dm/braces.svg?style=flat)](https://npmjs.org/package/braces) [![NPM total downloads](https://img.shields.io/npm/dt/braces.svg?style=flat)](https://npmjs.org/package/braces) [![Linux Build Status](https://img.shields.io/travis/micromatch/braces.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/braces) [![Windows Build Status](https://img.shields.io/appveyor/ci/micromatch/braces.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/micromatch/braces)\n\n> Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save braces\n```\n\n## Why use braces?\n\nBrace patterns are great for matching ranges. Users (and implementors) shouldn't have to think about whether or not they will break their application (or yours) from accidentally defining an aggressive brace pattern. _Braces is the only library that offers a [solution to this problem](#performance)_.\n\n* **Safe(r)**: Braces isn't vulnerable to DoS attacks like [brace-expansion](https://github.com/juliangruber/brace-expansion), [minimatch](https://github.com/isaacs/minimatch) and [multimatch](https://github.com/sindresorhus/multimatch) (a different bug than the [other regex DoS bug](https://medium.com/node-security/minimatch-redos-vulnerability-590da24e6d3c#.jew0b6mpc)).\n* **Accurate**: complete support for the [Bash 4.3 Brace Expansion](www.gnu.org/software/bash/) specification (passes all of the Bash braces tests)\n* **[fast and performant](#benchmarks)**: Starts fast, runs fast and [scales well](#performance) as patterns increase in complexity.\n* **Organized code base**: with parser and compiler that are eas(y|ier) to maintain and update when edge cases crop up.\n* **Well-tested**: thousands of test assertions. Passes 100% of the [minimatch](https://github.com/isaacs/minimatch) and [brace-expansion](https://github.com/juliangruber/brace-expansion) unit tests as well (as of the writing of this).\n\n## Usage\n\nThe main export is a function that takes one or more brace `patterns` and `options`.\n\n```js\nvar braces = require('braces');\nbraces(pattern[, options]);\n```\n\nBy default, braces returns an optimized regex-source string. To get an array of brace patterns, use `brace.expand()`.\n\nThe following section explains the difference in more detail. _(If you're curious about \"why\" braces does this by default, see [brace matching pitfalls](#brace-matching-pitfalls)_.\n\n### Optimized vs. expanded braces\n\n**Optimized**\n\nBy default, patterns are optimized for regex and matching:\n\n```js\nconsole.log(braces('a/{x,y,z}/b'));\n//=> ['a/(x|y|z)/b']\n```\n\n**Expanded**\n\nTo expand patterns the same way as Bash or [minimatch](https://github.com/isaacs/minimatch), use the [.expand](#expand) method:\n\n```js\nconsole.log(braces.expand('a/{x,y,z}/b'));\n//=> ['a/x/b', 'a/y/b', 'a/z/b']\n```\n\nOr use [options.expand](#optionsexpand):\n\n```js\nconsole.log(braces('a/{x,y,z}/b', {expand: true}));\n//=> ['a/x/b', 'a/y/b', 'a/z/b']\n```\n\n## Features\n\n* [lists](#lists): Supports \"lists\": `a/{b,c}/d` => `['a/b/d', 'a/c/d']`\n* [sequences](#sequences): Supports alphabetical or numerical \"sequences\" (ranges): `{1..3}` => `['1', '2', '3']`\n* [steps](#steps): Supports \"steps\" or increments: `{2..10..2}` => `['2', '4', '6', '8', '10']`\n* [escaping](#escaping)\n* [options](#options)\n\n### Lists\n\nUses [fill-range](https://github.com/jonschlinkert/fill-range) for expanding alphabetical or numeric lists:\n\n```js\nconsole.log(braces('a/{foo,bar,baz}/*.js'));\n//=> ['a/(foo|bar|baz)/*.js']\n\nconsole.log(braces.expand('a/{foo,bar,baz}/*.js'));\n//=> ['a/foo/*.js', 'a/bar/*.js', 'a/baz/*.js']\n```\n\n### Sequences\n\nUses [fill-range](https://github.com/jonschlinkert/fill-range) for expanding alphabetical or numeric ranges (bash \"sequences\"):\n\n```js\nconsole.log(braces.expand('{1..3}'));     // ['1', '2', '3']\nconsole.log(braces.expand('a{01..03}b')); // ['a01b', 'a02b', 'a03b']\nconsole.log(braces.expand('a{1..3}b'));   // ['a1b', 'a2b', 'a3b']\nconsole.log(braces.expand('{a..c}'));     // ['a', 'b', 'c']\nconsole.log(braces.expand('foo/{a..c}')); // ['foo/a', 'foo/b', 'foo/c']\n\n// supports padded ranges\nconsole.log(braces('a{01..03}b'));   //=> [ 'a(0[1-3])b' ]\nconsole.log(braces('a{001..300}b')); //=> [ 'a(0{2}[1-9]|0[1-9][0-9]|[12][0-9]{2}|300)b' ]\n```\n\n### Steps\n\nSteps, or increments, may be used with ranges:\n\n```js\nconsole.log(braces.expand('{2..10..2}'));\n//=> ['2', '4', '6', '8', '10']\n\nconsole.log(braces('{2..10..2}'));\n//=> ['(2|4|6|8|10)']\n```\n\nWhen the [.optimize](#optimize) method is used, or [options.optimize](#optionsoptimize) is set to true, sequences are passed to [to-regex-range](https://github.com/jonschlinkert/to-regex-range) for expansion.\n\n### Nesting\n\nBrace patterns may be nested. The results of each expanded string are not sorted, and left to right order is preserved.\n\n**\"Expanded\" braces**\n\n```js\nconsole.log(braces.expand('a{b,c,/{x,y}}/e'));\n//=> ['ab/e', 'ac/e', 'a/x/e', 'a/y/e']\n\nconsole.log(braces.expand('a/{x,{1..5},y}/c'));\n//=> ['a/x/c', 'a/1/c', 'a/2/c', 'a/3/c', 'a/4/c', 'a/5/c', 'a/y/c']\n```\n\n**\"Optimized\" braces**\n\n```js\nconsole.log(braces('a{b,c,/{x,y}}/e'));\n//=> ['a(b|c|/(x|y))/e']\n\nconsole.log(braces('a/{x,{1..5},y}/c'));\n//=> ['a/(x|([1-5])|y)/c']\n```\n\n### Escaping\n\n**Escaping braces**\n\nA brace pattern will not be expanded or evaluted if _either the opening or closing brace is escaped_:\n\n```js\nconsole.log(braces.expand('a\\\\{d,c,b}e'));\n//=> ['a{d,c,b}e']\n\nconsole.log(braces.expand('a{d,c,b\\\\}e'));\n//=> ['a{d,c,b}e']\n```\n\n**Escaping commas**\n\nCommas inside braces may also be escaped:\n\n```js\nconsole.log(braces.expand('a{b\\\\,c}d'));\n//=> ['a{b,c}d']\n\nconsole.log(braces.expand('a{d\\\\,c,b}e'));\n//=> ['ad,ce', 'abe']\n```\n\n**Single items**\n\nFollowing bash conventions, a brace pattern is also not expanded when it contains a single character:\n\n```js\nconsole.log(braces.expand('a{b}c'));\n//=> ['a{b}c']\n```\n\n## Options\n\n### options.maxLength\n\n**Type**: `Number`\n\n**Default**: `65,536`\n\n**Description**: Limit the length of the input string. Useful when the input string is generated or your application allows users to pass a string, et cetera.\n\n```js\nconsole.log(braces('a/{b,c}/d', { maxLength: 3 }));  //=> throws an error\n```\n\n### options.expand\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Description**: Generate an \"expanded\" brace pattern (this option is unncessary with the `.expand` method, which does the same thing).\n\n```js\nconsole.log(braces('a/{b,c}/d', {expand: true}));\n//=> [ 'a/b/d', 'a/c/d' ]\n```\n\n### options.optimize\n\n**Type**: `Boolean`\n\n**Default**: `true`\n\n**Description**: Enabled by default.\n\n```js\nconsole.log(braces('a/{b,c}/d'));\n//=> [ 'a/(b|c)/d' ]\n```\n\n### options.nodupes\n\n**Type**: `Boolean`\n\n**Default**: `true`\n\n**Description**: Duplicates are removed by default. To keep duplicates, pass `{nodupes: false}` on the options\n\n### options.rangeLimit\n\n**Type**: `Number`\n\n**Default**: `250`\n\n**Description**: When `braces.expand()` is used, or `options.expand` is true, brace patterns will automatically be [optimized](#optionsoptimize) when the difference between the range minimum and range maximum exceeds the `rangeLimit`. This is to prevent huge ranges from freezing your application.\n\nYou can set this to any number, or change `options.rangeLimit` to `Inifinity` to disable this altogether.\n\n**Examples**\n\n```js\n// pattern exceeds the \"rangeLimit\", so it's optimized automatically\nconsole.log(braces.expand('{1..1000}'));\n//=> ['([1-9]|[1-9][0-9]{1,2}|1000)']\n\n// pattern does not exceed \"rangeLimit\", so it's NOT optimized\nconsole.log(braces.expand('{1..100}'));\n//=> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']\n```\n\n### options.transform\n\n**Type**: `Function`\n\n**Default**: `undefined`\n\n**Description**: Customize range expansion.\n\n```js\nvar range = braces.expand('x{a..e}y', {\n  transform: function(str) {\n    return 'foo' + str;\n  }\n});\n\nconsole.log(range);\n//=> [ 'xfooay', 'xfooby', 'xfoocy', 'xfoody', 'xfooey' ]\n```\n\n### options.quantifiers\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Description**: In regular expressions, quanitifiers can be used to specify how many times a token can be repeated. For example, `a{1,3}` will match the letter `a` one to three times.\n\nUnfortunately, regex quantifiers happen to share the same syntax as [Bash lists](#lists)\n\nThe `quantifiers` option tells braces to detect when [regex quantifiers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#quantifiers) are defined in the given pattern, and not to try to expand them as lists.\n\n**Examples**\n\n```js\nvar braces = require('braces');\nconsole.log(braces('a/b{1,3}/{x,y,z}'));\n//=> [ 'a/b(1|3)/(x|y|z)' ]\nconsole.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true}));\n//=> [ 'a/b{1,3}/(x|y|z)' ]\nconsole.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true, expand: true}));\n//=> [ 'a/b{1,3}/x', 'a/b{1,3}/y', 'a/b{1,3}/z' ]\n```\n\n### options.unescape\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Description**: Strip backslashes that were used for escaping from the result.\n\n## What is \"brace expansion\"?\n\nBrace expansion is a type of parameter expansion that was made popular by unix shells for generating lists of strings, as well as regex-like matching when used alongside wildcards (globs).\n\nIn addition to \"expansion\", braces are also used for matching. In other words:\n\n* [brace expansion](#brace-expansion) is for generating new lists\n* [brace matching](#brace-matching) is for filtering existing lists\n\n<details>\n<summary><strong>More about brace expansion</strong> (click to expand)</summary>\n\nThere are two main types of brace expansion:\n\n1. **lists**: which are defined using comma-separated values inside curly braces: `{a,b,c}`\n2. **sequences**: which are defined using a starting value and an ending value, separated by two dots: `a{1..3}b`. Optionally, a third argument may be passed to define a \"step\" or increment to use: `a{1..100..10}b`. These are also sometimes referred to as \"ranges\".\n\nHere are some example brace patterns to illustrate how they work:\n\n**Sets**\n\n```\n{a,b,c}       => a b c\n{a,b,c}{1,2}  => a1 a2 b1 b2 c1 c2\n```\n\n**Sequences**\n\n```\n{1..9}        => 1 2 3 4 5 6 7 8 9\n{4..-4}       => 4 3 2 1 0 -1 -2 -3 -4\n{1..20..3}    => 1 4 7 10 13 16 19\n{a..j}        => a b c d e f g h i j\n{j..a}        => j i h g f e d c b a\n{a..z..3}     => a d g j m p s v y\n```\n\n**Combination**\n\nSets and sequences can be mixed together or used along with any other strings.\n\n```\n{a,b,c}{1..3}   => a1 a2 a3 b1 b2 b3 c1 c2 c3\nfoo/{a,b,c}/bar => foo/a/bar foo/b/bar foo/c/bar\n```\n\nThe fact that braces can be \"expanded\" from relatively simple patterns makes them ideal for quickly generating test fixtures, file paths, and similar use cases.\n\n## Brace matching\n\nIn addition to _expansion_, brace patterns are also useful for performing regular-expression-like matching.\n\nFor example, the pattern `foo/{1..3}/bar` would match any of following strings:\n\n```\nfoo/1/bar\nfoo/2/bar\nfoo/3/bar\n```\n\nBut not:\n\n```\nbaz/1/qux\nbaz/2/qux\nbaz/3/qux\n```\n\nBraces can also be combined with [glob patterns](https://github.com/jonschlinkert/micromatch) to perform more advanced wildcard matching. For example, the pattern `*/{1..3}/*` would match any of following strings:\n\n```\nfoo/1/bar\nfoo/2/bar\nfoo/3/bar\nbaz/1/qux\nbaz/2/qux\nbaz/3/qux\n```\n\n## Brace matching pitfalls\n\nAlthough brace patterns offer a user-friendly way of matching ranges or sets of strings, there are also some major disadvantages and potential risks you should be aware of.\n\n### tldr\n\n**\"brace bombs\"**\n\n* brace expansion can eat up a huge amount of processing resources\n* as brace patterns increase _linearly in size_, the system resources required to expand the pattern increase exponentially\n* users can accidentally (or intentially) exhaust your system's resources resulting in the equivalent of a DoS attack (bonus: no programming knowledge is required!)\n\nFor a more detailed explanation with examples, see the [geometric complexity](#geometric-complexity) section.\n\n### The solution\n\nJump to the [performance section](#performance) to see how Braces solves this problem in comparison to other libraries.\n\n### Geometric complexity\n\nAt minimum, brace patterns with sets limited to two elements have quadradic or `O(n^2)` complexity. But the complexity of the algorithm increases exponentially as the number of sets, _and elements per set_, increases, which is `O(n^c)`.\n\nFor example, the following sets demonstrate quadratic (`O(n^2)`) complexity:\n\n```\n{1,2}{3,4}      => (2X2)    => 13 14 23 24\n{1,2}{3,4}{5,6} => (2X2X2)  => 135 136 145 146 235 236 245 246\n```\n\nBut add an element to a set, and we get a n-fold Cartesian product with `O(n^c)` complexity:\n\n```\n{1,2,3}{4,5,6}{7,8,9} => (3X3X3) => 147 148 149 157 158 159 167 168 169 247 248 \n                                    249 257 258 259 267 268 269 347 348 349 357 \n                                    358 359 367 368 369\n```\n\nNow, imagine how this complexity grows given that each element is a n-tuple:\n\n```\n{1..100}{1..100}         => (100X100)     => 10,000 elements (38.4 kB)\n{1..100}{1..100}{1..100} => (100X100X100) => 1,000,000 elements (5.76 MB)\n```\n\nAlthough these examples are clearly contrived, they demonstrate how brace patterns can quickly grow out of control.\n\n**More information**\n\nInterested in learning more about brace expansion?\n\n* [linuxjournal/bash-brace-expansion](http://www.linuxjournal.com/content/bash-brace-expansion)\n* [rosettacode/Brace_expansion](https://rosettacode.org/wiki/Brace_expansion)\n* [cartesian product](https://en.wikipedia.org/wiki/Cartesian_product)\n\n</details>\n\n## Performance\n\nBraces is not only screaming fast, it's also more accurate the other brace expansion libraries.\n\n### Better algorithms\n\nFortunately there is a solution to the [\"brace bomb\" problem](#brace-matching-pitfalls): _don't expand brace patterns into an array when they're used for matching_.\n\nInstead, convert the pattern into an optimized regular expression. This is easier said than done, and braces is the only library that does this currently.\n\n**The proof is in the numbers**\n\nMinimatch gets exponentially slower as patterns increase in complexity, braces does not. The following results were generated using `braces()` and `minimatch.braceExpand()`, respectively.\n\n| **Pattern** | **braces** | **[minimatch](https://github.com/isaacs/minimatch)** | \n| --- | --- | --- |\n| `{1..9007199254740991}`<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> | `298 B` (5ms 459μs) | N/A (freezes) |\n| `{1..1000000000000000}` | `41 B` (1ms 15μs) | N/A (freezes) |\n| `{1..100000000000000}` | `40 B` (890μs) | N/A (freezes) |\n| `{1..10000000000000}` | `39 B` (2ms 49μs) | N/A (freezes) |\n| `{1..1000000000000}` | `38 B` (608μs) | N/A (freezes) |\n| `{1..100000000000}` | `37 B` (397μs) | N/A (freezes) |\n| `{1..10000000000}` | `35 B` (983μs) | N/A (freezes) |\n| `{1..1000000000}` | `34 B` (798μs) | N/A (freezes) |\n| `{1..100000000}` | `33 B` (733μs) | N/A (freezes) |\n| `{1..10000000}` | `32 B` (5ms 632μs) | `78.89 MB` (16s 388ms 569μs) |\n| `{1..1000000}` | `31 B` (1ms 381μs) | `6.89 MB` (1s 496ms 887μs) |\n| `{1..100000}` | `30 B` (950μs) | `588.89 kB` (146ms 921μs) |\n| `{1..10000}` | `29 B` (1ms 114μs) | `48.89 kB` (14ms 187μs) |\n| `{1..1000}` | `28 B` (760μs) | `3.89 kB` (1ms 453μs) |\n| `{1..100}` | `22 B` (345μs) | `291 B` (196μs) |\n| `{1..10}` | `10 B` (533μs) | `20 B` (37μs) |\n| `{1..3}` | `7 B` (190μs) | `5 B` (27μs) |\n\n### Faster algorithms\n\nWhen you need expansion, braces is still much faster.\n\n_(the following results were generated using `braces.expand()` and `minimatch.braceExpand()`, respectively)_\n\n| **Pattern** | **braces** | **[minimatch](https://github.com/isaacs/minimatch)** | \n| --- | --- | --- |\n| `{1..10000000}` | `78.89 MB` (2s 698ms 642μs) | `78.89 MB` (18s 601ms 974μs) |\n| `{1..1000000}` | `6.89 MB` (458ms 576μs) | `6.89 MB` (1s 491ms 621μs) |\n| `{1..100000}` | `588.89 kB` (20ms 728μs) | `588.89 kB` (156ms 919μs) |\n| `{1..10000}` | `48.89 kB` (2ms 202μs) | `48.89 kB` (13ms 641μs) |\n| `{1..1000}` | `3.89 kB` (1ms 796μs) | `3.89 kB` (1ms 958μs) |\n| `{1..100}` | `291 B` (424μs) | `291 B` (211μs) |\n| `{1..10}` | `20 B` (487μs) | `20 B` (72μs) |\n| `{1..3}` | `5 B` (166μs) | `5 B` (27μs) |\n\nIf you'd like to run these comparisons yourself, see [test/support/generate.js](test/support/generate.js).\n\n## Benchmarks\n\n### Running benchmarks\n\nInstall dev dependencies:\n\n```bash\nnpm i -d && npm benchmark\n```\n\n### Latest results\n\n```bash\nBenchmarking: (8 of 8)\n · combination-nested\n · combination\n · escaped\n · list-basic\n · list-multiple\n · no-braces\n · sequence-basic\n · sequence-multiple\n\n# benchmark/fixtures/combination-nested.js (52 bytes)\n  brace-expansion x 4,756 ops/sec ±1.09% (86 runs sampled)\n  braces x 11,202,303 ops/sec ±1.06% (88 runs sampled)\n  minimatch x 4,816 ops/sec ±0.99% (87 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/combination.js (51 bytes)\n  brace-expansion x 625 ops/sec ±0.87% (87 runs sampled)\n  braces x 11,031,884 ops/sec ±0.72% (90 runs sampled)\n  minimatch x 637 ops/sec ±0.84% (88 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/escaped.js (44 bytes)\n  brace-expansion x 163,325 ops/sec ±1.05% (87 runs sampled)\n  braces x 10,655,071 ops/sec ±1.22% (88 runs sampled)\n  minimatch x 147,495 ops/sec ±0.96% (88 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/list-basic.js (40 bytes)\n  brace-expansion x 99,726 ops/sec ±1.07% (83 runs sampled)\n  braces x 10,596,584 ops/sec ±0.98% (88 runs sampled)\n  minimatch x 100,069 ops/sec ±1.17% (86 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/list-multiple.js (52 bytes)\n  brace-expansion x 34,348 ops/sec ±1.08% (88 runs sampled)\n  braces x 9,264,131 ops/sec ±1.12% (88 runs sampled)\n  minimatch x 34,893 ops/sec ±0.87% (87 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/no-braces.js (48 bytes)\n  brace-expansion x 275,368 ops/sec ±1.18% (89 runs sampled)\n  braces x 9,134,677 ops/sec ±0.95% (88 runs sampled)\n  minimatch x 3,755,954 ops/sec ±1.13% (89 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/sequence-basic.js (41 bytes)\n  brace-expansion x 5,492 ops/sec ±1.35% (87 runs sampled)\n  braces x 8,485,034 ops/sec ±1.28% (89 runs sampled)\n  minimatch x 5,341 ops/sec ±1.17% (87 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/sequence-multiple.js (51 bytes)\n  brace-expansion x 116 ops/sec ±0.77% (77 runs sampled)\n  braces x 9,445,118 ops/sec ±1.32% (84 runs sampled)\n  minimatch x 109 ops/sec ±1.16% (76 runs sampled)\n\n  fastest is braces\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/jonschlinkert/expand-brackets \"Expand POSIX bracket expressions (character classes) in glob patterns.\")\n* [extglob](https://www.npmjs.com/package/extglob): Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob… [more](https://github.com/micromatch/extglob) | [homepage](https://github.com/micromatch/extglob \"Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\")\n* [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/micromatch/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n* [nanomatch](https://www.npmjs.com/package/nanomatch): Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash… [more](https://github.com/micromatch/nanomatch) | [homepage](https://github.com/micromatch/nanomatch \"Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash 4.3 wildcard support only (no support for exglobs, posix brackets or braces)\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 188 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 4 | [doowb](https://github.com/doowb) |\n| 1 | [es128](https://github.com/es128) |\n| 1 | [eush77](https://github.com/eush77) |\n| 1 | [hemanth](https://github.com/hemanth) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 17, 2018._\n\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\"  class=\"footnote-item\">this is the largest safe integer allowed in JavaScript. <a href=\"#fnref1\" class=\"footnote-backref\">↩</a>\n\n</li>\n</ol>\n</section>",
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/package.json:  "readme": "# snapdragon-node [![NPM version](https://img.shields.io/npm/v/snapdragon-node.svg?style=flat)](https://www.npmjs.com/package/snapdragon-node) [![NPM monthly downloads](https://img.shields.io/npm/dm/snapdragon-node.svg?style=flat)](https://npmjs.org/package/snapdragon-node) [![NPM total downloads](https://img.shields.io/npm/dt/snapdragon-node.svg?style=flat)](https://npmjs.org/package/snapdragon-node) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/snapdragon-node.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/snapdragon-node)\n\n> Snapdragon utility for creating a new AST node in custom code, such as plugins.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save snapdragon-node\n```\n\n## Usage\n\nWith [snapdragon](https://github.com/jonschlinkert/snapdragon) v0.9.0 and higher you can use `this.node()` to create a new `Node`, whenever it makes sense.\n\n```js\nvar Node = require('snapdragon-node');\nvar Snapdragon = require('snapdragon');\nvar snapdragon = new Snapdragon();\n\n// example usage inside a parser visitor function\nsnapdragon.parser.set('foo', function() {\n  // get the current \"start\" position\n  var pos = this.position();\n\n  // returns the match if regex matches the substring \n  // at the current position on `parser.input`\n  var match = this.match(/foo/);\n  if (match) {\n    // call \"pos\" on the node, to set the start and end \n    // positions, and return the node to push it onto the AST\n    // (snapdragon will push the node onto the correct\n    // nodes array, based on the stack)\n    return pos(new Node({type: 'bar', val: match[0]}));\n  }\n});\n```\n\n## API\n\n### [Node](index.js#L22)\n\nCreate a new AST `Node` with the given `val` and `type`.\n\n**Params**\n\n* `val` **{String|Object}**: Pass a matched substring, or an object to merge onto the node.\n* `type` **{String}**: The node type to use when `val` is a string.\n* `returns` **{Object}**: node instance\n\n**Example**\n\n```js\nvar node = new Node('*', 'Star');\nvar node = new Node({type: 'star', val: '*'});\n```\n\n### [.isNode](index.js#L61)\n\nReturns true if the given value is a node.\n\n**Params**\n\n* `node` **{Object}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar node = new Node({type: 'foo'});\nconsole.log(Node.isNode(node)); //=> true\nconsole.log(Node.isNode({})); //=> false\n```\n\n### [.define](index.js#L80)\n\nDefine a non-enumberable property on the node instance. Useful for adding properties that shouldn't be extended or visible during debugging.\n\n**Params**\n\n* `name` **{String}**\n* `val` **{any}**\n* `returns` **{Object}**: returns the node instance\n\n**Example**\n\n```js\nvar node = new Node();\nnode.define('foo', 'something non-enumerable');\n```\n\n### [.isEmpty](index.js#L100)\n\nReturns true if `node.val` is an empty string, or `node.nodes` does not contain any non-empty text nodes.\n\n**Params**\n\n* `fn` **{Function}**: (optional) Filter function that is called on `node` and/or child nodes. `isEmpty` will return false immediately when the filter function returns false on any nodes.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar node = new Node({type: 'text'});\nnode.isEmpty(); //=> true\nnode.val = 'foo';\nnode.isEmpty(); //=> false\n```\n\n### [.push](index.js#L118)\n\nGiven node `foo` and node `bar`, push node `bar` onto `foo.nodes`, and set `foo` as `bar.parent`.\n\n**Params**\n\n* `node` **{Object}**\n* `returns` **{Number}**: Returns the length of `node.nodes`\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nfoo.push(bar);\n```\n\n### [.unshift](index.js#L140)\n\nGiven node `foo` and node `bar`, unshift node `bar` onto `foo.nodes`, and set `foo` as `bar.parent`.\n\n**Params**\n\n* `node` **{Object}**\n* `returns` **{Number}**: Returns the length of `node.nodes`\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nfoo.unshift(bar);\n```\n\n### [.pop](index.js#L167)\n\nPop a node from `node.nodes`.\n\n* `returns` **{Number}**: Returns the popped `node`\n\n**Example**\n\n```js\nvar node = new Node({type: 'foo'});\nnode.push(new Node({type: 'a'}));\nnode.push(new Node({type: 'b'}));\nnode.push(new Node({type: 'c'}));\nnode.push(new Node({type: 'd'}));\nconsole.log(node.nodes.length);\n//=> 4\nnode.pop();\nconsole.log(node.nodes.length);\n//=> 3\n```\n\n### [.shift](index.js#L190)\n\nShift a node from `node.nodes`.\n\n* `returns` **{Object}**: Returns the shifted `node`\n\n**Example**\n\n```js\nvar node = new Node({type: 'foo'});\nnode.push(new Node({type: 'a'}));\nnode.push(new Node({type: 'b'}));\nnode.push(new Node({type: 'c'}));\nnode.push(new Node({type: 'd'}));\nconsole.log(node.nodes.length);\n//=> 4\nnode.shift();\nconsole.log(node.nodes.length);\n//=> 3\n```\n\n### [.remove](index.js#L205)\n\nRemove `node` from `node.nodes`.\n\n**Params**\n\n* `node` **{Object}**\n* `returns` **{Object}**: Returns the removed node.\n\n**Example**\n\n```js\nnode.remove(childNode);\n```\n\n### [.find](index.js#L231)\n\nGet the first child node from `node.nodes` that matches the given `type`. If `type` is a number, the child node at that index is returned.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Object}**: Returns a child node or undefined.\n\n**Example**\n\n```js\nvar child = node.find(1); //<= index of the node to get\nvar child = node.find('foo'); //<= node.type of a child node\nvar child = node.find(/^(foo|bar)$/); //<= regex to match node.type\nvar child = node.find(['foo', 'bar']); //<= array of node.type(s)\n```\n\n### [.isType](index.js#L249)\n\nReturn true if the node is the given `type`.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar node = new Node({type: 'bar'});\ncosole.log(node.isType('foo'));          // false\ncosole.log(node.isType(/^(foo|bar)$/));  // true\ncosole.log(node.isType(['foo', 'bar'])); // true\n```\n\n### [.hasType](index.js#L270)\n\nReturn true if the `node.nodes` has the given `type`.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nfoo.push(bar);\n\ncosole.log(foo.hasType('qux'));          // false\ncosole.log(foo.hasType(/^(qux|bar)$/));  // true\ncosole.log(foo.hasType(['qux', 'bar'])); // true\n```\n\n* `returns` **{Array}**\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nfoo.push(bar);\nfoo.push(baz);\n\nconsole.log(bar.siblings.length) // 2\nconsole.log(baz.siblings.length) // 2\n```\n\n* `returns` **{Number}**\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nvar qux = new Node({type: 'qux'});\nfoo.push(bar);\nfoo.push(baz);\nfoo.unshift(qux);\n\nconsole.log(bar.index) // 1\nconsole.log(baz.index) // 2\nconsole.log(qux.index) // 0\n```\n\n* `returns` **{Object}**\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nfoo.push(bar);\nfoo.push(baz);\n\nconsole.log(baz.prev.type) // 'bar'\n```\n\n* `returns` **{Object}**\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nfoo.push(bar);\nfoo.push(baz);\n\nconsole.log(bar.siblings.length) // 2\nconsole.log(baz.siblings.length) // 2\n```\n\n* `returns` **{Object}**: The first node, or undefiend\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nvar qux = new Node({type: 'qux'});\nfoo.push(bar);\nfoo.push(baz);\nfoo.push(qux);\n\nconsole.log(foo.first.type) // 'bar'\n```\n\n* `returns` **{Object}**: The last node, or undefiend\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nvar qux = new Node({type: 'qux'});\nfoo.push(bar);\nfoo.push(baz);\nfoo.push(qux);\n\nconsole.log(foo.last.type) // 'qux'\n```\n\n* `returns` **{Object}**: The last node, or undefiend\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nvar qux = new Node({type: 'qux'});\nfoo.push(bar);\nfoo.push(baz);\nfoo.push(qux);\n\nconsole.log(foo.last.type) // 'qux'\n```\n\n## Release history\n\nChangelog entries are classified using the following labels from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog):\n\n* `added`: for new features\n* `changed`: for changes in existing functionality\n* `deprecated`: for once-stable features removed in upcoming releases\n* `removed`: for deprecated features removed in this release\n* `fixed`: for any bug fixes\n\nCustom labels used in this changelog:\n\n* `dependencies`: bumps dependencies\n* `housekeeping`: code re-organization, minor edits, or other changes that don't fit in one of the other categories.\n\n### [2.0.0] - 2017-05-01\n\n**Changed**\n\n* `.unshiftNode` was renamed to [.unshift](#unshift)\n* `.pushNode` was renamed to [.push](#push)\n* `.getNode` was renamed to [.find](#find)\n\n**Added**\n\n* [.isNode](#isNode)\n* [.isEmpty](#isEmpty)\n* [.pop](#pop)\n* [.shift](#shift)\n* [.remove](#remove)\n\n### [0.1.0]\n\nFirst release.\n\n## About\n\n### Related projects\n\n* [breakdance](https://www.npmjs.com/package/breakdance): Breakdance is a node.js library for converting HTML to markdown. Highly pluggable, flexible and easy… [more](http://breakdance.io) | [homepage](http://breakdance.io \"Breakdance is a node.js library for converting HTML to markdown. Highly pluggable, flexible and easy to use. It's time for your markup to get down.\")\n* [snapdragon-capture](https://www.npmjs.com/package/snapdragon-capture): Snapdragon plugin that adds a capture method to the parser instance. | [homepage](https://github.com/jonschlinkert/snapdragon-capture \"Snapdragon plugin that adds a capture method to the parser instance.\")\n* [snapdragon-cheerio](https://www.npmjs.com/package/snapdragon-cheerio): Snapdragon plugin for converting a cheerio AST to a snapdragon AST. | [homepage](https://github.com/jonschlinkert/snapdragon-cheerio \"Snapdragon plugin for converting a cheerio AST to a snapdragon AST.\")\n* [snapdragon-util](https://www.npmjs.com/package/snapdragon-util): Utilities for the snapdragon parser/compiler. | [homepage](https://github.com/jonschlinkert/snapdragon-util \"Utilities for the snapdragon parser/compiler.\")\n* [snapdragon](https://www.npmjs.com/package/snapdragon): Easy-to-use plugin system for creating powerful, fast and versatile parsers and compilers, with built-in source-map… [more](https://github.com/jonschlinkert/snapdragon) | [homepage](https://github.com/jonschlinkert/snapdragon \"Easy-to-use plugin system for creating powerful, fast and versatile parsers and compilers, with built-in source-map support.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on June 25, 2017._",
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/package.json:  "readme": "# snapdragon-util [![NPM version](https://img.shields.io/npm/v/snapdragon-util.svg?style=flat)](https://www.npmjs.com/package/snapdragon-util) [![NPM monthly downloads](https://img.shields.io/npm/dm/snapdragon-util.svg?style=flat)](https://npmjs.org/package/snapdragon-util) [![NPM total downloads](https://img.shields.io/npm/dt/snapdragon-util.svg?style=flat)](https://npmjs.org/package/snapdragon-util) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/snapdragon-util.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/snapdragon-util)\n\n> Utilities for the snapdragon parser/compiler.\n\n<details>\n<summary><strong>Table of Contents</strong></summary>\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Release history](#release-history)\n  * [[3.0.0] - 2017-05-01](#300---2017-05-01)\n  * [[0.1.0]](#010)\n- [About](#about)\n\n</details>\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save snapdragon-util\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add snapdragon-util\n```\n\n## Usage\n\n```js\nvar util = require('snapdragon-util');\n```\n\n## API\n\n### [.isNode](index.js#L21)\n\nReturns true if the given value is a node.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar node = new Node({type: 'foo'});\nconsole.log(utils.isNode(node)); //=> true\nconsole.log(utils.isNode({})); //=> false\n```\n\n### [.noop](index.js#L37)\n\nEmit an empty string for the given `node`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{undefined}**\n\n**Example**\n\n```js\n// do nothing for beginning-of-string\nsnapdragon.compiler.set('bos', utils.noop);\n```\n\n### [.identity](index.js#L53)\n\nAppdend `node.val` to `compiler.output`, exactly as it was created by the parser.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{undefined}**\n\n**Example**\n\n```js\nsnapdragon.compiler.set('text', utils.identity);\n```\n\n### [.append](index.js#L76)\n\nPreviously named `.emit`, this method appends the given `val` to `compiler.output` for the given node. Useful when you know what value should be appended advance, regardless of the actual value of `node.val`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Function}**: Returns a compiler middleware function.\n\n**Example**\n\n```js\nsnapdragon.compiler\n  .set('i', function(node) {\n    this.mapVisit(node);\n  })\n  .set('i.open', utils.append('<i>'))\n  .set('i.close', utils.append('</i>'))\n```\n\n### [.toNoop](index.js#L99)\n\nUsed in compiler middleware, this onverts an AST node into an empty `text` node and deletes `node.nodes` if it exists. The advantage of this method is that, as opposed to completely removing the node, indices will not need to be re-calculated in sibling nodes, and nothing is appended to the output.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `nodes` **{Array}**: Optionally pass a new `nodes` value, to replace the existing `node.nodes` array.\n\n**Example**\n\n```js\nutils.toNoop(node);\n// convert `node.nodes` to the given value instead of deleting it\nutils.toNoop(node, []);\n```\n\n### [.visit](index.js#L128)\n\nVisit `node` with the given `fn`. The built-in `.visit` method in snapdragon automatically calls registered compilers, this allows you to pass a visitor function.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `fn` **{Function}**\n* `returns` **{Object}**: returns the node after recursively visiting all child nodes.\n\n**Example**\n\n```js\nsnapdragon.compiler.set('i', function(node) {\n  utils.visit(node, function(childNode) {\n    // do stuff with \"childNode\"\n    return childNode;\n  });\n});\n```\n\n### [.mapVisit](index.js#L155)\n\nMap [visit](#visit) the given `fn` over `node.nodes`. This is called by [visit](#visit), use this method if you do not want `fn` to be called on the first node.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `options` **{Object}**\n* `fn` **{Function}**\n* `returns` **{Object}**: returns the node\n\n**Example**\n\n```js\nsnapdragon.compiler.set('i', function(node) {\n  utils.mapVisit(node, function(childNode) {\n    // do stuff with \"childNode\"\n    return childNode;\n  });\n});\n```\n\n### [.addOpen](index.js#L194)\n\nUnshift an `*.open` node onto `node.nodes`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `Node` **{Function}**: (required) Node constructor function from [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node).\n* `filter` **{Function}**: Optionaly specify a filter function to exclude the node.\n* `returns` **{Object}**: Returns the created opening node.\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nsnapdragon.parser.set('brace', function(node) {\n  var match = this.match(/^{/);\n  if (match) {\n    var parent = new Node({type: 'brace'});\n    utils.addOpen(parent, Node);\n    console.log(parent.nodes[0]):\n    // { type: 'brace.open', val: '' };\n\n    // push the parent \"brace\" node onto the stack\n    this.push(parent);\n\n    // return the parent node, so it's also added to the AST\n    return brace;\n  }\n});\n```\n\n### [.addClose](index.js#L244)\n\nPush a `*.close` node onto `node.nodes`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `Node` **{Function}**: (required) Node constructor function from [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node).\n* `filter` **{Function}**: Optionaly specify a filter function to exclude the node.\n* `returns` **{Object}**: Returns the created closing node.\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nsnapdragon.parser.set('brace', function(node) {\n  var match = this.match(/^}/);\n  if (match) {\n    var parent = this.parent();\n    if (parent.type !== 'brace') {\n      throw new Error('missing opening: ' + '}');\n    }\n\n    utils.addClose(parent, Node);\n    console.log(parent.nodes[parent.nodes.length - 1]):\n    // { type: 'brace.close', val: '' };\n\n    // no need to return a node, since the parent\n    // was already added to the AST\n    return;\n  }\n});\n```\n\n### [.wrapNodes](index.js#L274)\n\nWraps the given `node` with `*.open` and `*.close` nodes.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `Node` **{Function}**: (required) Node constructor function from [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node).\n* `filter` **{Function}**: Optionaly specify a filter function to exclude the node.\n* `returns` **{Object}**: Returns the node\n\n### [.pushNode](index.js#L299)\n\nPush the given `node` onto `parent.nodes`, and set `parent` as `node.parent.\n\n**Params**\n\n* `parent` **{Object}**\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Object}**: Returns the child node\n\n**Example**\n\n```js\nvar parent = new Node({type: 'foo'});\nvar node = new Node({type: 'bar'});\nutils.pushNode(parent, node);\nconsole.log(parent.nodes[0].type) // 'bar'\nconsole.log(node.parent.type) // 'foo'\n```\n\n### [.unshiftNode](index.js#L325)\n\nUnshift `node` onto `parent.nodes`, and set `parent` as `node.parent.\n\n**Params**\n\n* `parent` **{Object}**\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{undefined}**\n\n**Example**\n\n```js\nvar parent = new Node({type: 'foo'});\nvar node = new Node({type: 'bar'});\nutils.unshiftNode(parent, node);\nconsole.log(parent.nodes[0].type) // 'bar'\nconsole.log(node.parent.type) // 'foo'\n```\n\n### [.popNode](index.js#L354)\n\nPop the last `node` off of `parent.nodes`. The advantage of using this method is that it checks for `node.nodes` and works with any version of `snapdragon-node`.\n\n**Params**\n\n* `parent` **{Object}**\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Number|Undefined}**: Returns the length of `node.nodes` or undefined.\n\n**Example**\n\n```js\nvar parent = new Node({type: 'foo'});\nutils.pushNode(parent, new Node({type: 'foo'}));\nutils.pushNode(parent, new Node({type: 'bar'}));\nutils.pushNode(parent, new Node({type: 'baz'}));\nconsole.log(parent.nodes.length); //=> 3\nutils.popNode(parent);\nconsole.log(parent.nodes.length); //=> 2\n```\n\n### [.shiftNode](index.js#L382)\n\nShift the first `node` off of `parent.nodes`. The advantage of using this method is that it checks for `node.nodes` and works with any version of `snapdragon-node`.\n\n**Params**\n\n* `parent` **{Object}**\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Number|Undefined}**: Returns the length of `node.nodes` or undefined.\n\n**Example**\n\n```js\nvar parent = new Node({type: 'foo'});\nutils.pushNode(parent, new Node({type: 'foo'}));\nutils.pushNode(parent, new Node({type: 'bar'}));\nutils.pushNode(parent, new Node({type: 'baz'}));\nconsole.log(parent.nodes.length); //=> 3\nutils.shiftNode(parent);\nconsole.log(parent.nodes.length); //=> 2\n```\n\n### [.removeNode](index.js#L409)\n\nRemove the specified `node` from `parent.nodes`.\n\n**Params**\n\n* `parent` **{Object}**\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Object|undefined}**: Returns the removed node, if successful, or undefined if it does not exist on `parent.nodes`.\n\n**Example**\n\n```js\nvar parent = new Node({type: 'abc'});\nvar foo = new Node({type: 'foo'});\nutils.pushNode(parent, foo);\nutils.pushNode(parent, new Node({type: 'bar'}));\nutils.pushNode(parent, new Node({type: 'baz'}));\nconsole.log(parent.nodes.length); //=> 3\nutils.removeNode(parent, foo);\nconsole.log(parent.nodes.length); //=> 2\n```\n\n### [.isType](index.js#L443)\n\nReturns true if `node.type` matches the given `type`. Throws a `TypeError` if `node` is not an instance of `Node`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar node = new Node({type: 'foo'});\nconsole.log(utils.isType(node, 'foo')); // false\nconsole.log(utils.isType(node, 'bar')); // true\n```\n\n### [.hasType](index.js#L486)\n\nReturns true if the given `node` has the given `type` in `node.nodes`. Throws a `TypeError` if `node` is not an instance of `Node`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar node = new Node({\n  type: 'foo',\n  nodes: [\n    new Node({type: 'bar'}),\n    new Node({type: 'baz'})\n  ]\n});\nconsole.log(utils.hasType(node, 'xyz')); // false\nconsole.log(utils.hasType(node, 'baz')); // true\n```\n\n### [.firstOfType](index.js#L519)\n\nReturns the first node from `node.nodes` of the given `type`\n\n**Params**\n\n* `nodes` **{Array}**\n* `type` **{String}**\n* `returns` **{Object|undefined}**: Returns the first matching node or undefined.\n\n**Example**\n\n```js\nvar node = new Node({\n  type: 'foo',\n  nodes: [\n    new Node({type: 'text', val: 'abc'}),\n    new Node({type: 'text', val: 'xyz'})\n  ]\n});\n\nvar textNode = utils.firstOfType(node.nodes, 'text');\nconsole.log(textNode.val);\n//=> 'abc'\n```\n\n### [.findNode](index.js#L556)\n\nReturns the node at the specified index, or the first node of the given `type` from `node.nodes`.\n\n**Params**\n\n* `nodes` **{Array}**\n* `type` **{String|Number}**: Node type or index.\n* `returns` **{Object}**: Returns a node or undefined.\n\n**Example**\n\n```js\nvar node = new Node({\n  type: 'foo',\n  nodes: [\n    new Node({type: 'text', val: 'abc'}),\n    new Node({type: 'text', val: 'xyz'})\n  ]\n});\n\nvar nodeOne = utils.findNode(node.nodes, 'text');\nconsole.log(nodeOne.val);\n//=> 'abc'\n\nvar nodeTwo = utils.findNode(node.nodes, 1);\nconsole.log(nodeTwo.val);\n//=> 'xyz'\n```\n\n### [.isOpen](index.js#L584)\n\nReturns true if the given node is an \"*.open\" node.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar brace = new Node({type: 'brace'});\nvar open = new Node({type: 'brace.open'});\nvar close = new Node({type: 'brace.close'});\n\nconsole.log(utils.isOpen(brace)); // false\nconsole.log(utils.isOpen(open)); // true\nconsole.log(utils.isOpen(close)); // false\n```\n\n### [.isClose](index.js#L607)\n\nReturns true if the given node is a \"*.close\" node.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar brace = new Node({type: 'brace'});\nvar open = new Node({type: 'brace.open'});\nvar close = new Node({type: 'brace.close'});\n\nconsole.log(utils.isClose(brace)); // false\nconsole.log(utils.isClose(open)); // false\nconsole.log(utils.isClose(close)); // true\n```\n\n### [.hasOpen](index.js#L633)\n\nReturns true if `node.nodes` **has** an `.open` node\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar brace = new Node({\n  type: 'brace',\n  nodes: []\n});\n\nvar open = new Node({type: 'brace.open'});\nconsole.log(utils.hasOpen(brace)); // false\n\nbrace.pushNode(open);\nconsole.log(utils.hasOpen(brace)); // true\n```\n\n### [.hasClose](index.js#L663)\n\nReturns true if `node.nodes` **has** a `.close` node\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar brace = new Node({\n  type: 'brace',\n  nodes: []\n});\n\nvar close = new Node({type: 'brace.close'});\nconsole.log(utils.hasClose(brace)); // false\n\nbrace.pushNode(close);\nconsole.log(utils.hasClose(brace)); // true\n```\n\n### [.hasOpenAndClose](index.js#L697)\n\nReturns true if `node.nodes` has both `.open` and `.close` nodes\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar brace = new Node({\n  type: 'brace',\n  nodes: []\n});\n\nvar open = new Node({type: 'brace.open'});\nvar close = new Node({type: 'brace.close'});\nconsole.log(utils.hasOpen(brace)); // false\nconsole.log(utils.hasClose(brace)); // false\n\nbrace.pushNode(open);\nbrace.pushNode(close);\nconsole.log(utils.hasOpen(brace)); // true\nconsole.log(utils.hasClose(brace)); // true\n```\n\n### [.addType](index.js#L719)\n\nPush the given `node` onto the `state.inside` array for the given type. This array is used as a specialized \"stack\" for only the given `node.type`.\n\n**Params**\n\n* `state` **{Object}**: The `compiler.state` object or custom state object.\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Array}**: Returns the `state.inside` stack for the given type.\n\n**Example**\n\n```js\nvar state = { inside: {}};\nvar node = new Node({type: 'brace'});\nutils.addType(state, node);\nconsole.log(state.inside);\n//=> { brace: [{type: 'brace'}] }\n```\n\n### [.removeType](index.js#L759)\n\nRemove the given `node` from the `state.inside` array for the given type. This array is used as a specialized \"stack\" for only the given `node.type`.\n\n**Params**\n\n* `state` **{Object}**: The `compiler.state` object or custom state object.\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Array}**: Returns the `state.inside` stack for the given type.\n\n**Example**\n\n```js\nvar state = { inside: {}};\nvar node = new Node({type: 'brace'});\nutils.addType(state, node);\nconsole.log(state.inside);\n//=> { brace: [{type: 'brace'}] }\nutils.removeType(state, node);\n//=> { brace: [] }\n```\n\n### [.isEmpty](index.js#L788)\n\nReturns true if `node.val` is an empty string, or `node.nodes` does not contain any non-empty text nodes.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `fn` **{Function}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar node = new Node({type: 'text'});\nutils.isEmpty(node); //=> true\nnode.val = 'foo';\nutils.isEmpty(node); //=> false\n```\n\n### [.isInsideType](index.js#L833)\n\nReturns true if the `state.inside` stack for the given type exists and has one or more nodes on it.\n\n**Params**\n\n* `state` **{Object}**\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar state = { inside: {}};\nvar node = new Node({type: 'brace'});\nconsole.log(utils.isInsideType(state, 'brace')); //=> false\nutils.addType(state, node);\nconsole.log(utils.isInsideType(state, 'brace')); //=> true\nutils.removeType(state, node);\nconsole.log(utils.isInsideType(state, 'brace')); //=> false\n```\n\n### [.isInside](index.js#L867)\n\nReturns true if `node` is either a child or grand-child of the given `type`, or `state.inside[type]` is a non-empty array.\n\n**Params**\n\n* `state` **{Object}**: Either the `compiler.state` object, if it exists, or a user-supplied state object.\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `type` **{String}**: The `node.type` to check for.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar state = { inside: {}};\nvar node = new Node({type: 'brace'});\nvar open = new Node({type: 'brace.open'});\nconsole.log(utils.isInside(state, open, 'brace')); //=> false\nutils.pushNode(node, open);\nconsole.log(utils.isInside(state, open, 'brace')); //=> true\n```\n\n### [.last](index.js#L915)\n\nGet the last `n` element from the given `array`. Used for getting\na node from `node.nodes.`\n\n**Params**\n\n* `array` **{Array}**\n* `n` **{Number}**\n* `returns` **{undefined}**\n\n### [.arrayify](index.js#L935)\n\nCast the given `val` to an array.\n\n**Params**\n\n* `val` **{any}**\n* `returns` **{Array}**\n\n**Example**\n\n```js\nconsole.log(utils.arraify(''));\n//=> []\nconsole.log(utils.arraify('foo'));\n//=> ['foo']\nconsole.log(utils.arraify(['foo']));\n//=> ['foo']\n```\n\n### [.stringify](index.js#L948)\n\nConvert the given `val` to a string by joining with `,`. Useful\nfor creating a cheerio/CSS/DOM-style selector from a list of strings.\n\n**Params**\n\n* `val` **{any}**\n* `returns` **{Array}**\n\n### [.trim](index.js#L961)\n\nEnsure that the given value is a string and call `.trim()` on it,\nor return an empty string.\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n## Release history\n\nChangelog entries are classified using the following labels from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog):\n\n* `added`: for new features\n* `changed`: for changes in existing functionality\n* `deprecated`: for once-stable features removed in upcoming releases\n* `removed`: for deprecated features removed in this release\n* `fixed`: for any bug fixes\n\nCustom labels used in this changelog:\n\n* `dependencies`: bumps dependencies\n* `housekeeping`: code re-organization, minor edits, or other changes that don't fit in one of the other categories.\n\n### [3.0.0] - 2017-05-01\n\n**Changed**\n\n* `.emit` was renamed to [.append](#append)\n* `.addNode` was renamed to [.pushNode](#pushNode)\n* `.getNode` was renamed to [.findNode](#findNode)\n* `.isEmptyNodes` was renamed to [.isEmpty](#isEmpty): also now works with `node.nodes` and/or `node.val`\n\n**Added**\n\n* [.identity](#identity)\n* [.removeNode](#removeNode)\n* [.shiftNode](#shiftNode)\n* [.popNode](#popNode)\n\n### [0.1.0]\n\nFirst release.\n\n## About\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on May 01, 2017._",
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isNode(node)); //=> true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isNode({})); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:    console.log(parent.nodes[0]):
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:    console.log(parent.nodes[parent.nodes.length - 1]):
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes[0].type) // 'bar'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(node.parent.type) // 'foo'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes[0].type) // 'bar'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(node.parent.type) // 'foo'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 3
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 3
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 3
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isType(node, 'foo')); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isType(node, 'bar')); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasType(node, 'xyz')); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasType(node, 'baz')); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(textNode.val);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(nodeOne.val);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(nodeTwo.val);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isOpen(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isOpen(open)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isOpen(close)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isClose(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isClose(open)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isClose(close)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasOpen(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasOpen(brace)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasClose(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasClose(brace)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasOpen(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasClose(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasOpen(brace)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasClose(brace)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(state.inside);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(state.inside);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isInsideType(state, 'brace')); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isInsideType(state, 'brace')); //=> true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isInsideType(state, 'brace')); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isInside(state, open, 'brace')); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isInside(state, open, 'brace')); //=> true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.arraify(''));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.arraify('foo'));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.arraify(['foo']));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:Changelog entries are classified using the following labels from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog):
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:Custom labels used in this changelog:
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isNode(node)); //=> true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isNode({})); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: *     console.log(parent.nodes[0]):
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: *     console.log(parent.nodes[parent.nodes.length - 1]):
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes[0].type) // 'bar'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(node.parent.type) // 'foo'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes[0].type) // 'bar'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(node.parent.type) // 'foo'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 3
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 3
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 3
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isType(node, 'foo')); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isType(node, 'bar')); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasType(node, 'xyz')); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasType(node, 'baz')); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(textNode.val);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(nodeOne.val);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(nodeTwo.val);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isOpen(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isOpen(open)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isOpen(close)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isClose(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isClose(open)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isClose(close)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasOpen(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasOpen(brace)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasClose(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasClose(brace)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasOpen(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasClose(brace)); // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasOpen(brace)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasClose(brace)); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(state.inside);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(state.inside);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isInsideType(state, 'brace')); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isInsideType(state, 'brace')); //=> true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isInsideType(state, 'brace')); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isInside(state, open, 'brace')); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isInside(state, open, 'brace')); //=> true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.arrayify(''));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.arrayify('foo'));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.arrayify(['foo']));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(Node.isNode(node)); //=> true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(Node.isNode({})); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(node.nodes.length);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(node.nodes.length);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(node.nodes.length);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(node.nodes.length);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(node.isType('foo'));          // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(node.isType(/^(foo|bar)$/));  // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(node.isType(['foo', 'bar'])); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(foo.hasType('qux'));          // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(foo.hasType(/^(qux|bar)$/));  // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(foo.hasType(['qux', 'bar'])); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(bar.siblings.length) // 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(baz.siblings.length) // 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(bar.index) // 1
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(baz.index) // 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(qux.index) // 0
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(baz.prev.type) // 'bar'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(bar.siblings.length) // 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(baz.siblings.length) // 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(foo.first.type) // 'bar'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(foo.last.type) // 'qux'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(foo.last.type) // 'qux'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:Changelog entries are classified using the following labels from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog):
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:Custom labels used in this changelog:
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(Node.isNode(node)); //=> true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(Node.isNode({})); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(node.nodes.length);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(node.nodes.length);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(node.nodes.length);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(node.nodes.length);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(node.isType('foo'));          // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(node.isType(/^(foo|bar)$/));  // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(node.isType(['foo', 'bar'])); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(foo.hasType('qux'));          // false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(foo.hasType(/^(qux|bar)$/));  // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(foo.hasType(['qux', 'bar'])); // true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(bar.siblings.length) // 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(baz.siblings.length) // 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(bar.index) // 1
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(baz.index) // 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(qux.index) // 0
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(baz.prev.type) // 'bar'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(bar.siblings.length) // 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(baz.siblings.length) // 2
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(foo.first.type) // 'bar'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(foo.last.type) // 'qux'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(foo.last.type) // 'qux'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/split-string/package.json:  "readme": "# split-string [![NPM version](https://img.shields.io/npm/v/split-string.svg?style=flat)](https://www.npmjs.com/package/split-string) [![NPM monthly downloads](https://img.shields.io/npm/dm/split-string.svg?style=flat)](https://npmjs.org/package/split-string) [![NPM total downloads](https://img.shields.io/npm/dt/split-string.svg?style=flat)](https://npmjs.org/package/split-string) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/split-string.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/split-string)\n\n> Split a string on a character except when the character is escaped.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save split-string\n```\n\n<!-- section: Why use this? -->\n\n<details>\n<summary><strong>Why use this?</strong></summary>\n\n<br>\n\nAlthough it's easy to split on a string:\n\n```js\nconsole.log('a.b.c'.split('.'));\n//=> ['a', 'b', 'c']\n```\n\nIt's more challenging to split a string whilst respecting escaped or quoted characters.\n\n**Bad**\n\n```js\nconsole.log('a\\\\.b.c'.split('.'));\n//=> ['a\\\\', 'b', 'c']\n\nconsole.log('\"a.b.c\".d'.split('.'));\n//=> ['\"a', 'b', 'c\"', 'd']\n```\n\n**Good**\n\n```js\nvar split = require('split-string');\nconsole.log(split('a\\\\.b.c'));\n//=> ['a.b', 'c']\n\nconsole.log(split('\"a.b.c\".d'));\n//=> ['a.b.c', 'd']\n```\n\nSee the [options](#options) to learn how to choose the separator or retain quotes or escaping.\n\n<br>\n\n</details>\n\n## Usage\n\n```js\nvar split = require('split-string');\n\nsplit('a.b.c');\n//=> ['a', 'b', 'c']\n\n// respects escaped characters\nsplit('a.b.c\\\\.d');\n//=> ['a', 'b', 'c.d']\n\n// respects double-quoted strings\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n```\n\n**Brackets**\n\nAlso respects brackets [unless disabled](#optionsbrackets):\n\n```js\nsplit('a (b c d) e', ' ');\n//=> ['a', '(b c d)', 'e']\n```\n\n## Options\n\n### options.brackets\n\n**Type**: `object|boolean`\n\n**Default**: `undefined`\n\n**Description**\n\nIf enabled, split-string will not split inside brackets. The following brackets types are supported when `options.brackets` is `true`,\n\n```js\n{\n  '<': '>',\n  '(': ')',\n  '[': ']',\n  '{': '}'\n}\n```\n\nOr, if object of brackets must be passed, each property on the object must be a bracket type, where the property key is the opening delimiter and property value is the closing delimiter.\n\n**Examples**\n\n```js\n// no bracket support by default\nsplit('a.{b.c}');\n//=> [ 'a', '{b', 'c}' ]\n\n// support all basic bracket types: \"<>{}[]()\"\nsplit('a.{b.c}', {brackets: true});\n//=> [ 'a', '{b.c}' ]\n\n// also supports nested brackets \nsplit('a.{b.{c.d}.e}.f', {brackets: true});\n//=> [ 'a', '{b.{c.d}.e}', 'f' ]\n\n// support only the specified brackets\nsplit('[a.b].(c.d)', {brackets: {'[': ']'}});\n//=> [ '[a.b]', '(c', 'd)' ]\n```\n\n### options.sep\n\n**Type**: `string`\n\n**Default**: `.`\n\nThe separator/character to split on.\n\n**Example**\n\n```js\nsplit('a.b,c', {sep: ','});\n//=> ['a.b', 'c']\n\n// you can also pass the separator as string as the last argument\nsplit('a.b,c', ',');\n//=> ['a.b', 'c']\n```\n\n### options.keepEscaping\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep backslashes in the result.\n\n**Example**\n\n```js\nsplit('a.b\\\\.c');\n//=> ['a', 'b.c']\n\nsplit('a.b.\\\\c', {keepEscaping: true});\n//=> ['a', 'b\\.c']\n```\n\n### options.keepQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep single- or double-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\"b.c.d\".e', {keepQuotes: true});\n//=> ['a', '\"b.c.d\"', 'e']\n\nsplit('a.\\'b.c.d\\'.e', {keepQuotes: true});\n//=> ['a', '\\'b.c.d\\'', 'e']\n```\n\n### options.keepDoubleQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep double-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\"b.c.d\".e', {keepDoubleQuotes: true});\n//=> ['a', '\"b.c.d\"', 'e']\n```\n\n### options.keepSingleQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep single-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\\'b.c.d\\'.e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\\'b.c.d\\'.e', {keepSingleQuotes: true});\n//=> ['a', '\\'b.c.d\\'', 'e']\n```\n\n## Customizer\n\n**Type**: `function`\n\n**Default**: `undefined`\n\nPass a function as the last argument to customize how tokens are added to the array.\n\n**Example**\n\n```js\nvar arr = split('a.b', function(tok) {\n  if (tok.arr[tok.arr.length - 1] === 'a') {\n    tok.split = false;\n  }\n});\nconsole.log(arr);\n//=> ['a.b']\n```\n\n**Properties**\n\nThe `tok` object has the following properties:\n\n* `tok.val` (string) The current value about to be pushed onto the result array\n* `tok.idx` (number) the current index in the string\n* `tok.str` (string) the entire string\n* `tok.arr` (array) the result array\n\n## Release history\n\n### v3.0.0 - 2017-06-17\n\n**Added**\n\n* adds support for brackets\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [deromanize](https://www.npmjs.com/package/deromanize): Convert roman numerals to arabic numbers (useful for books, outlines, documentation, slide decks, etc) | [homepage](https://github.com/jonschlinkert/deromanize \"Convert roman numerals to arabic numbers (useful for books, outlines, documentation, slide decks, etc)\")\n* [randomatic](https://www.npmjs.com/package/randomatic): Generate randomized strings of a specified length using simple character sequences. The original generate-password. | [homepage](https://github.com/jonschlinkert/randomatic \"Generate randomized strings of a specified length using simple character sequences. The original generate-password.\")\n* [repeat-string](https://www.npmjs.com/package/repeat-string): Repeat the given string n times. Fastest implementation for repeating a string. | [homepage](https://github.com/jonschlinkert/repeat-string \"Repeat the given string n times. Fastest implementation for repeating a string.\")\n* [romanize](https://www.npmjs.com/package/romanize): Convert numbers to roman numerals (useful for books, outlines, documentation, slide decks, etc) | [homepage](https://github.com/jonschlinkert/romanize \"Convert numbers to roman numerals (useful for books, outlines, documentation, slide decks, etc)\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 28 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 9 | [doowb](https://github.com/doowb) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 19, 2017._",
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/package.json:  "readme": "# assign-symbols [![NPM version](https://badge.fury.io/js/assign-symbols.svg)](http://badge.fury.io/js/assign-symbols)\n\n> Assign the enumerable es6 Symbol properties from an object (or objects) to the first object passed on the arguments. Can be used as a supplement to other extend, assign or merge methods as a polyfill for the Symbols part of the es6 Object.assign method.\n\nFrom the [Mozilla Developer docs for Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol):\n\n> A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i assign-symbols --save\n```\n\n## Usage\n\n```js\nvar assignSymbols = require('assign-symbols');\nvar obj = {};\n\nvar one = {};\nvar symbolOne = Symbol('aaa');\none[symbolOne] = 'bbb';\n\nvar two = {};\nvar symbolTwo = Symbol('ccc');\ntwo[symbolTwo] = 'ddd';\n\nassignSymbols(obj, one, two);\n\nconsole.log(obj[symbolOne]);\n//=> 'bbb'\nconsole.log(obj[symbolTwo]);\n//=> 'ddd'\n```\n\n## Similar projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties of source objects to a destination object. | [homepage](https://github.com/jonschlinkert/assign-deep)\n* [clone-deep](https://www.npmjs.com/package/clone-deep): Recursively (deep) clone JavaScript native types, like Object, Array, RegExp, Date as well as primitives. | [homepage](https://github.com/jonschlinkert/clone-deep)\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow)\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/assign-symbols/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 06, 2015._",
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolOne]);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolTwo]);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log('a.b.c'.split('.'));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log('a\\.b.c'.split('.'));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log('"a.b.c".d'.split('.'));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log(split('a\\.b.c'));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log(split('"a.b.c".d'));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log(arr);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/package.json:  "readme": "# fill-range [![NPM version](https://img.shields.io/npm/v/fill-range.svg?style=flat)](https://www.npmjs.com/package/fill-range) [![NPM monthly downloads](https://img.shields.io/npm/dm/fill-range.svg?style=flat)](https://npmjs.org/package/fill-range)  [![NPM total downloads](https://img.shields.io/npm/dt/fill-range.svg?style=flat)](https://npmjs.org/package/fill-range) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/fill-range.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/fill-range)\n\n> Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Examples](#examples)\n- [Options](#options)\n  * [options.step](#optionsstep)\n  * [options.strictRanges](#optionsstrictranges)\n  * [options.stringify](#optionsstringify)\n  * [options.toRegex](#optionstoregex)\n  * [options.transform](#optionstransform)\n- [About](#about)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save fill-range\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add fill-range\n```\n\n## Usage\n\nExpands numbers and letters, optionally using a `step` as the last argument. _(Numbers may be defined as JavaScript numbers or strings)_.\n\n```js\nvar fill = require('fill-range');\nfill(from, to[, step, options]);\n\n// examples\nconsole.log(fill('1', '10'));                  //=> '[ '1', '2', '3', '4', '5', '6', '7', '8', '9', '10' ]'\nconsole.log(fill('1', '10', {toRegex: true})); //=> [1-9]|10\n```\n\n**Params**\n\n* `from`: **{String|Number}** the number or letter to start with\n* `to`: **{String|Number}** the number or letter to end with\n* `step`: **{String|Number|Object|Function}** Optionally pass a [step](#optionsstep) to use.\n* `options`: **{Object|Function}**: See all available [options](#options)\n\n## Examples\n\nBy default, an array of values is returned.\n\n**Alphabetical ranges**\n\n```js\nconsole.log(fill('a', 'e')); //=> ['a', 'b', 'c', 'd', 'e']\nconsole.log(fill('A', 'E')); //=> [ 'A', 'B', 'C', 'D', 'E' ]\n```\n\n**Numerical ranges**\n\nNumbers can be defined as actual numbers or strings.\n\n```js\nconsole.log(fill(1, 5));     //=> [ 1, 2, 3, 4, 5 ]\nconsole.log(fill('1', '5')); //=> [ 1, 2, 3, 4, 5 ]\n```\n\n**Negative ranges**\n\nNumbers can be defined as actual numbers or strings.\n\n```js\nconsole.log(fill('-5', '-1')); //=> [ '-5', '-4', '-3', '-2', '-1' ]\nconsole.log(fill('-5', '5')); //=> [ '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5' ]\n```\n\n**Steps (increments)**\n\n```js\n// numerical ranges with increments\nconsole.log(fill('0', '25', 4)); //=> [ '0', '4', '8', '12', '16', '20', '24' ]\nconsole.log(fill('0', '25', 5)); //=> [ '0', '5', '10', '15', '20', '25' ]\nconsole.log(fill('0', '25', 6)); //=> [ '0', '6', '12', '18', '24' ]\n\n// alphabetical ranges with increments\nconsole.log(fill('a', 'z', 4)); //=> [ 'a', 'e', 'i', 'm', 'q', 'u', 'y' ]\nconsole.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]\nconsole.log(fill('a', 'z', 6)); //=> [ 'a', 'g', 'm', 's', 'y' ]\n```\n\n## Options\n\n### options.step\n\n**Type**: `number` (formatted as a string or number)\n\n**Default**: `undefined`\n\n**Description**: The increment to use for the range. Can be used with letters or numbers.\n\n**Example(s)**\n\n```js\n// numbers\nconsole.log(fill('1', '10', 2)); //=> [ '1', '3', '5', '7', '9' ]\nconsole.log(fill('1', '10', 3)); //=> [ '1', '4', '7', '10' ]\nconsole.log(fill('1', '10', 4)); //=> [ '1', '5', '9' ]\n\n// letters\nconsole.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]\nconsole.log(fill('a', 'z', 7)); //=> [ 'a', 'h', 'o', 'v' ]\nconsole.log(fill('a', 'z', 9)); //=> [ 'a', 'j', 's' ]\n```\n\n### options.strictRanges\n\n**Type**: `boolean`\n\n**Default**: `false`\n\n**Description**: By default, `null` is returned when an invalid range is passed. Enable this option to throw a `RangeError` on invalid ranges.\n\n**Example(s)**\n\nThe following are all invalid:\n\n```js\nfill('1.1', '2');   // decimals not supported in ranges\nfill('a', '2');     // incompatible range values\nfill(1, 10, 'foo'); // invalid \"step\" argument\n```\n\n### options.stringify\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\n**Description**: Cast all returned values to strings. By default, integers are returned as numbers.\n\n**Example(s)**\n\n```js\nconsole.log(fill(1, 5));                    //=> [ 1, 2, 3, 4, 5 ]\nconsole.log(fill(1, 5, {stringify: true})); //=> [ '1', '2', '3', '4', '5' ]\n```\n\n### options.toRegex\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\n**Description**: Create a regex-compatible source string, instead of expanding values to an array.\n\n**Example(s)**\n\n```js\n// alphabetical range\nconsole.log(fill('a', 'e', {toRegex: true})); //=> '[a-e]'\n// alphabetical with step\nconsole.log(fill('a', 'z', 3, {toRegex: true})); //=> 'a|d|g|j|m|p|s|v|y'\n// numerical range\nconsole.log(fill('1', '100', {toRegex: true})); //=> '[1-9]|[1-9][0-9]|100'\n// numerical range with zero padding\nconsole.log(fill('000001', '100000', {toRegex: true}));\n//=> '0{5}[1-9]|0{4}[1-9][0-9]|0{3}[1-9][0-9]{2}|0{2}[1-9][0-9]{3}|0[1-9][0-9]{4}|100000'\n```\n\n### options.transform\n\n**Type**: `function`\n\n**Default**: `undefined`\n\n**Description**: Customize each value in the returned array (or [string](#optionstoRegex)). _(you can also pass this function as the last argument to `fill()`)_.\n\n**Example(s)**\n\n```js\n// increase padding by two\nvar arr = fill('01', '05', function(val, a, b, step, idx, arr, options) {\n  return repeat('0', (options.maxLength + 2) - val.length) + val;\n});\n\nconsole.log(arr);\n//=> ['0001', '0002', '0003', '0004', '0005']\n```\n\n## About\n\n### Related projects\n\n* [braces](https://www.npmjs.com/package/braces): Fast, comprehensive, bash-like brace expansion implemented in JavaScript. Complete support for the Bash 4.3 braces… [more](https://github.com/jonschlinkert/braces) | [homepage](https://github.com/jonschlinkert/braces \"Fast, comprehensive, bash-like brace expansion implemented in JavaScript. Complete support for the Bash 4.3 braces specification, without sacrificing speed.\")\n* [expand-range](https://www.npmjs.com/package/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See… [more](https://github.com/jonschlinkert/expand-range) | [homepage](https://github.com/jonschlinkert/expand-range \"Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch.\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n* [to-regex-range](https://www.npmjs.com/package/to-regex-range): Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than… [more](https://github.com/jonschlinkert/to-regex-range) | [homepage](https://github.com/jonschlinkert/to-regex-range \"Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.87 million test assertions.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 103 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 2   | [paulmillr](https://github.com/paulmillr) |  \n| 1   | [edorivai](https://github.com/edorivai) |  \n| 1   | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |  \n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 23, 2017._",
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/package.json:  "readme": "# to-regex-range [![NPM version](https://img.shields.io/npm/v/to-regex-range.svg?style=flat)](https://www.npmjs.com/package/to-regex-range) [![NPM monthly downloads](https://img.shields.io/npm/dm/to-regex-range.svg?style=flat)](https://npmjs.org/package/to-regex-range)  [![NPM total downloads](https://img.shields.io/npm/dt/to-regex-range.svg?style=flat)](https://npmjs.org/package/to-regex-range) [![Linux Build Status](https://img.shields.io/travis/micromatch/to-regex-range.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/to-regex-range)\n\n> Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save to-regex-range\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add to-regex-range\n```\n\n<details>\n<summary><strong>What does this do?</strong></summary>\n\n<br>\n\nThis libary generates the `source` string to be passed to `new RegExp()` for matching a range of numbers.\n\n**Example**\n\n```js\nvar toRegexRange = require('to-regex-range');\nvar regex = new RegExp(toRegexRange('15', '95'));\n```\n\nA string is returned so that you can do whatever you need with it before passing it to `new RegExp()` (like adding `^` or `$` boundaries, defining flags, or combining it another string).\n\n<br>\n\n</details>\n\n<details>\n<summary><strong>Why use this library?</strong></summary>\n\n<br>\n\n### Convenience\n\nCreating regular expressions for matching numbers gets deceptively complicated pretty fast.\n\nFor example, let's say you need a validation regex for matching part of a user-id, postal code, social security number, tax id, etc:\n\n* regex for matching `1` => `/1/` (easy enough)\n* regex for matching `1` through `5` => `/[1-5]/` (not bad...)\n* regex for matching `1` or `5` => `/(1|5)/` (still easy...)\n* regex for matching `1` through `50` => `/([1-9]|[1-4][0-9]|50)/` (uh-oh...)\n* regex for matching `1` through `55` => `/([1-9]|[1-4][0-9]|5[0-5])/` (no prob, I can do this...)\n* regex for matching `1` through `555` => `/([1-9]|[1-9][0-9]|[1-4][0-9]{2}|5[0-4][0-9]|55[0-5])/` (maybe not...)\n* regex for matching `0001` through `5555` => `/(0{3}[1-9]|0{2}[1-9][0-9]|0[1-9][0-9]{2}|[1-4][0-9]{3}|5[0-4][0-9]{2}|55[0-4][0-9]|555[0-5])/` (okay, I get the point!)\n\nThe numbers are contrived, but they're also really basic. In the real world you might need to generate a regex on-the-fly for validation.\n\n**Learn more**\n\nIf you're interested in learning more about [character classes](http://www.regular-expressions.info/charclass.html) and other regex features, I personally have always found [regular-expressions.info](http://www.regular-expressions.info/charclass.html) to be pretty useful.\n\n### Heavily tested\n\nAs of April 27, 2017, this library runs [2,783,483 test assertions](./test/test.js) against generated regex-ranges to provide brute-force verification that results are indeed correct.\n\nTests run in ~870ms on my MacBook Pro, 2.5 GHz Intel Core i7.\n\n### Highly optimized\n\nGenerated regular expressions are highly optimized:\n\n* duplicate sequences and character classes are reduced using quantifiers\n* smart enough to use `?` conditionals when number(s) or range(s) can be positive or negative\n* uses fragment caching to avoid processing the same exact string more than once\n\n<br>\n\n</details>\n\n## Usage\n\nAdd this library to your javascript application with the following line of code\n\n```js\nvar toRegexRange = require('to-regex-range');\n```\n\nThe main export is a function that takes two integers: the `min` value and `max` value (formatted as strings or numbers).\n\n```js\nvar source = toRegexRange('15', '95');\n//=> 1[5-9]|[2-8][0-9]|9[0-5]\n\nvar re = new RegExp('^' + source + '$');\nconsole.log(re.test('14')); //=> false\nconsole.log(re.test('50')); //=> true\nconsole.log(re.test('94')); //=> true\nconsole.log(re.test('96')); //=> false\n```\n\n## Options\n\n### options.capture\n\n**Type**: `boolean`\n\n**Deafault**: `undefined`\n\nWrap the returned value in parentheses when there is more than one regex condition. Useful when you're dynamically generating ranges.\n\n```js\nconsole.log(toRegexRange('-10', '10'));\n//=> -[1-9]|-?10|[0-9]\n\nconsole.log(toRegexRange('-10', '10', {capture: true}));\n//=> (-[1-9]|-?10|[0-9])\n```\n\n### options.shorthand\n\n**Type**: `boolean`\n\n**Deafault**: `undefined`\n\nUse the regex shorthand for `[0-9]`:\n\n```js\nconsole.log(toRegexRange('0', '999999'));\n//=> [0-9]|[1-9][0-9]{1,5}\n\nconsole.log(toRegexRange('0', '999999', {shorthand: true}));\n//=> \\d|[1-9]\\d{1,5}\n```\n\n### options.relaxZeros\n\n**Type**: `boolean`\n\n**Default**: `true`\n\nThis option only applies to **negative zero-padded ranges**. By default, when a negative zero-padded range is defined, the number of leading zeros is relaxed using `-0*`.\n\n```js\nconsole.log(toRegexRange('-001', '100'));\n//=> -0*1|0{2}[0-9]|0[1-9][0-9]|100\n\nconsole.log(toRegexRange('-001', '100', {relaxZeros: false}));\n//=> -0{2}1|0{2}[0-9]|0[1-9][0-9]|100\n```\n\n<details>\n<summary><strong>Why are zeros relaxed for negative zero-padded ranges by default?</strong></summary>\n\nConsider the following.\n\n```js\nvar regex = toRegexRange('-001', '100');\n```\n\n_Note that `-001` and `100` are both three digits long_.\n\nIn most zero-padding implementations, only a single leading zero is enough to indicate that zero-padding should be applied. Thus, the leading zeros would be \"corrected\" on the negative range in the example to `-01`, instead of `-001`, to make total length of each string no greater than the length of the largest number in the range (in other words, `-001` is 4 digits, but `100` is only three digits).\n\nIf zeros were not relaxed by default, you might expect the resulting regex of the above pattern to match `-001` - given that it's defined that way in the arguments - _but it wouldn't_. It would, however, match `-01`. This gets even more ambiguous with large ranges, like `-01` to `1000000`.\n\nThus, we relax zeros by default to provide a more predictable experience for users.\n\n</details>\n\n## Examples\n\n| **Range** | **Result** | **Compile time** | \n| --- | --- | --- |\n| `toRegexRange('5, 5')` | `5` | _33μs_ |\n| `toRegexRange('5, 6')` | `5\\|6` | _53μs_ |\n| `toRegexRange('29, 51')` | `29\\|[34][0-9]\\|5[01]` | _699μs_ |\n| `toRegexRange('31, 877')` | `3[1-9]\\|[4-9][0-9]\\|[1-7][0-9]{2}\\|8[0-6][0-9]\\|87[0-7]` | _711μs_ |\n| `toRegexRange('111, 555')` | `11[1-9]\\|1[2-9][0-9]\\|[2-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5]` | _62μs_ |\n| `toRegexRange('-10, 10')` | `-[1-9]\\|-?10\\|[0-9]` | _74μs_ |\n| `toRegexRange('-100, -10')` | `-1[0-9]\\|-[2-9][0-9]\\|-100` | _49μs_ |\n| `toRegexRange('-100, 100')` | `-[1-9]\\|-?[1-9][0-9]\\|-?100\\|[0-9]` | _45μs_ |\n| `toRegexRange('001, 100')` | `0{2}[1-9]\\|0[1-9][0-9]\\|100` | _158μs_ |\n| `toRegexRange('0010, 1000')` | `0{2}1[0-9]\\|0{2}[2-9][0-9]\\|0[1-9][0-9]{2}\\|1000` | _61μs_ |\n| `toRegexRange('1, 2')` | `1\\|2` | _10μs_ |\n| `toRegexRange('1, 5')` | `[1-5]` | _24μs_ |\n| `toRegexRange('1, 10')` | `[1-9]\\|10` | _23μs_ |\n| `toRegexRange('1, 100')` | `[1-9]\\|[1-9][0-9]\\|100` | _30μs_ |\n| `toRegexRange('1, 1000')` | `[1-9]\\|[1-9][0-9]{1,2}\\|1000` | _52μs_ |\n| `toRegexRange('1, 10000')` | `[1-9]\\|[1-9][0-9]{1,3}\\|10000` | _47μs_ |\n| `toRegexRange('1, 100000')` | `[1-9]\\|[1-9][0-9]{1,4}\\|100000` | _44μs_ |\n| `toRegexRange('1, 1000000')` | `[1-9]\\|[1-9][0-9]{1,5}\\|1000000` | _49μs_ |\n| `toRegexRange('1, 10000000')` | `[1-9]\\|[1-9][0-9]{1,6}\\|10000000` | _63μs_ |\n\n## Heads up!\n\n**Order of arguments**\n\nWhen the `min` is larger than the `max`, values will be flipped to create a valid range:\n\n```js\ntoRegexRange('51', '29');\n```\n\nIs effectively flipped to:\n\n```js\ntoRegexRange('29', '51');\n//=> 29|[3-4][0-9]|5[0-1]\n```\n\n**Steps / increments**\n\nThis library does not support steps (increments). A pr to add support would be welcome.\n\n## History\n\n### v2.0.0 - 2017-04-21\n\n**New features**\n\nAdds support for zero-padding!\n\n### v1.0.0\n\n**Optimizations**\n\nRepeating ranges are now grouped using quantifiers. rocessing time is roughly the same, but the generated regex is much smaller, which should result in faster matching.\n\n## Attribution\n\nInspired by the python library [range-regex](https://github.com/dimka665/range-regex).\n\n## About\n\n### Related projects\n\n* [expand-range](https://www.npmjs.com/package/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See… [more](https://github.com/jonschlinkert/expand-range) | [homepage](https://github.com/jonschlinkert/expand-range \"Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch.\")\n* [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n* [repeat-element](https://www.npmjs.com/package/repeat-element): Create an array by repeating the given value n times. | [homepage](https://github.com/jonschlinkert/repeat-element \"Create an array by repeating the given value n times.\")\n* [repeat-string](https://www.npmjs.com/package/repeat-string): Repeat the given string n times. Fastest implementation for repeating a string. | [homepage](https://github.com/jonschlinkert/repeat-string \"Repeat the given string n times. Fastest implementation for repeating a string.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on April 27, 2017._",
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(re.test('14')); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(re.test('50')); //=> true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(re.test('94')); //=> true
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(re.test('96')); //=> false
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('-10', '10'));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('-10', '10', {capture: true}));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('0', '999999'));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('0', '999999', {shorthand: true}));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('-001', '100'));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('-001', '100', {relaxZeros: false}));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '10'));                  //=> '[ '1', '2', '3', '4', '5', '6', '7', '8', '9', '10' ]'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '10', {toRegex: true})); //=> [1-9]|10
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'e')); //=> ['a', 'b', 'c', 'd', 'e']
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('A', 'E')); //=> [ 'A', 'B', 'C', 'D', 'E' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill(1, 5));     //=> [ 1, 2, 3, 4, 5 ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '5')); //=> [ 1, 2, 3, 4, 5 ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('-5', '-1')); //=> [ '-5', '-4', '-3', '-2', '-1' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('-5', '5')); //=> [ '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('0', '25', 4)); //=> [ '0', '4', '8', '12', '16', '20', '24' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('0', '25', 5)); //=> [ '0', '5', '10', '15', '20', '25' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('0', '25', 6)); //=> [ '0', '6', '12', '18', '24' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 4)); //=> [ 'a', 'e', 'i', 'm', 'q', 'u', 'y' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 6)); //=> [ 'a', 'g', 'm', 's', 'y' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '10', 2)); //=> [ '1', '3', '5', '7', '9' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '10', 3)); //=> [ '1', '4', '7', '10' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '10', 4)); //=> [ '1', '5', '9' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 7)); //=> [ 'a', 'h', 'o', 'v' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 9)); //=> [ 'a', 'j', 's' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill(1, 5));                    //=> [ 1, 2, 3, 4, 5 ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill(1, 5, {stringify: true})); //=> [ '1', '2', '3', '4', '5' ]
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'e', {toRegex: true})); //=> '[a-e]'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 3, {toRegex: true})); //=> 'a|d|g|j|m|p|s|v|y'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '100', {toRegex: true})); //=> '[1-9]|[1-9][0-9]|100'
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('000001', '100000', {toRegex: true}));
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(arr);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://img.shields.io/npm/v/define-property.svg?style=flat)](https://www.npmjs.com/package/define-property) [![NPM monthly downloads](https://img.shields.io/npm/dm/define-property.svg?style=flat)](https://npmjs.org/package/define-property)  [![NPM total downloads](https://img.shields.io/npm/dt/define-property.svg?style=flat)](https://npmjs.org/package/define-property) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/define-property.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save define-property\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add define-property\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## About\n\n### Related projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target… [more](https://github.com/jonschlinkert/assign-deep) | [homepage](https://github.com/jonschlinkert/assign-deep \"Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target (first) object.\")\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow \"Extend an object with the properties of additional objects. node.js/javascript util.\")\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep \"Recursively merge values in a javascript object.\")\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep \"Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 20, 2017._",
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg?style=flat)](https://www.npmjs.com/package/is-data-descriptor) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![NPM total downloads](https://img.shields.io/npm/dt/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-data-descriptor\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor \"Returns true if a value has the characteristics of a valid JavaScript accessor descriptor.\")\n* [is-data-descriptor](https://www.npmjs.com/package/is-data-descriptor): Returns true if a value has the characteristics of a valid JavaScript data descriptor. | [homepage](https://github.com/jonschlinkert/is-data-descriptor \"Returns true if a value has the characteristics of a valid JavaScript data descriptor.\")\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://github.com/jonschlinkert/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor \"Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for data descriptors and accessor descriptors.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 21 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [realityking](https://github.com/realityking) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 01, 2017._",
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/define-property/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/braces/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{x,y,z}/b'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a/{x,y,z}/b'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{x,y,z}/b', {expand: true}));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{foo,bar,baz}/*.js'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a/{foo,bar,baz}/*.js'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('{1..3}'));     // ['1', '2', '3']
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{01..03}b')); // ['a01b', 'a02b', 'a03b']
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{1..3}b'));   // ['a1b', 'a2b', 'a3b']
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('{a..c}'));     // ['a', 'b', 'c']
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('foo/{a..c}')); // ['foo/a', 'foo/b', 'foo/c']
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a{01..03}b'));   //=> [ 'a(0[1-3])b' ]
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a{001..300}b')); //=> [ 'a(0{2}[1-9]|0[1-9][0-9]|[12][0-9]{2}|300)b' ]
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('{2..10..2}'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('{2..10..2}'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{b,c,/{x,y}}/e'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a/{x,{1..5},y}/c'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a{b,c,/{x,y}}/e'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{x,{1..5},y}/c'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a\\{d,c,b}e'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{d,c,b\\}e'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{b\\,c}d'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{d\\,c,b}e'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{b}c'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{b,c}/d', { maxLength: 3 }));  //=> throws an error
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{b,c}/d', {expand: true}));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{b,c}/d'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('{1..1000}'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('{1..100}'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(range);
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/b{1,3}/{x,y,z}'));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true}));
./examples/express/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true, expand: true}));
./examples/express/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces('{a,b,c}'));
./examples/express/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces('{a,b,c}', {expand: true}));
./examples/express/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces.expand('a/{b,c}/d'));
./examples/express/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces.expand('a/{b,c}/d'));
./examples/express/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
./examples/express/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces.makeRe('id-{200..300}'));
./examples/express/node_modules/micromatch/node_modules/braces/index.js: * console.log(ast);
./examples/express/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces.compile(ast));
./examples/express/node_modules/micromatch/node_modules/braces/lib/parsers-parens.js:      console.log(brace)
./examples/express/node_modules/micromatch/node_modules/kind-of/package.json:  "readme": "# kind-of [![NPM version](https://img.shields.io/npm/v/kind-of.svg?style=flat)](https://www.npmjs.com/package/kind-of) [![NPM monthly downloads](https://img.shields.io/npm/dm/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![NPM total downloads](https://img.shields.io/npm/dt/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/kind-of.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/kind-of)\n\n> Get the native type of a value.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save kind-of\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install kind-of --save\n```\n\n## Why use this?\n\n1. [it's fast](#benchmarks) | [optimizations](#optimizations)\n2. [better type checking](#better-type-checking)\n\n## Usage\n\n> es5, es6, and browser ready\n\n```js\nvar kindOf = require('kind-of');\n\nkindOf(undefined);\n//=> 'undefined'\n\nkindOf(null);\n//=> 'null'\n\nkindOf(true);\n//=> 'boolean'\n\nkindOf(false);\n//=> 'boolean'\n\nkindOf(new Buffer(''));\n//=> 'buffer'\n\nkindOf(42);\n//=> 'number'\n\nkindOf('str');\n//=> 'string'\n\nkindOf(arguments);\n//=> 'arguments'\n\nkindOf({});\n//=> 'object'\n\nkindOf(Object.create(null));\n//=> 'object'\n\nkindOf(new Test());\n//=> 'object'\n\nkindOf(new Date());\n//=> 'date'\n\nkindOf([1, 2, 3]);\n//=> 'array'\n\nkindOf(/foo/);\n//=> 'regexp'\n\nkindOf(new RegExp('foo'));\n//=> 'regexp'\n\nkindOf(new Error('error'));\n//=> 'error'\n\nkindOf(function () {});\n//=> 'function'\n\nkindOf(function * () {});\n//=> 'generatorfunction'\n\nkindOf(Symbol('str'));\n//=> 'symbol'\n\nkindOf(new Map());\n//=> 'map'\n\nkindOf(new WeakMap());\n//=> 'weakmap'\n\nkindOf(new Set());\n//=> 'set'\n\nkindOf(new WeakSet());\n//=> 'weakset'\n\nkindOf(new Int8Array());\n//=> 'int8array'\n\nkindOf(new Uint8Array());\n//=> 'uint8array'\n\nkindOf(new Uint8ClampedArray());\n//=> 'uint8clampedarray'\n\nkindOf(new Int16Array());\n//=> 'int16array'\n\nkindOf(new Uint16Array());\n//=> 'uint16array'\n\nkindOf(new Int32Array());\n//=> 'int32array'\n\nkindOf(new Uint32Array());\n//=> 'uint32array'\n\nkindOf(new Float32Array());\n//=> 'float32array'\n\nkindOf(new Float64Array());\n//=> 'float64array'\n```\n\n## Benchmarks\n\nBenchmarked against [typeof](http://github.com/CodingFu/typeof) and [type-of](https://github.com/ForbesLindesay/type-of).\n\n```bash\n# arguments (32 bytes)\n  kind-of x 17,024,098 ops/sec ±1.90% (86 runs sampled)\n  lib-type-of x 11,926,235 ops/sec ±1.34% (83 runs sampled)\n  lib-typeof x 9,245,257 ops/sec ±1.22% (87 runs sampled)\n\n  fastest is kind-of (by 161% avg)\n\n# array (22 bytes)\n  kind-of x 17,196,492 ops/sec ±1.07% (88 runs sampled)\n  lib-type-of x 8,838,283 ops/sec ±1.02% (87 runs sampled)\n  lib-typeof x 8,677,848 ops/sec ±0.87% (87 runs sampled)\n\n  fastest is kind-of (by 196% avg)\n\n# boolean (24 bytes)\n  kind-of x 16,841,600 ops/sec ±1.10% (86 runs sampled)\n  lib-type-of x 8,096,787 ops/sec ±0.95% (87 runs sampled)\n  lib-typeof x 8,423,345 ops/sec ±1.15% (86 runs sampled)\n\n  fastest is kind-of (by 204% avg)\n\n# buffer (38 bytes)\n  kind-of x 14,848,060 ops/sec ±1.05% (86 runs sampled)\n  lib-type-of x 3,671,577 ops/sec ±1.49% (87 runs sampled)\n  lib-typeof x 8,360,236 ops/sec ±1.24% (86 runs sampled)\n\n  fastest is kind-of (by 247% avg)\n\n# date (30 bytes)\n  kind-of x 16,067,761 ops/sec ±1.58% (86 runs sampled)\n  lib-type-of x 8,954,436 ops/sec ±1.40% (87 runs sampled)\n  lib-typeof x 8,488,307 ops/sec ±1.51% (84 runs sampled)\n\n  fastest is kind-of (by 184% avg)\n\n# error (36 bytes)\n  kind-of x 9,634,090 ops/sec ±1.12% (89 runs sampled)\n  lib-type-of x 7,735,624 ops/sec ±1.32% (86 runs sampled)\n  lib-typeof x 7,442,160 ops/sec ±1.11% (90 runs sampled)\n\n  fastest is kind-of (by 127% avg)\n\n# function (34 bytes)\n  kind-of x 10,031,494 ops/sec ±1.27% (86 runs sampled)\n  lib-type-of x 9,502,757 ops/sec ±1.17% (89 runs sampled)\n  lib-typeof x 8,278,985 ops/sec ±1.08% (88 runs sampled)\n\n  fastest is kind-of (by 113% avg)\n\n# null (24 bytes)\n  kind-of x 18,159,808 ops/sec ±1.92% (86 runs sampled)\n  lib-type-of x 12,927,635 ops/sec ±1.01% (88 runs sampled)\n  lib-typeof x 7,958,234 ops/sec ±1.21% (89 runs sampled)\n\n  fastest is kind-of (by 174% avg)\n\n# number (22 bytes)\n  kind-of x 17,846,779 ops/sec ±0.91% (85 runs sampled)\n  lib-type-of x 3,316,636 ops/sec ±1.19% (86 runs sampled)\n  lib-typeof x 2,329,477 ops/sec ±2.21% (85 runs sampled)\n\n  fastest is kind-of (by 632% avg)\n\n# object-plain (47 bytes)\n  kind-of x 7,085,155 ops/sec ±1.05% (88 runs sampled)\n  lib-type-of x 8,870,930 ops/sec ±1.06% (83 runs sampled)\n  lib-typeof x 8,716,024 ops/sec ±1.05% (87 runs sampled)\n\n  fastest is lib-type-of (by 112% avg)\n\n# regex (25 bytes)\n  kind-of x 14,196,052 ops/sec ±1.65% (84 runs sampled)\n  lib-type-of x 9,554,164 ops/sec ±1.25% (88 runs sampled)\n  lib-typeof x 8,359,691 ops/sec ±1.07% (87 runs sampled)\n\n  fastest is kind-of (by 158% avg)\n\n# string (33 bytes)\n  kind-of x 16,131,428 ops/sec ±1.41% (85 runs sampled)\n  lib-type-of x 7,273,172 ops/sec ±1.05% (87 runs sampled)\n  lib-typeof x 7,382,635 ops/sec ±1.17% (85 runs sampled)\n\n  fastest is kind-of (by 220% avg)\n\n# symbol (34 bytes)\n  kind-of x 17,011,537 ops/sec ±1.24% (86 runs sampled)\n  lib-type-of x 3,492,454 ops/sec ±1.23% (89 runs sampled)\n  lib-typeof x 7,471,235 ops/sec ±2.48% (87 runs sampled)\n\n  fastest is kind-of (by 310% avg)\n\n# template-strings (36 bytes)\n  kind-of x 15,434,250 ops/sec ±1.46% (83 runs sampled)\n  lib-type-of x 7,157,907 ops/sec ±0.97% (87 runs sampled)\n  lib-typeof x 7,517,986 ops/sec ±0.92% (86 runs sampled)\n\n  fastest is kind-of (by 210% avg)\n\n# undefined (29 bytes)\n  kind-of x 19,167,115 ops/sec ±1.71% (87 runs sampled)\n  lib-type-of x 15,477,740 ops/sec ±1.63% (85 runs sampled)\n  lib-typeof x 19,075,495 ops/sec ±1.17% (83 runs sampled)\n\n  fastest is lib-typeof,kind-of\n\n```\n\n## Optimizations\n\nIn 7 out of 8 cases, this library is 2x-10x faster than other top libraries included in the benchmarks. There are a few things that lead to this performance advantage, none of them hard and fast rules, but all of them simple and repeatable in almost any code library:\n\n1. Optimize around the fastest and most common use cases first. Of course, this will change from project-to-project, but I took some time to understand how and why `typeof` checks were being used in my own libraries and other libraries I use a lot.\n2. Optimize around bottlenecks - In other words, the order in which conditionals are implemented is significant, because each check is only as fast as the failing checks that came before it. Here, the biggest bottleneck by far is checking for plain objects (an object that was created by the `Object` constructor). I opted to make this check happen by process of elimination rather than brute force up front (e.g. by using something like `val.constructor.name`), so that every other type check would not be penalized it.\n3. Don't do uneccessary processing - why do `.slice(8, -1).toLowerCase();` just to get the word `regex`? It's much faster to do `if (type === '[object RegExp]') return 'regex'`\n4. There is no reason to make the code in a microlib as terse as possible, just to win points for making it shorter. It's always better to favor performant code over terse code. You will always only be using a single `require()` statement to use the library anyway, regardless of how the code is written.\n\n## Better type checking\n\nkind-of seems to be more consistently \"correct\" than other type checking libs I've looked at. For example, here are some differing results from other popular libs:\n\n### [typeof](https://github.com/CodingFu/typeof) lib\n\nIncorrectly identifies instances of custom constructors (pretty common):\n\n```js\nvar typeOf = require('typeof');\nfunction Test() {}\nconsole.log(typeOf(new Test()));\n//=> 'test'\n```\n\nReturns `object` instead of `arguments`:\n\n```js\nfunction foo() {\n  console.log(typeOf(arguments)) //=> 'object'\n}\nfoo();\n```\n\n### [type-of](https://github.com/ForbesLindesay/type-of) lib\n\nIncorrectly returns `object` for generator functions, buffers, `Map`, `Set`, `WeakMap` and `WeakSet`:\n\n```js\nfunction * foo() {}\nconsole.log(typeOf(foo));\n//=> 'object'\nconsole.log(typeOf(new Buffer('')));\n//=> 'object'\nconsole.log(typeOf(new Map()));\n//=> 'object'\nconsole.log(typeOf(new Set()));\n//=> 'object'\nconsole.log(typeOf(new WeakMap()));\n//=> 'object'\nconsole.log(typeOf(new WeakSet()));\n//=> 'object'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-number](https://www.npmjs.com/package/is-number): Returns true if the value is a number. comprehensive tests. | [homepage](https://github.com/jonschlinkert/is-number \"Returns true if the value is a number. comprehensive tests.\")\n* [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive.  | [homepage](https://github.com/jonschlinkert/is-primitive \"Returns `true` if the value is a primitive. \")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 98 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 3 | [aretecode](https://github.com/aretecode) |\n| 2 | [miguelmota](https://github.com/miguelmota) |\n| 1 | [dtothefp](https://github.com/dtothefp) |\n| 1 | [ianstormtaylor](https://github.com/ianstormtaylor) |\n| 1 | [ksheedlo](https://github.com/ksheedlo) |\n| 1 | [pdehaan](https://github.com/pdehaan) |\n| 1 | [laggingreflex](https://github.com/laggingreflex) |\n| 1 | [charlike-old](https://github.com/charlike-old) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on December 01, 2017._",
./examples/express/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new Test()));
./examples/express/node_modules/micromatch/node_modules/kind-of/README.md:  console.log(typeOf(arguments)) //=> 'object'
./examples/express/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(foo));
./examples/express/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new Buffer('')));
./examples/express/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new Map()));
./examples/express/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new Set()));
./examples/express/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new WeakMap()));
./examples/express/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new WeakSet()));
./examples/express/node_modules/micromatch/node_modules/arr-diff/package.json:  "readme": "# arr-diff [![NPM version](https://img.shields.io/npm/v/arr-diff.svg?style=flat)](https://www.npmjs.com/package/arr-diff) [![NPM monthly downloads](https://img.shields.io/npm/dm/arr-diff.svg?style=flat)](https://npmjs.org/package/arr-diff) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/arr-diff.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/arr-diff)\n\n> Returns an array with only the unique values from the first array, by excluding all values from additional arrays using strict equality for comparisons.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save arr-diff\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add arr-diff\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install arr-diff --save\n```\n\n## Usage\n\nReturns the difference between the first array and additional arrays.\n\n```js\nvar diff = require('arr-diff');\n\nvar a = ['a', 'b', 'c', 'd'];\nvar b = ['b', 'c'];\n\nconsole.log(diff(a, b))\n//=> ['a', 'd']\n```\n\n## Benchmarks\n\nThis library versus [array-differ](https://github.com/sindresorhus/array-differ), on April 14, 2017:\n\n```\nBenchmarking: (4 of 4)\n · long-dupes\n · long\n · med\n · short\n\n# benchmark/fixtures/long-dupes.js (100804 bytes)\n  arr-diff-3.0.0 x 822 ops/sec ±0.67% (86 runs sampled)\n  arr-diff-4.0.0 x 2,141 ops/sec ±0.42% (89 runs sampled)\n  array-differ x 708 ops/sec ±0.70% (89 runs sampled)\n\n  fastest is arr-diff-4.0.0\n\n# benchmark/fixtures/long.js (94529 bytes)\n  arr-diff-3.0.0 x 882 ops/sec ±0.60% (87 runs sampled)\n  arr-diff-4.0.0 x 2,329 ops/sec ±0.97% (83 runs sampled)\n  array-differ x 769 ops/sec ±0.61% (90 runs sampled)\n\n  fastest is arr-diff-4.0.0\n\n# benchmark/fixtures/med.js (708 bytes)\n  arr-diff-3.0.0 x 856,150 ops/sec ±0.42% (89 runs sampled)\n  arr-diff-4.0.0 x 4,665,249 ops/sec ±1.06% (89 runs sampled)\n  array-differ x 653,888 ops/sec ±1.02% (86 runs sampled)\n\n  fastest is arr-diff-4.0.0\n\n# benchmark/fixtures/short.js (60 bytes)\n  arr-diff-3.0.0 x 3,078,467 ops/sec ±0.77% (93 runs sampled)\n  arr-diff-4.0.0 x 9,213,296 ops/sec ±0.65% (89 runs sampled)\n  array-differ x 1,337,051 ops/sec ±0.91% (92 runs sampled)\n\n  fastest is arr-diff-4.0.0\n```\n\n## About\n\n### Related projects\n\n* [arr-flatten](https://www.npmjs.com/package/arr-flatten): Recursively flatten an array or arrays. This is the fastest implementation of array flatten. | [homepage](https://github.com/jonschlinkert/arr-flatten \"Recursively flatten an array or arrays. This is the fastest implementation of array flatten.\")\n* [array-filter](https://www.npmjs.com/package/array-filter): Array#filter for older browsers. | [homepage](https://github.com/juliangruber/array-filter \"Array#filter for older browsers.\")\n* [array-intersection](https://www.npmjs.com/package/array-intersection): Return an array with the unique values present in _all_ given arrays using strict equality… [more](https://github.com/jonschlinkert/array-intersection) | [homepage](https://github.com/jonschlinkert/array-intersection \"Return an array with the unique values present in _all_ given arrays using strict equality for comparisons.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 33 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [paulmillr](https://github.com/paulmillr) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 14, 2017._",
./examples/express/node_modules/micromatch/node_modules/arr-diff/README.md:console.log(diff(a, b))
./examples/express/node_modules/micromatch/node_modules/snapdragon/package.json:  "readme": "# snapdragon [![NPM version](https://img.shields.io/npm/v/snapdragon.svg?style=flat)](https://www.npmjs.com/package/snapdragon) [![NPM downloads](https://img.shields.io/npm/dm/snapdragon.svg?style=flat)](https://npmjs.org/package/snapdragon) [![Build Status](https://img.shields.io/travis/jonschlinkert/snapdragon.svg?style=flat)](https://travis-ci.org/jonschlinkert/snapdragon)\n\n> Fast, pluggable and easy-to-use parser-renderer factory.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save snapdragon\n```\n\nCreated by [jonschlinkert](https://github.com/jonschlinkert) and [doowb](https://github.com/doowb).\n\n**Features**\n\n* Bootstrap your own parser, get sourcemap support for free\n* All parsing and compiling is handled by simple, reusable middleware functions\n* Inspired by the parsers in [pug](http://jade-lang.com) and [css](https://github.com/reworkcss/css).\n\n## History\n\n### v0.5.0\n\n**Breaking changes**\n\nSubstantial breaking changes were made in v0.5.0! Most of these changes are part of a larger refactor that will be finished in 0.6.0, including the introduction of a `Lexer` class.\n\n* Renderer was renamed to `Compiler`\n* the `.render` method was renamed to `.compile`\n* Many other smaller changes. A more detailed overview will be provided in 0.6.0. If you don't have to time review code, I recommend you wait for the 0.6.0 release.\n\n## Usage examples\n\n```js\nvar Snapdragon = require('snapdragon');\nvar snapdragon = new Snapdragon();\n```\n\n**Parse**\n\n```js\nvar ast = snapdragon.parser('some string', options)\n  // parser middleware that can be called by other middleware\n  .set('foo', function () {})\n  // parser middleware, runs immediately in the order defined\n  .use(bar())\n  .use(baz())\n```\n\n**Render**\n\n```js\n// pass the `ast` from the parse method\nvar res = snapdragon.compiler(ast)\n  // compiler middleware, called when the name of the middleware\n  // matches the `node.type` (defined in a parser middleware)\n  .set('bar', function () {})\n  .set('baz', function () {})\n  .compile()\n```\n\nSee the [examples](./examples/).\n\n## Getting started\n\n**Parsers**\n\nParsers are middleware functions used for parsing a string into an ast node.\n\n```js\nvar ast = snapdragon.parser(str, options)\n  .use(function() {\n    var pos = this.position();\n    var m = this.match(/^\\./);\n    if (!m) return;\n    return pos({\n      // `type` specifies the compiler to use\n      type: 'dot',\n      val: m[0]\n    });\n  })\n```\n\n**AST node**\n\nWhen the parser finds a match, `pos()` is called, pushing a token for that node onto the ast that looks something like:\n\n```js\n{ type: 'dot',\n  val: '.',\n  position:\n   { start: { lineno: 1, column: 1 },\n     end: { lineno: 1, column: 2 } }}\n```\n\n**Renderers**\n\nRenderers are _named_ middleware functions that visit over an array of ast nodes to compile a string.\n\n```js\nvar res = snapdragon.compiler(ast)\n  .set('dot', function (node) {\n    console.log(node.val)\n    //=> '.'\n    return this.emit(node.val);\n  })\n```\n\n**Source maps**\n\nIf you want source map support, make sure to emit the position as well.\n\n```js\nvar res = snapdragon.compiler(ast)\n  .set('dot', function (node) {\n    return this.emit(node.val, node.position);\n  })\n```\n\n## Docs\n\n### Parser middleware\n\nA parser middleware is a function that returns an abject called a `token`. This token is pushed onto the AST as a node.\n\n**Example token**\n\n```js\n{ type: 'dot',\n  val: '.',\n  position:\n   { start: { lineno: 1, column: 1 },\n     end: { lineno: 1, column: 2 } }}\n```\n\n**Example parser middleware**\n\nMatch a single `.` in a string:\n\n1. Get the starting position by calling `this.position()`\n2. pass a regex for matching a single dot to the `.match` method\n3. if **no match** is found, return `undefined`\n4. if a **match** is found, `pos()` is called, which returns a token with:\n  - `type`: the name of the [compiler] to use\n  - `val`: The actual value captured by the regex. In this case, a `.`. Note that you can capture and return whatever will be needed by the corresponding [compiler].\n  - The ending position: automatically calculated by adding the length of the first capture group to the starting position.\n\n## Renderer middleware\n\nRenderers are run when the name of the compiler middleware matches the `type` defined on an ast `node` (which is defined in a parser).\n\n**Example**\n\nExercise: Parse a dot, then compile it as an escaped dot.\n\n```js\nvar ast = snapdragon.parser('.')\n  .use(function () {\n    var pos = this.position();\n    var m = this.match(/^\\./);\n    if (!m) return;\n    return pos({\n      // define the `type` of compiler to use\n      type: 'dot',\n      val: m[0]\n    })\n  })\n\nvar result = snapdragon.compiler(ast)\n  .set('dot', function (node) {\n    return this.emit('\\\\' + node.val);\n  })\n  .compile()\n\nconsole.log(result.output);\n//=> '\\.'\n```\n\n## API\n\n### [Parser](lib/parser.js#L19)\n\nCreate a new `Parser` with the given `input` and `options`.\n\n**Params**\n\n* `input` **{String}**\n* `options` **{Object}**\n\n### [.define](lib/parser.js#L103)\n\nDefine a non-enumberable property on the `Parser` instance.\n\n**Example**\n\n```js\nparser.define('foo', 'bar');\n```\n\n**Params**\n\n* `key` **{String}**: propery name\n* `val` **{any}**: property value\n* `returns` **{Object}**: Returns the Parser instance for chaining.\n\nSet parser `name` with the given `fn`\n\n**Params**\n\n* `name` **{String}**\n* `fn` **{Function}**\n\nGet parser `name`\n\n**Params**\n\n* `name` **{String}**\n\nPush a `token` onto the `type` stack.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Object}** `token`\n\nPop a token off of the `type` stack\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Object}**: Returns a token\n\nReturn true if inside a `stack` node. Types are `braces`, `parens` or `brackets`.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nparser.isType(node, 'brace');\n```\n\n**Params**\n\n* `node` **{Object}**\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n### [.define](lib/compiler.js#L71)\n\nDefine a non-enumberable property on the `Compiler` instance.\n\n**Example**\n\n```js\ncompiler.define('foo', 'bar');\n```\n\n**Params**\n\n* `key` **{String}**: propery name\n* `val` **{any}**: property value\n* `returns` **{Object}**: Returns the Compiler instance for chaining.\n\n## About\n\n### Related projects\n\n* [braces](https://www.npmjs.com/package/braces): Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces… [more](https://github.com/jonschlinkert/braces) | [homepage](https://github.com/jonschlinkert/braces \"Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces specification.\")\n* [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/jonschlinkert/expand-brackets \"Expand POSIX bracket expressions (character classes) in glob patterns.\")\n* [extglob](https://www.npmjs.com/package/extglob): Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to… [more](https://github.com/jonschlinkert/extglob) | [homepage](https://github.com/jonschlinkert/extglob \"Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to glob patterns.\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor**<br/> | \n| --- | --- |\n| 106 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [doowb](https://github.com/doowb) |\n\n### Building docs\n\n_(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/snapdragon/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.1.31, on October 10, 2016._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:console.log(smc.sources);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:console.log(smc.originalPositionFor({
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:console.log(smc.generatedPositionFor({
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:console.log(compile(ast).toStringWithSourceMap({
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:console.log(map.toString());
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:consumer.eachMapping(function (m) { console.log(m); })
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:node.walk(function (code, loc) { console.log("WALK:", code, loc); })
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:node.walkSourceContents(function (source, contents) { console.log("WALK:", source, ":", contents); })
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/package.json:  "readme": "<p align=\"center\">\n  <a href=\"https://github.com/node-base/base\">\n    <img height=\"250\" width=\"250\" src=\"https://raw.githubusercontent.com/node-base/base/master/docs/logo.png\">\n  </a>\n</p>\n\n# base [![NPM version](https://img.shields.io/npm/v/base.svg?style=flat)](https://www.npmjs.com/package/base) [![NPM monthly downloads](https://img.shields.io/npm/dm/base.svg?style=flat)](https://npmjs.org/package/base)  [![NPM total downloads](https://img.shields.io/npm/dt/base.svg?style=flat)](https://npmjs.org/package/base) [![Linux Build Status](https://img.shields.io/travis/node-base/base.svg?style=flat&label=Travis)](https://travis-ci.org/node-base/base)\n\n> base is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting with a handful of common methods, like `set`, `get`, `del` and `use`.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save base\n```\n\n## What is Base?\n\nBase is a framework for rapidly creating high quality node.js applications, using plugins like building blocks.\n\n### Guiding principles\n\nThe core team follows these principles to help guide API decisions:\n\n* **Compact API surface**: The smaller the API surface, the easier the library will be to learn and use.\n* **Easy to extend**: Implementors can use any npm package, and write plugins in pure JavaScript. If you're building complex apps, Base simplifies inheritance.\n* **Easy to test**: No special setup should be required to unit test `Base` or base plugins\n\n### Minimal API surface\n\n[The API](#api) was designed to provide only the minimum necessary functionality for creating a useful application, with or without [plugins](#plugins).\n\n**Base core**\n\nBase itself ships with only a handful of [useful methods](#api), such as:\n\n* `.set`: for setting values on the instance\n* `.get`: for getting values from the instance\n* `.has`: to check if a property exists on the instance\n* `.define`: for setting non-enumerable values on the instance\n* `.use`: for adding plugins\n\n**Be generic**\n\nWhen deciding on method to add or remove, we try to answer these questions:\n\n1. Will all or most Base applications need this method?\n2. Will this method encourage practices or enforce conventions that are beneficial to implementors?\n3. Can or should this be done in a plugin instead?\n\n### Composability\n\n**Plugin system**\n\nIt couldn't be easier to extend Base with any features or custom functionality you can think of.\n\nBase plugins are just functions that take an instance of `Base`:\n\n```js\nvar base = new Base();\n\nfunction plugin(base) {\n  // do plugin stuff, in pure JavaScript\n}\n// use the plugin\nbase.use(plugin);\n```\n\n**Inheritance**\n\nEasily inherit Base using `.extend`:\n\n```js\nvar Base = require('base');\n\nfunction MyApp() {\n  Base.call(this);\n}\nBase.extend(MyApp);\n\nvar app = new MyApp();\napp.set('a', 'b');\napp.get('a');\n//=> 'b';\n```\n\n**Inherit or instantiate with a namespace**\n\nBy default, the `.get`, `.set` and `.has` methods set and get values from the root of the `base` instance. You can customize this using the `.namespace` method exposed on the exported function. For example:\n\n```js\nvar Base = require('base');\n// get and set values on the `base.cache` object\nvar base = Base.namespace('cache');\n\nvar app = base();\napp.set('foo', 'bar');\nconsole.log(app.cache.foo);\n//=> 'bar'\n```\n\n## API\n\n**Usage**\n\n```js\nvar Base = require('base');\nvar app = new Base();\napp.set('foo', 'bar');\nconsole.log(app.foo);\n//=> 'bar'\n```\n\n### [Base](index.js#L44)\n\nCreate an instance of `Base` with the given `config` and `options`.\n\n**Params**\n\n* `config` **{Object}**: If supplied, this object is passed to [cache-base](https://github.com/jonschlinkert/cache-base) to merge onto the the instance upon instantiation.\n* `options` **{Object}**: If supplied, this object is used to initialize the `base.options` object.\n\n**Example**\n\n```js\n// initialize with `config` and `options`\nvar app = new Base({isApp: true}, {abc: true});\napp.set('foo', 'bar');\n\n// values defined with the given `config` object will be on the root of the instance\nconsole.log(app.baz); //=> undefined\nconsole.log(app.foo); //=> 'bar'\n// or use `.get`\nconsole.log(app.get('isApp')); //=> true\nconsole.log(app.get('foo')); //=> 'bar'\n\n// values defined with the given `options` object will be on `app.options\nconsole.log(app.options.abc); //=> true\n```\n\n### [.is](index.js#L107)\n\nSet the given `name` on `app._name` and `app.is*` properties. Used for doing lookups in plugins.\n\n**Params**\n\n* `name` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\napp.is('foo');\nconsole.log(app._name);\n//=> 'foo'\nconsole.log(app.isFoo);\n//=> true\napp.is('bar');\nconsole.log(app.isFoo);\n//=> true\nconsole.log(app.isBar);\n//=> true\nconsole.log(app._name);\n//=> 'bar'\n```\n\n### [.isRegistered](index.js#L145)\n\nReturns true if a plugin has already been registered on an instance.\n\nPlugin implementors are encouraged to use this first thing in a plugin\nto prevent the plugin from being called more than once on the same\ninstance.\n\n**Params**\n\n* `name` **{String}**: The plugin name.\n* `register` **{Boolean}**: If the plugin if not already registered, to record it as being registered pass `true` as the second argument.\n* `returns` **{Boolean}**: Returns true if a plugin is already registered.\n\n**Events**\n\n* `emits`: `plugin` Emits the name of the plugin being registered. Useful for unit tests, to ensure plugins are only registered once.\n\n**Example**\n\n```js\nvar base = new Base();\nbase.use(function(app) {\n  if (app.isRegistered('myPlugin')) return;\n  // do stuff to `app`\n});\n\n// to also record the plugin as being registered\nbase.use(function(app) {\n  if (app.isRegistered('myPlugin', true)) return;\n  // do stuff to `app`\n});\n```\n\n### [.use](index.js#L175)\n\nDefine a plugin function to be called immediately upon init. Plugins are chainable and expose the following arguments to the plugin function:\n\n* `app`: the current instance of `Base`\n* `base`: the [first ancestor instance](#base) of `Base`\n\n**Params**\n\n* `fn` **{Function}**: plugin function to call\n* `returns` **{Object}**: Returns the item instance for chaining.\n\n**Example**\n\n```js\nvar app = new Base()\n  .use(foo)\n  .use(bar)\n  .use(baz)\n```\n\n### [.define](index.js#L197)\n\nThe `.define` method is used for adding non-enumerable property on the instance. Dot-notation is **not supported** with `define`.\n\n**Params**\n\n* `key` **{String}**: The name of the property to define.\n* `value` **{any}**\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Example**\n\n```js\n// arbitrary `render` function using lodash `template`\napp.define('render', function(str, locals) {\n  return _.template(str)(locals);\n});\n```\n\n### [.mixin](index.js#L222)\n\nMix property `key` onto the Base prototype. If base is inherited using `Base.extend` this method will be overridden by a new `mixin` method that will only add properties to the prototype of the inheriting application.\n\n**Params**\n\n* `key` **{String}**\n* `val` **{Object|Array}**\n* `returns` **{Object}**: Returns the `base` instance for chaining.\n\n**Example**\n\n```js\napp.mixin('foo', function() {\n  // do stuff\n});\n```\n\n### [.base](index.js#L268)\n\nGetter/setter used when creating nested instances of `Base`, for storing a reference to the first ancestor instance. This works by setting an instance of `Base` on the `parent` property of a \"child\" instance. The `base` property defaults to the current instance if no `parent` property is defined.\n\n**Example**\n\n```js\n// create an instance of `Base`, this is our first (\"base\") instance\nvar first = new Base();\nfirst.foo = 'bar'; // arbitrary property, to make it easier to see what's happening later\n\n// create another instance\nvar second = new Base();\n// create a reference to the first instance (`first`)\nsecond.parent = first;\n\n// create another instance\nvar third = new Base();\n// create a reference to the previous instance (`second`)\n// repeat this pattern every time a \"child\" instance is created\nthird.parent = second;\n\n// we can always access the first instance using the `base` property\nconsole.log(first.base.foo);\n//=> 'bar'\nconsole.log(second.base.foo);\n//=> 'bar'\nconsole.log(third.base.foo);\n//=> 'bar'\n// and now you know how to get to third base ;)\n```\n\n### [#use](index.js#L293)\n\nStatic method for adding global plugin functions that will be added to an instance when created.\n\n**Params**\n\n* `fn` **{Function}**: Plugin function to use on each instance.\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\n\n**Example**\n\n```js\nBase.use(function(app) {\n  app.foo = 'bar';\n});\nvar app = new Base();\nconsole.log(app.foo);\n//=> 'bar'\n```\n\n### [#extend](index.js#L337)\n\nStatic method for inheriting the prototype and static methods of the `Base` class. This method greatly simplifies the process of creating inheritance-based applications. See [static-extend](https://github.com/jonschlinkert/static-extend) for more details.\n\n**Params**\n\n* `Ctor` **{Function}**: constructor to extend\n* `methods` **{Object}**: Optional prototype properties to mix in.\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\n\n**Example**\n\n```js\nvar extend = cu.extend(Parent);\nParent.extend(Child);\n\n// optional methods\nParent.extend(Child, {\n  foo: function() {},\n  bar: function() {}\n});\n```\n\n### [#mixin](index.js#L379)\n\nUsed for adding methods to the `Base` prototype, and/or to the prototype of child instances. When a mixin function returns a function, the returned function is pushed onto the `.mixins` array, making it available to be used on inheriting classes whenever `Base.mixins()` is called (e.g. `Base.mixins(Child)`).\n\n**Params**\n\n* `fn` **{Function}**: Function to call\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\n\n**Example**\n\n```js\nBase.mixin(function(proto) {\n  proto.foo = function(msg) {\n    return 'foo ' + msg;\n  };\n});\n```\n\n### [#mixins](index.js#L401)\n\nStatic method for running global mixin functions against a child constructor. Mixins must be registered before calling this method.\n\n**Params**\n\n* `Child` **{Function}**: Constructor function of a child class\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\n\n**Example**\n\n```js\nBase.extend(Child);\nBase.mixins(Child);\n```\n\n### [#inherit](index.js#L420)\n\nSimilar to `util.inherit`, but copies all static properties, prototype properties, and getters/setters from `Provider` to `Receiver`. See [class-utils](https://github.com/jonschlinkert/class-utils#inherit) for more details.\n\n**Params**\n\n* `Receiver` **{Function}**: Receiving (child) constructor\n* `Provider` **{Function}**: Providing (parent) constructor\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\n\n**Example**\n\n```js\nBase.inherit(Foo, Bar);\n```\n\n## In the wild\n\nThe following node.js applications were built with `Base`:\n\n* [assemble](https://github.com/assemble/assemble)\n* [verb](https://github.com/verbose/verb)\n* [generate](https://github.com/generate/generate)\n* [scaffold](https://github.com/jonschlinkert/scaffold)\n* [boilerplate](https://github.com/jonschlinkert/boilerplate)\n\n## Test coverage\n\n```\nStatements   : 98.91% ( 91/92 )\nBranches     : 92.86% ( 26/28 )\nFunctions    : 100% ( 17/17 )\nLines        : 98.9% ( 90/91 )\n```\n\n## History\n\n### v0.11.2\n\n* fixes https://github.com/micromatch/micromatch/issues/99\n\n### v0.11.0\n\n**Breaking changes**\n\n* Static `.use` and `.run` methods are now non-enumerable\n\n### v0.9.0\n\n**Breaking changes**\n\n* `.is` no longer takes a function, a string must be passed\n* all remaining `.debug` code has been removed\n* `app._namespace` was removed (related to `debug`)\n* `.plugin`, `.use`, and `.define` no longer emit events\n* `.assertPlugin` was removed\n* `.lazy` was removed\n\n## About\n\n### Related projects\n\n* [base-cwd](https://www.npmjs.com/package/base-cwd): Base plugin that adds a getter/setter for the current working directory. | [homepage](https://github.com/node-base/base-cwd \"Base plugin that adds a getter/setter for the current working directory.\")\n* [base-data](https://www.npmjs.com/package/base-data): adds a `data` method to base-methods. | [homepage](https://github.com/node-base/base-data \"adds a `data` method to base-methods.\")\n* [base-fs](https://www.npmjs.com/package/base-fs): base-methods plugin that adds vinyl-fs methods to your 'base' application for working with the file… [more](https://github.com/node-base/base-fs) | [homepage](https://github.com/node-base/base-fs \"base-methods plugin that adds vinyl-fs methods to your 'base' application for working with the file system, like src, dest, copy and symlink.\")\n* [base-generators](https://www.npmjs.com/package/base-generators): Adds project-generator support to your `base` application. | [homepage](https://github.com/node-base/base-generators \"Adds project-generator support to your `base` application.\")\n* [base-option](https://www.npmjs.com/package/base-option): Adds a few options methods to base, like `option`, `enable` and `disable`. See the readme… [more](https://github.com/node-base/base-option) | [homepage](https://github.com/node-base/base-option \"Adds a few options methods to base, like `option`, `enable` and `disable`. See the readme for the full API.\")\n* [base-pipeline](https://www.npmjs.com/package/base-pipeline): base-methods plugin that adds pipeline and plugin methods for dynamically composing streaming plugin pipelines. | [homepage](https://github.com/node-base/base-pipeline \"base-methods plugin that adds pipeline and plugin methods for dynamically composing streaming plugin pipelines.\")\n* [base-pkg](https://www.npmjs.com/package/base-pkg): Plugin for adding a `pkg` method that exposes pkg-store to your base application. | [homepage](https://github.com/node-base/base-pkg \"Plugin for adding a `pkg` method that exposes pkg-store to your base application.\")\n* [base-plugins](https://www.npmjs.com/package/base-plugins): Adds 'smart plugin' support to your base application. | [homepage](https://github.com/node-base/base-plugins \"Adds 'smart plugin' support to your base application.\")\n* [base-questions](https://www.npmjs.com/package/base-questions): Plugin for base-methods that adds methods for prompting the user and storing the answers on… [more](https://github.com/node-base/base-questions) | [homepage](https://github.com/node-base/base-questions \"Plugin for base-methods that adds methods for prompting the user and storing the answers on a project-by-project basis.\")\n* [base-store](https://www.npmjs.com/package/base-store): Plugin for getting and persisting config values with your base-methods application. Adds a 'store' object… [more](https://github.com/node-base/base-store) | [homepage](https://github.com/node-base/base-store \"Plugin for getting and persisting config values with your base-methods application. Adds a 'store' object that exposes all of the methods from the data-store library. Also now supports sub-stores!\")\n* [base-task](https://www.npmjs.com/package/base-task): base plugin that provides a very thin wrapper around [https://github.com/doowb/composer](https://github.com/doowb/composer) for adding task methods to… [more](https://github.com/node-base/base-task) | [homepage](https://github.com/node-base/base-task \"base plugin that provides a very thin wrapper around <https://github.com/doowb/composer> for adding task methods to your application.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 141 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 30  | [doowb](https://github.com/doowb) |  \n| 3   | [charlike](https://github.com/charlike) |  \n| 1   | [criticalmash](https://github.com/criticalmash) |  \n| 1   | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |  \n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on September 07, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/static-extend/node_modules/object-copy/node_modules/copy-descriptor/index.js: * console.log(app.count);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/static-extend/node_modules/object-copy/node_modules/copy-descriptor/index.js: * console.log(app.len);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://badge.fury.io/js/define-property.svg)](http://badge.fury.io/js/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i define-property --save\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## Related projects\n\n* [delegate-object](https://www.npmjs.com/package/delegate-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/delegate-object) | [homepage](https://github.com/doowb/delegate-object)\n* [forward-object](https://www.npmjs.com/package/forward-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/forward-object) | [homepage](https://github.com/doowb/forward-object)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n* [mixin-object](https://www.npmjs.com/package/mixin-object): Mixin the own and inherited properties of other objects onto the first object. Pass an… [more](https://www.npmjs.com/package/mixin-object) | [homepage](https://github.com/jonschlinkert/mixin-object)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/define-property/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on August 31, 2015._\n",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/package.json:  "readme": "# kind-of [![NPM version](https://img.shields.io/npm/v/kind-of.svg?style=flat)](https://www.npmjs.com/package/kind-of) [![NPM monthly downloads](https://img.shields.io/npm/dm/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![NPM total downloads](https://img.shields.io/npm/dt/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/kind-of.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/kind-of)\n\n> Get the native type of a value.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save kind-of\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install kind-of --save\n```\n\n## Why use this?\n\n1. [it's fast](#benchmarks) | [optimizations](#optimizations)\n2. [better type checking](#better-type-checking)\n\n## Usage\n\n> es5, browser and es6 ready\n\n```js\nvar kindOf = require('kind-of');\n\nkindOf(undefined);\n//=> 'undefined'\n\nkindOf(null);\n//=> 'null'\n\nkindOf(true);\n//=> 'boolean'\n\nkindOf(false);\n//=> 'boolean'\n\nkindOf(new Boolean(true));\n//=> 'boolean'\n\nkindOf(new Buffer(''));\n//=> 'buffer'\n\nkindOf(42);\n//=> 'number'\n\nkindOf(new Number(42));\n//=> 'number'\n\nkindOf('str');\n//=> 'string'\n\nkindOf(new String('str'));\n//=> 'string'\n\nkindOf(arguments);\n//=> 'arguments'\n\nkindOf({});\n//=> 'object'\n\nkindOf(Object.create(null));\n//=> 'object'\n\nkindOf(new Test());\n//=> 'object'\n\nkindOf(new Date());\n//=> 'date'\n\nkindOf([]);\n//=> 'array'\n\nkindOf([1, 2, 3]);\n//=> 'array'\n\nkindOf(new Array());\n//=> 'array'\n\nkindOf(/foo/);\n//=> 'regexp'\n\nkindOf(new RegExp('foo'));\n//=> 'regexp'\n\nkindOf(function () {});\n//=> 'function'\n\nkindOf(function * () {});\n//=> 'function'\n\nkindOf(new Function());\n//=> 'function'\n\nkindOf(new Map());\n//=> 'map'\n\nkindOf(new WeakMap());\n//=> 'weakmap'\n\nkindOf(new Set());\n//=> 'set'\n\nkindOf(new WeakSet());\n//=> 'weakset'\n\nkindOf(Symbol('str'));\n//=> 'symbol'\n\nkindOf(new Int8Array());\n//=> 'int8array'\n\nkindOf(new Uint8Array());\n//=> 'uint8array'\n\nkindOf(new Uint8ClampedArray());\n//=> 'uint8clampedarray'\n\nkindOf(new Int16Array());\n//=> 'int16array'\n\nkindOf(new Uint16Array());\n//=> 'uint16array'\n\nkindOf(new Int32Array());\n//=> 'int32array'\n\nkindOf(new Uint32Array());\n//=> 'uint32array'\n\nkindOf(new Float32Array());\n//=> 'float32array'\n\nkindOf(new Float64Array());\n//=> 'float64array'\n```\n\n## Release history\n\n### v4.0.0\n\n**Added**\n\n* `promise` support\n\n### v5.0.0\n\n**Added**\n\n* `Set Iterator` and `Map Iterator` support\n\n**Fixed**\n\n* Now returns `generatorfunction` for generator functions\n\n## Benchmarks\n\nBenchmarked against [typeof](http://github.com/CodingFu/typeof) and [type-of](https://github.com/ForbesLindesay/type-of).\nNote that performaces is slower for es6 features `Map`, `WeakMap`, `Set` and `WeakSet`.\n\n```bash\n#1: array\n  current x 23,329,397 ops/sec ±0.82% (94 runs sampled)\n  lib-type-of x 4,170,273 ops/sec ±0.55% (94 runs sampled)\n  lib-typeof x 9,686,935 ops/sec ±0.59% (98 runs sampled)\n\n#2: boolean\n  current x 27,197,115 ops/sec ±0.85% (94 runs sampled)\n  lib-type-of x 3,145,791 ops/sec ±0.73% (97 runs sampled)\n  lib-typeof x 9,199,562 ops/sec ±0.44% (99 runs sampled)\n\n#3: date\n  current x 20,190,117 ops/sec ±0.86% (92 runs sampled)\n  lib-type-of x 5,166,970 ops/sec ±0.74% (94 runs sampled)\n  lib-typeof x 9,610,821 ops/sec ±0.50% (96 runs sampled)\n\n#4: function\n  current x 23,855,460 ops/sec ±0.60% (97 runs sampled)\n  lib-type-of x 5,667,740 ops/sec ±0.54% (100 runs sampled)\n  lib-typeof x 10,010,644 ops/sec ±0.44% (100 runs sampled)\n\n#5: null\n  current x 27,061,047 ops/sec ±0.97% (96 runs sampled)\n  lib-type-of x 13,965,573 ops/sec ±0.62% (97 runs sampled)\n  lib-typeof x 8,460,194 ops/sec ±0.61% (97 runs sampled)\n\n#6: number\n  current x 25,075,682 ops/sec ±0.53% (99 runs sampled)\n  lib-type-of x 2,266,405 ops/sec ±0.41% (98 runs sampled)\n  lib-typeof x 9,821,481 ops/sec ±0.45% (99 runs sampled)\n\n#7: object\n  current x 3,348,980 ops/sec ±0.49% (99 runs sampled)\n  lib-type-of x 3,245,138 ops/sec ±0.60% (94 runs sampled)\n  lib-typeof x 9,262,952 ops/sec ±0.59% (99 runs sampled)\n\n#8: regex\n  current x 21,284,827 ops/sec ±0.72% (96 runs sampled)\n  lib-type-of x 4,689,241 ops/sec ±0.43% (100 runs sampled)\n  lib-typeof x 8,957,593 ops/sec ±0.62% (98 runs sampled)\n\n#9: string\n  current x 25,379,234 ops/sec ±0.58% (96 runs sampled)\n  lib-type-of x 3,635,148 ops/sec ±0.76% (93 runs sampled)\n  lib-typeof x 9,494,134 ops/sec ±0.49% (98 runs sampled)\n\n#10: undef\n  current x 27,459,221 ops/sec ±1.01% (93 runs sampled)\n  lib-type-of x 14,360,433 ops/sec ±0.52% (99 runs sampled)\n  lib-typeof x 23,202,868 ops/sec ±0.59% (94 runs sampled)\n\n```\n\n## Optimizations\n\nIn 7 out of 8 cases, this library is 2x-10x faster than other top libraries included in the benchmarks. There are a few things that lead to this performance advantage, none of them hard and fast rules, but all of them simple and repeatable in almost any code library:\n\n1. Optimize around the fastest and most common use cases first. Of course, this will change from project-to-project, but I took some time to understand how and why `typeof` checks were being used in my own libraries and other libraries I use a lot.\n2. Optimize around bottlenecks - In other words, the order in which conditionals are implemented is significant, because each check is only as fast as the failing checks that came before it. Here, the biggest bottleneck by far is checking for plain objects (an object that was created by the `Object` constructor). I opted to make this check happen by process of elimination rather than brute force up front (e.g. by using something like `val.constructor.name`), so that every other type check would not be penalized it.\n3. Don't do uneccessary processing - why do `.slice(8, -1).toLowerCase();` just to get the word `regex`? It's much faster to do `if (type === '[object RegExp]') return 'regex'`\n4. There is no reason to make the code in a microlib as terse as possible, just to win points for making it shorter. It's always better to favor performant code over terse code. You will always only be using a single `require()` statement to use the library anyway, regardless of how the code is written.\n\n## Better type checking\n\nkind-of is more correct than other type checking libs I've looked at. For example, here are some differing results from other popular libs:\n\n### [typeof](https://github.com/CodingFu/typeof) lib\n\nIncorrectly tests instances of custom constructors (pretty common):\n\n```js\nvar typeOf = require('typeof');\nfunction Test() {}\nconsole.log(typeOf(new Test()));\n//=> 'test'\n```\n\nReturns `object` instead of `arguments`:\n\n```js\nfunction foo() {\n  console.log(typeOf(arguments)) //=> 'object'\n}\nfoo();\n```\n\n### [type-of](https://github.com/ForbesLindesay/type-of) lib\n\nIncorrectly returns `object` for generator functions, buffers, `Map`, `Set`, `WeakMap` and `WeakSet`:\n\n```js\nfunction * foo() {}\nconsole.log(typeOf(foo));\n//=> 'object'\nconsole.log(typeOf(new Buffer('')));\n//=> 'object'\nconsole.log(typeOf(new Map()));\n//=> 'object'\nconsole.log(typeOf(new Set()));\n//=> 'object'\nconsole.log(typeOf(new WeakMap()));\n//=> 'object'\nconsole.log(typeOf(new WeakSet()));\n//=> 'object'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n<details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n<details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n<details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-number](https://www.npmjs.com/package/is-number): Returns true if the value is a number. comprehensive tests. | [homepage](https://github.com/jonschlinkert/is-number \"Returns true if the value is a number. comprehensive tests.\")\n* [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive.  | [homepage](https://github.com/jonschlinkert/is-primitive \"Returns `true` if the value is a primitive. \")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 82 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 3 | [aretecode](https://github.com/aretecode) |\n| 2 | [miguelmota](https://github.com/miguelmota) |\n| 1 | [dtothefp](https://github.com/dtothefp) |\n| 1 | [ksheedlo](https://github.com/ksheedlo) |\n| 1 | [pdehaan](https://github.com/pdehaan) |\n| 1 | [laggingreflex](https://github.com/laggingreflex) |\n| 1 | [charlike](https://github.com/charlike) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on October 13, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Test()));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:  console.log(typeOf(arguments)) //=> 'object'
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(foo));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Buffer('')));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Map()));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Set()));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakMap()));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakSet()));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg)](https://www.npmjs.com/package/is-data-descriptor) [![Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm i is-data-descriptor --save\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## Related projects\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor)\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://www.npmjs.com/package/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor)\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-data-descriptor/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 [Jon Schlinkert](https://github.com/jonschlinkert)\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb) on December 28, 2015._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/mixin-deep/node_modules/for-in/package.json:  "readme": "# for-in [![NPM version](https://img.shields.io/npm/v/for-in.svg?style=flat)](https://www.npmjs.com/package/for-in) [![NPM monthly downloads](https://img.shields.io/npm/dm/for-in.svg?style=flat)](https://npmjs.org/package/for-in)  [![NPM total downloads](https://img.shields.io/npm/dt/for-in.svg?style=flat)](https://npmjs.org/package/for-in) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/for-in.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/for-in)\n\n> Iterate over the own and inherited enumerable properties of an object, and return an object with properties that evaluate to true from the callback. Exit early by returning `false`. JavaScript/Node.js\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save for-in\n```\n\n## Usage\n\n```js\nvar forIn = require('for-in');\n\nvar obj = {a: 'foo', b: 'bar', c: 'baz'};\nvar values = [];\nvar keys = [];\n\nforIn(obj, function (value, key, o) {\n  keys.push(key);\n  values.push(value);\n});\n\nconsole.log(keys);\n//=> ['a', 'b', 'c'];\n\nconsole.log(values);\n//=> ['foo', 'bar', 'baz'];\n```\n\n## About\n\n### Related projects\n\n* [arr-flatten](https://www.npmjs.com/package/arr-flatten): Recursively flatten an array or arrays. This is the fastest implementation of array flatten. | [homepage](https://github.com/jonschlinkert/arr-flatten \"Recursively flatten an array or arrays. This is the fastest implementation of array flatten.\")\n* [collection-map](https://www.npmjs.com/package/collection-map): Returns an array of mapped values from an array or object. | [homepage](https://github.com/jonschlinkert/collection-map \"Returns an array of mapped values from an array or object.\")\n* [for-own](https://www.npmjs.com/package/for-own): Iterate over the own enumerable properties of an object, and return an object with properties… [more](https://github.com/jonschlinkert/for-own) | [homepage](https://github.com/jonschlinkert/for-own \"Iterate over the own enumerable properties of an object, and return an object with properties that evaluate to true from the callback. Exit early by returning `false`. JavaScript/Node.js.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 16 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [paulirish](https://github.com/paulirish) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.4.2, on February 28, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/mixin-deep/node_modules/for-in/README.md:console.log(keys);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/mixin-deep/node_modules/for-in/README.md:console.log(values);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/package.json:  "readme": "# cache-base [![NPM version](https://img.shields.io/npm/v/cache-base.svg?style=flat)](https://www.npmjs.com/package/cache-base) [![NPM monthly downloads](https://img.shields.io/npm/dm/cache-base.svg?style=flat)](https://npmjs.org/package/cache-base) [![NPM total downloads](https://img.shields.io/npm/dt/cache-base.svg?style=flat)](https://npmjs.org/package/cache-base) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/cache-base.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/cache-base)\n\n> Basic object cache with `get`, `set`, `del`, and `has` methods for node.js/javascript projects.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save cache-base\n```\n\n## Usage\n\n```js\nvar Cache = require('cache-base');\n\n// instantiate\nvar app = new Cache();\n\n// set values\napp.set('a', 'b');\napp.set('c.d', 'e');\n\n// get values\napp.get('a');\n//=> 'b'\napp.get('c');\n//=> {d: 'e'}\n\nconsole.log(app.cache);\n//=> {a: 'b'}\n```\n\n**Inherit**\n\n```js\nvar util = require('util');\nvar Cache = require('cache-base');\n\nfunction MyApp() {\n  Cache.call(this);\n}\nutil.inherits(MyApp, Cache);\n\nvar app = new MyApp();\napp.set('a', 'b');\napp.get('a');\n//=> 'b'\n```\n\n**Namespace**\n\nDefine a custom property for storing values.\n\n```js\nvar Cache = require('cache-base').namespace('data');\nvar app = new Cache();\napp.set('a', 'b');\nconsole.log(app.data);\n//=> {a: 'b'}\n```\n\n## API\n\n### [namespace](index.js#L29)\n\nCreate a `Cache` constructor that when instantiated will store values on the given `prop`.\n\n**Params**\n\n* `prop` **{String}**: The property name to use for storing values.\n* `returns` **{Function}**: Returns a custom `Cache` constructor\n\n**Example**\n\n```js\nvar Cache = require('cache-base').namespace('data');\nvar cache = new Cache();\n\ncache.set('foo', 'bar');\n//=> {data: {foo: 'bar'}}\n```\n\n### [Cache](index.js#L43)\n\nCreate a new `Cache`. Internally the `Cache` constructor is created using the `namespace` function, with `cache` defined as the storage object.\n\n**Params**\n\n* `cache` **{Object}**: Optionally pass an object to initialize with.\n\n**Example**\n\n```js\nvar app = new Cache();\n```\n\n### [.set](index.js#L84)\n\nAssign `value` to `key`. Also emits `set` with the key and value.\n\n**Params**\n\n* `key` **{String}**\n* `value` **{any}**\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Events**\n\n* `emits`: `set` with `key` and `value` as arguments.\n\n**Example**\n\n```js\napp.on('set', function(key, val) {\n  // do something when `set` is emitted\n});\n\napp.set(key, value);\n\n// also takes an object or array\napp.set({name: 'Halle'});\napp.set([{foo: 'bar'}, {baz: 'quux'}]);\nconsole.log(app);\n//=> {name: 'Halle', foo: 'bar', baz: 'quux'}\n```\n\n### [.union](index.js#L114)\n\nUnion `array` to `key`. Also emits `set` with the key and value.\n\n**Params**\n\n* `key` **{String}**\n* `value` **{any}**\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Example**\n\n```js\napp.union('a.b', ['foo']);\napp.union('a.b', ['bar']);\nconsole.log(app.get('a'));\n//=> {b: ['foo', 'bar']}\n```\n\n### [.get](index.js#L144)\n\nReturn the value of `key`. Dot notation may be used to get [nested property values](https://github.com/jonschlinkert/get-value).\n\n**Params**\n\n* `key` **{String}**: The name of the property to get. Dot-notation may be used.\n* `returns` **{any}**: Returns the value of `key`\n\n**Events**\n\n* `emits`: `get` with `key` and `value` as arguments.\n\n**Example**\n\n```js\napp.set('a.b.c', 'd');\napp.get('a.b');\n//=> {c: 'd'}\n\napp.get(['a', 'b']);\n//=> {c: 'd'}\n```\n\n### [.has](index.js#L171)\n\nReturn true if app has a stored value for `key`, false only if value is `undefined`.\n\n**Params**\n\n* `key` **{String}**\n* `returns` **{Boolean}**\n\n**Events**\n\n* `emits`: `has` with `key` and true or false as arguments.\n\n**Example**\n\n```js\napp.set('foo', 'bar');\napp.has('foo');\n//=> true\n```\n\n### [.del](index.js#L199)\n\nDelete one or more properties from the instance.\n\n**Params**\n\n* `key` **{String|Array}**: Property name or array of property names.\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Events**\n\n* `emits`: `del` with the `key` as the only argument.\n\n**Example**\n\n```js\napp.del(); // delete all\n// or\napp.del('foo');\n// or\napp.del(['foo', 'bar']);\n```\n\n### [.clear](index.js#L218)\n\nReset the entire cache to an empty object.\n\n**Example**\n\n```js\napp.clear();\n```\n\n### [.visit](index.js#L235)\n\nVisit `method` over the properties in the given object, or map\nvisit over the object-elements in an array.\n\n**Params**\n\n* `method` **{String}**: The name of the `base` method to call.\n* `val` **{Object|Array}**: The object or array to iterate over.\n* `returns` **{Object}**: Returns the instance for chaining.\n\n## About\n\n### Related projects\n\n* [base-methods](https://www.npmjs.com/package/base-methods): base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting… [more](https://github.com/jonschlinkert/base-methods) | [homepage](https://github.com/jonschlinkert/base-methods \"base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting with a handful of common methods, like `set`, `get`, `del` and `use`.\")\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [has-value](https://www.npmjs.com/package/has-value): Returns true if a value exists, false if empty. Works with deeply nested values using… [more](https://github.com/jonschlinkert/has-value) | [homepage](https://github.com/jonschlinkert/has-value \"Returns true if a value exists, false if empty. Works with deeply nested values using object paths.\")\n* [option-cache](https://www.npmjs.com/package/option-cache): Simple API for managing options in JavaScript applications. | [homepage](https://github.com/jonschlinkert/option-cache \"Simple API for managing options in JavaScript applications.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [unset-value](https://www.npmjs.com/package/unset-value): Delete nested properties from an object using dot notation. | [homepage](https://github.com/jonschlinkert/unset-value \"Delete nested properties from an object using dot notation.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 54 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on July 22, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/package.json:  "readme": "# unset-value [![NPM version](https://img.shields.io/npm/v/unset-value.svg?style=flat)](https://www.npmjs.com/package/unset-value) [![NPM monthly downloads](https://img.shields.io/npm/dm/unset-value.svg?style=flat)](https://npmjs.org/package/unset-value)  [![NPM total downloads](https://img.shields.io/npm/dt/unset-value.svg?style=flat)](https://npmjs.org/package/unset-value) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/unset-value.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/unset-value)\n\n> Delete nested properties from an object using dot notation.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save unset-value\n```\n\n## Usage\n\n```js\nvar unset = require('unset-value');\n\nvar obj = {a: {b: {c: 'd', e: 'f'}}};\nunset(obj, 'a.b.c');\nconsole.log(obj);\n//=> {a: {b: {e: 'f'}}};\n```\n\n## Examples\n\n### Updates the object when a property is deleted\n\n```js\nvar obj = {a: 'b'};\nunset(obj, 'a');\nconsole.log(obj);\n//=> {}\n```\n\n### Returns true when a property is deleted\n\n```js\nunset({a: 'b'}, 'a') // true\n```\n\n### Returns `true` when a property does not exist\n\nThis is consistent with `delete` behavior in that it does not\nthrow when a property does not exist.\n\n```js\nunset({a: {b: {c: 'd'}}}, 'd') // true\n```\n\n### delete nested values\n\n```js\nvar one = {a: {b: {c: 'd'}}};\nunset(one, 'a.b');\nconsole.log(one);\n//=> {a: {}}\n\nvar two = {a: {b: {c: 'd'}}};\nunset(two, 'a.b.c');\nconsole.log(two);\n//=> {a: {b: {}}}\n\nvar three = {a: {b: {c: 'd', e: 'f'}}};\nunset(three, 'a.b.c');\nconsole.log(three);\n//=> {a: {b: {e: 'f'}}}\n```\n\n### throws on invalid args\n\n```js\nunset();\n// 'expected an object.'\n```\n\n## About\n\n### Related projects\n\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [get-values](https://www.npmjs.com/package/get-values): Return an array of all values from the given object. | [homepage](https://github.com/jonschlinkert/get-values \"Return an array of all values from the given object.\")\n* [omit-value](https://www.npmjs.com/package/omit-value): Omit properties from an object or deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/omit-value) | [homepage](https://github.com/jonschlinkert/omit-value \"Omit properties from an object or deeply nested property of an object using object path notation.\")\n* [put-value](https://www.npmjs.com/package/put-value): Update only existing values from an object, works with dot notation paths like `a.b.c` and… [more](https://github.com/tunnckocore/put-value#readme) | [homepage](https://github.com/tunnckocore/put-value#readme \"Update only existing values from an object, works with dot notation paths like `a.b.c` and support deep nesting.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [union-value](https://www.npmjs.com/package/union-value): Set an array of unique values as the property of an object. Supports setting deeply… [more](https://github.com/jonschlinkert/union-value) | [homepage](https://github.com/jonschlinkert/union-value \"Set an array of unique values as the property of an object. Supports setting deeply nested properties using using object-paths/dot notation.\")\n* [upsert-value](https://www.npmjs.com/package/upsert-value): Update or set nested values and any intermediaries with dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/doowb/upsert-value \"Update or set nested values and any intermediaries with dot notation (`'a.b.c'`) paths.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 6 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.4.2, on February 25, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/node_modules/has-value/node_modules/isobject/node_modules/isarray/package.json:  "readme": "\n# isarray\n\n`Array#isArray` for older browsers.\n\n[![build status](https://secure.travis-ci.org/juliangruber/isarray.svg)](http://travis-ci.org/juliangruber/isarray)\n[![downloads](https://img.shields.io/npm/dm/isarray.svg)](https://www.npmjs.org/package/isarray)\n\n[![browser support](https://ci.testling.com/juliangruber/isarray.png)\n](https://ci.testling.com/juliangruber/isarray)\n\n## Usage\n\n```js\nvar isArray = require('isarray');\n\nconsole.log(isArray([])); // => true\nconsole.log(isArray({})); // => false\n```\n\n## Installation\n\nWith [npm](http://npmjs.org) do\n\n```bash\n$ npm install isarray\n```\n\nThen bundle for the browser with\n[browserify](https://github.com/substack/browserify).\n\nWith [component](http://component.io) do\n\n```bash\n$ component install juliangruber/isarray\n```\n\n## License\n\n(MIT)\n\nCopyright (c) 2013 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/node_modules/has-value/node_modules/isobject/node_modules/isarray/README.md:console.log(isArray([])); // => true
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/node_modules/has-value/node_modules/isobject/node_modules/isarray/README.md:console.log(isArray({})); // => false
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/README.md:console.log(one);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/README.md:console.log(two);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/README.md:console.log(three);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/union-value/package.json:  "readme": "# union-value [![NPM version](https://img.shields.io/npm/v/union-value.svg?style=flat)](https://www.npmjs.com/package/union-value) [![NPM monthly downloads](https://img.shields.io/npm/dm/union-value.svg?style=flat)](https://npmjs.org/package/union-value)  [![NPM total downloads](https://img.shields.io/npm/dt/union-value.svg?style=flat)](https://npmjs.org/package/union-value) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/union-value.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/union-value)\n\n> Set an array of unique values as the property of an object. Supports setting deeply nested properties using using object-paths/dot notation.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save union-value\n```\n\n## Usage\n\n```js\nvar union = require('union-value');\n\nvar obj = {};\n\nunion(obj, 'a.b.c', ['one', 'two']);\nunion(obj, 'a.b.c', ['three']);\n\nconsole.log(obj);\n//=> {a: {b: {c: [ 'one', 'two', 'three' ] }}}\n```\n\n## About\n\n### Related projects\n\n* [assign-value](https://www.npmjs.com/package/assign-value): Assign a value or extend a deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/assign-value) | [homepage](https://github.com/jonschlinkert/assign-value \"Assign a value or extend a deeply nested property of an object using object path notation.\")\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [has-value](https://www.npmjs.com/package/has-value): Returns true if a value exists, false if empty. Works with deeply nested values using… [more](https://github.com/jonschlinkert/has-value) | [homepage](https://github.com/jonschlinkert/has-value \"Returns true if a value exists, false if empty. Works with deeply nested values using object paths.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [unset-value](https://www.npmjs.com/package/unset-value): Delete nested properties from an object using dot notation. | [homepage](https://github.com/jonschlinkert/unset-value \"Delete nested properties from an object using dot notation.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.4.2, on February 25, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/union-value/node_modules/set-value/package.json:  "readme": "# set-value [![NPM version](https://img.shields.io/npm/v/set-value.svg?style=flat)](https://www.npmjs.com/package/set-value) [![NPM monthly downloads](https://img.shields.io/npm/dm/set-value.svg?style=flat)](https://npmjs.org/package/set-value)  [![NPM total downloads](https://img.shields.io/npm/dt/set-value.svg?style=flat)](https://npmjs.org/package/set-value) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/set-value.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/set-value)\n\n> Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save set-value\n```\n\n## Usage\n\n```js\nvar set = require('set-value');\n\nvar obj = {};\nset(obj, 'a.b.c', 'd');\nconsole.log(obj);\n//=> {a: {b: c: 'd'}}\n```\n\n## About\n\n### Related projects\n\n* [assign-value](https://www.npmjs.com/package/assign-value): Assign a value or extend a deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/assign-value) | [homepage](https://github.com/jonschlinkert/assign-value \"Assign a value or extend a deeply nested property of an object using object path notation.\")\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [has-value](https://www.npmjs.com/package/has-value): Returns true if a value exists, false if empty. Works with deeply nested values using… [more](https://github.com/jonschlinkert/has-value) | [homepage](https://github.com/jonschlinkert/has-value \"Returns true if a value exists, false if empty. Works with deeply nested values using object paths.\")\n* [merge-value](https://www.npmjs.com/package/merge-value): Similar to assign-value but deeply merges object values or nested values using object path/dot notation. | [homepage](https://github.com/jonschlinkert/merge-value \"Similar to assign-value but deeply merges object values or nested values using object path/dot notation.\")\n* [omit-value](https://www.npmjs.com/package/omit-value): Omit properties from an object or deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/omit-value) | [homepage](https://github.com/jonschlinkert/omit-value \"Omit properties from an object or deeply nested property of an object using object path notation.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [union-value](https://www.npmjs.com/package/union-value): Set an array of unique values as the property of an object. Supports setting deeply… [more](https://github.com/jonschlinkert/union-value) | [homepage](https://github.com/jonschlinkert/union-value \"Set an array of unique values as the property of an object. Supports setting deeply nested properties using using object-paths/dot notation.\")\n* [unset-value](https://www.npmjs.com/package/unset-value): Delete nested properties from an object using dot notation. | [homepage](https://github.com/jonschlinkert/unset-value \"Delete nested properties from an object using dot notation.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 53 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 1 | [vadimdemedes](https://github.com/vadimdemedes) |\n| 1 | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.4.2, on February 22, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/union-value/node_modules/set-value/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/union-value/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/package.json:  "readme": "# collection-visit [![NPM version](https://img.shields.io/npm/v/collection-visit.svg?style=flat)](https://www.npmjs.com/package/collection-visit) [![NPM monthly downloads](https://img.shields.io/npm/dm/collection-visit.svg?style=flat)](https://npmjs.org/package/collection-visit)  [![NPM total downloads](https://img.shields.io/npm/dt/collection-visit.svg?style=flat)](https://npmjs.org/package/collection-visit) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/collection-visit.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/collection-visit)\n\n> Visit a method over the items in an object, or map visit over the objects in an array.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save collection-visit\n```\n\n## Usage\n\n```js\nvar visit = require('collection-visit');\n\nvar ctx = {\n  data: {},\n  set: function (key, value) {\n    if (typeof key === 'object') {\n      visit(ctx, 'set', key);\n    } else {\n      ctx.data[key] = value;\n    }\n  }\n};\n\nctx.set('a', 'a');\nctx.set('b', 'b');\nctx.set('c', 'c');\nctx.set({d: {e: 'f'}});\n\nconsole.log(ctx.data);\n//=> {a: 'a', b: 'b', c: 'c', d: { e: 'f' }};\n```\n\n## About\n\n### Related projects\n\n* [base-methods](https://www.npmjs.com/package/base-methods): base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting… [more](https://github.com/jonschlinkert/base-methods) | [homepage](https://github.com/jonschlinkert/base-methods \"base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting with a handful of common methods, like `set`, `get`, `del` and `use`.\")\n* [map-visit](https://www.npmjs.com/package/map-visit): Map `visit` over an array of objects. | [homepage](https://github.com/jonschlinkert/map-visit \"Map `visit` over an array of objects.\")\n* [object-visit](https://www.npmjs.com/package/object-visit): Call a specified method on each value in the given object. | [homepage](https://github.com/jonschlinkert/object-visit \"Call a specified method on each value in the given object.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 13 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 9 | [doowb](https://github.com/doowb) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 09, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/map-visit/package.json:  "readme": "# map-visit [![NPM version](https://img.shields.io/npm/v/map-visit.svg?style=flat)](https://www.npmjs.com/package/map-visit) [![NPM monthly downloads](https://img.shields.io/npm/dm/map-visit.svg?style=flat)](https://npmjs.org/package/map-visit)  [![NPM total downloads](https://img.shields.io/npm/dt/map-visit.svg?style=flat)](https://npmjs.org/package/map-visit) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/map-visit.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/map-visit)\n\n> Map `visit` over an array of objects.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save map-visit\n```\n\n## Usage\n\n```js\nvar mapVisit = require('map-visit');\n```\n\n## What does this do?\n\n**Assign/Merge/Extend vs. Visit**\n\nLet's say you want to add a `set` method to your application that will:\n\n* set key-value pairs on a `data` object\n* extend objects onto the `data` object\n* extend arrays of objects onto the data object\n\n**Example using `extend`**\n\nHere is one way to accomplish this using Lo-Dash's `extend` (comparable to `Object.assign`):\n\n```js\nvar _ = require('lodash');\n\nvar obj = {\n  data: {},\n  set: function (key, value) {\n    if (Array.isArray(key)) {\n      _.extend.apply(_, [obj.data].concat(key));\n    } else if (typeof key === 'object') {\n      _.extend(obj.data, key);\n    } else {\n      obj.data[key] = value;\n    }\n  }\n};\n\nobj.set('a', 'a');\nobj.set([{b: 'b'}, {c: 'c'}]);\nobj.set({d: {e: 'f'}});\n\nconsole.log(obj.data);\n//=> {a: 'a', b: 'b', c: 'c', d: { e: 'f' }}\n```\n\nThe above approach works fine for most use cases. However, **if you also want to emit an event** each time a property is added to the `data` object, or you want more control over what happens as the object is extended, a better approach would be to use `visit`.\n\n**Example using `visit`**\n\nIn this approach:\n\n* when an array is passed to `set`, the `mapVisit` library calls the `set` method on each object in the array.\n* when an object is passed, `visit` calls `set` on each property in the object.\n\nAs a result, the `data` event will be emitted every time a property is added to `data` (events are just an example, you can use this approach to perform any necessary logic every time the method is called).\n\n```js\nvar mapVisit = require('map-visit');\nvar visit = require('object-visit');\n\nvar obj = {\n  data: {},\n  set: function (key, value) {\n    if (Array.isArray(key)) {\n      mapVisit(obj, 'set', key);\n    } else if (typeof key === 'object') {\n      visit(obj, 'set', key);\n    } else {\n      // simulate an event-emitter\n      console.log('emit', key, value);\n      obj.data[key] = value;\n    }\n  }\n};\n\nobj.set('a', 'a');\nobj.set([{b: 'b'}, {c: 'c'}]);\nobj.set({d: {e: 'f'}});\nobj.set({g: 'h', i: 'j', k: 'l'});\n\nconsole.log(obj.data);\n//=> {a: 'a', b: 'b', c: 'c', d: { e: 'f' }, g: 'h', i: 'j', k: 'l'}\n\n// events would look something like:\n// emit a a\n// emit b b\n// emit c c\n// emit d { e: 'f' }\n// emit g h\n// emit i j\n// emit k l\n```\n\n## About\n\n### Related projects\n\n* [collection-visit](https://www.npmjs.com/package/collection-visit): Visit a method over the items in an object, or map visit over the objects… [more](https://github.com/jonschlinkert/collection-visit) | [homepage](https://github.com/jonschlinkert/collection-visit \"Visit a method over the items in an object, or map visit over the objects in an array.\")\n* [object-visit](https://www.npmjs.com/package/object-visit): Call a specified method on each value in the given object. | [homepage](https://github.com/jonschlinkert/object-visit \"Call a specified method on each value in the given object.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 15 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 7 | [doowb](https://github.com/doowb) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 09, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/map-visit/README.md:console.log(obj.data);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/map-visit/README.md:As a result, the `data` event will be emitted every time a property is added to `data` (events are just an example, you can use this approach to perform any necessary logic every time the method is called).
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/map-visit/README.md:      console.log('emit', key, value);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/map-visit/README.md:console.log(obj.data);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/object-visit/package.json:  "readme": "# object-visit [![NPM version](https://img.shields.io/npm/v/object-visit.svg?style=flat)](https://www.npmjs.com/package/object-visit) [![NPM monthly downloads](https://img.shields.io/npm/dm/object-visit.svg?style=flat)](https://npmjs.org/package/object-visit) [![NPM total downloads](https://img.shields.io/npm/dt/object-visit.svg?style=flat)](https://npmjs.org/package/object-visit) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/object-visit.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/object-visit)\n\n> Call a specified method on each value in the given object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save object-visit\n```\n\n## Usage\n\n```js\nvar visit = require('object-visit');\n\nvar ctx = {\n  data: {},\n  set: function (key, value) {\n    if (typeof key === 'object') {\n      visit(ctx, 'set', key);\n    } else {\n      ctx.data[key] = value;\n    }\n  }\n};\n\nctx.set('a', 'a');\nctx.set('b', 'b');\nctx.set('c', 'c');\nctx.set({d: {e: 'f'}});\n\nconsole.log(ctx.data);\n//=> {a: 'a', b: 'b', c: 'c', d: { e: 'f' }};\n```\n\n## About\n\n### Related projects\n\n* [base-methods](https://www.npmjs.com/package/base-methods): base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting… [more](https://github.com/jonschlinkert/base-methods) | [homepage](https://github.com/jonschlinkert/base-methods \"base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting with a handful of common methods, like `set`, `get`, `del` and `use`.\")\n* [collection-visit](https://www.npmjs.com/package/collection-visit): Visit a method over the items in an object, or map visit over the objects… [more](https://github.com/jonschlinkert/collection-visit) | [homepage](https://github.com/jonschlinkert/collection-visit \"Visit a method over the items in an object, or map visit over the objects in an array.\")\n* [define-property](https://www.npmjs.com/package/define-property): Define a non-enumerable property on an object. | [homepage](https://github.com/jonschlinkert/define-property \"Define a non-enumerable property on an object.\")\n* [map-visit](https://www.npmjs.com/package/map-visit): Map `visit` over an array of objects. | [homepage](https://github.com/jonschlinkert/map-visit \"Map `visit` over an array of objects.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on May 30, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/object-visit/README.md:console.log(ctx.data);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/README.md:console.log(ctx.data);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/package.json:  "readme": "# set-value [![NPM version](https://img.shields.io/npm/v/set-value.svg?style=flat)](https://www.npmjs.com/package/set-value) [![NPM monthly downloads](https://img.shields.io/npm/dm/set-value.svg?style=flat)](https://npmjs.org/package/set-value) [![NPM total downloads](https://img.shields.io/npm/dt/set-value.svg?style=flat)](https://npmjs.org/package/set-value) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/set-value.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/set-value)\n\n> Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save set-value\n```\n\n## Usage\n\n```js\nvar set = require('set-value');\nset(object, prop, value);\n```\n\n### Params\n\n* `object` **{object}**: The object to set `value` on\n* `prop` **{string}**: The property to set. Dot-notation may be used.\n* `value` **{any}**: The value to set on `object[prop]`\n\n## Examples\n\nUpdates and returns the given object:\n\n```js\nvar obj = {};\nset(obj, 'a.b.c', 'd');\nconsole.log(obj);\n//=> { a: { b: { c: 'd' } } }\n```\n\n### Escaping\n\n**Escaping with backslashes**\n\nPrevent set-value from splitting on a dot by prefixing it with backslashes:\n\n```js\nconsole.log(set({}, 'a\\\\.b.c', 'd'));\n//=> { 'a.b': { c: 'd' } }\n\nconsole.log(set({}, 'a\\\\.b\\\\.c', 'd'));\n//=> { 'a.b.c': 'd' }\n```\n\n**Escaping with double-quotes or single-quotes**\n\nWrap double or single quotes around the string, or part of the string, that should not be split by set-value:\n\n```js\nconsole.log(set({}, '\"a.b\".c', 'd'));\n//=> { 'a.b': { c: 'd' } }\n\nconsole.log(set({}, \"'a.b'.c\", \"d\"));\n//=> { 'a.b': { c: 'd' } }\n\nconsole.log(set({}, '\"this/is/a/.file.path\"', 'd'));\n//=> { 'this/is/a/file.path': 'd' }\n```\n\n### Bracket support\n\nset-value does not split inside brackets or braces:\n\n```js\nconsole.log(set({}, '[a.b].c', 'd'));\n//=> { '[a.b]': { c: 'd' } }\n\nconsole.log(set({}, \"(a.b).c\", \"d\"));\n//=> { '(a.b)': { c: 'd' } }\n\nconsole.log(set({}, \"<a.b>.c\", \"d\"));\n//=> { '<a.b>': { c: 'd' } }\n\nconsole.log(set({}, \"{a..b}.c\", \"d\"));\n//=> { '{a..b}': { c: 'd' } }\n```\n\n## History\n\n### v2.0.0\n\n* Adds support for escaping with double or single quotes. See [escaping](#escaping) for examples.\n* Will no longer split inside brackets or braces. See [bracket support](#bracket-support) for examples.\n\nIf there are any regressions please create a [bug report](../../issues/new). Thanks!\n\n## About\n\n### Related projects\n\n* [assign-value](https://www.npmjs.com/package/assign-value): Assign a value or extend a deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/assign-value) | [homepage](https://github.com/jonschlinkert/assign-value \"Assign a value or extend a deeply nested property of an object using object path notation.\")\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [has-value](https://www.npmjs.com/package/has-value): Returns true if a value exists, false if empty. Works with deeply nested values using… [more](https://github.com/jonschlinkert/has-value) | [homepage](https://github.com/jonschlinkert/has-value \"Returns true if a value exists, false if empty. Works with deeply nested values using object paths.\")\n* [merge-value](https://www.npmjs.com/package/merge-value): Similar to assign-value but deeply merges object values or nested values using object path/dot notation. | [homepage](https://github.com/jonschlinkert/merge-value \"Similar to assign-value but deeply merges object values or nested values using object path/dot notation.\")\n* [omit-value](https://www.npmjs.com/package/omit-value): Omit properties from an object or deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/omit-value) | [homepage](https://github.com/jonschlinkert/omit-value \"Omit properties from an object or deeply nested property of an object using object path notation.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [union-value](https://www.npmjs.com/package/union-value): Set an array of unique values as the property of an object. Supports setting deeply… [more](https://github.com/jonschlinkert/union-value) | [homepage](https://github.com/jonschlinkert/union-value \"Set an array of unique values as the property of an object. Supports setting deeply nested properties using using object-paths/dot notation.\")\n* [unset-value](https://www.npmjs.com/package/unset-value): Delete nested properties from an object using dot notation. | [homepage](https://github.com/jonschlinkert/unset-value \"Delete nested properties from an object using dot notation.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 59 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 1 | [vadimdemedes](https://github.com/vadimdemedes) |\n| 1 | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on June 21, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/package.json:  "readme": "# split-string [![NPM version](https://img.shields.io/npm/v/split-string.svg?style=flat)](https://www.npmjs.com/package/split-string) [![NPM monthly downloads](https://img.shields.io/npm/dm/split-string.svg?style=flat)](https://npmjs.org/package/split-string) [![NPM total downloads](https://img.shields.io/npm/dt/split-string.svg?style=flat)](https://npmjs.org/package/split-string) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/split-string.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/split-string)\n\n> Split a string on a character except when the character is escaped.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save split-string\n```\n\n<!-- section: Why use this? -->\n\n<details>\n<summary><strong>Why use this?</strong></summary>\n\n<br>\n\nAlthough it's easy to split on a string:\n\n```js\nconsole.log('a.b.c'.split('.'));\n//=> ['a', 'b', 'c']\n```\n\nIt's more challenging to split a string whilst respecting escaped or quoted characters.\n\n**Bad**\n\n```js\nconsole.log('a\\\\.b.c'.split('.'));\n//=> ['a\\\\', 'b', 'c']\n\nconsole.log('\"a.b.c\".d'.split('.'));\n//=> ['\"a', 'b', 'c\"', 'd']\n```\n\n**Good**\n\n```js\nvar split = require('split-string');\nconsole.log(split('a\\\\.b.c'));\n//=> ['a.b', 'c']\n\nconsole.log(split('\"a.b.c\".d'));\n//=> ['a.b.c', 'd']\n```\n\nSee the [options](#options) to learn how to choose the separator or retain quotes or escaping.\n\n<br>\n\n</details>\n\n## Usage\n\n```js\nvar split = require('split-string');\n\nsplit('a.b.c');\n//=> ['a', 'b', 'c']\n\n// respects escaped characters\nsplit('a.b.c\\\\.d');\n//=> ['a', 'b', 'c.d']\n\n// respects double-quoted strings\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n```\n\n**Brackets**\n\nAlso respects brackets [unless disabled](#optionsbrackets):\n\n```js\nsplit('a (b c d) e', ' ');\n//=> ['a', '(b c d)', 'e']\n```\n\n## Options\n\n### options.brackets\n\n**Type**: `object|boolean`\n\n**Default**: `undefined`\n\n**Description**\n\nIf enabled, split-string will not split inside brackets. The following brackets types are supported when `options.brackets` is `true`,\n\n```js\n{\n  '<': '>',\n  '(': ')',\n  '[': ']',\n  '{': '}'\n}\n```\n\nOr, if object of brackets must be passed, each property on the object must be a bracket type, where the property key is the opening delimiter and property value is the closing delimiter.\n\n**Examples**\n\n```js\n// no bracket support by default\nsplit('a.{b.c}');\n//=> [ 'a', '{b', 'c}' ]\n\n// support all basic bracket types: \"<>{}[]()\"\nsplit('a.{b.c}', {brackets: true});\n//=> [ 'a', '{b.c}' ]\n\n// also supports nested brackets \nsplit('a.{b.{c.d}.e}.f', {brackets: true});\n//=> [ 'a', '{b.{c.d}.e}', 'f' ]\n\n// support only the specified brackets\nsplit('[a.b].(c.d)', {brackets: {'[': ']'}});\n//=> [ '[a.b]', '(c', 'd)' ]\n```\n\n### options.sep\n\n**Type**: `string`\n\n**Default**: `.`\n\nThe separator/character to split on.\n\n**Example**\n\n```js\nsplit('a.b,c', {sep: ','});\n//=> ['a.b', 'c']\n\n// you can also pass the separator as string as the last argument\nsplit('a.b,c', ',');\n//=> ['a.b', 'c']\n```\n\n### options.keepEscaping\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep backslashes in the result.\n\n**Example**\n\n```js\nsplit('a.b\\\\.c');\n//=> ['a', 'b.c']\n\nsplit('a.b.\\\\c', {keepEscaping: true});\n//=> ['a', 'b\\.c']\n```\n\n### options.keepQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep single- or double-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\"b.c.d\".e', {keepQuotes: true});\n//=> ['a', '\"b.c.d\"', 'e']\n\nsplit('a.\\'b.c.d\\'.e', {keepQuotes: true});\n//=> ['a', '\\'b.c.d\\'', 'e']\n```\n\n### options.keepDoubleQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep double-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\"b.c.d\".e', {keepDoubleQuotes: true});\n//=> ['a', '\"b.c.d\"', 'e']\n```\n\n### options.keepSingleQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep single-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\\'b.c.d\\'.e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\\'b.c.d\\'.e', {keepSingleQuotes: true});\n//=> ['a', '\\'b.c.d\\'', 'e']\n```\n\n## Customizer\n\n**Type**: `function`\n\n**Default**: `undefined`\n\nPass a function as the last argument to customize how tokens are added to the array.\n\n**Example**\n\n```js\nvar arr = split('a.b', function(tok) {\n  if (tok.arr[tok.arr.length - 1] === 'a') {\n    tok.split = false;\n  }\n});\nconsole.log(arr);\n//=> ['a.b']\n```\n\n**Properties**\n\nThe `tok` object has the following properties:\n\n* `tok.val` (string) The current value about to be pushed onto the result array\n* `tok.idx` (number) the current index in the string\n* `tok.str` (string) the entire string\n* `tok.arr` (array) the result array\n\n## Release history\n\n### v3.0.0 - 2017-06-17\n\n**Added**\n\n* adds support for brackets\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [deromanize](https://www.npmjs.com/package/deromanize): Convert roman numerals to arabic numbers (useful for books, outlines, documentation, slide decks, etc) | [homepage](https://github.com/jonschlinkert/deromanize \"Convert roman numerals to arabic numbers (useful for books, outlines, documentation, slide decks, etc)\")\n* [randomatic](https://www.npmjs.com/package/randomatic): Generate randomized strings of a specified length using simple character sequences. The original generate-password. | [homepage](https://github.com/jonschlinkert/randomatic \"Generate randomized strings of a specified length using simple character sequences. The original generate-password.\")\n* [repeat-string](https://www.npmjs.com/package/repeat-string): Repeat the given string n times. Fastest implementation for repeating a string. | [homepage](https://github.com/jonschlinkert/repeat-string \"Repeat the given string n times. Fastest implementation for repeating a string.\")\n* [romanize](https://www.npmjs.com/package/romanize): Convert numbers to roman numerals (useful for books, outlines, documentation, slide decks, etc) | [homepage](https://github.com/jonschlinkert/romanize \"Convert numbers to roman numerals (useful for books, outlines, documentation, slide decks, etc)\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 28 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 9 | [doowb](https://github.com/doowb) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 19, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/package.json:  "readme": "# assign-symbols [![NPM version](https://badge.fury.io/js/assign-symbols.svg)](http://badge.fury.io/js/assign-symbols)\n\n> Assign the enumerable es6 Symbol properties from an object (or objects) to the first object passed on the arguments. Can be used as a supplement to other extend, assign or merge methods as a polyfill for the Symbols part of the es6 Object.assign method.\n\nFrom the [Mozilla Developer docs for Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol):\n\n> A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i assign-symbols --save\n```\n\n## Usage\n\n```js\nvar assignSymbols = require('assign-symbols');\nvar obj = {};\n\nvar one = {};\nvar symbolOne = Symbol('aaa');\none[symbolOne] = 'bbb';\n\nvar two = {};\nvar symbolTwo = Symbol('ccc');\ntwo[symbolTwo] = 'ddd';\n\nassignSymbols(obj, one, two);\n\nconsole.log(obj[symbolOne]);\n//=> 'bbb'\nconsole.log(obj[symbolTwo]);\n//=> 'ddd'\n```\n\n## Similar projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties of source objects to a destination object. | [homepage](https://github.com/jonschlinkert/assign-deep)\n* [clone-deep](https://www.npmjs.com/package/clone-deep): Recursively (deep) clone JavaScript native types, like Object, Array, RegExp, Date as well as primitives. | [homepage](https://github.com/jonschlinkert/clone-deep)\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow)\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/assign-symbols/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 06, 2015._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolOne]);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolTwo]);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log('a.b.c'.split('.'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log('a\\.b.c'.split('.'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log('"a.b.c".d'.split('.'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log(split('a\\.b.c'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log(split('"a.b.c".d'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log(arr);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, 'a\\.b.c', 'd'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, 'a\\.b\\.c', 'd'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, '"a.b".c', 'd'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, "'a.b'.c", "d"));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, '"this/is/a/.file.path"', 'd'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, '[a.b].c', 'd'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, "(a.b).c", "d"));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, "<a.b>.c", "d"));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, "{a..b}.c", "d"));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/README.md:console.log(app.cache);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/README.md:console.log(app.data);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/README.md:console.log(app);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/README.md:console.log(app.get('a'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/index.js:   * console.log(app);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/index.js:   * console.log(app.get('a'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://img.shields.io/npm/v/define-property.svg?style=flat)](https://www.npmjs.com/package/define-property) [![NPM monthly downloads](https://img.shields.io/npm/dm/define-property.svg?style=flat)](https://npmjs.org/package/define-property)  [![NPM total downloads](https://img.shields.io/npm/dt/define-property.svg?style=flat)](https://npmjs.org/package/define-property) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/define-property.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save define-property\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add define-property\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## About\n\n### Related projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target… [more](https://github.com/jonschlinkert/assign-deep) | [homepage](https://github.com/jonschlinkert/assign-deep \"Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target (first) object.\")\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow \"Extend an object with the properties of additional objects. node.js/javascript util.\")\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep \"Recursively merge values in a javascript object.\")\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep \"Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 20, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg?style=flat)](https://www.npmjs.com/package/is-data-descriptor) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![NPM total downloads](https://img.shields.io/npm/dt/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-data-descriptor\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor \"Returns true if a value has the characteristics of a valid JavaScript accessor descriptor.\")\n* [is-data-descriptor](https://www.npmjs.com/package/is-data-descriptor): Returns true if a value has the characteristics of a valid JavaScript data descriptor. | [homepage](https://github.com/jonschlinkert/is-data-descriptor \"Returns true if a value has the characteristics of a valid JavaScript data descriptor.\")\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://github.com/jonschlinkert/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor \"Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for data descriptors and accessor descriptors.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 21 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [realityking](https://github.com/realityking) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 01, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/define-property/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:    <img height="250" width="250" src="https://raw.githubusercontent.com/node-base/base/master/docs/logo.png">
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.cache.foo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.foo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.baz); //=> undefined
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.foo); //=> 'bar'
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.get('isApp')); //=> true
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.get('foo')); //=> 'bar'
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.options.abc); //=> true
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app._name);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.isFoo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.isFoo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.isBar);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app._name);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(first.base.foo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(second.base.foo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(third.base.foo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.foo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.baz); //=> undefined
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.foo); //=> 'bar'
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.get('isApp')); //=> true
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.get('foo')); //=> 'bar'
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.options.abc); //=> true
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app._name);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.isFoo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.isFoo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.isBar);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app._name);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(first.base.foo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(second.base.foo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(third.base.foo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.foo);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/test.js:    console.log('[FAIL]', unencoded, atob(encoded));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/test.js:  console.log('[PASS] all tests pass');
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    encyclopedias and anthologies, or performances, phonograms or
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    assimilated works expressed by a process analogous to cinematography;
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    expressed by a process analogous to photography; a work of applied
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    Perform the Work, You may not impose any effective technological
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    License were drafted utilizing the terminology of the Berne Convention
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    related trademark or logo of Creative Commons without the prior
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/package.json:  "readme": "atob\n===\n\nUses `Buffer` to emulate the exact functionality of the browser's atob.\n\nNote: Unicode may be handled incorrectly (like the browser).\n\nIt turns base64-encoded <strong>a</strong>scii data back **to** <strong>b</strong>inary.\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var atob = require('atob');\n  var b64 = \"SGVsbG8gV29ybGQ=\";\n  var bin = atob(b64);\n\n  console.log(bin); // \"Hello World\"\n}());\n```\n\n### Need Unicode and Binary Support in the Browser?\n\nCheck out [unibabel.js](https://github.com/coolaj86/unibabel-js)\n\nChangelog\n=======\n\n  * v2.0.0 provide browser version for ios web workers\n  * v1.2.0 provide (empty) browser version\n  * v1.1.3 add MIT license (see [#4](https://github.com/node-browser-compat/atob/issues/4))\n  * v1.1.2 node only\n\nLICENSE\n=======\n\nCode copyright 2012-2015 AJ ONeal\n\nDual-licensed MIT and Apache-2.0\n\nDocs copyright 2012-2015 AJ ONeal\n\nDocs released under [Creative Commons](https://github.com/node-browser-compat/atob/blob/master/LICENSE.DOCS).\n",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/README.md:  console.log(bin); // "Hello World"
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/README.md:Changelog
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/bin/atob.js:console.log(atob(str));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/package.json:    "log",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:  change the behavior of the debug logging:
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:var log = debug('app:log');
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:// set this namespace to log via console.log
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:log('goes to stdout');
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:// overrides all per-namespace log settings
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:debug.log = console.info.bind(console);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js:exports.log = log;
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js:function log() {
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js:    && console.log
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/node.js:exports.log = log;
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/node.js:function log() {
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/debug.js: * Previous log timestamp.
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/karma.conf.js:    // level of logging
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/component.json:    "log",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://badge.fury.io/js/define-property.svg)](http://badge.fury.io/js/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i define-property --save\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## Related projects\n\n* [delegate-object](https://www.npmjs.com/package/delegate-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/delegate-object) | [homepage](https://github.com/doowb/delegate-object)\n* [forward-object](https://www.npmjs.com/package/forward-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/forward-object) | [homepage](https://github.com/doowb/forward-object)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n* [mixin-object](https://www.npmjs.com/package/mixin-object): Mixin the own and inherited properties of other objects onto the first object. Pass an… [more](https://www.npmjs.com/package/mixin-object) | [homepage](https://github.com/jonschlinkert/mixin-object)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/define-property/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on August 31, 2015._\n",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/package.json:  "readme": "# kind-of [![NPM version](https://img.shields.io/npm/v/kind-of.svg?style=flat)](https://www.npmjs.com/package/kind-of) [![NPM monthly downloads](https://img.shields.io/npm/dm/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![NPM total downloads](https://img.shields.io/npm/dt/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/kind-of.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/kind-of)\n\n> Get the native type of a value.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save kind-of\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install kind-of --save\n```\n\n## Why use this?\n\n1. [it's fast](#benchmarks) | [optimizations](#optimizations)\n2. [better type checking](#better-type-checking)\n\n## Usage\n\n> es5, browser and es6 ready\n\n```js\nvar kindOf = require('kind-of');\n\nkindOf(undefined);\n//=> 'undefined'\n\nkindOf(null);\n//=> 'null'\n\nkindOf(true);\n//=> 'boolean'\n\nkindOf(false);\n//=> 'boolean'\n\nkindOf(new Boolean(true));\n//=> 'boolean'\n\nkindOf(new Buffer(''));\n//=> 'buffer'\n\nkindOf(42);\n//=> 'number'\n\nkindOf(new Number(42));\n//=> 'number'\n\nkindOf('str');\n//=> 'string'\n\nkindOf(new String('str'));\n//=> 'string'\n\nkindOf(arguments);\n//=> 'arguments'\n\nkindOf({});\n//=> 'object'\n\nkindOf(Object.create(null));\n//=> 'object'\n\nkindOf(new Test());\n//=> 'object'\n\nkindOf(new Date());\n//=> 'date'\n\nkindOf([]);\n//=> 'array'\n\nkindOf([1, 2, 3]);\n//=> 'array'\n\nkindOf(new Array());\n//=> 'array'\n\nkindOf(/foo/);\n//=> 'regexp'\n\nkindOf(new RegExp('foo'));\n//=> 'regexp'\n\nkindOf(function () {});\n//=> 'function'\n\nkindOf(function * () {});\n//=> 'function'\n\nkindOf(new Function());\n//=> 'function'\n\nkindOf(new Map());\n//=> 'map'\n\nkindOf(new WeakMap());\n//=> 'weakmap'\n\nkindOf(new Set());\n//=> 'set'\n\nkindOf(new WeakSet());\n//=> 'weakset'\n\nkindOf(Symbol('str'));\n//=> 'symbol'\n\nkindOf(new Int8Array());\n//=> 'int8array'\n\nkindOf(new Uint8Array());\n//=> 'uint8array'\n\nkindOf(new Uint8ClampedArray());\n//=> 'uint8clampedarray'\n\nkindOf(new Int16Array());\n//=> 'int16array'\n\nkindOf(new Uint16Array());\n//=> 'uint16array'\n\nkindOf(new Int32Array());\n//=> 'int32array'\n\nkindOf(new Uint32Array());\n//=> 'uint32array'\n\nkindOf(new Float32Array());\n//=> 'float32array'\n\nkindOf(new Float64Array());\n//=> 'float64array'\n```\n\n## Release history\n\n### v4.0.0\n\n**Added**\n\n* `promise` support\n\n### v5.0.0\n\n**Added**\n\n* `Set Iterator` and `Map Iterator` support\n\n**Fixed**\n\n* Now returns `generatorfunction` for generator functions\n\n## Benchmarks\n\nBenchmarked against [typeof](http://github.com/CodingFu/typeof) and [type-of](https://github.com/ForbesLindesay/type-of).\nNote that performaces is slower for es6 features `Map`, `WeakMap`, `Set` and `WeakSet`.\n\n```bash\n#1: array\n  current x 23,329,397 ops/sec ±0.82% (94 runs sampled)\n  lib-type-of x 4,170,273 ops/sec ±0.55% (94 runs sampled)\n  lib-typeof x 9,686,935 ops/sec ±0.59% (98 runs sampled)\n\n#2: boolean\n  current x 27,197,115 ops/sec ±0.85% (94 runs sampled)\n  lib-type-of x 3,145,791 ops/sec ±0.73% (97 runs sampled)\n  lib-typeof x 9,199,562 ops/sec ±0.44% (99 runs sampled)\n\n#3: date\n  current x 20,190,117 ops/sec ±0.86% (92 runs sampled)\n  lib-type-of x 5,166,970 ops/sec ±0.74% (94 runs sampled)\n  lib-typeof x 9,610,821 ops/sec ±0.50% (96 runs sampled)\n\n#4: function\n  current x 23,855,460 ops/sec ±0.60% (97 runs sampled)\n  lib-type-of x 5,667,740 ops/sec ±0.54% (100 runs sampled)\n  lib-typeof x 10,010,644 ops/sec ±0.44% (100 runs sampled)\n\n#5: null\n  current x 27,061,047 ops/sec ±0.97% (96 runs sampled)\n  lib-type-of x 13,965,573 ops/sec ±0.62% (97 runs sampled)\n  lib-typeof x 8,460,194 ops/sec ±0.61% (97 runs sampled)\n\n#6: number\n  current x 25,075,682 ops/sec ±0.53% (99 runs sampled)\n  lib-type-of x 2,266,405 ops/sec ±0.41% (98 runs sampled)\n  lib-typeof x 9,821,481 ops/sec ±0.45% (99 runs sampled)\n\n#7: object\n  current x 3,348,980 ops/sec ±0.49% (99 runs sampled)\n  lib-type-of x 3,245,138 ops/sec ±0.60% (94 runs sampled)\n  lib-typeof x 9,262,952 ops/sec ±0.59% (99 runs sampled)\n\n#8: regex\n  current x 21,284,827 ops/sec ±0.72% (96 runs sampled)\n  lib-type-of x 4,689,241 ops/sec ±0.43% (100 runs sampled)\n  lib-typeof x 8,957,593 ops/sec ±0.62% (98 runs sampled)\n\n#9: string\n  current x 25,379,234 ops/sec ±0.58% (96 runs sampled)\n  lib-type-of x 3,635,148 ops/sec ±0.76% (93 runs sampled)\n  lib-typeof x 9,494,134 ops/sec ±0.49% (98 runs sampled)\n\n#10: undef\n  current x 27,459,221 ops/sec ±1.01% (93 runs sampled)\n  lib-type-of x 14,360,433 ops/sec ±0.52% (99 runs sampled)\n  lib-typeof x 23,202,868 ops/sec ±0.59% (94 runs sampled)\n\n```\n\n## Optimizations\n\nIn 7 out of 8 cases, this library is 2x-10x faster than other top libraries included in the benchmarks. There are a few things that lead to this performance advantage, none of them hard and fast rules, but all of them simple and repeatable in almost any code library:\n\n1. Optimize around the fastest and most common use cases first. Of course, this will change from project-to-project, but I took some time to understand how and why `typeof` checks were being used in my own libraries and other libraries I use a lot.\n2. Optimize around bottlenecks - In other words, the order in which conditionals are implemented is significant, because each check is only as fast as the failing checks that came before it. Here, the biggest bottleneck by far is checking for plain objects (an object that was created by the `Object` constructor). I opted to make this check happen by process of elimination rather than brute force up front (e.g. by using something like `val.constructor.name`), so that every other type check would not be penalized it.\n3. Don't do uneccessary processing - why do `.slice(8, -1).toLowerCase();` just to get the word `regex`? It's much faster to do `if (type === '[object RegExp]') return 'regex'`\n4. There is no reason to make the code in a microlib as terse as possible, just to win points for making it shorter. It's always better to favor performant code over terse code. You will always only be using a single `require()` statement to use the library anyway, regardless of how the code is written.\n\n## Better type checking\n\nkind-of is more correct than other type checking libs I've looked at. For example, here are some differing results from other popular libs:\n\n### [typeof](https://github.com/CodingFu/typeof) lib\n\nIncorrectly tests instances of custom constructors (pretty common):\n\n```js\nvar typeOf = require('typeof');\nfunction Test() {}\nconsole.log(typeOf(new Test()));\n//=> 'test'\n```\n\nReturns `object` instead of `arguments`:\n\n```js\nfunction foo() {\n  console.log(typeOf(arguments)) //=> 'object'\n}\nfoo();\n```\n\n### [type-of](https://github.com/ForbesLindesay/type-of) lib\n\nIncorrectly returns `object` for generator functions, buffers, `Map`, `Set`, `WeakMap` and `WeakSet`:\n\n```js\nfunction * foo() {}\nconsole.log(typeOf(foo));\n//=> 'object'\nconsole.log(typeOf(new Buffer('')));\n//=> 'object'\nconsole.log(typeOf(new Map()));\n//=> 'object'\nconsole.log(typeOf(new Set()));\n//=> 'object'\nconsole.log(typeOf(new WeakMap()));\n//=> 'object'\nconsole.log(typeOf(new WeakSet()));\n//=> 'object'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n<details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n<details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n<details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-number](https://www.npmjs.com/package/is-number): Returns true if the value is a number. comprehensive tests. | [homepage](https://github.com/jonschlinkert/is-number \"Returns true if the value is a number. comprehensive tests.\")\n* [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive.  | [homepage](https://github.com/jonschlinkert/is-primitive \"Returns `true` if the value is a primitive. \")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 82 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 3 | [aretecode](https://github.com/aretecode) |\n| 2 | [miguelmota](https://github.com/miguelmota) |\n| 1 | [dtothefp](https://github.com/dtothefp) |\n| 1 | [ksheedlo](https://github.com/ksheedlo) |\n| 1 | [pdehaan](https://github.com/pdehaan) |\n| 1 | [laggingreflex](https://github.com/laggingreflex) |\n| 1 | [charlike](https://github.com/charlike) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on October 13, 2017._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Test()));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:  console.log(typeOf(arguments)) //=> 'object'
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(foo));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Buffer('')));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Map()));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Set()));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakMap()));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakSet()));
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg)](https://www.npmjs.com/package/is-data-descriptor) [![Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm i is-data-descriptor --save\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## Related projects\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor)\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://www.npmjs.com/package/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor)\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-data-descriptor/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 [Jon Schlinkert](https://github.com/jonschlinkert)\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb) on December 28, 2015._",
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./examples/express/node_modules/micromatch/node_modules/snapdragon/README.md:    console.log(node.val)
./examples/express/node_modules/micromatch/node_modules/snapdragon/README.md:console.log(result.output);
./examples/express/node_modules/micromatch/node_modules/snapdragon/index.js: *   console.log(this);          //<= snapdragon instance
./examples/express/node_modules/micromatch/node_modules/snapdragon/index.js: *   console.log(this.parser);   //<= parser instance
./examples/express/node_modules/micromatch/node_modules/snapdragon/index.js: *   console.log(this.compiler); //<= compiler instance
./examples/express/node_modules/micromatch/node_modules/snapdragon/index.js: * console.log(ast);
./examples/express/node_modules/micromatch/node_modules/snapdragon/index.js: * console.log(res.output);
./examples/express/node_modules/micromatch/node_modules/to-regex/package.json:  "readme": "# to-regex [![NPM version](https://img.shields.io/npm/v/to-regex.svg?style=flat)](https://www.npmjs.com/package/to-regex) [![NPM monthly downloads](https://img.shields.io/npm/dm/to-regex.svg?style=flat)](https://npmjs.org/package/to-regex) [![NPM total downloads](https://img.shields.io/npm/dt/to-regex.svg?style=flat)](https://npmjs.org/package/to-regex) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/to-regex.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/to-regex)\n\n> Generate a regex from a string or array of strings.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n- [Install](#install)\n- [Usage](#usage)\n- [Options](#options)\n  * [options.contains](#optionscontains)\n  * [options.negate](#optionsnegate)\n  * [options.nocase](#optionsnocase)\n  * [options.flags](#optionsflags)\n  * [options.cache](#optionscache)\n  * [options.safe](#optionssafe)\n- [About](#about)\n  * [Related projects](#related-projects)\n  * [Author](#author)\n  * [License](#license)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save to-regex\n```\n\n## Usage\n\n```js\nvar toRegex = require('to-regex');\n\nconsole.log(toRegex('foo'));\n//=> /^(?:foo)$/\n\nconsole.log(toRegex('foo', {negate: true}));\n//=> /^(?:(?:(?!^(?:foo)$).)*)$/\n\nconsole.log(toRegex('foo', {contains: true}));\n//=> /(?:foo)/\n\nconsole.log(toRegex(['foo', 'bar'], {negate: true}));\n//=> /^(?:(?:(?!^(?:(?:foo)|(?:bar))$).)*)$/\n\nconsole.log(toRegex(['foo', 'bar'], {negate: true, contains: true}));\n//=> /^(?:(?:(?!(?:(?:foo)|(?:bar))).)*)$/\n```\n\n## Options\n\n### options.contains\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nGenerate a regex that will match any string that _contains_ the given pattern. By default, regex is strict will only return true for exact matches.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {contains: true}));\n//=> /(?:foo)/\n```\n\n### options.negate\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nCreate a regex that will match everything except the given pattern.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {negate: true}));\n//=> /^(?:(?:(?!^(?:foo)$).)*)$/\n```\n\n### options.nocase\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nAdds the `i` flag, to enable case-insensitive matching.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {nocase: true}));\n//=> /^(?:foo)$/i\n```\n\nAlternatively you can pass the flags you want directly on [options.flags](#options.flags).\n\n### options.flags\n\n**Type**: `String`\n\n**Default**: `undefined`\n\nDefine the flags you want to use on the generated regex.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {flags: 'gm'}));\n//=> /^(?:foo)$/gm\nconsole.log(toRegex('foo', {flags: 'gmi', nocase: true})); //<= handles redundancy\n//=> /^(?:foo)$/gmi\n```\n\n### options.cache\n\n**Type**: `Boolean`\n\n**Default**: `true`\n\nGenerated regex is cached based on the provided string and options. As a result, runtime compilation only happens once per pattern (as long as options are also the same), which can result in dramatic speed improvements.\n\nThis also helps with debugging, since adding options and pattern are added to the generated regex.\n\n**Disable caching**\n\n```js\ntoRegex('foo', {cache: false});\n```\n\n### options.safe\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nCheck the generated regular expression with [safe-regex](https://github.com/substack/safe-regex) and throw an error if the regex is potentially unsafe.\n\n**Examples**\n\n```js\nconsole.log(toRegex('(x+x+)+y'));\n//=> /^(?:(x+x+)+y)$/\n\n// The following would throw an error\ntoRegex('(x+x+)+y', {safe: true});\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [has-glob](https://www.npmjs.com/package/has-glob): Returns `true` if an array has a glob pattern. | [homepage](https://github.com/jonschlinkert/has-glob \"Returns `true` if an array has a glob pattern.\")\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [path-regex](https://www.npmjs.com/package/path-regex): Regular expression for matching the parts of a file path. | [homepage](https://github.com/regexps/path-regex \"Regular expression for matching the parts of a file path.\")\n* [to-regex-range](https://www.npmjs.com/package/to-regex-range): Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than… [more](https://github.com/micromatch/to-regex-range) | [homepage](https://github.com/micromatch/to-regex-range \"Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions.\")\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 24, 2018._",
./examples/express/node_modules/micromatch/node_modules/to-regex/node_modules/safe-regex/package.json:  "readme": "# safe-regex\n\ndetect potentially\n[catastrophic](http://regular-expressions.mobi/catastrophic.html)\n[exponential-time](http://perlgeek.de/blog-en/perl-tips/in-search-of-an-exponetial-regexp.html)\nregular expressions by limiting the\n[star height](https://en.wikipedia.org/wiki/Star_height) to 1\n\nWARNING: This module merely *seems* to work given all the catastrophic regular\nexpressions I could find scouring the internet, but I don't have enough of a\nbackground in automata to be absolutely sure that this module will catch all\nexponential-time cases.\n\n[![browser support](https://ci.testling.com/substack/safe-regex.png)](https://ci.testling.com/substack/safe-regex)\n\n[![build status](https://secure.travis-ci.org/substack/safe-regex.png)](http://travis-ci.org/substack/safe-regex)\n\n# example\n\n``` js\nvar safe = require('safe-regex');\nvar regex = process.argv.slice(2).join(' ');\nconsole.log(safe(regex));\n```\n\n```\n$ node safe.js '(x+x+)+y'\nfalse\n$ node safe.js '(beep|boop)*'\ntrue\n$ node safe.js '(a+){10}'\nfalse\n$ node safe.js '\\blocation\\s*:[^:\\n]+\\b(Oakland|San Francisco)\\b'\ntrue\n```\n\n# methods\n\n``` js\nvar safe = require('safe-regex')\n```\n\n## var ok = safe(re, opts={})\n\nReturn a boolean `ok` whether or not the regex `re` is safe and not possibly\ncatastrophic.\n\n`re` can be a `RegExp` object or just a string.\n\nIf the `re` is a string and is an invalid regex, returns `false`.\n\n* `opts.limit` - maximum number of allowed repetitions in the entire regex.\nDefault: `25`.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install safe-regex\n```\n\n# license\n\nMIT\n",
./examples/express/node_modules/micromatch/node_modules/to-regex/node_modules/safe-regex/readme.markdown:[exponential-time](http://perlgeek.de/blog-en/perl-tips/in-search-of-an-exponetial-regexp.html)
./examples/express/node_modules/micromatch/node_modules/to-regex/node_modules/safe-regex/readme.markdown:console.log(safe(regex));
./examples/express/node_modules/micromatch/node_modules/to-regex/node_modules/safe-regex/example/safe.js:console.log(safe(regex));
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo'));
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {negate: true}));
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {contains: true}));
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex(['foo', 'bar'], {negate: true}));
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex(['foo', 'bar'], {negate: true, contains: true}));
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {contains: true}));
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {negate: true}));
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {nocase: true}));
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {flags: 'gm'}));
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {flags: 'gmi', nocase: true})); //<= handles redundancy
./examples/express/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('(x+x+)+y'));
./examples/express/node_modules/micromatch/node_modules/regex-not/package.json:  "readme": "# regex-not [![NPM version](https://img.shields.io/npm/v/regex-not.svg?style=flat)](https://www.npmjs.com/package/regex-not) [![NPM monthly downloads](https://img.shields.io/npm/dm/regex-not.svg?style=flat)](https://npmjs.org/package/regex-not) [![NPM total downloads](https://img.shields.io/npm/dt/regex-not.svg?style=flat)](https://npmjs.org/package/regex-not) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/regex-not.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/regex-not)\n\n> Create a javascript regular expression for matching everything except for the given string.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save regex-not\n```\n\n## Usage\n\n```js\nvar not = require('regex-not');\n```\n\nThe main export is a function that takes a string an options object.\n\n```js\nnot(string[, options]);\n```\n\n**Example**\n\n```js\nvar not = require('regex-not');\nconsole.log(not('foo'));\n//=> /^(?:(?!^(?:foo)$).)+$/\n```\n\n**Strict matching**\n\nBy default, the returned regex is for strictly (not) matching the exact given pattern (in other words, \"match this string if it does NOT _exactly equal_ `foo`\"):\n\n```js\nvar re = not('foo');\nconsole.log(re.test('foo'));     //=> false\nconsole.log(re.test('bar'));     //=> true\nconsole.log(re.test('foobar'));  //=> true\nconsole.log(re.test('barfoo'));  //=> true\n```\n\n### .create\n\nReturns a string to allow you to create your own regex:\n\n```js\nconsole.log(not.create('foo'));\n//=> '(?:(?!^(?:foo)$).)+'\n```\n\n### Options\n\n**options.contains**\n\nYou can relax strict matching by setting `options.contains` to true (in other words, \"match this string if it does NOT _contain_ `foo`\"):\n\n```js\nvar re = not('foo');\nconsole.log(re.test('foo', {contains: true}));     //=> false\nconsole.log(re.test('bar', {contains: true}));     //=> true\nconsole.log(re.test('foobar', {contains: true}));  //=> false\nconsole.log(re.test('barfoo', {contains: true}));  //=> false\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [regex-cache](https://www.npmjs.com/package/regex-cache): Memoize the results of a call to the RegExp constructor, avoiding repetitious runtime compilation of… [more](https://github.com/jonschlinkert/regex-cache) | [homepage](https://github.com/jonschlinkert/regex-cache \"Memoize the results of a call to the RegExp constructor, avoiding repetitious runtime compilation of the same string and options, resulting in surprising performance improvements.\")\n* [to-regex](https://www.npmjs.com/package/to-regex): Generate a regex from a string or array of strings. | [homepage](https://github.com/jonschlinkert/to-regex \"Generate a regex from a string or array of strings.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 9 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 1 | [doowb](https://github.com/doowb) |\n| 1 | [EdwardBetts](https://github.com/EdwardBetts) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 19, 2018._",
./examples/express/node_modules/micromatch/node_modules/regex-not/node_modules/safe-regex/package.json:  "readme": "# safe-regex\n\ndetect potentially\n[catastrophic](http://regular-expressions.mobi/catastrophic.html)\n[exponential-time](http://perlgeek.de/blog-en/perl-tips/in-search-of-an-exponetial-regexp.html)\nregular expressions by limiting the\n[star height](https://en.wikipedia.org/wiki/Star_height) to 1\n\nWARNING: This module merely *seems* to work given all the catastrophic regular\nexpressions I could find scouring the internet, but I don't have enough of a\nbackground in automata to be absolutely sure that this module will catch all\nexponential-time cases.\n\n[![browser support](https://ci.testling.com/substack/safe-regex.png)](https://ci.testling.com/substack/safe-regex)\n\n[![build status](https://secure.travis-ci.org/substack/safe-regex.png)](http://travis-ci.org/substack/safe-regex)\n\n# example\n\n``` js\nvar safe = require('safe-regex');\nvar regex = process.argv.slice(2).join(' ');\nconsole.log(safe(regex));\n```\n\n```\n$ node safe.js '(x+x+)+y'\nfalse\n$ node safe.js '(beep|boop)*'\ntrue\n$ node safe.js '(a+){10}'\nfalse\n$ node safe.js '\\blocation\\s*:[^:\\n]+\\b(Oakland|San Francisco)\\b'\ntrue\n```\n\n# methods\n\n``` js\nvar safe = require('safe-regex')\n```\n\n## var ok = safe(re, opts={})\n\nReturn a boolean `ok` whether or not the regex `re` is safe and not possibly\ncatastrophic.\n\n`re` can be a `RegExp` object or just a string.\n\nIf the `re` is a string and is an invalid regex, returns `false`.\n\n* `opts.limit` - maximum number of allowed repetitions in the entire regex.\nDefault: `25`.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install safe-regex\n```\n\n# license\n\nMIT\n",
./examples/express/node_modules/micromatch/node_modules/regex-not/node_modules/safe-regex/readme.markdown:[exponential-time](http://perlgeek.de/blog-en/perl-tips/in-search-of-an-exponetial-regexp.html)
./examples/express/node_modules/micromatch/node_modules/regex-not/node_modules/safe-regex/readme.markdown:console.log(safe(regex));
./examples/express/node_modules/micromatch/node_modules/regex-not/node_modules/safe-regex/example/safe.js:console.log(safe(regex));
./examples/express/node_modules/micromatch/node_modules/regex-not/README.md:console.log(not('foo'));
./examples/express/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('foo'));     //=> false
./examples/express/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('bar'));     //=> true
./examples/express/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('foobar'));  //=> true
./examples/express/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('barfoo'));  //=> true
./examples/express/node_modules/micromatch/node_modules/regex-not/README.md:console.log(not.create('foo'));
./examples/express/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('foo', {contains: true}));     //=> false
./examples/express/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('bar', {contains: true}));     //=> true
./examples/express/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('foobar', {contains: true}));  //=> false
./examples/express/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('barfoo', {contains: true}));  //=> false
./examples/express/node_modules/micromatch/node_modules/regex-not/index.js: & console.log(not('foo'));
./examples/express/node_modules/micromatch/node_modules/regex-not/index.js: & console.log(not.create('foo'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/package.json:    "helper-changelog": "^0.3.0",
./examples/express/node_modules/micromatch/node_modules/nanomatch/package.json:      "helper-changelog"
./examples/express/node_modules/micromatch/node_modules/nanomatch/package.json:  "readme": "# nanomatch [![NPM version](https://img.shields.io/npm/v/nanomatch.svg?style=flat)](https://www.npmjs.com/package/nanomatch) [![NPM monthly downloads](https://img.shields.io/npm/dm/nanomatch.svg?style=flat)](https://npmjs.org/package/nanomatch) [![NPM total downloads](https://img.shields.io/npm/dt/nanomatch.svg?style=flat)](https://npmjs.org/package/nanomatch) [![Linux Build Status](https://img.shields.io/travis/micromatch/nanomatch.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/nanomatch) [![Windows Build Status](https://img.shields.io/appveyor/ci/micromatch/nanomatch.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/micromatch/nanomatch)\n\n> Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash 4.3 wildcard support only (no support for exglobs, posix brackets or braces)\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Table of Contents\n\n<details>\n<summary><strong>Details</strong></summary>\n\n- [Install](#install)\n- [What is nanomatch?](#what-is-nanomatch)\n- [Getting started](#getting-started)\n  * [Installing nanomatch](#installing-nanomatch)\n  * [Usage](#usage)\n- [Documentation](#documentation)\n  * [Escaping](#escaping)\n- [API](#api)\n- [Options](#options)\n  * [options.basename](#optionsbasename)\n  * [options.bash](#optionsbash)\n  * [options.cache](#optionscache)\n  * [options.dot](#optionsdot)\n  * [options.failglob](#optionsfailglob)\n  * [options.ignore](#optionsignore)\n  * [options.matchBase](#optionsmatchbase)\n  * [options.nocase](#optionsnocase)\n  * [options.nodupes](#optionsnodupes)\n  * [options.noglobstar](#optionsnoglobstar)\n  * [options.nonegate](#optionsnonegate)\n  * [options.nonull](#optionsnonull)\n  * [options.nullglob](#optionsnullglob)\n  * [options.slash](#optionsslash)\n  * [options.star](#optionsstar)\n  * [options.snapdragon](#optionssnapdragon)\n  * [options.sourcemap](#optionssourcemap)\n  * [options.unescape](#optionsunescape)\n  * [options.unixify](#optionsunixify)\n- [Features](#features)\n- [Bash expansion libs](#bash-expansion-libs)\n- [Benchmarks](#benchmarks)\n  * [Running benchmarks](#running-benchmarks)\n  * [Nanomatch vs. Minimatch vs. Multimatch](#nanomatch-vs-minimatch-vs-multimatch)\n- [About](#about)\n\n</details>\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save nanomatch\n```\n\n<details>\n<summary><strong>Release history</strong></summary>\n\n## History\n\n### key\n\nChangelog entries are classified using the following labels _(from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog)_):\n\n* `added`: for new features\n* `changed`: for changes in existing functionality\n* `deprecated`: for once-stable features removed in upcoming releases\n* `removed`: for deprecated features removed in this release\n* `fixed`: for any bug fixes\n* `bumped`: updated dependencies, only minor or higher will be listed.\n\n### [1.1.0](https://github.com/micromatch/nanomatch/compare/1.0.4...1.1.0) - 2017-04-11\n\n**Fixed**\n\n* adds support for unclosed quotes\n\n**Added**\n\n* adds support for `options.noglobstar`\n\n### [1.0.4](https://github.com/micromatch/nanomatch/compare/1.0.3...1.0.4) - 2017-04-06\n\nHousekeeping updates. Adds documentation section about escaping, cleans up utils.\n\n### [1.0.3](https://github.com/micromatch/nanomatch/compare/1.0.1...1.0.3) - 2017-04-06\n\nThis release includes fixes for windows path edge cases and other improvements for stricter adherence to bash spec.\n\n**Fixed**\n\n* More windows path edge cases\n\n**Added**\n\n* Support for bash-like quoted strings for escaping sequences of characters, such as `foo/\"**\"/bar` where `**` should be matched literally and not evaluated as special characters.\n\n### [1.0.1](https://github.com/micromatch/nanomatch/compare/1.0.0...1.0.1) - 2016-12-12\n\n**Added**\n\n* Support for windows path edge cases where backslashes are used in brackets or other unusual combinations.\n\n### [1.0.0](https://github.com/micromatch/nanomatch/compare/0.1.0...1.0.0) - 2016-12-12\n\nStable release.\n\n### [0.1.0] - 2016-10-08\n\nFirst release.\n\n</details>\n\n## What is nanomatch?\n\nNanomatch is a fast and accurate glob matcher with full support for standard Bash glob features, including the following \"metacharacters\": `*`, `**`, `?` and `[...]`.\n\n**Learn more**\n\n* [Getting started](#getting-started): learn how to install and begin using nanomatch\n* [Features](#features): jump to info about supported patterns, and a glob matching reference\n* [API documentation](#api): jump to available options and methods\n* [Unit tests](test): visit unit tests. there is no better way to learn a code library than spending time the unit tests. Nanomatch has 36,000 unit tests - go become a glob matching ninja!\n\n<details>\n<summary><strong>How is this different?</strong></summary>\n\n**Speed and accuracy**\n\nNanomatch uses [snapdragon](https://github.com/jonschlinkert/snapdragon) for parsing and compiling globs, which results in:\n\n* Granular control over the entire conversion process in a way that is easy to understand, reason about, and customize.\n* Faster matching, from a combination of optimized glob patterns and (optional) caching.\n* Much greater accuracy than minimatch. In fact, nanomatch passes _all of the spec tests_ from bash, including some that bash still fails. However, since there is no real specification for globs, if you encounter a pattern that yields unexpected match results [after researching previous issues](../../issues), [please let us know](../../issues/new).\n\n**Basic globbing only**\n\nNanomatch supports [basic globbing only](#features), which is limited to `*`, `**`, `?` and regex-like brackets.\n\nIf you need support for the other [bash \"expansion\" types](#bash-expansion-libs) (in addition to the wildcard matching provided by nanomatch), consider using [micromatch](https://github.com/micromatch/micromatch) instead. _(micromatch >=3.0.0  uses the nanomatch parser and compiler for basic glob matching)_\n\n</details>\n\n## Getting started\n\n### Installing nanomatch\n\n**Install with [yarn](https://yarnpkg.com/)**\n\n```sh\n$ yarn add nanomatch\n```\n\n**Install with [npm](https://npmjs.com)**\n\n```sh\n$ npm install nanomatch\n```\n\n### Usage\n\nAdd nanomatch to your project using node's `require()` system:\n\n```js\nvar nanomatch = require('nanomatch');\n\n// the main export is a function that takes an array of strings to match\n// and a string or array of patterns to use for matching\nnanomatch(list, patterns[, options]);\n```\n\n**Params**\n\n* `list` **{String|Array}**: List of strings to perform matches against. This is often a list of file paths.\n* `patterns` **{String|Array}**: One or more [glob paterns](#features) to use for matching.\n* `options` **{Object}**: Any [supported options](#options) may be passed\n\n**Examples**\n\n```js\nvar nm = require('nanomatch');\nconsole.log(nm(['a', 'b/b', 'c/c/c'], '*'));\n//=> ['a']\n\nconsole.log(nm(['a', 'b/b', 'c/c/c'], '*/*'));\n//=> ['b/b']\n\nconsole.log(nm(['a', 'b/b', 'c/c/c'], '**'));\n//=> ['a', 'b/b', 'c/c/c']\n```\n\nSee the [API documentation](#api) for available methods and [options](https://github.com/einaros/options.js).\n\n## Documentation\n\n### Escaping\n\n_Backslashes and quotes_ can be used to escape characters, forcing nanomatch to regard those characters as a literal characters.\n\n**Backslashes**\n\nUse backslashes to escape single characters. For example, the following pattern would match `foo/*/bar` exactly:\n\n```js\n'foo/\\*/bar'\n```\n\nThe following pattern would match `foo/` followed by a literal `*`, followed by zero or more of any characters besides `/`, followed by `/bar`.\n\n```js\n'foo/\\**/bar'\n```\n\n**Quoted strings**\n\nUse single or double quotes to escape sequences of characters. For example, the following patterns would match `foo/**/bar` exactly:\n\n```js\n'foo/\"**\"/bar'\n'foo/\\'**\\'/bar'\n\"foo/'**'/bar\"\n```\n\n**Matching literal quotes**\n\nIf you need to match quotes literally, you can escape them as well. For example, the following will match `foo/\"*\"/bar`, `foo/\"a\"/bar`, `foo/\"b\"/bar`, or `foo/\"c\"/bar`:\n\n```js\n'foo/\\\\\"*\\\\\"/bar'\n```\n\nAnd the following will match `foo/'*'/bar`, `foo/'a'/bar`, `foo/'b'/bar`, or `foo/'c'/bar`:\n\n```js\n'foo/\\\\\\'*\\\\\\'/bar'\n```\n\n## API\n\n### [nanomatch](index.js#L40)\n\nThe main function takes a list of strings and one or more glob patterns to use for matching.\n\n**Params**\n\n* `list` **{Array}**: A list of strings to match\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm(list, patterns[, options]);\n\nconsole.log(nm(['a.js', 'a.txt'], ['*.js']));\n//=> [ 'a.js' ]\n```\n\n### [.match](index.js#L106)\n\nSimilar to the main function, but `pattern` must be a string.\n\n**Params**\n\n* `list` **{Array}**: Array of strings to match\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.match(list, pattern[, options]);\n\nconsole.log(nm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));\n//=> ['a.a', 'a.aa']\n```\n\n### [.isMatch](index.js#L167)\n\nReturns true if the specified `string` matches the given glob `pattern`.\n\n**Params**\n\n* `string` **{String}**: String to match\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if the string matches the glob pattern.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.isMatch(string, pattern[, options]);\n\nconsole.log(nm.isMatch('a.a', '*.a'));\n//=> true\nconsole.log(nm.isMatch('a.b', '*.a'));\n//=> false\n```\n\n### [.some](index.js#L205)\n\nReturns true if some of the elements in the given `list` match any of the given glob `patterns`.\n\n**Params**\n\n* `list` **{String|Array}**: The string or array of strings to test. Returns as soon as the first match is found.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.some(list, patterns[, options]);\n\nconsole.log(nm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// true\nconsole.log(nm.some(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n### [.every](index.js#L243)\n\nReturns true if every element in the given `list` matches at least one of the given glob `patterns`.\n\n**Params**\n\n* `list` **{String|Array}**: The string or array of strings to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.every(list, patterns[, options]);\n\nconsole.log(nm.every('foo.js', ['foo.js']));\n// true\nconsole.log(nm.every(['foo.js', 'bar.js'], ['*.js']));\n// true\nconsole.log(nm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// false\nconsole.log(nm.every(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n### [.any](index.js#L277)\n\nReturns true if **any** of the given glob `patterns` match the specified `string`.\n\n**Params**\n\n* `str` **{String|Array}**: The string to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.any(string, patterns[, options]);\n\nconsole.log(nm.any('a.a', ['b.*', '*.a']));\n//=> true\nconsole.log(nm.any('a.a', 'b.*'));\n//=> false\n```\n\n### [.all](index.js#L325)\n\nReturns true if **all** of the given `patterns` match the specified string.\n\n**Params**\n\n* `str` **{String|Array}**: The string to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.all(string, patterns[, options]);\n\nconsole.log(nm.all('foo.js', ['foo.js']));\n// true\n\nconsole.log(nm.all('foo.js', ['*.js', '!foo.js']));\n// false\n\nconsole.log(nm.all('foo.js', ['*.js', 'foo.js']));\n// true\n\nconsole.log(nm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n// true\n```\n\n### [.not](index.js#L359)\n\nReturns a list of strings that _**do not match any**_ of the given `patterns`.\n\n**Params**\n\n* `list` **{Array}**: Array of strings to match.\n* `patterns` **{String|Array}**: One or more glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of strings that **do not match** the given patterns.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.not(list, patterns[, options]);\n\nconsole.log(nm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n//=> ['b.b', 'c.c']\n```\n\n### [.contains](index.js#L394)\n\nReturns true if the given `string` contains the given pattern. Similar to [.isMatch](#isMatch) but the pattern can match any part of the string.\n\n**Params**\n\n* `str` **{String}**: The string to match.\n* `patterns` **{String|Array}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if the patter matches any part of `str`.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.contains(string, pattern[, options]);\n\nconsole.log(nm.contains('aa/bb/cc', '*b'));\n//=> true\nconsole.log(nm.contains('aa/bb/cc', '*d'));\n//=> false\n```\n\n### [.matchKeys](index.js#L450)\n\nFilter the keys of the given object with the given `glob` pattern and `options`. Does not attempt to match nested keys. If you need this feature, use [glob-object](https://github.com/jonschlinkert/glob-object) instead.\n\n**Params**\n\n* `object` **{Object}**: The object with keys to filter.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Object}**: Returns an object with only keys that match the given patterns.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.matchKeys(object, patterns[, options]);\n\nvar obj = { aa: 'a', ab: 'b', ac: 'c' };\nconsole.log(nm.matchKeys(obj, '*b'));\n//=> { ab: 'b' }\n```\n\n### [.matcher](index.js#L479)\n\nReturns a memoized matcher function from the given glob `pattern` and `options`. The returned function takes a string to match as its only argument and returns true if the string is a match.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed.\n* `returns` **{Function}**: Returns a matcher function.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.matcher(pattern[, options]);\n\nvar isMatch = nm.matcher('*.!(*a)');\nconsole.log(isMatch('a.a'));\n//=> false\nconsole.log(isMatch('a.b'));\n//=> true\n```\n\n### [.capture](index.js#L560)\n\nReturns an array of matches captured by `pattern` in `string, or`null` if the pattern did not match.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `string` **{String}**: String to match\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns an array of captures if the string matches the glob pattern, otherwise `null`.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.capture(pattern, string[, options]);\n\nconsole.log(nm.capture('test/*.js', 'test/foo.js'));\n//=> ['foo']\nconsole.log(nm.capture('test/*.js', 'foo/bar.css'));\n//=> null\n```\n\n### [.makeRe](index.js#L595)\n\nCreate a regular expression from the given glob `pattern`.\n\n**Params**\n\n* `pattern` **{String}**: A glob pattern to convert to regex.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed.\n* `returns` **{RegExp}**: Returns a regex created from the given pattern.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.makeRe(pattern[, options]);\n\nconsole.log(nm.makeRe('*.js'));\n//=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n```\n\n### [.create](index.js#L658)\n\nParses the given glob `pattern` and returns an object with the compiled `output` and optional source `map`.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern to parse and compile.\n* `options` **{Object}**: Any [options](#options) to change how parsing and compiling is performed.\n* `returns` **{Object}**: Returns an object with the parsed AST, compiled string and optional source map.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.create(pattern[, options]);\n\nconsole.log(nm.create('abc/*.js'));\n// { options: { source: 'string', sourcemap: true },\n//   state: {},\n//   compilers:\n//    { ... },\n//   output: '(\\\\.[\\\\\\\\\\\\/])?abc\\\\/(?!\\\\.)(?=.)[^\\\\/]*?\\\\.js',\n//   ast:\n//    { type: 'root',\n//      errors: [],\n//      nodes:\n//       [ ... ],\n//      dot: false,\n//      input: 'abc/*.js' },\n//   parsingErrors: [],\n//   map:\n//    { version: 3,\n//      sources: [ 'string' ],\n//      names: [],\n//      mappings: 'AAAA,GAAG,EAAC,kBAAC,EAAC,EAAE',\n//      sourcesContent: [ 'abc/*.js' ] },\n//   position: { line: 1, column: 28 },\n//   content: {},\n//   files: {},\n//   idx: 6 }\n```\n\n### [.parse](index.js#L697)\n\nParse the given `str` with the given `options`.\n\n**Params**\n\n* `str` **{String}**\n* `options` **{Object}**\n* `returns` **{Object}**: Returns an AST\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.parse(pattern[, options]);\n\nvar ast = nm.parse('a/{b,c}/d');\nconsole.log(ast);\n// { type: 'root',\n//   errors: [],\n//   input: 'a/{b,c}/d',\n//   nodes:\n//    [ { type: 'bos', val: '' },\n//      { type: 'text', val: 'a/' },\n//      { type: 'brace',\n//        nodes:\n//         [ { type: 'brace.open', val: '{' },\n//           { type: 'text', val: 'b,c' },\n//           { type: 'brace.close', val: '}' } ] },\n//      { type: 'text', val: '/d' },\n//      { type: 'eos', val: '' } ] }\n```\n\n### [.compile](index.js#L745)\n\nCompile the given `ast` or string with the given `options`.\n\n**Params**\n\n* `ast` **{Object|String}**\n* `options` **{Object}**\n* `returns` **{Object}**: Returns an object that has an `output` property with the compiled string.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.compile(ast[, options]);\n\nvar ast = nm.parse('a/{b,c}/d');\nconsole.log(nm.compile(ast));\n// { options: { source: 'string' },\n//   state: {},\n//   compilers:\n//    { eos: [Function],\n//      noop: [Function],\n//      bos: [Function],\n//      brace: [Function],\n//      'brace.open': [Function],\n//      text: [Function],\n//      'brace.close': [Function] },\n//   output: [ 'a/(b|c)/d' ],\n//   ast:\n//    { ... },\n//   parsingErrors: [] }\n```\n\n### [.clearCache](index.js#L768)\n\nClear the regex cache.\n\n**Example**\n\n```js\nnm.clearCache();\n```\n\n## Options\n\n<details>\n<summary><strong>basename</strong></summary>\n\n### options.basename\n\nAllow glob patterns without slashes to match a file path based on its basename. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `matchBase`.\n\nType: `boolean`\n\nDefault: `false`\n\n**Example**\n\n```js\nnm(['a/b.js', 'a/c.md'], '*.js');\n//=> []\n\nnm(['a/b.js', 'a/c.md'], '*.js', {matchBase: true});\n//=> ['a/b.js']\n```\n\n</details>\n\n<details>\n<summary><strong>bash</strong></summary>\n\n### options.bash\n\nEnabled by default, this option enforces bash-like behavior with stars immediately following a bracket expression. Bash bracket expressions are similar to regex character classes, but unlike regex, a star following a bracket expression **does not repeat the bracketed characters**. Instead, the star is treated the same as an other star.\n\nType: `boolean`\n\nDefault: `true`\n\n**Example**\n\n```js\nvar files = ['abc', 'ajz'];\nconsole.log(nm(files, '[a-c]*'));\n//=> ['abc', 'ajz']\n\nconsole.log(nm(files, '[a-c]*', {bash: false}));\n```\n\n</details>\n\n<details>\n<summary><strong>cache</strong></summary>\n\n### options.cache\n\nDisable regex and function memoization.\n\nType: `boolean`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>dot</strong></summary>\n\n### options.dot\n\nMatch dotfiles. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `dot`.\n\nType: `boolean`\n\nDefault: `false`\n\n</details>\n\n<details>\n<summary><strong>failglob</strong></summary>\n\n### options.failglob\n\nSimilar to the `--failglob` behavior in Bash, throws an error when no matches are found.\n\nType: `boolean`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>ignore</strong></summary>\n\n### options.ignore\n\nString or array of glob patterns to match files to ignore.\n\nType: `String|Array`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>matchBase</strong></summary>\n\n### options.matchBase\n\nAlias for [options.basename](#options-basename).\n\n</details>\n\n<details>\n<summary><strong>nocase</strong></summary>\n\n### options.nocase\n\nUse a case-insensitive regex for matching files. Same behavior as [minimatch](https://github.com/isaacs/minimatch).\n\nType: `boolean`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>nodupes</strong></summary>\n\n### options.nodupes\n\nRemove duplicate elements from the result array.\n\nType: `boolean`\n\nDefault: `true` (enabled by default)\n\n**Example**\n\nExample of using the `unescape` and `nodupes` options together:\n\n```js\nnm.match(['a/b/c', 'a/b/c'], '**');\n//=> ['abc']\n\nnm.match(['a/b/c', 'a/b/c'], '**', {nodupes: false});\n//=> ['a/b/c', 'a/b/c']\n```\n\n</details>\n\n<details>\n<summary><strong>nonegate</strong></summary>\n\n### options.noglobstar\n\nDisable matching with globstars (`**`).\n\nType: `boolean`\n\nDefault: `undefined`\n\n```js\nnm(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**');\n//=> ['a/b', 'a/b/c', 'a/b/c/d']\n\nnm(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**', {noglobstar: true});\n//=> ['a/b']\n```\n\n</details>\n\n<details>\n<summary><strong>nonegate</strong></summary>\n\n### options.nonegate\n\nDisallow negation (`!`) patterns, and treat leading `!` as a literal character to match.\n\nType: `boolean`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>nonull</strong></summary>\n\n### options.nonull\n\nAlias for [options.nullglob](#options-nullglob).\n\n</details>\n\n<details>\n<summary><strong>nullglob</strong></summary>\n\n### options.nullglob\n\nIf `true`, when no matches are found the actual (arrayified) glob pattern is returned instead of an empty array. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `nonull`.\n\nType: `boolean`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong><a name=\"slash\">slash</a></strong></summary>\n\n### options.slash\n\nCustomize the slash character(s) to use for matching.\n\nType: `string|function`\n\nDefault: `[/\\\\]` (forward slash and backslash)\n\n</details>\n\n<details>\n<summary><strong><a name=\"star\">star</a></strong></summary>\n\n### options.star\n\nCustomize the star character(s) to use for matching. It's not recommended that you modify this unless you have advanced knowledge of the compiler and matching rules.\n\nType: `string|function`\n\nDefault: `[^/\\\\]*?`\n\n</details>\n\n<details>\n<summary><strong><a name=\"snapdragon\">snapdragon</a></strong></summary>\n\n### options.snapdragon\n\nPass your own instance of [snapdragon](https://github.com/jonschlinkert/snapdragon) to customize parsers or compilers.\n\nType: `object`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>snapdragon</strong></summary>\n\n### options.sourcemap\n\nGenerate a source map by enabling the `sourcemap` option with the `.parse`, `.compile`, or `.create` methods.\n\n**Examples**\n\n```js\nvar nm = require('nanomatch');\n\nvar res = nm.create('abc/*.js', {sourcemap: true});\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'string' ],\n//   names: [],\n//   mappings: 'AAAA,GAAG,EAAC,iBAAC,EAAC,EAAE',\n//   sourcesContent: [ 'abc/*.js' ] }\n\nvar ast = nm.parse('abc/**/*.js');\nvar res = nm.compile(ast, {sourcemap: true});\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'string' ],\n//   names: [],\n//   mappings: 'AAAA,GAAG,EAAC,2BAAE,EAAC,iBAAC,EAAC,EAAE',\n//   sourcesContent: [ 'abc/**/*.js' ] }\n```\n\n</details>\n\n<details>\n<summary><strong>unescape</strong></summary>\n\n### options.unescape\n\nRemove backslashes from returned matches.\n\nType: `boolean`\n\nDefault: `undefined`\n\n**Example**\n\nIn this example we want to match a literal `*`:\n\n```js\nnm.match(['abc', 'a\\\\*c'], 'a\\\\*c');\n//=> ['a\\\\*c']\n\nnm.match(['abc', 'a\\\\*c'], 'a\\\\*c', {unescape: true});\n//=> ['a*c']\n```\n\n</details>\n\n<details>\n<summary><strong>unixify</strong></summary>\n\n### options.unixify\n\nConvert path separators on returned files to posix/unix-style forward slashes.\n\nType: `boolean`\n\nDefault: `true`\n\n**Example**\n\n```js\nnm.match(['a\\\\b\\\\c'], 'a/**');\n//=> ['a/b/c']\n\nnm.match(['a\\\\b\\\\c'], {unixify: false});\n//=> ['a\\\\b\\\\c']\n```\n\n</details>\n\n## Features\n\nNanomatch has full support for standard Bash glob features, including the following \"metacharacters\": `*`, `**`, `?` and `[...]`.\n\nHere are some examples of how they work:\n\n| **Pattern** | **Description** | \n| --- | --- |\n| `*` | Matches any string except for `/`, leading `.`, or `/.` inside a path |\n| `**` | Matches any string including `/`, but not a leading `.` or `/.` inside a path. More than two stars (e.g. `***` is treated the same as one star, and `**` loses its special meaning | when it's not the only thing in a path segment, per Bash specifications) |\n| `foo*` | Matches any string beginning with `foo` |\n| `*bar*` | Matches any string containing `bar` (beginning, middle or end) |\n| `*.min.js` | Matches any string ending with `.min.js` |\n| `[abc]*.js` | Matches any string beginning with `a`, `b`, or `c` and ending with `.js` |\n| `abc?` | Matches `abcd` or `abcz` but not `abcde` |\n\nThe exceptions noted for `*` apply to all patterns that contain a `*`.\n\n**Not supported**\n\nThe following extended-globbing features are not supported:\n\n* [brace expansion](https://github.com/jonschlinkert/braces) (e.g. `{a,b,c}`)\n* [extglobs](https://github.com/jonschlinkert/extglob) (e.g. `@(a|!(c|d))`)\n* [POSIX brackets](https://github.com/jonschlinkert/expand-brackets) (e.g. `[[:alpha:][:digit:]]`)\n\nIf you need any of these features consider using [micromatch](https://github.com/micromatch/micromatch) instead.\n\n## Bash expansion libs\n\nNanomatch is part of a suite of libraries aimed at bringing the power and expressiveness of [Bash's](https://www.gnu.org/software/bash/) matching and expansion capabilities to JavaScript, _and - as you can see by the [benchmarks](#benchmarks) - without sacrificing speed_.\n\n| **Related library** | **Matching Type** | **Example** | **Description** | \n| --- | --- | --- | --- |\n| `nanomatch` (you are here) | Wildcards | `*` | [Filename expansion](https://www.gnu.org/software/bash/manual/html_node/Filename-Expansion.html#Filename-Expansion), also referred to as globbing and pathname expansion, allows the use of [wildcards](#features) for matching. |\n| [expand-tilde](https://github.com/jonschlinkert/expand-tilde) | Tildes | `~` | [Tilde expansion](https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html#Tilde-Expansion) converts the leading tilde in a file path to the user home directory. |\n| [braces](https://github.com/jonschlinkert/braces) | Braces | `{a,b,c}` | [Brace expansion](https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html) |\n| [expand-brackets](https://github.com/jonschlinkert/expand-brackets) | Brackets | `[[:alpha:]]` | [POSIX character classes](https://www.gnu.org/software/grep/manual/html_node/Character-Classes-and-Bracket-Expressions.html) (also referred to as POSIX brackets, or POSIX character classes) |\n| [extglob](https://github.com/jonschlinkert/extglob) | Parens | `!(a\\ | b)` | [Extglobs](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching) |\n| [micromatch](https://github.com/micromatch/micromatch) | All | all | Micromatch is built on top of the other libraries. |\n\nThere are many resources available on the web if you want to dive deeper into how these features work in Bash.\n\n## Benchmarks\n\n### Running benchmarks\n\nInstall dev dependencies:\n\n```bash\nnpm i -d && node benchmark\n```\n\n### Nanomatch vs. Minimatch vs. Multimatch\n\n```bash\n# globstar-basic (182 bytes)\n  minimatch x 69,512 ops/sec ±1.92% (88 runs sampled)\n  multimatch x 63,376 ops/sec ±1.41% (89 runs sampled)\n  nanomatch x 432,451 ops/sec ±0.92% (88 runs sampled)\n\n  fastest is nanomatch (by 651% avg)\n\n# large-list-globstar (485686 bytes)\n  minimatch x 34.02 ops/sec ±1.42% (59 runs sampled)\n  multimatch x 33.58 ops/sec ±1.97% (58 runs sampled)\n  nanomatch x 483 ops/sec ±1.06% (86 runs sampled)\n\n  fastest is nanomatch (by 1429% avg)\n\n# long-list-globstar (194085 bytes)\n  minimatch x 383 ops/sec ±0.74% (90 runs sampled)\n  multimatch x 378 ops/sec ±0.59% (89 runs sampled)\n  nanomatch x 990 ops/sec ±1.14% (85 runs sampled)\n\n  fastest is nanomatch (by 260% avg)\n\n# negation-basic (132 bytes)\n  minimatch x 242,145 ops/sec ±1.17% (89 runs sampled)\n  multimatch x 76,403 ops/sec ±0.78% (92 runs sampled)\n  nanomatch x 537,253 ops/sec ±1.44% (86 runs sampled)\n\n  fastest is nanomatch (by 337% avg)\n\n# not-glob-basic (93 bytes)\n  minimatch x 252,402 ops/sec ±1.33% (89 runs sampled)\n  multimatch x 209,954 ops/sec ±1.30% (90 runs sampled)\n  nanomatch x 1,716,468 ops/sec ±1.13% (86 runs sampled)\n\n  fastest is nanomatch (by 742% avg)\n\n# star-basic (93 bytes)\n  minimatch x 182,780 ops/sec ±1.41% (91 runs sampled)\n  multimatch x 153,210 ops/sec ±0.72% (89 runs sampled)\n  nanomatch x 599,621 ops/sec ±1.22% (90 runs sampled)\n\n  fastest is nanomatch (by 357% avg)\n\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [extglob](https://www.npmjs.com/package/extglob): Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob… [more](https://github.com/micromatch/extglob) | [homepage](https://github.com/micromatch/extglob \"Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\")\n* [is-extglob](https://www.npmjs.com/package/is-extglob): Returns true if a string has an extglob. | [homepage](https://github.com/jonschlinkert/is-extglob \"Returns true if a string has an extglob.\")\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/micromatch/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 164 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 1 | [devongovett](https://github.com/devongovett) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 18, 2018._",
./examples/express/node_modules/micromatch/node_modules/nanomatch/node_modules/is-windows/package.json:  "readme": "# is-windows [![NPM version](https://img.shields.io/npm/v/is-windows.svg?style=flat)](https://www.npmjs.com/package/is-windows) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-windows.svg?style=flat)](https://npmjs.org/package/is-windows) [![NPM total downloads](https://img.shields.io/npm/dt/is-windows.svg?style=flat)](https://npmjs.org/package/is-windows) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-windows.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-windows)\n\n> Returns true if the platform is windows. UMD module, works with node.js, commonjs, browser, AMD, electron, etc.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-windows\n```\n\n## Heads up!\n\nAs of `v0.2.0` this module always returns a function.\n\n## Node.js usage\n\n```js\nvar isWindows = require('is-windows');\n\nconsole.log(isWindows());\n//=> returns true if the platform is windows\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-absolute](https://www.npmjs.com/package/is-absolute): Returns true if a file path is absolute. Does not rely on the path module… [more](https://github.com/jonschlinkert/is-absolute) | [homepage](https://github.com/jonschlinkert/is-absolute \"Returns true if a file path is absolute. Does not rely on the path module and can be used as a polyfill for node.js native `path.isAbolute`.\")\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-relative](https://www.npmjs.com/package/is-relative): Returns `true` if the path appears to be relative. | [homepage](https://github.com/jonschlinkert/is-relative \"Returns `true` if the path appears to be relative.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n* [window-size](https://www.npmjs.com/package/window-size): Reliable way to get the height and width of terminal/console, since it's not calculated or… [more](https://github.com/jonschlinkert/window-size) | [homepage](https://github.com/jonschlinkert/window-size \"Reliable way to get the height and width of terminal/console, since it's not calculated or updated the same way on all platforms, environments and node.js versions.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 11 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 4 | [doowb](https://github.com/doowb) |\n| 1 | [SimenB](https://github.com/SimenB) |\n| 1 | [gucong3000](https://github.com/gucong3000) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 14, 2018._",
./examples/express/node_modules/micromatch/node_modules/nanomatch/node_modules/is-windows/README.md:console.log(isWindows());
./examples/express/node_modules/micromatch/node_modules/nanomatch/node_modules/is-odd/node_modules/is-number/index.js:    // an empty string would be coerced to true with the below logic
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:Changelog entries are classified using the following labels _(from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog)_):
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(['a', 'b/b', 'c/c/c'], '*'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(['a', 'b/b', 'c/c/c'], '*/*'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(['a', 'b/b', 'c/c/c'], '**'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(['a.js', 'a.txt'], ['*.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.isMatch('a.a', '*.a'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.isMatch('a.b', '*.a'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.some(['foo.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.every('foo.js', ['foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.every(['foo.js', 'bar.js'], ['*.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.every(['foo.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.any('a.a', ['b.*', '*.a']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.any('a.a', 'b.*'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.all('foo.js', ['foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.all('foo.js', ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.all('foo.js', ['*.js', 'foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.not(['a.a', 'b.b', 'c.c'], '*.a'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.contains('aa/bb/cc', '*b'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.contains('aa/bb/cc', '*d'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.matchKeys(obj, '*b'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(isMatch('a.a'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(isMatch('a.b'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.capture('test/*.js', 'test/foo.js'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.capture('test/*.js', 'foo/bar.css'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.makeRe('*.js'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.create('abc/*.js'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(ast);
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.compile(ast));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(files, '[a-c]*'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(files, '[a-c]*', {bash: false}));
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(res.map);
./examples/express/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(res.map);
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm(['a.js', 'a.txt'], ['*.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.isMatch('a.a', '*.a'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.isMatch('a.b', '*.a'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.some(['foo.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.every('foo.js', ['foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.every(['foo.js', 'bar.js'], ['*.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.every(['foo.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.any('a.a', ['b.*', '*.a']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.any('a.a', 'b.*'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.all('foo.js', ['foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.all('foo.js', ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.all('foo.js', ['*.js', 'foo.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.not(['a.a', 'b.b', 'c.c'], '*.a'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.contains('aa/bb/cc', '*b'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.contains('aa/bb/cc', '*d'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.matchKeys(obj, '*b'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(isMatch('a.a'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(isMatch('a.b'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.capture('test/*.js', 'test/foo.js'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.capture('test/*.js', 'foo/bar.css'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.makeRe('*.js'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.create('abc/*.js'));
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(ast);
./examples/express/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.compile(ast));
./examples/express/node_modules/micromatch/node_modules/array-unique/package.json:  "readme": "# array-unique [![NPM version](https://img.shields.io/npm/v/array-unique.svg?style=flat)](https://www.npmjs.com/package/array-unique) [![NPM downloads](https://img.shields.io/npm/dm/array-unique.svg?style=flat)](https://npmjs.org/package/array-unique) [![Build Status](https://img.shields.io/travis/jonschlinkert/array-unique.svg?style=flat)](https://travis-ci.org/jonschlinkert/array-unique)\n\nRemove duplicate values from an array. Fastest ES5 implementation.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save array-unique\n```\n\n## Usage\n\n```js\nvar unique = require('array-unique');\n\nvar arr = ['a', 'b', 'c', 'c'];\nconsole.log(unique(arr)) //=> ['a', 'b', 'c']\nconsole.log(arr)         //=> ['a', 'b', 'c']\n\n/* The above modifies the input array. To prevent that at a slight performance cost: */\nvar unique = require(\"array-unique\").immutable;\n\nvar arr = ['a', 'b', 'c', 'c'];\nconsole.log(unique(arr)) //=> ['a', 'b', 'c']\nconsole.log(arr)         //=> ['a', 'b', 'c', 'c']\n```\n\n## About\n\n### Related projects\n\n* [arr-diff](https://www.npmjs.com/package/arr-diff): Returns an array with only the unique values from the first array, by excluding all… [more](https://github.com/jonschlinkert/arr-diff) | [homepage](https://github.com/jonschlinkert/arr-diff \"Returns an array with only the unique values from the first array, by excluding all values from additional arrays using strict equality for comparisons.\")\n* [arr-flatten](https://www.npmjs.com/package/arr-flatten): Recursively flatten an array or arrays. This is the fastest implementation of array flatten. | [homepage](https://github.com/jonschlinkert/arr-flatten \"Recursively flatten an array or arrays. This is the fastest implementation of array flatten.\")\n* [arr-map](https://www.npmjs.com/package/arr-map): Faster, node.js focused alternative to JavaScript's native array map. | [homepage](https://github.com/jonschlinkert/arr-map \"Faster, node.js focused alternative to JavaScript's native array map.\")\n* [arr-pluck](https://www.npmjs.com/package/arr-pluck): Retrieves the value of a specified property from all elements in the collection. | [homepage](https://github.com/jonschlinkert/arr-pluck \"Retrieves the value of a specified property from all elements in the collection.\")\n* [arr-reduce](https://www.npmjs.com/package/arr-reduce): Fast array reduce that also loops over sparse elements. | [homepage](https://github.com/jonschlinkert/arr-reduce \"Fast array reduce that also loops over sparse elements.\")\n* [arr-union](https://www.npmjs.com/package/arr-union): Combines a list of arrays, returning a single array with unique values, using strict equality… [more](https://github.com/jonschlinkert/arr-union) | [homepage](https://github.com/jonschlinkert/arr-union \"Combines a list of arrays, returning a single array with unique values, using strict equality for comparisons.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/array-unique/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.1.28, on July 31, 2016._",
./examples/express/node_modules/micromatch/node_modules/array-unique/README.md:console.log(unique(arr)) //=> ['a', 'b', 'c']
./examples/express/node_modules/micromatch/node_modules/array-unique/README.md:console.log(arr)         //=> ['a', 'b', 'c']
./examples/express/node_modules/micromatch/node_modules/array-unique/README.md:console.log(unique(arr)) //=> ['a', 'b', 'c']
./examples/express/node_modules/micromatch/node_modules/array-unique/README.md:console.log(arr)         //=> ['a', 'b', 'c', 'c']
./examples/express/node_modules/micromatch/node_modules/extend-shallow/node_modules/assign-symbols/package.json:  "readme": "# assign-symbols [![NPM version](https://badge.fury.io/js/assign-symbols.svg)](http://badge.fury.io/js/assign-symbols)\n\n> Assign the enumerable es6 Symbol properties from an object (or objects) to the first object passed on the arguments. Can be used as a supplement to other extend, assign or merge methods as a polyfill for the Symbols part of the es6 Object.assign method.\n\nFrom the [Mozilla Developer docs for Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol):\n\n> A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i assign-symbols --save\n```\n\n## Usage\n\n```js\nvar assignSymbols = require('assign-symbols');\nvar obj = {};\n\nvar one = {};\nvar symbolOne = Symbol('aaa');\none[symbolOne] = 'bbb';\n\nvar two = {};\nvar symbolTwo = Symbol('ccc');\ntwo[symbolTwo] = 'ddd';\n\nassignSymbols(obj, one, two);\n\nconsole.log(obj[symbolOne]);\n//=> 'bbb'\nconsole.log(obj[symbolTwo]);\n//=> 'ddd'\n```\n\n## Similar projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties of source objects to a destination object. | [homepage](https://github.com/jonschlinkert/assign-deep)\n* [clone-deep](https://www.npmjs.com/package/clone-deep): Recursively (deep) clone JavaScript native types, like Object, Array, RegExp, Date as well as primitives. | [homepage](https://github.com/jonschlinkert/clone-deep)\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow)\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/assign-symbols/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 06, 2015._",
./examples/express/node_modules/micromatch/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolOne]);
./examples/express/node_modules/micromatch/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolTwo]);
./examples/express/node_modules/micromatch/node_modules/fragment-cache/package.json:  "readme": "# fragment-cache [![NPM version](https://img.shields.io/npm/v/fragment-cache.svg?style=flat)](https://www.npmjs.com/package/fragment-cache) [![NPM downloads](https://img.shields.io/npm/dm/fragment-cache.svg?style=flat)](https://npmjs.org/package/fragment-cache) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/fragment-cache.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/fragment-cache)\n\n> A cache for managing namespaced sub-caches\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save fragment-cache\n```\n\n## Usage\n\n```js\nvar Fragment = require('fragment-cache');\nvar fragment = new Fragment();\n```\n\n## API\n\n### [FragmentCache](index.js#L24)\n\nCreate a new `FragmentCache` with an optional object to use for `caches`.\n\n**Example**\n\n```js\nvar fragment = new FragmentCache();\n```\n\n**Params**\n\n* `cacheName` **{String}**\n* `returns` **{Object}**: Returns the [map-cache](https://github.com/jonschlinkert/map-cache) instance.\n\n### [.cache](index.js#L49)\n\nGet cache `name` from the `fragment.caches` object. Creates a new `MapCache` if it doesn't already exist.\n\n**Example**\n\n```js\nvar cache = fragment.cache('files');\nconsole.log(fragment.caches.hasOwnProperty('files'));\n//=> true\n```\n\n**Params**\n\n* `cacheName` **{String}**\n* `returns` **{Object}**: Returns the [map-cache](https://github.com/jonschlinkert/map-cache) instance.\n\n### [.set](index.js#L67)\n\nSet a value for property `key` on cache `name`\n\n**Example**\n\n```js\nfragment.set('files', 'somefile.js', new File({path: 'somefile.js'}));\n```\n\n**Params**\n\n* `name` **{String}**\n* `key` **{String}**: Property name to set\n* `val` **{any}**: The value of `key`\n* `returns` **{Object}**: The cache instance for chaining\n\n### [.has](index.js#L93)\n\nReturns true if a non-undefined value is set for `key` on fragment cache `name`.\n\n**Example**\n\n```js\nvar cache = fragment.cache('files');\ncache.set('somefile.js');\n\nconsole.log(cache.has('somefile.js'));\n//=> true\n\nconsole.log(cache.has('some-other-file.js'));\n//=> false\n```\n\n**Params**\n\n* `name` **{String}**: Cache name\n* `key` **{String}**: Optionally specify a property to check for on cache `name`\n* `returns` **{Boolean}**\n\n### [.get](index.js#L115)\n\nGet `name`, or if specified, the value of `key`. Invokes the [cache](#cache) method, so that cache `name` will be created it doesn't already exist. If `key` is not passed, the entire cache (`name`) is returned.\n\n**Example**\n\n```js\nvar Vinyl = require('vinyl');\nvar cache = fragment.cache('files');\ncache.set('somefile.js', new Vinyl({path: 'somefile.js'}));\nconsole.log(cache.get('somefile.js'));\n//=> <File \"somefile.js\">\n```\n\n**Params**\n\n* `name` **{String}**\n* `returns` **{Object}**: Returns cache `name`, or the value of `key` if specified\n\n## About\n\n### Related projects\n\n* [base](https://www.npmjs.com/package/base): base is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting… [more](https://github.com/node-base/base) | [homepage](https://github.com/node-base/base \"base is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting with a handful of common methods, like `set`, `get`, `del` and `use`.\")\n* [map-cache](https://www.npmjs.com/package/map-cache): Basic cache object for storing key-value pairs. | [homepage](https://github.com/jonschlinkert/map-cache \"Basic cache object for storing key-value pairs.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/fragment-cache/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.2.0, on October 17, 2016._",
./examples/express/node_modules/micromatch/node_modules/fragment-cache/README.md:console.log(fragment.caches.hasOwnProperty('files'));
./examples/express/node_modules/micromatch/node_modules/fragment-cache/README.md:console.log(cache.has('somefile.js'));
./examples/express/node_modules/micromatch/node_modules/fragment-cache/README.md:console.log(cache.has('some-other-file.js'));
./examples/express/node_modules/micromatch/node_modules/fragment-cache/README.md:console.log(cache.get('somefile.js'));
./examples/express/node_modules/micromatch/node_modules/fragment-cache/index.js:   * console.log(fragment.caches.hasOwnProperty('files'));
./examples/express/node_modules/micromatch/node_modules/fragment-cache/index.js:   * console.log(cache.has('somefile.js'));
./examples/express/node_modules/micromatch/node_modules/fragment-cache/index.js:   * console.log(cache.has('some-other-file.js'));
./examples/express/node_modules/micromatch/node_modules/fragment-cache/index.js:   * console.log(cache.get('somefile.js'));
./examples/express/node_modules/micromatch/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://img.shields.io/npm/v/define-property.svg?style=flat)](https://www.npmjs.com/package/define-property) [![NPM monthly downloads](https://img.shields.io/npm/dm/define-property.svg?style=flat)](https://npmjs.org/package/define-property) [![NPM total downloads](https://img.shields.io/npm/dt/define-property.svg?style=flat)](https://npmjs.org/package/define-property) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/define-property.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/define-property)\n\n> Define a non-enumerable property on an object. Uses Reflect.defineProperty when available, otherwise Object.defineProperty.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save define-property\n```\n\n## Release history\n\nSee [the CHANGELOG](changelog.md) for updates.\n\n## Usage\n\n**Params**\n\n* `object`: The object on which to define the property.\n* `key`: The name of the property to be defined or modified.\n* `value`: The value or descriptor of the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\n// by default, defined properties are non-enumberable\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**defining setters/getters**\n\nPass the same properties you would if using [Object.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) or [Reflect.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty).\n\n```js\ndefine(obj, 'foo', {\n  set: function() {},\n  get: function() {}\n});\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target… [more](https://github.com/jonschlinkert/assign-deep) | [homepage](https://github.com/jonschlinkert/assign-deep \"Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target (first) object.\")\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow \"Extend an object with the properties of additional objects. node.js/javascript util.\")\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep \"Recursively merge values in a javascript object.\")\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep \"Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 28 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 1 | [doowb](https://github.com/doowb) |\n\n### Author\n\n**Jon Schlinkert**\n\n* Connect with me on [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* Follow me on [github/jonschlinkert](https://github.com/jonschlinkert)\n* Follow me on [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on January 25, 2018._",
./examples/express/node_modules/micromatch/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg?style=flat)](https://www.npmjs.com/package/is-data-descriptor) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![NPM total downloads](https://img.shields.io/npm/dt/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-data-descriptor\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor \"Returns true if a value has the characteristics of a valid JavaScript accessor descriptor.\")\n* [is-data-descriptor](https://www.npmjs.com/package/is-data-descriptor): Returns true if a value has the characteristics of a valid JavaScript data descriptor. | [homepage](https://github.com/jonschlinkert/is-data-descriptor \"Returns true if a value has the characteristics of a valid JavaScript data descriptor.\")\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://github.com/jonschlinkert/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor \"Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for data descriptors and accessor descriptors.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 21 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [realityking](https://github.com/realityking) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 01, 2017._",
./examples/express/node_modules/micromatch/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./examples/express/node_modules/micromatch/node_modules/define-property/README.md:See [the CHANGELOG](changelog.md) for updates.
./examples/express/node_modules/micromatch/node_modules/define-property/README.md:console.log(obj);
./examples/express/node_modules/micromatch/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./examples/express/node_modules/micromatch/README.md:console.log(mm(['foo', 'bar', 'qux'], ['f*', 'b*'])); 
./examples/express/node_modules/micromatch/README.md:console.log(mm.isMatch('foo', 'f*'));  
./examples/express/node_modules/micromatch/README.md:* regex logical "or" (`foo/(abc|xyz).js`)
./examples/express/node_modules/micromatch/README.md:console.log(mm(['a.js', 'a.txt'], ['*.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.isMatch('a.a', '*.a'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.isMatch('a.b', '*.a'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.every('foo.js', ['foo.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.any('a.a', ['b.*', '*.a']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.any('a.a', 'b.*'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.all('foo.js', ['foo.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.all('foo.js', ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.all('foo.js', ['*.js', 'foo.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
./examples/express/node_modules/micromatch/README.md:console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.contains('aa/bb/cc', '*b'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.contains('aa/bb/cc', '*d'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.matchKeys(obj, '*b'));
./examples/express/node_modules/micromatch/README.md:console.log(isMatch('a.a'));
./examples/express/node_modules/micromatch/README.md:console.log(isMatch('a.b'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.capture('test/*.js', 'test/foo.js'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.capture('test/*.js', 'foo/bar.css'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.makeRe('*.js'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.braces('foo/{a,b}/bar'));
./examples/express/node_modules/micromatch/README.md:console.log(mm.braces('foo/{a,b}/bar', {expand: true}));
./examples/express/node_modules/micromatch/README.md:console.log(mm.create('abc/*.js'));
./examples/express/node_modules/micromatch/README.md:console.log(ast);
./examples/express/node_modules/micromatch/README.md:console.log(mm.compile(ast));
./examples/express/node_modules/micromatch/README.md:console.log(mm(files, '[a-c]*'));
./examples/express/node_modules/micromatch/README.md:console.log(mm(files, '[a-c]*', {bash: false}));
./examples/express/node_modules/micromatch/README.md:console.log(res.map);
./examples/express/node_modules/micromatch/README.md:console.log(res.map);
./examples/express/node_modules/micromatch/README.md:console.log(res.map);
./examples/express/node_modules/micromatch/index.js: * console.log(mm(['a.js', 'a.txt'], ['*.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.isMatch('a.a', '*.a'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.isMatch('a.b', '*.a'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.every('foo.js', ['foo.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.any('a.a', ['b.*', '*.a']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.any('a.a', 'b.*'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.all('foo.js', ['foo.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.all('foo.js', ['*.js', '!foo.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.all('foo.js', ['*.js', 'foo.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.contains('aa/bb/cc', '*b'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.contains('aa/bb/cc', '*d'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.matchKeys(obj, '*b'));
./examples/express/node_modules/micromatch/index.js: * console.log(isMatch('a.a'));
./examples/express/node_modules/micromatch/index.js: * console.log(isMatch('a.b'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.capture('test/*.js', 'test/foo.js'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.capture('test/*.js', 'foo/bar.css'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.makeRe('*.js'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.braces('foo/{a,b}/bar'));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.braces('foo/{a,b}/bar', {expand: true}));
./examples/express/node_modules/micromatch/index.js: * console.log(mm.create('abc/*.js'));
./examples/express/node_modules/micromatch/index.js: * console.log(ast);
./examples/express/node_modules/micromatch/index.js: * console.log(mm.compile(ast));
./examples/express/node_modules/lodash/fill.js: * console.log(array);
./examples/express/node_modules/lodash/pullAllBy.js: * console.log(array);
./examples/express/node_modules/lodash/delay.js: *   console.log(text);
./examples/express/node_modules/lodash/unset.js: * console.log(object);
./examples/express/node_modules/lodash/unset.js: * console.log(object);
./examples/express/node_modules/lodash/template.js:  // (http://ejohn.org/blog/javascript-micro-templating/)
./examples/express/node_modules/lodash/stubObject.js: * console.log(objects);
./examples/express/node_modules/lodash/stubObject.js: * console.log(objects[0] === objects[1]);
./examples/express/node_modules/lodash/update.js: * console.log(object.a[0].b.c);
./examples/express/node_modules/lodash/update.js: * console.log(object.x[0].y.z);
./examples/express/node_modules/lodash/remove.js: * console.log(array);
./examples/express/node_modules/lodash/remove.js: * console.log(evens);
./examples/express/node_modules/lodash/clone.js: * console.log(shallow[0] === objects[0]);
./examples/express/node_modules/lodash/stubArray.js: * console.log(arrays);
./examples/express/node_modules/lodash/stubArray.js: * console.log(arrays[0] === arrays[1]);
./examples/express/node_modules/lodash/forEachRight.js: *   console.log(value);
./examples/express/node_modules/lodash/forEach.js: *   console.log(value);
./examples/express/node_modules/lodash/forEach.js: *   console.log(key);
./examples/express/node_modules/lodash/pullAllWith.js: * console.log(array);
./examples/express/node_modules/lodash/pullAll.js: * console.log(array);
./examples/express/node_modules/lodash/cloneWith.js: * console.log(el === document.body);
./examples/express/node_modules/lodash/cloneWith.js: * console.log(el.nodeName);
./examples/express/node_modules/lodash/cloneWith.js: * console.log(el.childNodes.length);
./examples/express/node_modules/lodash/now.js: *   console.log(_.now() - stamp);
./examples/express/node_modules/lodash/after.js: *   console.log('done saving!');
./examples/express/node_modules/lodash/set.js: * console.log(object.a[0].b.c);
./examples/express/node_modules/lodash/set.js: * console.log(object.x[0].y.z);
./examples/express/node_modules/lodash/forIn.js: *   console.log(key);
./examples/express/node_modules/lodash/castArray.js: * console.log(_.castArray(array) === array);
./examples/express/node_modules/lodash/reverse.js: * console.log(array);
./examples/express/node_modules/lodash/constant.js: * console.log(objects);
./examples/express/node_modules/lodash/constant.js: * console.log(objects[0] === objects[1]);
./examples/express/node_modules/lodash/pullAt.js: * console.log(array);
./examples/express/node_modules/lodash/pullAt.js: * console.log(pulled);
./examples/express/node_modules/lodash/lodash.js:  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
./examples/express/node_modules/lodash/lodash.js:     * console.log(other);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(pulled);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(evens);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(array);
./examples/express/node_modules/lodash/lodash.js:     *   console.log(value);
./examples/express/node_modules/lodash/lodash.js:     *   console.log(key);
./examples/express/node_modules/lodash/lodash.js:     *   console.log(value);
./examples/express/node_modules/lodash/lodash.js:     *   console.log(_.now() - stamp);
./examples/express/node_modules/lodash/lodash.js:     *   console.log('done saving!');
./examples/express/node_modules/lodash/lodash.js:     *   console.log(text);
./examples/express/node_modules/lodash/lodash.js:     *   console.log(text);
./examples/express/node_modules/lodash/lodash.js:     * console.log(_.castArray(array) === array);
./examples/express/node_modules/lodash/lodash.js:     * console.log(shallow[0] === objects[0]);
./examples/express/node_modules/lodash/lodash.js:     * console.log(el === document.body);
./examples/express/node_modules/lodash/lodash.js:     * console.log(el.nodeName);
./examples/express/node_modules/lodash/lodash.js:     * console.log(el.childNodes.length);
./examples/express/node_modules/lodash/lodash.js:     * console.log(deep[0] === objects[0]);
./examples/express/node_modules/lodash/lodash.js:     * console.log(el === document.body);
./examples/express/node_modules/lodash/lodash.js:     * console.log(el.nodeName);
./examples/express/node_modules/lodash/lodash.js:     * console.log(el.childNodes.length);
./examples/express/node_modules/lodash/lodash.js:     *   console.log(key);
./examples/express/node_modules/lodash/lodash.js:     *   console.log(key);
./examples/express/node_modules/lodash/lodash.js:     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
./examples/express/node_modules/lodash/lodash.js:     *   console.log(key);
./examples/express/node_modules/lodash/lodash.js:     *   console.log(key);
./examples/express/node_modules/lodash/lodash.js:     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
./examples/express/node_modules/lodash/lodash.js:     * console.log(object.a[0].b.c);
./examples/express/node_modules/lodash/lodash.js:     * console.log(object.x[0].y.z);
./examples/express/node_modules/lodash/lodash.js:     * console.log(object);
./examples/express/node_modules/lodash/lodash.js:     * console.log(object);
./examples/express/node_modules/lodash/lodash.js:     * console.log(object.a[0].b.c);
./examples/express/node_modules/lodash/lodash.js:     * console.log(object.x[0].y.z);
./examples/express/node_modules/lodash/lodash.js:      // (http://ejohn.org/blog/javascript-micro-templating/)
./examples/express/node_modules/lodash/lodash.js:     *     console.log('clicked ' + this.label);
./examples/express/node_modules/lodash/lodash.js:     * console.log(objects);
./examples/express/node_modules/lodash/lodash.js:     * console.log(objects[0] === objects[1]);
./examples/express/node_modules/lodash/lodash.js:     * console.log(_.identity(object) === object);
./examples/express/node_modules/lodash/lodash.js:     * console.log(arrays);
./examples/express/node_modules/lodash/lodash.js:     * console.log(arrays[0] === arrays[1]);
./examples/express/node_modules/lodash/lodash.js:     * console.log(objects);
./examples/express/node_modules/lodash/lodash.js:     * console.log(objects[0] === objects[1]);
./examples/express/node_modules/lodash/forOwnRight.js: *   console.log(key);
./examples/express/node_modules/lodash/forOwnRight.js: * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
./examples/express/node_modules/lodash/cloneDeepWith.js: * console.log(el === document.body);
./examples/express/node_modules/lodash/cloneDeepWith.js: * console.log(el.nodeName);
./examples/express/node_modules/lodash/cloneDeepWith.js: * console.log(el.childNodes.length);
./examples/express/node_modules/lodash/cloneDeep.js: * console.log(deep[0] === objects[0]);
./examples/express/node_modules/lodash/forInRight.js: *   console.log(key);
./examples/express/node_modules/lodash/forInRight.js: * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
./examples/express/node_modules/lodash/commit.js: * console.log(array);
./examples/express/node_modules/lodash/commit.js: * console.log(array);
./examples/express/node_modules/lodash/commit.js: * console.log(array);
./examples/express/node_modules/lodash/pull.js: * console.log(array);
./examples/express/node_modules/lodash/identity.js: * console.log(_.identity(object) === object);
./examples/express/node_modules/lodash/wrapperReverse.js: * console.log(array);
./examples/express/node_modules/lodash/concat.js: * console.log(other);
./examples/express/node_modules/lodash/concat.js: * console.log(array);
./examples/express/node_modules/lodash/forOwn.js: *   console.log(key);
./examples/express/node_modules/lodash/_hasUnicode.js:/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
./examples/express/node_modules/lodash/core.js:   * console.log(other);
./examples/express/node_modules/lodash/core.js:   * console.log(array);
./examples/express/node_modules/lodash/core.js:   *   console.log(value);
./examples/express/node_modules/lodash/core.js:   *   console.log(key);
./examples/express/node_modules/lodash/core.js:   *   console.log(text);
./examples/express/node_modules/lodash/core.js:   *   console.log(text);
./examples/express/node_modules/lodash/core.js:   * console.log(shallow[0] === objects[0]);
./examples/express/node_modules/lodash/core.js:   * console.log(_.identity(object) === object);
./examples/express/node_modules/lodash/bindAll.js: *     console.log('clicked ' + this.label);
./examples/express/node_modules/lodash/defer.js: *   console.log(text);
./examples/express/index.js:  logLevel: 'debug'
./examples/express/index.js:console.log('[DEMO] Server: listening on port 3000')
./examples/express/index.js:console.log('[DEMO] Opening: http://localhost:3000/users')
./examples/express/app1.js:var accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})
./examples/express/app1.js:  logLevel: 'debug'
./examples/express/app1.js://console.log('[DEMO] Server: listening on port 3000')
./examples/express/app1.js://console.log('[DEMO] Opening: http://localhost:3000/users')
./examples/express/app1.js:// setup the logger
./examples/browser-sync/index.js:  logLevel: 'debug'
./examples/browser-sync/index.js:console.log('[DEMO] Server: listening on port 3000')
./examples/browser-sync/index.js:console.log('[DEMO] Opening: http://localhost:3000/users')
./examples/websocket/index.html:            <label for="logger">log:</label>
./examples/websocket/index.html:            <textarea id="logger" cols="30" rows="10"></textarea>
./examples/websocket/index.html:        var logger        = document.getElementById('logger');
./examples/websocket/index.html:            socket.onopen    = function () { log('CONNECTED'); };
./examples/websocket/index.html:            socket.onclose   = function () { log('DISCONNECTED'); };
./examples/websocket/index.html:            socket.onerror   = function () { log('SOCKET ERROR OCCURED'); };
./examples/websocket/index.html:            socket.onmessage = function (msg) { log('RECEIVED:' + msg.data); };
./examples/websocket/index.html:            log('SEND: ' + message.value);
./examples/websocket/index.html:        function log (message) {
./examples/websocket/index.html:            logger.value = logger.value + message + '\n'
./examples/websocket/index.js:  logLevel: 'debug'
./examples/websocket/index.js:console.log('[DEMO] Server: listening on port 3000')
./examples/websocket/index.js:console.log('[DEMO] Opening: http://localhost:3000')
./examples/websocket/index.js: * 2. `socket.onmessage = function (msg) {console.log(msg)};`       // listen to socket messages
./recipes/modify-post.md:                // Add req.body logic here if needed....
./recipes/logProvider.md:Configure your own logger with the `logProvider` option.
./recipes/logProvider.md:In this example [winston](https://www.npmjs.com/package/winston) is configured to do the actual logging.
./recipes/logProvider.md:    logProvider: function (provider) {
./recipes/logProvider.md:Configure your own logger with the `logProvider` option.
./recipes/logProvider.md:In this example [winston](https://www.npmjs.com/package/winston) is configured to do the actual logging. Map the logging api if needed.
./recipes/logProvider.md:var logProvider = function (provider) {
./recipes/logProvider.md:        log   : winston.log,
./recipes/logProvider.md:    logProvider: logProvider
./recipes/logProvider.md:Configure your own logger with the `logProvider` option.
./recipes/logProvider.md:In this example [winston](https://www.npmjs.com/package/winston) is configured to do the actual logging.
./recipes/logProvider.md:var logProvider = function (provider) {
./recipes/logProvider.md:    var logger = new (winston.Logger)({
./recipes/logProvider.md:            new (winston.transports.File)({ filename: 'somefile.log' })
./recipes/logProvider.md:    return logger;
./recipes/logProvider.md:    logProvider: logProvider
./recipes/proxy-events.md:    console.log('Something went wrong.');
./recipes/proxy-events.md:    console.log('And we are reporting a custom error message.');
./recipes/README.md:    // control logging
./recipes/README.md:    logLevel: 'silent',
./recipes/README.md:    // use a different lib for logging;
./recipes/README.md:    // i.e., write logs to file or server
./recipes/README.md:    logProvider: function (provider) {
./recipes/pathRewrite.md:Implement you own path rewrite logic.
./recipes/logLevel.md:Control the amount of logging of http-proxy-middleware.
./recipes/logLevel.md:    logLevel: 'debug'
./recipes/logLevel.md:Suppress all logging.
./recipes/logLevel.md:    logLevel: 'silent'
./npm-debug.log:360 error If you need help, you may report this log at:
./package-lock.json:        "conventional-changelog-angular": "1.6.6",
./package-lock.json:        "eazy-logger": "3.0.2",
./package-lock.json:    "conventional-changelog-angular": {
./package-lock.json:      "resolved": "https://registry.npmjs.org/conventional-changelog-angular/-/conventional-changelog-angular-1.6.6.tgz",
./package-lock.json:        "log-driver": "1.2.7",
./package-lock.json:    "debug-log": {
./package-lock.json:      "resolved": "https://registry.npmjs.org/debug-log/-/debug-log-1.0.1.tgz",
./package-lock.json:    "eazy-logger": {
./package-lock.json:      "resolved": "https://registry.npmjs.org/eazy-logger/-/eazy-logger-3.0.2.tgz",
./package-lock.json:            "npmlog": "4.1.0",
./package-lock.json:        "npmlog": {
./package-lock.json:            "log-driver": "1.2.5",
./package-lock.json:        "log-driver": {
./package-lock.json:          "resolved": "https://registry.npmjs.org/log-driver/-/log-driver-1.2.5.tgz",
./package-lock.json:    "log-driver": {
./package-lock.json:      "resolved": "https://registry.npmjs.org/log-driver/-/log-driver-1.2.7.tgz",
./package-lock.json:        "debug-log": "1.0.1",
./lib/logger.js:var loggerInstance
./lib/logger.js:  log: console.log,
./lib/logger.js:  debug: console.log, // use .log(); since console does not have .debug()
./lib/logger.js:// log level 'weight'
./lib/logger.js:    if (!loggerInstance) {
./lib/logger.js:      loggerInstance = new Logger()
./lib/logger.js:    return loggerInstance
./lib/logger.js:  var logLevel
./lib/logger.js:    log: log,
./lib/logger.js:        logLevel = v
./lib/logger.js:  // log will log messages, regardless of logLevels
./lib/logger.js:  function log () {
./lib/logger.js:    provider.log(_interpolate.apply(null, arguments))
./lib/logger.js:   * Decide to log or not to log, based on the log levels 'weight'
./lib/logger.js:    var currentLogLevel = LEVELS[logLevel]
./lib/logger.js:  // make sure logged messages and its data are return interpolated
./lib/logger.js:  // make it possible for additional log data, such date/time or custom prefix.
./lib/logger.js:      throw new Error('[HPM] Log level error. Invalid logLevel.')
./lib/node_modules/http-proxy/package.json:  "readme": "<p align=\"center\">\n  <img src=\"https://raw.github.com/nodejitsu/node-http-proxy/master/doc/logo.png\"/>\n</p>\n\nnode-http-proxy\n=======\n\n<p align=\"left\">\n <a href=\"https://travis-ci.org/nodejitsu/node-http-proxy\" target=\"_blank\">\n  <img src=\"https://travis-ci.org/nodejitsu/node-http-proxy.png\"/></a>&nbsp;&nbsp;\n <a href=\"https://coveralls.io/r/nodejitsu/node-http-proxy\" target=\"_blank\">\n  <img src=\"https://coveralls.io/repos/nodejitsu/node-http-proxy/badge.png\"/></a>\n</p>\n\n`node-http-proxy` is an HTTP programmable proxying library that supports\nwebsockets. It is suitable for implementing components such as reverse\nproxies and load balancers.\n\n### Table of Contents\n  * [Installation](#installation)\n  * [Upgrading from 0.8.x ?](#upgrading-from-08x-)\n  * [Core Concept](#core-concept)\n  * [Use Cases](#use-cases)\n    * [Setup a basic stand-alone proxy server](#setup-a-basic-stand-alone-proxy-server)\n    * [Setup a stand-alone proxy server with custom server logic](#setup-a-stand-alone-proxy-server-with-custom-server-logic)\n    * [Setup a stand-alone proxy server with proxy request header re-writing](#setup-a-stand-alone-proxy-server-with-proxy-request-header-re-writing)\n    * [Modify a response from a proxied server](#modify-a-response-from-a-proxied-server)\n    * [Setup a stand-alone proxy server with latency](#setup-a-stand-alone-proxy-server-with-latency)\n    * [Using HTTPS](#using-https)\n    * [Proxying WebSockets](#proxying-websockets)\n  * [Options](#options)\n  * [Listening for proxy events](#listening-for-proxy-events)\n  * [Shutdown](#shutdown)\n  * [Miscellaneous](#miscellaneous)\n    * [Test](#test)\n    * [ProxyTable API](#proxytable-api)\n    * [Logo](#logo)\n  * [Contributing and Issues](#contributing-and-issues)\n  * [License](#license)\n\n### Installation\n\n`npm install http-proxy --save`\n\n**[Back to top](#table-of-contents)**\n\n### Upgrading from 0.8.x ?\n\nClick [here](UPGRADING.md)\n\n**[Back to top](#table-of-contents)**\n\n### Core Concept\n\nA new proxy is created by calling `createProxyServer` and passing\nan `options` object as argument ([valid properties are available here](lib/http-proxy.js#L33-L50))\n\n```javascript\nvar httpProxy = require('http-proxy');\n\nvar proxy = httpProxy.createProxyServer(options); // See (†)\n```\n†Unless listen(..) is invoked on the object, this does not create a webserver. See below.\n\nAn object will be returned with four methods:\n\n* web `req, res, [options]` (used for proxying regular HTTP(S) requests)\n* ws `req, socket, head, [options]` (used for proxying WS(S) requests)\n* listen `port` (a function that wraps the object in a webserver, for your convenience)\n* close `[callback]` (a function that closes the inner webserver and stops listening on given port)\n\nIt is then possible to proxy requests by calling these functions\n\n```javascript\nhttp.createServer(function(req, res) {\n  proxy.web(req, res, { target: 'http://mytarget.com:8080' });\n});\n```\n\nErrors can be listened on either using the Event Emitter API\n\n```javascript\nproxy.on('error', function(e) {\n  ...\n});\n```\n\nor using the callback API\n\n```javascript\nproxy.web(req, res, { target: 'http://mytarget.com:8080' }, function(e) { ... });\n```\n\nWhen a request is proxied it follows two different pipelines ([available here](lib/http-proxy/passes))\nwhich apply transformations to both the `req` and `res` object.\nThe first pipeline (incoming) is responsible for the creation and manipulation of the stream that connects your client to the target.\nThe second pipeline (outgoing) is responsible for the creation and manipulation of the stream that, from your target, returns data\nto the client.\n\n**[Back to top](#table-of-contents)**\n\n### Use Cases\n\n#### Setup a basic stand-alone proxy server\n\n```js\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n//\n// Create your proxy server and set the target in the options.\n//\nhttpProxy.createProxyServer({target:'http://localhost:9000'}).listen(8000); // See (†)\n\n//\n// Create your target server\n//\nhttp.createServer(function (req, res) {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.write('request successfully proxied!' + '\\n' + JSON.stringify(req.headers, true, 2));\n  res.end();\n}).listen(9000);\n```\n†Invoking listen(..) triggers the creation of a web server. Otherwise, just the proxy instance is created.\n\n**[Back to top](#table-of-contents)**\n\n#### Setup a stand-alone proxy server with custom server logic\nThis example show how you can proxy a request using your own HTTP server\nand also you can put your own logic to handle the request.\n\n```js\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n\n//\n// Create a proxy server with custom application logic\n//\nvar proxy = httpProxy.createProxyServer({});\n\n//\n// Create your custom server and just call `proxy.web()` to proxy\n// a web request to the target passed in the options\n// also you can use `proxy.ws()` to proxy a websockets request\n//\nvar server = http.createServer(function(req, res) {\n  // You can define here your custom logic to handle the request\n  // and then proxy the request.\n  proxy.web(req, res, { target: 'http://127.0.0.1:5060' });\n});\n\nconsole.log(\"listening on port 5050\")\nserver.listen(5050);\n```\n\n**[Back to top](#table-of-contents)**\n\n#### Setup a stand-alone proxy server with proxy request header re-writing\nThis example shows how you can proxy a request using your own HTTP server that\nmodifies the outgoing proxy request by adding a special header.\n\n```js\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n\n//\n// Create a proxy server with custom application logic\n//\nvar proxy = httpProxy.createProxyServer({});\n\n// To modify the proxy connection before data is sent, you can listen\n// for the 'proxyReq' event. When the event is fired, you will receive\n// the following arguments:\n// (http.ClientRequest proxyReq, http.IncomingMessage req,\n//  http.ServerResponse res, Object options). This mechanism is useful when\n// you need to modify the proxy request before the proxy connection\n// is made to the target.\n//\nproxy.on('proxyReq', function(proxyReq, req, res, options) {\n  proxyReq.setHeader('X-Special-Proxy-Header', 'foobar');\n});\n\nvar server = http.createServer(function(req, res) {\n  // You can define here your custom logic to handle the request\n  // and then proxy the request.\n  proxy.web(req, res, {\n    target: 'http://127.0.0.1:5060'\n  });\n});\n\nconsole.log(\"listening on port 5050\")\nserver.listen(5050);\n```\n\n**[Back to top](#table-of-contents)**\n\n#### Modify a response from a proxied server\nSometimes when you have received a HTML/XML document from the server of origin you would like to modify it before forwarding it on.\n\n[Harmon](https://github.com/No9/harmon) allows you to do this in a streaming style so as to keep the pressure on the proxy to a minimum.\n\n**[Back to top](#table-of-contents)**\n\n#### Setup a stand-alone proxy server with latency\n\n```js\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n\n//\n// Create a proxy server with latency\n//\nvar proxy = httpProxy.createProxyServer();\n\n//\n// Create your server that makes an operation that waits a while\n// and then proxies the request\n//\nhttp.createServer(function (req, res) {\n  // This simulates an operation that takes 500ms to execute\n  setTimeout(function () {\n    proxy.web(req, res, {\n      target: 'http://localhost:9008'\n    });\n  }, 500);\n}).listen(8008);\n\n//\n// Create your target server\n//\nhttp.createServer(function (req, res) {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.write('request successfully proxied to: ' + req.url + '\\n' + JSON.stringify(req.headers, true, 2));\n  res.end();\n}).listen(9008);\n```\n\n**[Back to top](#table-of-contents)**\n\n#### Using HTTPS\nYou can activate the validation of a secure SSL certificate to the target connection (avoid self signed certs), just set `secure: true` in the options.\n\n##### HTTPS -> HTTP\n\n```js\n//\n// Create the HTTPS proxy server in front of a HTTP server\n//\nhttpProxy.createServer({\n  target: {\n    host: 'localhost',\n    port: 9009\n  },\n  ssl: {\n    key: fs.readFileSync('valid-ssl-key.pem', 'utf8'),\n    cert: fs.readFileSync('valid-ssl-cert.pem', 'utf8')\n  }\n}).listen(8009);\n```\n\n##### HTTPS -> HTTPS\n\n```js\n//\n// Create the proxy server listening on port 443\n//\nhttpProxy.createServer({\n  ssl: {\n    key: fs.readFileSync('valid-ssl-key.pem', 'utf8'),\n    cert: fs.readFileSync('valid-ssl-cert.pem', 'utf8')\n  },\n  target: 'https://localhost:9010',\n  secure: true // Depends on your needs, could be false.\n}).listen(443);\n```\n\n**[Back to top](#table-of-contents)**\n\n#### Proxying WebSockets\nYou can activate the websocket support for the proxy using `ws:true` in the options.\n\n```js\n//\n// Create a proxy server for websockets\n//\nhttpProxy.createServer({\n  target: 'ws://localhost:9014',\n  ws: true\n}).listen(8014);\n```\n\nAlso you can proxy the websocket requests just calling the `ws(req, socket, head)` method.\n\n```js\n//\n// Setup our server to proxy standard HTTP requests\n//\nvar proxy = new httpProxy.createProxyServer({\n  target: {\n    host: 'localhost',\n    port: 9015\n  }\n});\nvar proxyServer = http.createServer(function (req, res) {\n  proxy.web(req, res);\n});\n\n//\n// Listen to the `upgrade` event and proxy the\n// WebSocket requests as well.\n//\nproxyServer.on('upgrade', function (req, socket, head) {\n  proxy.ws(req, socket, head);\n});\n\nproxyServer.listen(8015);\n```\n\n**[Back to top](#table-of-contents)**\n\n### Options\n\n`httpProxy.createProxyServer` supports the following options:\n\n*  **target**: url string to be parsed with the url module\n*  **forward**: url string to be parsed with the url module\n*  **agent**: object to be passed to http(s).request (see Node's [https agent](http://nodejs.org/api/https.html#https_class_https_agent) and [http agent](http://nodejs.org/api/http.html#http_class_http_agent) objects)\n*  **ssl**: object to be passed to https.createServer()\n*  **ws**: true/false, if you want to proxy websockets\n*  **xfwd**: true/false, adds x-forward headers\n*  **secure**: true/false, if you want to verify the SSL Certs\n*  **toProxy**: true/false, passes the absolute URL as the `path` (useful for proxying to proxies)\n*  **prependPath**: true/false, Default: true - specify whether you want to prepend the target's path to the proxy path\n*  **ignorePath**: true/false, Default: false - specify whether you want to ignore the proxy path of the incoming request (note: you will have to append / manually if required).\n*  **localAddress**: Local interface string to bind for outgoing connections\n*  **changeOrigin**: true/false, Default: false - changes the origin of the host header to the target URL\n*  **preserveHeaderKeyCase**: true/false, Default: false - specify whether you want to keep letter case of response header key\n*  **auth**: Basic authentication i.e. 'user:password' to compute an Authorization header.\n*  **hostRewrite**: rewrites the location hostname on (201/301/302/307/308) redirects.\n*  **autoRewrite**: rewrites the location host/port on (201/301/302/307/308) redirects based on requested host/port. Default: false.\n*  **protocolRewrite**: rewrites the location protocol on (201/301/302/307/308) redirects to 'http' or 'https'. Default: null.\n*  **cookieDomainRewrite**: rewrites domain of `set-cookie` headers. Possible values:\n   * `false` (default): disable cookie rewriting\n   * String: new domain, for example `cookieDomainRewrite: \"new.domain\"`. To remove the domain, use `cookieDomainRewrite: \"\"`.\n   * Object: mapping of domains to new domains, use `\"*\"` to match all domains.  \n     For example keep one domain unchanged, rewrite one domain and remove other domains:\n     ```\n     cookieDomainRewrite: {\n       \"unchanged.domain\": \"unchanged.domain\",\n       \"old.domain\": \"new.domain\",\n       \"*\": \"\"\n     }\n     ```\n*  **headers**: object with extra headers to be added to target requests.\n*  **proxyTimeout**: timeout (in millis) when proxy receives no response from target\n\n**NOTE:**\n`options.ws` and `options.ssl` are optional.\n`options.target` and `options.forward` cannot both be missing\n\nIf you are using the `proxyServer.listen` method, the following options are also applicable:\n\n *  **ssl**: object to be passed to https.createServer()\n *  **ws**: true/false, if you want to proxy websockets\n\n**[Back to top](#table-of-contents)**\n\n### Listening for proxy events\n\n* `error`: The error event is emitted if the request to the target fail. **We do not do any error handling of messages passed between client and proxy, and messages passed between proxy and target, so it is recommended that you listen on errors and handle them.**\n* `proxyReq`: This event is emitted before the data is sent. It gives you a chance to alter the proxyReq request object. Applies to \"web\" connections\n* `proxyReqWs`: This event is emitted before the data is sent. It gives you a chance to alter the proxyReq request object. Applies to \"websocket\" connections\n* `proxyRes`: This event is emitted if the request to the target got a response.\n* `open`: This event is emitted once the proxy websocket was created and piped into the target websocket.\n* `close`: This event is emitted once the proxy websocket was closed.\n* (DEPRECATED) `proxySocket`: Deprecated in favor of `open`.\n\n```js\nvar httpProxy = require('http-proxy');\n// Error example\n//\n// Http Proxy Server with bad target\n//\nvar proxy = httpProxy.createServer({\n  target:'http://localhost:9005'\n});\n\nproxy.listen(8005);\n\n//\n// Listen for the `error` event on `proxy`.\nproxy.on('error', function (err, req, res) {\n  res.writeHead(500, {\n    'Content-Type': 'text/plain'\n  });\n\n  res.end('Something went wrong. And we are reporting a custom error message.');\n});\n\n//\n// Listen for the `proxyRes` event on `proxy`.\n//\nproxy.on('proxyRes', function (proxyRes, req, res) {\n  console.log('RAW Response from the target', JSON.stringify(proxyRes.headers, true, 2));\n});\n\n//\n// Listen for the `open` event on `proxy`.\n//\nproxy.on('open', function (proxySocket) {\n  // listen for messages coming FROM the target here\n  proxySocket.on('data', hybiParseAndLogMessage);\n});\n\n//\n// Listen for the `close` event on `proxy`.\n//\nproxy.on('close', function (res, socket, head) {\n  // view disconnected websocket connections\n  console.log('Client disconnected');\n});\n```\n\n**[Back to top](#table-of-contents)**\n\n### Shutdown\n\n* When testing or running server within another program it may be necessary to close the proxy.\n* This will stop the proxy from accepting new connections.\n\n```js\nvar proxy = new httpProxy.createProxyServer({\n  target: {\n    host: 'localhost',\n    port: 1337\n  }\n});\n\nproxy.close();\n```\n\n**[Back to top](#table-of-contents)**\n\n### Miscellaneous\n\n#### ProxyTable API\n\nA proxy table API is available through this add-on [module](https://github.com/donasaur/http-proxy-rules), which lets you define a set of rules to translate matching routes to target routes that the reverse proxy will talk to.\n\n#### Test\n\n```\n$ npm test\n```\n\n#### Logo\n\nLogo created by [Diego Pasquali](http://dribbble.com/diegopq)\n\n**[Back to top](#table-of-contents)**\n\n### Contributing and Issues\n\n* Search on Google/Github\n* If you can't find anything, open an issue\n* If you feel comfortable about fixing the issue, fork the repo\n* Commit to your local branch (which must be different from `master`)\n* Submit your Pull Request (be sure to include tests and update documentation)\n\n**[Back to top](#table-of-contents)**\n\n### License\n\n>The MIT License (MIT)\n>\n>Copyright (c) 2010 - 2016 Charlie Robbins, Jarrett Cruger & the Contributors.\n>\n>Permission is hereby granted, free of charge, to any person obtaining a copy\n>of this software and associated documentation files (the \"Software\"), to deal\n>in the Software without restriction, including without limitation the rights\n>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n>copies of the Software, and to permit persons to whom the Software is\n>furnished to do so, subject to the following conditions:\n>\n>The above copyright notice and this permission notice shall be included in\n>all copies or substantial portions of the Software.\n>\n>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n>THE SOFTWARE.\n",
./lib/node_modules/http-proxy/node_modules/requires-port/package.json:  "readme": "# requires-port\n\n[![Made by unshift](https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square)](http://unshift.io)[![Version npm](http://img.shields.io/npm/v/requires-port.svg?style=flat-square)](http://browsenpm.org/package/requires-port)[![Build Status](http://img.shields.io/travis/unshiftio/requires-port/master.svg?style=flat-square)](https://travis-ci.org/unshiftio/requires-port)[![Dependencies](https://img.shields.io/david/unshiftio/requires-port.svg?style=flat-square)](https://david-dm.org/unshiftio/requires-port)[![Coverage Status](http://img.shields.io/coveralls/unshiftio/requires-port/master.svg?style=flat-square)](https://coveralls.io/r/unshiftio/requires-port?branch=master)[![IRC channel](http://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square)](http://webchat.freenode.net/?channels=unshift)\n\nThe module name says it all, check if a protocol requires a given port.\n\n## Installation\n\nThis module is intended to be used with browserify or Node.js and is distributed\nin the public npm registry. To install it simply run the following command from\nyour CLI:\n\n```j\nnpm install --save requires-port\n```\n\n## Usage\n\nThe module exports it self as function and requires 2 arguments:\n\n1. The port number, can be a string or number.\n2. Protocol, can be `http`, `http:` or even `https://yomoma.com`. We just split\n   it at `:` and use the first result. We currently accept the following\n   protocols:\n   - `http`\n   - `https`\n   - `ws`\n   - `wss`\n   - `ftp`\n   - `gopher`\n   - `file`\n\nIt returns a boolean that indicates if protocol requires this port to be added\nto your URL.\n\n```js\n'use strict';\n\nvar required = require('requires-port');\n\nconsole.log(required('8080', 'http')) // true\nconsole.log(required('80', 'http'))   // false\n```\n\n# License\n\nMIT\n",
./lib/node_modules/http-proxy/node_modules/requires-port/README.md:console.log(required('8080', 'http')) // true
./lib/node_modules/http-proxy/node_modules/requires-port/README.md:console.log(required('80', 'http'))   // false
./lib/node_modules/http-proxy/node_modules/eventemitter3/package.json:  "readme": "# EventEmitter3\n\n[![Version npm](https://img.shields.io/npm/v/eventemitter3.svg?style=flat-square)](http://browsenpm.org/package/eventemitter3)[![Build Status](https://img.shields.io/travis/primus/eventemitter3/master.svg?style=flat-square)](https://travis-ci.org/primus/eventemitter3)[![Dependencies](https://img.shields.io/david/primus/eventemitter3.svg?style=flat-square)](https://david-dm.org/primus/eventemitter3)[![Coverage Status](https://img.shields.io/coveralls/primus/eventemitter3/master.svg?style=flat-square)](https://coveralls.io/r/primus/eventemitter3?branch=master)[![IRC channel](https://img.shields.io/badge/IRC-irc.freenode.net%23primus-00a8ff.svg?style=flat-square)](https://webchat.freenode.net/?channels=primus)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/eventemitter3.svg)](https://saucelabs.com/u/eventemitter3)\n\nEventEmitter3 is a high performance EventEmitter. It has been micro-optimized\nfor various of code paths making this, one of, if not the fastest EventEmitter\navailable for Node.js and browsers. The module is API compatible with the\nEventEmitter that ships by default with Node.js but there are some slight\ndifferences:\n\n- Domain support has been removed.\n- We do not `throw` an error when you emit an `error` event and nobody is\n  listening.\n- The `newListener` event is removed as the use-cases for this functionality are\n  really just edge cases.\n- No `setMaxListeners` and it's pointless memory leak warnings. If you want to\n  add `end` listeners you should be able to do that without modules complaining.\n- No `listenerCount` function. Use `EE.listeners(event).length` instead.\n- Support for custom context for events so there is no need to use `fn.bind`.\n- `listeners` method can do existence checking instead of returning only arrays.\n\nIt's a drop in replacement for existing EventEmitters, but just faster. Free\nperformance, who wouldn't want that? The EventEmitter is written in EcmaScript 3\nso it will work in the oldest browsers and node versions that you need to\nsupport.\n\n## Installation\n\n```bash\n$ npm install --save eventemitter3        # npm\n$ component install primus/eventemitter3  # Component\n$ bower install eventemitter3             # Bower\n```\n\n## Usage\n\nAfter installation the only thing you need to do is require the module:\n\n```js\nvar EventEmitter = require('eventemitter3');\n```\n\nAnd you're ready to create your own EventEmitter instances. For the API\ndocumentation, please follow the official Node.js documentation:\n\nhttp://nodejs.org/api/events.html\n\n### Contextual emits\n\nWe've upgraded the API of the `EventEmitter.on`, `EventEmitter.once` and\n`EventEmitter.removeListener` to accept an extra argument which is the `context`\nor `this` value that should be set for the emitted events. This means you no\nlonger have the overhead of an event that required `fn.bind` in order to get a\ncustom `this` value.\n\n```js\nvar EE = new EventEmitter()\n  , context = { foo: 'bar' };\n\nfunction emitted() {\n  console.log(this === context); // true\n}\n\nEE.once('event-name', emitted, context);\nEE.on('another-event', emitted, context);\nEE.removeListener('another-event', emitted, context);\n```\n\n### Existence\n\nTo check if there is already a listener for a given event you can supply the\n`listeners` method with an extra boolean argument. This will transform the\noutput from an array, to a boolean value which indicates if there are listeners\nin place for the given event:\n\n```js\nvar EE = new EventEmitter();\nEE.once('event-name', function () {});\nEE.on('another-event', function () {});\n\nEE.listeners('event-name', true); // returns true\nEE.listeners('unknown-name', true); // returns false\n```\n\n## License\n\n[MIT](LICENSE)\n",
./lib/node_modules/http-proxy/node_modules/eventemitter3/README.md:  console.log(this === context); // true
./lib/node_modules/http-proxy/README.md:  <img src="https://raw.github.com/nodejitsu/node-http-proxy/master/doc/logo.png"/>
./lib/node_modules/http-proxy/README.md:    * [Setup a stand-alone proxy server with custom server logic](#setup-a-stand-alone-proxy-server-with-custom-server-logic)
./lib/node_modules/http-proxy/README.md:    * [Logo](#logo)
./lib/node_modules/http-proxy/README.md:#### Setup a stand-alone proxy server with custom server logic
./lib/node_modules/http-proxy/README.md:and also you can put your own logic to handle the request.
./lib/node_modules/http-proxy/README.md:// Create a proxy server with custom application logic
./lib/node_modules/http-proxy/README.md:  // You can define here your custom logic to handle the request
./lib/node_modules/http-proxy/README.md:console.log("listening on port 5050")
./lib/node_modules/http-proxy/README.md:// Create a proxy server with custom application logic
./lib/node_modules/http-proxy/README.md:  // You can define here your custom logic to handle the request
./lib/node_modules/http-proxy/README.md:console.log("listening on port 5050")
./lib/node_modules/http-proxy/README.md:  console.log('RAW Response from the target', JSON.stringify(proxyRes.headers, true, 2));
./lib/node_modules/http-proxy/README.md:  console.log('Client disconnected');
./lib/node_modules/is-glob/package.json:  "readme": "# is-glob [![NPM version](https://img.shields.io/npm/v/is-glob.svg?style=flat)](https://www.npmjs.com/package/is-glob) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-glob.svg?style=flat)](https://npmjs.org/package/is-glob)  [![NPM total downloads](https://img.shields.io/npm/dt/is-glob.svg?style=flat)](https://npmjs.org/package/is-glob) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-glob.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-glob) [![Windows Build Status](https://img.shields.io/appveyor/ci/jonschlinkert/is-glob.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/jonschlinkert/is-glob)\n\n> Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a better user experience.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-glob\n```\n\nYou might also be interested in [is-valid-glob](https://github.com/jonschlinkert/is-valid-glob) and [has-glob](https://github.com/jonschlinkert/has-glob).\n\n## Usage\n\n```js\nvar isGlob = require('is-glob');\n```\n\n### Default behavior\n\n**True**\n\nPatterns that have glob characters or regex patterns will return `true`:\n\n```js\nisGlob('!foo.js');\nisGlob('*.js');\nisGlob('**/abc.js');\nisGlob('abc/*.js');\nisGlob('abc/(aaa|bbb).js');\nisGlob('abc/[a-z].js');\nisGlob('abc/{a,b}.js');\n//=> true\n```\n\nExtglobs\n\n```js\nisGlob('abc/@(a).js');\nisGlob('abc/!(a).js');\nisGlob('abc/+(a).js');\nisGlob('abc/*(a).js');\nisGlob('abc/?(a).js');\n//=> true\n```\n\n**False**\n\nEscaped globs or extglobs return `false`:\n\n```js\nisGlob('abc/\\\\@(a).js');\nisGlob('abc/\\\\!(a).js');\nisGlob('abc/\\\\+(a).js');\nisGlob('abc/\\\\*(a).js');\nisGlob('abc/\\\\?(a).js');\nisGlob('\\\\!foo.js');\nisGlob('\\\\*.js');\nisGlob('\\\\*\\\\*/abc.js');\nisGlob('abc/\\\\*.js');\nisGlob('abc/\\\\(aaa|bbb).js');\nisGlob('abc/\\\\[a-z].js');\nisGlob('abc/\\\\{a,b}.js');\n//=> false\n```\n\nPatterns that do not have glob patterns return `false`:\n\n```js\nisGlob('abc.js');\nisGlob('abc/def/ghi.js');\nisGlob('foo.js');\nisGlob('abc/@.js');\nisGlob('abc/+.js');\nisGlob('abc/?.js');\nisGlob();\nisGlob(null);\n//=> false\n```\n\nArrays are also `false` (If you want to check if an array has a glob pattern, use [has-glob](https://github.com/jonschlinkert/has-glob)):\n\n```js\nisGlob(['**/*.js']);\nisGlob(['foo.js']);\n//=> false\n```\n\n### Option strict\n\nWhen `options.strict === false` the behavior is less strict in determining if a pattern is a glob. Meaning that\nsome patterns that would return `false` may return `true`. This is done so that matching libraries like [micromatch](https://github.com/micromatch/micromatch) have a chance at determining if the pattern is a glob or not.\n\n**True**\n\nPatterns that have glob characters or regex patterns will return `true`:\n\n```js\nisGlob('!foo.js', {strict: false});\nisGlob('*.js', {strict: false});\nisGlob('**/abc.js', {strict: false});\nisGlob('abc/*.js', {strict: false});\nisGlob('abc/(aaa|bbb).js', {strict: false});\nisGlob('abc/[a-z].js', {strict: false});\nisGlob('abc/{a,b}.js', {strict: false});\n//=> true\n```\n\nExtglobs\n\n```js\nisGlob('abc/@(a).js', {strict: false});\nisGlob('abc/!(a).js', {strict: false});\nisGlob('abc/+(a).js', {strict: false});\nisGlob('abc/*(a).js', {strict: false});\nisGlob('abc/?(a).js', {strict: false});\n//=> true\n```\n\n**False**\n\nEscaped globs or extglobs return `false`:\n\n```js\nisGlob('\\\\!foo.js', {strict: false});\nisGlob('\\\\*.js', {strict: false});\nisGlob('\\\\*\\\\*/abc.js', {strict: false});\nisGlob('abc/\\\\*.js', {strict: false});\nisGlob('abc/\\\\(aaa|bbb).js', {strict: false});\nisGlob('abc/\\\\[a-z].js', {strict: false});\nisGlob('abc/\\\\{a,b}.js', {strict: false});\n//=> false\n```\n\n## About\n\n### Related projects\n\n* [assemble](https://www.npmjs.com/package/assemble): Get the rocks out of your socks! Assemble makes you fast at creating web projects… [more](https://github.com/assemble/assemble) | [homepage](https://github.com/assemble/assemble \"Get the rocks out of your socks! Assemble makes you fast at creating web projects. Assemble is used by thousands of projects for rapid prototyping, creating themes, scaffolds, boilerplates, e-books, UI components, API documentation, blogs, building websit\")\n* [base](https://www.npmjs.com/package/base): Framework for rapidly creating high quality node.js applications, using plugins like building blocks | [homepage](https://github.com/node-base/base \"Framework for rapidly creating high quality node.js applications, using plugins like building blocks\")\n* [update](https://www.npmjs.com/package/update): Be scalable! Update is a new, open source developer framework and CLI for automating updates… [more](https://github.com/update/update) | [homepage](https://github.com/update/update \"Be scalable! Update is a new, open source developer framework and CLI for automating updates of any kind in code projects.\")\n* [verb](https://www.npmjs.com/package/verb): Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used… [more](https://github.com/verbose/verb) | [homepage](https://github.com/verbose/verb \"Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used on hundreds of projects of all sizes to generate everything from API docs to readmes.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 47 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 1  | [doowb](https://github.com/doowb) |  \n| 1  | [tuvistavie](https://github.com/tuvistavie) |  \n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on August 07, 2017._",
./lib/node_modules/is-glob/README.md:* [assemble](https://www.npmjs.com/package/assemble): Get the rocks out of your socks! Assemble makes you fast at creating web projects… [more](https://github.com/assemble/assemble) | [homepage](https://github.com/assemble/assemble "Get the rocks out of your socks! Assemble makes you fast at creating web projects. Assemble is used by thousands of projects for rapid prototyping, creating themes, scaffolds, boilerplates, e-books, UI components, API documentation, blogs, building websit")
./lib/node_modules/express-logging/.npmignore:*.log
./lib/node_modules/express-logging/package.json:  "name": "express-logging",
./lib/node_modules/express-logging/package.json:  "description": "Express middleware to log each request and response",
./lib/node_modules/express-logging/package.json:    "url": "git@github.com:telefonica/node-express-logging.git"
./lib/node_modules/express-logging/package.json:  "main": "lib/logging",
./lib/node_modules/express-logging/package.json:    "logging",
./lib/node_modules/express-logging/package.json:  "readme": "# express-logging\n\nExpress middleware to log, using a configurable logger, each request and response.\n\n[![npm version](https://badge.fury.io/js/express-logging.svg)](http://badge.fury.io/js/express-logging)\n[![Build Status](https://travis-ci.org/telefonica/node-express-logging.svg)](https://travis-ci.org/telefonica/node-express-logging)\n[![Coverage Status](https://img.shields.io/coveralls/telefonica/node-express-logging.svg)](https://coveralls.io/r/telefonica/node-express-logging)\n\n## Installation\n\n```bash\nnpm install express-logging\n```\n\n## Basic usage\n\n```js\nvar express = require('express'),\n    expressLogging = require('express-logging'),\n    logger = require('logops');\n\nvar app = express();\napp.use(expressLogging(logger));\n\napp.listen(3000);\n```\n\n## Extended usage with options\n\nAn optional argument `options` can customize enhanced aspects for the logging. This argument is an object with the following elements:\n\n - `blacklist` is available to prevent some resources from being logged (for example, static resources). This argument is an array of strings. If the URL path starts with any of the elements of the blacklist array, then the logging of this request/response is ignored.\n - `policy` is a string to customize how the info is logged. It supports two values: `message` or `params`. The former serializes all the log entry into a single string message. The latter passes to the logger an object with the log entry parameters and a second argument with the message; this policy is useful in order to process these parameters by systems like logstash. The default value is `message`.\n\nThe following example would ignore any resource available at either `/images` or `/html`. It also activates the logging policy `params`.\n\n```js\nvar blacklist = ['/images', '/html'];\napp.use(expressLogging(logger, {blacklist: blacklist, policy: 'params'}));\n```\n\n## Logs\n\n### Logging with default policy **message**\n\nThe request is logged with:\n\n```js\nlogger.info('Request from %s: %s %s', clientIpAddress, requestMethod, requestUrl);\n```\n\nA response without `Location` header is logged with:\n\n```js\nlogger.info('Response with status %d in %d ms.', responseStatusCode, duration);\n```\n\nA response with `Location` header is logged with:\n\n```js\nlogger.info('Response with status %d in %d ms. Location: %s', responseStatusCode, duration, locationHeader);\n```\n\nBoth response log entries include the `duration` of the whole transaction (between receiving the request until replying with the response).\n\n### Logging with policy **params**\n\nThe request is logged with:\n\n```js\nvar params = {requestClientIp: requestClientIp, requestMethod: requestMethod, requestUrl: requestUrl};\nlogger.info(params, 'Request from %s: %s', requestMethod, requestUrl);\n```\n\nA response without `Location` header is logged with:\n\n```js\nvar params = {responseStatusCode: responseStatusCode, responseDuration: duration};\nlogger.info(params, 'Response with status %d', responseStatusCode);\n```\n\nA response with `Location` header is logged with:\n\n```js\nvar params = {responseStatusCode: responseStatusCode, responseDuration: duration, responseLocation: locationHeader};\nlogger.info(params, 'Response with status %d', responseStatusCode);\n```\n\nBoth response log entries include the `duration` of the whole transaction (between receiving the request until replying with the response).\n\n## License\n\nCopyright 2015, 2016 [Telefónica Investigación y Desarrollo, S.A.U](http://www.tid.es)\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n",
./lib/node_modules/express-logging/package.json:    "url": "https://github.com/telefonica/node-express-logging/issues"
./lib/node_modules/express-logging/package.json:  "_id": "express-logging@1.1.1",
./lib/node_modules/express-logging/package.json:  "_from": "express-logging@",
./lib/node_modules/express-logging/package.json:  "_resolved": "https://registry.npmjs.org/express-logging/-/express-logging-1.1.1.tgz"
./lib/node_modules/express-logging/test/unit/logging-test.js:  var loggingMiddleware,
./lib/node_modules/express-logging/test/unit/logging-test.js:      loggerSpy;
./lib/node_modules/express-logging/test/unit/logging-test.js:    var loggerMock = {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggerSpy = sinon.spy(loggerMock, 'info');
./lib/node_modules/express-logging/test/unit/logging-test.js:    var LoggingMiddleware = proxyquire('../../lib/logging', {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware = new LoggingMiddleware(loggerMock);
./lib/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response', function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0]).to.be.equal('Response with status %d in %d ms.');
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal(200);
./lib/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with location header', function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0]).to.be.equal('Response with status %d in %d ms. Location: %s');
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal(302);
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[3]).to.be.equal('http://localhost:9000/location');
./lib/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with client IP from XFF header', function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0]).to.be.equal('Response with status %d in %d ms.');
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal(200);
./lib/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with client IP from request if invalid XFF header', function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0]).to.be.equal('Response with status %d in %d ms.');
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal(200);
./lib/node_modules/express-logging/test/unit/logging-test.js:  var loggingMiddleware,
./lib/node_modules/express-logging/test/unit/logging-test.js:      loggerSpy;
./lib/node_modules/express-logging/test/unit/logging-test.js:    var loggerMock = {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggerSpy = sinon.spy(loggerMock, 'info');
./lib/node_modules/express-logging/test/unit/logging-test.js:    var LoggingMiddleware = proxyquire('../../lib/logging', {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware = new LoggingMiddleware(loggerMock, {policy: 'params'});
./lib/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response', function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseStatusCode).to.be.equal(200);
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseLocation).not.to.be.defined;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal('Response with status %d');
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[2]).to.be.equal(200);
./lib/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with location header', function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseStatusCode).to.be.equal(302);
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseLocation).to.be.equal('http://localhost:9000/location');
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal('Response with status %d');
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[2]).to.be.equal(302);
./lib/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with client IP from XFF header', function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseStatusCode).to.be.equal(200);
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseLocation).not.to.be.defined;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal('Response with status %d');
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[2]).to.be.equal(200);
./lib/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response with client IP from request if invalid XFF header', function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseStatusCode).to.be.equal(200);
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0].responseLocation).not.to.be.defined;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal('Response with status %d');
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[2]).to.be.equal(200);
./lib/node_modules/express-logging/test/unit/logging-test.js:  var loggingMiddleware,
./lib/node_modules/express-logging/test/unit/logging-test.js:      loggerSpy;
./lib/node_modules/express-logging/test/unit/logging-test.js:    var loggerMock = {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggerSpy = sinon.spy(loggerMock, 'info');
./lib/node_modules/express-logging/test/unit/logging-test.js:    var LoggingMiddleware = proxyquire('../../lib/logging', {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware = new LoggingMiddleware(loggerMock, {blacklist: ['/blacklist']});
./lib/node_modules/express-logging/test/unit/logging-test.js:  it('should log the request and response', function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.calledTwice).to.be.true;
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(0).args).to.be.deep.equal([
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[0]).to.be.equal('Response with status %d in %d ms.');
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.getCall(1).args[1]).to.be.equal(200);
./lib/node_modules/express-logging/test/unit/logging-test.js:  it('should not log anything when the url path is in the blacklist', function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:    loggingMiddleware(req, res, function() {
./lib/node_modules/express-logging/test/unit/logging-test.js:      expect(loggerSpy.called).to.be.false;
./lib/node_modules/express-logging/README.md:# express-logging
./lib/node_modules/express-logging/README.md:Express middleware to log, using a configurable logger, each request and response.
./lib/node_modules/express-logging/README.md:[![npm version](https://badge.fury.io/js/express-logging.svg)](http://badge.fury.io/js/express-logging)
./lib/node_modules/express-logging/README.md:[![Build Status](https://travis-ci.org/telefonica/node-express-logging.svg)](https://travis-ci.org/telefonica/node-express-logging)
./lib/node_modules/express-logging/README.md:[![Coverage Status](https://img.shields.io/coveralls/telefonica/node-express-logging.svg)](https://coveralls.io/r/telefonica/node-express-logging)
./lib/node_modules/express-logging/README.md:npm install express-logging
./lib/node_modules/express-logging/README.md:    expressLogging = require('express-logging'),
./lib/node_modules/express-logging/README.md:    logger = require('logops');
./lib/node_modules/express-logging/README.md:app.use(expressLogging(logger));
./lib/node_modules/express-logging/README.md:An optional argument `options` can customize enhanced aspects for the logging. This argument is an object with the following elements:
./lib/node_modules/express-logging/README.md: - `blacklist` is available to prevent some resources from being logged (for example, static resources). This argument is an array of strings. If the URL path starts with any of the elements of the blacklist array, then the logging of this request/response is ignored.
./lib/node_modules/express-logging/README.md: - `policy` is a string to customize how the info is logged. It supports two values: `message` or `params`. The former serializes all the log entry into a single string message. The latter passes to the logger an object with the log entry parameters and a second argument with the message; this policy is useful in order to process these parameters by systems like logstash. The default value is `message`.
./lib/node_modules/express-logging/README.md:The following example would ignore any resource available at either `/images` or `/html`. It also activates the logging policy `params`.
./lib/node_modules/express-logging/README.md:app.use(expressLogging(logger, {blacklist: blacklist, policy: 'params'}));
./lib/node_modules/express-logging/README.md:The request is logged with:
./lib/node_modules/express-logging/README.md:logger.info('Request from %s: %s %s', clientIpAddress, requestMethod, requestUrl);
./lib/node_modules/express-logging/README.md:A response without `Location` header is logged with:
./lib/node_modules/express-logging/README.md:logger.info('Response with status %d in %d ms.', responseStatusCode, duration);
./lib/node_modules/express-logging/README.md:A response with `Location` header is logged with:
./lib/node_modules/express-logging/README.md:logger.info('Response with status %d in %d ms. Location: %s', responseStatusCode, duration, locationHeader);
./lib/node_modules/express-logging/README.md:Both response log entries include the `duration` of the whole transaction (between receiving the request until replying with the response).
./lib/node_modules/express-logging/README.md:The request is logged with:
./lib/node_modules/express-logging/README.md:logger.info(params, 'Request from %s: %s', requestMethod, requestUrl);
./lib/node_modules/express-logging/README.md:A response without `Location` header is logged with:
./lib/node_modules/express-logging/README.md:logger.info(params, 'Response with status %d', responseStatusCode);
./lib/node_modules/express-logging/README.md:A response with `Location` header is logged with:
./lib/node_modules/express-logging/README.md:logger.info(params, 'Response with status %d', responseStatusCode);
./lib/node_modules/express-logging/README.md:Both response log entries include the `duration` of the whole transaction (between receiving the request until replying with the response).
./lib/node_modules/express-logging/lib/logging.js: * Express middleware to log the request and response.
./lib/node_modules/express-logging/lib/logging.js: * @param {Object} logger
./lib/node_modules/express-logging/lib/logging.js: *      - policy: Policy to generate the log entry in the logger. Possible values:
./lib/node_modules/express-logging/lib/logging.js:module.exports = function(logger, opts) {
./lib/node_modules/express-logging/lib/logging.js:  return function loggingMiddleware(req, res, next) {
./lib/node_modules/express-logging/lib/logging.js:        logger.info(requestParams, 'Request: %s %s', req.method, req.originalUrl);
./lib/node_modules/express-logging/lib/logging.js:        logger.info('Request from %s: %s %s', getClientIp(req), req.method, req.originalUrl);
./lib/node_modules/express-logging/lib/logging.js:          logger.info(responseParams, 'Response with status %d', res.statusCode);
./lib/node_modules/express-logging/lib/logging.js:            logger.info('Response with status %d in %d ms. Location: %s', res.statusCode, duration, location);
./lib/node_modules/express-logging/lib/logging.js:            logger.info('Response with status %d in %d ms.', res.statusCode, duration);
./lib/node_modules/morgan/HISTORY.md:    - `clf` for the common log format
./lib/node_modules/morgan/HISTORY.md:  * Add `combined` log format
./lib/node_modules/morgan/HISTORY.md:  * Add `common` log format
./lib/node_modules/morgan/package.json:  "description": "HTTP request logger middleware for node.js",
./lib/node_modules/morgan/package.json:    "logger",
./lib/node_modules/morgan/package.json:  "readme": "# morgan\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nHTTP request logger middleware for node.js\n\n> Named after [Dexter](http://en.wikipedia.org/wiki/Dexter_Morgan), a show you should not watch until completion.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar morgan = require('morgan')\n```\n\n### morgan(format, options)\n\nCreate a new morgan logger middleware function using the given `format` and `options`.\nThe `format` argument may be a string of a predefined name (see below for the names),\na string of a format string, or a function that will produce a log entry.\n\nThe `format` function will be called with three arguments `tokens`, `req`, and `res`,\nwhere `tokens` is an object with all defined tokens, `req` is the HTTP request and `res`\nis the HTTP response. The function is expected to return a string that will be the log\nline, or `undefined` / `null` to skip logging.\n\n#### Using a predefined format string\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan('tiny')\n```\n\n#### Using format string of predefined tokens\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan(':method :url :status :res[content-length] - :response-time ms')\n```\n\n#### Using a custom format function\n\n<!-- eslint-disable no-undef -->\n\n``` js\nmorgan(function (tokens, req, res) {\n  return [\n    tokens.method(req, res),\n    tokens.url(req, res),\n    tokens.status(req, res),\n    tokens.res(req, res, 'content-length'), '-',\n    tokens['response-time'](req, res), 'ms'\n  ].join(' ')\n})\n```\n\n#### Options\n\nMorgan accepts these properties in the options object.\n\n##### immediate\n\nWrite log line on request instead of response. This means that a requests will\nbe logged even if the server crashes, _but data from the response (like the\nresponse code, content length, etc.) cannot be logged_.\n\n##### skip\n\nFunction to determine if logging is skipped, defaults to `false`. This function\nwill be called as `skip(req, res)`.\n\n<!-- eslint-disable no-undef -->\n\n```js\n// EXAMPLE: only log error responses\nmorgan('combined', {\n  skip: function (req, res) { return res.statusCode < 400 }\n})\n```\n\n##### stream\n\nOutput stream for writing log lines, defaults to `process.stdout`.\n\n#### Predefined Formats\n\nThere are various pre-defined formats provided:\n\n##### combined\n\nStandard Apache combined log output.\n\n```\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] \":referrer\" \":user-agent\"\n```\n\n##### common\n\nStandard Apache common log output.\n\n```\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length]\n```\n\n##### dev\n\nConcise output colored by response status for development use. The `:status`\ntoken will be colored red for server error codes, yellow for client error\ncodes, cyan for redirection codes, and uncolored for all other codes.\n\n```\n:method :url :status :response-time ms - :res[content-length]\n```\n\n##### short\n\nShorter than default, also including response time.\n\n```\n:remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms\n```\n\n##### tiny\n\nThe minimal output.\n\n```\n:method :url :status :res[content-length] - :response-time ms\n```\n\n#### Tokens\n\n##### Creating new tokens\n\nTo define a token, simply invoke `morgan.token()` with the name and a callback function.\nThis callback function is expected to return a string value. The value returned is then\navailable as \":type\" in this case:\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan.token('type', function (req, res) { return req.headers['content-type'] })\n```\n\nCalling `morgan.token()` using the same name as an existing token will overwrite that\ntoken definition.\n\nThe token function is expected to be called with the arguments `req` and `res`, representing\nthe HTTP request and HTTP response. Additionally, the token can accept further arguments of\nit's choosing to customize behavior.\n\n##### :date[format]\n\nThe current date and time in UTC. The available formats are:\n\n  - `clf` for the common log format (`\"10/Oct/2000:13:55:36 +0000\"`)\n  - `iso` for the common ISO 8601 date time format (`2000-10-10T13:55:36.000Z`)\n  - `web` for the common RFC 1123 date time format (`Tue, 10 Oct 2000 13:55:36 GMT`)\n\nIf no format is given, then the default is `web`.\n\n##### :http-version\n\nThe HTTP version of the request.\n\n##### :method\n\nThe HTTP method of the request.\n\n##### :referrer\n\nThe Referrer header of the request. This will use the standard mis-spelled Referer header if exists, otherwise Referrer.\n\n##### :remote-addr\n\nThe remote address of the request. This will use `req.ip`, otherwise the standard `req.connection.remoteAddress` value (socket address).\n\n##### :remote-user\n\nThe user authenticated as part of Basic auth for the request.\n\n##### :req[header]\n\nThe given `header` of the request.\n\n##### :res[header]\n\nThe given `header` of the response.\n\n##### :response-time[digits]\n\nThe time between the request coming into `morgan` and when the response\nheaders are written, in milliseconds.\n\nThe `digits` argument is a number that specifies the number of digits to\ninclude on the number, defaulting to `3`, which provides microsecond precision.\n\n##### :status\n\nThe status code of the response.\n\nIf the request/response cycle completes before a response was sent to the\nclient (for example, the TCP socket closed prematurely by a client aborting\nthe request), then the status will be empty (displayed as `\"-\"` in the log).\n\n##### :url\n\nThe URL of the request. This will use `req.originalUrl` if exists, otherwise `req.url`.\n\n##### :user-agent\n\nThe contents of the User-Agent header of the request.\n\n### morgan.compile(format)\n\nCompile a format string into a `format` function for use by `morgan`. A format string\nis a string that represents a single log line and can utilize token syntax.\nTokens are references by `:token-name`. If tokens accept arguments, they can\nbe passed using `[]`, for example: `:token-name[pretty]` would pass the string\n`'pretty'` as an argument to the token `token-name`.\n\nThe function returned from `morgan.compile` takes three arguments `tokens`, `req`, and\n`res`, where `tokens` is object with all defined tokens, `req` is the HTTP request and\n`res` is the HTTP response. The function will return a string that will be the log line,\nor `undefined` / `null` to skip logging.\n\nNormally formats are defined using `morgan.format(name, format)`, but for certain\nadvanced uses, this compile function is directly available.\n\n## Examples\n\n### express/connect\n\nSimple app that will log all request in the Apache combined format to STDOUT\n\n```js\nvar express = require('express')\nvar morgan = require('morgan')\n\nvar app = express()\n\napp.use(morgan('combined'))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### vanilla http server\n\nSimple app that will log all request in the Apache combined format to STDOUT\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar morgan = require('morgan')\n\n// create \"middleware\"\nvar logger = morgan('combined')\n\nhttp.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  logger(req, res, function (err) {\n    if (err) return done(err)\n\n    // respond to request\n    res.setHeader('content-type', 'text/plain')\n    res.end('hello, world!')\n  })\n})\n```\n\n### write logs to a file\n\n#### single file\n\nSimple app that will log all requests in the Apache combined format to the file\n`access.log`.\n\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar morgan = require('morgan')\nvar path = require('path')\n\nvar app = express()\n\n// create a write stream (in append mode)\nvar accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})\n\n// setup the logger\napp.use(morgan('combined', {stream: accessLogStream}))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n#### log file rotation\n\nSimple app that will log all requests in the Apache combined format to one log\nfile per day in the `log/` directory using the\n[rotating-file-stream module](https://www.npmjs.com/package/rotating-file-stream).\n\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar morgan = require('morgan')\nvar path = require('path')\nvar rfs = require('rotating-file-stream')\n\nvar app = express()\nvar logDirectory = path.join(__dirname, 'log')\n\n// ensure log directory exists\nfs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)\n\n// create a rotating write stream\nvar accessLogStream = rfs('access.log', {\n  interval: '1d', // rotate daily\n  path: logDirectory\n})\n\n// setup the logger\napp.use(morgan('combined', {stream: accessLogStream}))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### split / dual logging\n\nThe `morgan` middleware can be used as many times as needed, enabling\ncombinations like:\n\n  * Log entry on request and one on response\n  * Log all requests to file, but errors to console\n  * ... and more!\n\nSample app that will log all requests to a file using Apache format, but\nerror responses are logged to the console:\n\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar morgan = require('morgan')\nvar path = require('path')\n\nvar app = express()\n\n// log only 4xx and 5xx responses to console\napp.use(morgan('dev', {\n  skip: function (req, res) { return res.statusCode < 400 }\n}))\n\n// log all requests to access.log\napp.use(morgan('common', {\n  stream: fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})\n}))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### use custom token formats\n\nSample app that will use custom token formats. This adds an ID to all requests and displays it using the `:id` token.\n\n```js\nvar express = require('express')\nvar morgan = require('morgan')\nvar uuid = require('node-uuid')\n\nmorgan.token('id', function getId (req) {\n  return req.id\n})\n\nvar app = express()\n\napp.use(assignId)\napp.use(morgan(':id :method :url :response-time'))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n\nfunction assignId (req, res, next) {\n  req.id = uuid.v4()\n  next()\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/morgan.svg\n[npm-url]: https://npmjs.org/package/morgan\n[travis-image]: https://img.shields.io/travis/expressjs/morgan/master.svg\n[travis-url]: https://travis-ci.org/expressjs/morgan\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/morgan/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/morgan?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/morgan.svg\n[downloads-url]: https://npmjs.org/package/morgan\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./lib/node_modules/morgan/node_modules/depd/Readme.md:logging source.
./lib/node_modules/morgan/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n",
./lib/node_modules/morgan/node_modules/depd/index.js:    // call to self as log
./lib/node_modules/morgan/node_modules/depd/index.js:    log.call(deprecate, message)
./lib/node_modules/morgan/node_modules/depd/index.js:function log (message, site) {
./lib/node_modules/morgan/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./lib/node_modules/morgan/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/morgan/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/morgan/node_modules/debug/package.json:    "log",
./lib/node_modules/morgan/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./lib/node_modules/morgan/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./lib/node_modules/morgan/node_modules/debug/README.md:  change the behavior of the debug logging:
./lib/node_modules/morgan/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./lib/node_modules/morgan/node_modules/debug/README.md:var log = debug('app:log');
./lib/node_modules/morgan/node_modules/debug/README.md:// set this namespace to log via console.log
./lib/node_modules/morgan/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./lib/node_modules/morgan/node_modules/debug/README.md:log('goes to stdout');
./lib/node_modules/morgan/node_modules/debug/README.md:// overrides all per-namespace log settings
./lib/node_modules/morgan/node_modules/debug/README.md:debug.log = console.info.bind(console);
./lib/node_modules/morgan/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./lib/node_modules/morgan/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./lib/node_modules/morgan/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./lib/node_modules/morgan/node_modules/debug/src/browser.js:exports.log = log;
./lib/node_modules/morgan/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./lib/node_modules/morgan/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./lib/node_modules/morgan/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./lib/node_modules/morgan/node_modules/debug/src/browser.js:function log() {
./lib/node_modules/morgan/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./lib/node_modules/morgan/node_modules/debug/src/browser.js:    && console.log
./lib/node_modules/morgan/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./lib/node_modules/morgan/node_modules/debug/src/node.js:exports.log = log;
./lib/node_modules/morgan/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./lib/node_modules/morgan/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./lib/node_modules/morgan/node_modules/debug/src/node.js:function log() {
./lib/node_modules/morgan/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./lib/node_modules/morgan/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./lib/node_modules/morgan/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./lib/node_modules/morgan/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./lib/node_modules/morgan/node_modules/debug/src/debug.js: * Previous log timestamp.
./lib/node_modules/morgan/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./lib/node_modules/morgan/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./lib/node_modules/morgan/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./lib/node_modules/morgan/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./lib/node_modules/morgan/node_modules/debug/karma.conf.js:    // level of logging
./lib/node_modules/morgan/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./lib/node_modules/morgan/node_modules/debug/component.json:    "log",
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/package.json:  "readme": "# safe-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/safe-buffer/master.svg\n[travis-url]: https://travis-ci.org/feross/safe-buffer\n[npm-image]: https://img.shields.io/npm/v/safe-buffer.svg\n[npm-url]: https://npmjs.org/package/safe-buffer\n[downloads-image]: https://img.shields.io/npm/dm/safe-buffer.svg\n[downloads-url]: https://npmjs.org/package/safe-buffer\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n#### Safer Node.js Buffer API\n\n**Use the new Node.js Buffer APIs (`Buffer.from`, `Buffer.alloc`,\n`Buffer.allocUnsafe`, `Buffer.allocUnsafeSlow`) in all versions of Node.js.**\n\n**Uses the built-in implementation when available.**\n\n## install\n\n```\nnpm install safe-buffer\n```\n\n## usage\n\nThe goal of this package is to provide a safe replacement for the node.js `Buffer`.\n\nIt's a drop-in replacement for `Buffer`. You can use it by adding one `require` line to\nthe top of your node.js modules:\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n\n// Existing buffer code will continue to work without issues:\n\nnew Buffer('hey', 'utf8')\nnew Buffer([1, 2, 3], 'utf8')\nnew Buffer(obj)\nnew Buffer(16) // create an uninitialized buffer (potentially unsafe)\n\n// But you can use these new explicit APIs to make clear what you want:\n\nBuffer.from('hey', 'utf8') // convert from many types to a Buffer\nBuffer.alloc(16) // create a zero-filled buffer (safe)\nBuffer.allocUnsafe(16) // create an uninitialized buffer (potentially unsafe)\n```\n\n## api\n\n### Class Method: Buffer.from(array)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `array` {Array}\n\nAllocates a new `Buffer` using an `array` of octets.\n\n```js\nconst buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]);\n  // creates a new Buffer containing ASCII bytes\n  // ['b','u','f','f','e','r']\n```\n\nA `TypeError` will be thrown if `array` is not an `Array`.\n\n### Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `arrayBuffer` {ArrayBuffer} The `.buffer` property of a `TypedArray` or\n  a `new ArrayBuffer()`\n* `byteOffset` {Number} Default: `0`\n* `length` {Number} Default: `arrayBuffer.length - byteOffset`\n\nWhen passed a reference to the `.buffer` property of a `TypedArray` instance,\nthe newly created `Buffer` will share the same allocated memory as the\nTypedArray.\n\n```js\nconst arr = new Uint16Array(2);\narr[0] = 5000;\narr[1] = 4000;\n\nconst buf = Buffer.from(arr.buffer); // shares the memory with arr;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 a0 0f>\n\n// changing the TypedArray changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 70 17>\n```\n\nThe optional `byteOffset` and `length` arguments specify a memory range within\nthe `arrayBuffer` that will be shared by the `Buffer`.\n\n```js\nconst ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\nconsole.log(buf.length);\n  // Prints: 2\n```\n\nA `TypeError` will be thrown if `arrayBuffer` is not an `ArrayBuffer`.\n\n### Class Method: Buffer.from(buffer)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `buffer` {Buffer}\n\nCopies the passed `buffer` data onto a new `Buffer` instance.\n\n```js\nconst buf1 = Buffer.from('buffer');\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\nconsole.log(buf1.toString());\n  // 'auffer'\nconsole.log(buf2.toString());\n  // 'buffer' (copy is not changed)\n```\n\nA `TypeError` will be thrown if `buffer` is not a `Buffer`.\n\n### Class Method: Buffer.from(str[, encoding])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `str` {String} String to encode.\n* `encoding` {String} Encoding to use, Default: `'utf8'`\n\nCreates a new `Buffer` containing the given JavaScript string `str`. If\nprovided, the `encoding` parameter identifies the character encoding.\nIf not provided, `encoding` defaults to `'utf8'`.\n\n```js\nconst buf1 = Buffer.from('this is a tést');\nconsole.log(buf1.toString());\n  // prints: this is a tést\nconsole.log(buf1.toString('ascii'));\n  // prints: this is a tC)st\n\nconst buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');\nconsole.log(buf2.toString());\n  // prints: this is a tést\n```\n\nA `TypeError` will be thrown if `str` is not a string.\n\n### Class Method: Buffer.alloc(size[, fill[, encoding]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n* `fill` {Value} Default: `undefined`\n* `encoding` {String} Default: `utf8`\n\nAllocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the\n`Buffer` will be *zero-filled*.\n\n```js\nconst buf = Buffer.alloc(5);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nThe `size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nIf `fill` is specified, the allocated `Buffer` will be initialized by calling\n`buf.fill(fill)`. See [`buf.fill()`][] for more information.\n\n```js\nconst buf = Buffer.alloc(5, 'a');\nconsole.log(buf);\n  // <Buffer 61 61 61 61 61>\n```\n\nIf both `fill` and `encoding` are specified, the allocated `Buffer` will be\ninitialized by calling `buf.fill(fill, encoding)`. For example:\n\n```js\nconst buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\nconsole.log(buf);\n  // <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n```\n\nCalling `Buffer.alloc(size)` can be significantly slower than the alternative\n`Buffer.allocUnsafe(size)` but ensures that the newly created `Buffer` instance\ncontents will *never contain sensitive data*.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### Class Method: Buffer.allocUnsafe(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* `Buffer` of `size` bytes.  The `size` must\nbe less than or equal to the value of `require('buffer').kMaxLength` (on 64-bit\narchitectures, `kMaxLength` is `(2^31)-1`). Otherwise, a [`RangeError`][] is\nthrown. A zero-length Buffer will be created if a `size` less than or equal to\n0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\n```js\nconst buf = Buffer.allocUnsafe(5);\nconsole.log(buf);\n  // <Buffer 78 e0 82 02 01>\n  // (octets will be different, every time)\nbuf.fill(0);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nA `TypeError` will be thrown if `size` is not a number.\n\nNote that the `Buffer` module pre-allocates an internal `Buffer` instance of\nsize `Buffer.poolSize` that is used as a pool for the fast allocation of new\n`Buffer` instances created using `Buffer.allocUnsafe(size)` (and the deprecated\n`new Buffer(size)` constructor) only when `size` is less than or equal to\n`Buffer.poolSize >> 1` (floor of `Buffer.poolSize` divided by two). The default\nvalue of `Buffer.poolSize` is `8192` but can be modified.\n\nUse of this pre-allocated internal memory pool is a key difference between\ncalling `Buffer.alloc(size, fill)` vs. `Buffer.allocUnsafe(size).fill(fill)`.\nSpecifically, `Buffer.alloc(size, fill)` will *never* use the internal Buffer\npool, while `Buffer.allocUnsafe(size).fill(fill)` *will* use the internal\nBuffer pool if `size` is less than or equal to half `Buffer.poolSize`. The\ndifference is subtle but can be important when an application requires the\nadditional performance that `Buffer.allocUnsafe(size)` provides.\n\n### Class Method: Buffer.allocUnsafeSlow(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* and non-pooled `Buffer` of `size` bytes.  The\n`size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\nWhen using `Buffer.allocUnsafe()` to allocate new `Buffer` instances,\nallocations under 4KB are, by default, sliced from a single pre-allocated\n`Buffer`. This allows applications to avoid the garbage collection overhead of\ncreating many individually allocated Buffers. This approach improves both\nperformance and memory usage by eliminating the need to track and cleanup as\nmany `Persistent` objects.\n\nHowever, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled Buffer instance using `Buffer.allocUnsafeSlow()` then\ncopy out the relevant bits.\n\n```js\n// need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on('readable', () => {\n  const data = socket.read();\n  // allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n  // copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n  store.push(sb);\n});\n```\n\nUse of `Buffer.allocUnsafeSlow()` should be used only as a last resort *after*\na developer has observed undue memory retention in their applications.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### All the Rest\n\nThe rest of the `Buffer` API is exactly the same as in node.js.\n[See the docs](https://nodejs.org/api/buffer.html).\n\n\n## Related links\n\n- [Node.js issue: Buffer(number) is unsafe](https://github.com/nodejs/node/issues/4660)\n- [Node.js Enhancement Proposal: Buffer.from/Buffer.alloc/Buffer.zalloc/Buffer() soft-deprecate](https://github.com/nodejs/node-eps/pull/4)\n\n## Why is `Buffer` unsafe?\n\nToday, the node.js `Buffer` constructor is overloaded to handle many different argument\ntypes like `String`, `Array`, `Object`, `TypedArrayView` (`Uint8Array`, etc.),\n`ArrayBuffer`, and also `Number`.\n\nThe API is optimized for convenience: you can throw any type at it, and it will try to do\nwhat you want.\n\nBecause the Buffer constructor is so powerful, you often see code like this:\n\n```js\n// Convert UTF-8 strings to hex\nfunction toHex (str) {\n  return new Buffer(str).toString('hex')\n}\n```\n\n***But what happens if `toHex` is called with a `Number` argument?***\n\n### Remote Memory Disclosure\n\nIf an attacker can make your program call the `Buffer` constructor with a `Number`\nargument, then they can make it allocate uninitialized memory from the node.js process.\nThis could potentially disclose TLS private keys, user data, or database passwords.\n\nWhen the `Buffer` constructor is passed a `Number` argument, it returns an\n**UNINITIALIZED** block of memory of the specified `size`. When you create a `Buffer` like\nthis, you **MUST** overwrite the contents before returning it to the user.\n\nFrom the [node.js docs](https://nodejs.org/api/buffer.html#buffer_new_buffer_size):\n\n> `new Buffer(size)`\n>\n> - `size` Number\n>\n> The underlying memory for `Buffer` instances created in this way is not initialized.\n> **The contents of a newly created `Buffer` are unknown and could contain sensitive\n> data.** Use `buf.fill(0)` to initialize a Buffer to zeroes.\n\n(Emphasis our own.)\n\nWhenever the programmer intended to create an uninitialized `Buffer` you often see code\nlike this:\n\n```js\nvar buf = new Buffer(16)\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### Would this ever be a problem in real code?\n\nYes. It's surprisingly common to forget to check the type of your variables in a\ndynamically-typed language like JavaScript.\n\nUsually the consequences of assuming the wrong type is that your program crashes with an\nuncaught exception. But the failure mode for forgetting to check the type of arguments to\nthe `Buffer` constructor is more catastrophic.\n\nHere's an example of a vulnerable service that takes a JSON payload and converts it to\nhex:\n\n```js\n// Take a JSON payload {str: \"some string\"} and convert it to hex\nvar server = http.createServer(function (req, res) {\n  var data = ''\n  req.setEncoding('utf8')\n  req.on('data', function (chunk) {\n    data += chunk\n  })\n  req.on('end', function () {\n    var body = JSON.parse(data)\n    res.end(new Buffer(body.str).toString('hex'))\n  })\n})\n\nserver.listen(8080)\n```\n\nIn this example, an http client just has to send:\n\n```json\n{\n  \"str\": 1000\n}\n```\n\nand it will get back 1,000 bytes of uninitialized memory from the server.\n\nThis is a very serious bug. It's similar in severity to the\n[the Heartbleed bug](http://heartbleed.com/) that allowed disclosure of OpenSSL process\nmemory by remote attackers.\n\n\n### Which real-world packages were vulnerable?\n\n#### [`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht)\n\n[Mathias Buus](https://github.com/mafintosh) and I\n([Feross Aboukhadijeh](http://feross.org/)) found this issue in one of our own packages,\n[`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht). The bug would allow\nanyone on the internet to send a series of messages to a user of `bittorrent-dht` and get\nthem to reveal 20 bytes at a time of uninitialized memory from the node.js process.\n\nHere's\n[the commit](https://github.com/feross/bittorrent-dht/commit/6c7da04025d5633699800a99ec3fbadf70ad35b8)\nthat fixed it. We released a new fixed version, created a\n[Node Security Project disclosure](https://nodesecurity.io/advisories/68), and deprecated all\nvulnerable versions on npm so users will get a warning to upgrade to a newer version.\n\n#### [`ws`](https://www.npmjs.com/package/ws)\n\nThat got us wondering if there were other vulnerable packages. Sure enough, within a short\nperiod of time, we found the same issue in [`ws`](https://www.npmjs.com/package/ws), the\nmost popular WebSocket implementation in node.js.\n\nIf certain APIs were called with `Number` parameters instead of `String` or `Buffer` as\nexpected, then uninitialized server memory would be disclosed to the remote peer.\n\nThese were the vulnerable methods:\n\n```js\nsocket.send(number)\nsocket.ping(number)\nsocket.pong(number)\n```\n\nHere's a vulnerable socket server with some echo functionality:\n\n```js\nserver.on('connection', function (socket) {\n  socket.on('message', function (message) {\n    message = JSON.parse(message)\n    if (message.type === 'echo') {\n      socket.send(message.data) // send back the user's message\n    }\n  })\n})\n```\n\n`socket.send(number)` called on the server, will disclose server memory.\n\nHere's [the release](https://github.com/websockets/ws/releases/tag/1.0.1) where the issue\nwas fixed, with a more detailed explanation. Props to\n[Arnout Kazemier](https://github.com/3rd-Eden) for the quick fix. Here's the\n[Node Security Project disclosure](https://nodesecurity.io/advisories/67).\n\n\n### What's the solution?\n\nIt's important that node.js offers a fast way to get memory otherwise performance-critical\napplications would needlessly get a lot slower.\n\nBut we need a better way to *signal our intent* as programmers. **When we want\nuninitialized memory, we should request it explicitly.**\n\nSensitive functionality should not be packed into a developer-friendly API that loosely\naccepts many different types. This type of API encourages the lazy practice of passing\nvariables in without checking the type very carefully.\n\n#### A new API: `Buffer.allocUnsafe(number)`\n\nThe functionality of creating buffers with uninitialized memory should be part of another\nAPI. We propose `Buffer.allocUnsafe(number)`. This way, it's not part of an API that\nfrequently gets user input of all sorts of different types passed into it.\n\n```js\nvar buf = Buffer.allocUnsafe(16) // careful, uninitialized memory!\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### How do we fix node.js core?\n\nWe sent [a PR to node.js core](https://github.com/nodejs/node/pull/4514) (merged as\n`semver-major`) which defends against one case:\n\n```js\nvar str = 16\nnew Buffer(str, 'utf8')\n```\n\nIn this situation, it's implied that the programmer intended the first argument to be a\nstring, since they passed an encoding as a second argument. Today, node.js will allocate\nuninitialized memory in the case of `new Buffer(number, encoding)`, which is probably not\nwhat the programmer intended.\n\nBut this is only a partial solution, since if the programmer does `new Buffer(variable)`\n(without an `encoding` parameter) there's no way to know what they intended. If `variable`\nis sometimes a number, then uninitialized memory will sometimes be returned.\n\n### What's the real long-term fix?\n\nWe could deprecate and remove `new Buffer(number)` and use `Buffer.allocUnsafe(number)` when\nwe need uninitialized memory. But that would break 1000s of packages.\n\n~~We believe the best solution is to:~~\n\n~~1. Change `new Buffer(number)` to return safe, zeroed-out memory~~\n\n~~2. Create a new API for creating uninitialized Buffers. We propose: `Buffer.allocUnsafe(number)`~~\n\n#### Update\n\nWe now support adding three new APIs:\n\n- `Buffer.from(value)` - convert from any type to a buffer\n- `Buffer.alloc(size)` - create a zero-filled buffer\n- `Buffer.allocUnsafe(size)` - create an uninitialized buffer with given size\n\nThis solves the core problem that affected `ws` and `bittorrent-dht` which is\n`Buffer(variable)` getting tricked into taking a number argument.\n\nThis way, existing code continues working and the impact on the npm ecosystem will be\nminimal. Over time, npm maintainers can migrate performance-critical code to use\n`Buffer.allocUnsafe(number)` instead of `new Buffer(number)`.\n\n\n### Conclusion\n\nWe think there's a serious design issue with the `Buffer` API as it exists today. It\npromotes insecure software by putting high-risk functionality into a convenient API\nwith friendly \"developer ergonomics\".\n\nThis wasn't merely a theoretical exercise because we found the issue in some of the\nmost popular npm packages.\n\nFortunately, there's an easy fix that can be applied today. Use `safe-buffer` in place of\n`buffer`.\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n```\n\nEventually, we hope that node.js core can switch to this new, safer behavior. We believe\nthe impact on the ecosystem would be minimal since it's not a breaking change.\nWell-maintained, popular packages would be updated to use `Buffer.alloc` quickly, while\nolder, insecure packages would magically become safe from this attack vector.\n\n\n## links\n\n- [Node.js PR: buffer: throw if both length and enc are passed](https://github.com/nodejs/node/pull/4514)\n- [Node Security Project disclosure for `ws`](https://nodesecurity.io/advisories/67)\n- [Node Security Project disclosure for`bittorrent-dht`](https://nodesecurity.io/advisories/68)\n\n\n## credit\n\nThe original issues in `bittorrent-dht`\n([disclosure](https://nodesecurity.io/advisories/68)) and\n`ws` ([disclosure](https://nodesecurity.io/advisories/67)) were discovered by\n[Mathias Buus](https://github.com/mafintosh) and\n[Feross Aboukhadijeh](http://feross.org/).\n\nThanks to [Adam Baldwin](https://github.com/evilpacket) for helping disclose these issues\nand for his work running the [Node Security Project](https://nodesecurity.io/).\n\nThanks to [John Hiesey](https://github.com/jhiesey) for proofreading this README and\nauditing the code.\n\n\n## license\n\nMIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org)\n",
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf.length);
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf1.toString('ascii'));
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/morgan/node_modules/basic-auth/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/morgan/README.md:HTTP request logger middleware for node.js
./lib/node_modules/morgan/README.md:Create a new morgan logger middleware function using the given `format` and `options`.
./lib/node_modules/morgan/README.md:a string of a format string, or a function that will produce a log entry.
./lib/node_modules/morgan/README.md:is the HTTP response. The function is expected to return a string that will be the log
./lib/node_modules/morgan/README.md:line, or `undefined` / `null` to skip logging.
./lib/node_modules/morgan/README.md:Write log line on request instead of response. This means that a requests will
./lib/node_modules/morgan/README.md:be logged even if the server crashes, _but data from the response (like the
./lib/node_modules/morgan/README.md:response code, content length, etc.) cannot be logged_.
./lib/node_modules/morgan/README.md:Function to determine if logging is skipped, defaults to `false`. This function
./lib/node_modules/morgan/README.md:// EXAMPLE: only log error responses
./lib/node_modules/morgan/README.md:Output stream for writing log lines, defaults to `process.stdout`.
./lib/node_modules/morgan/README.md:Standard Apache combined log output.
./lib/node_modules/morgan/README.md:Standard Apache common log output.
./lib/node_modules/morgan/README.md:  - `clf` for the common log format (`"10/Oct/2000:13:55:36 +0000"`)
./lib/node_modules/morgan/README.md:the request), then the status will be empty (displayed as `"-"` in the log).
./lib/node_modules/morgan/README.md:is a string that represents a single log line and can utilize token syntax.
./lib/node_modules/morgan/README.md:`res` is the HTTP response. The function will return a string that will be the log line,
./lib/node_modules/morgan/README.md:or `undefined` / `null` to skip logging.
./lib/node_modules/morgan/README.md:Simple app that will log all request in the Apache combined format to STDOUT
./lib/node_modules/morgan/README.md:Simple app that will log all request in the Apache combined format to STDOUT
./lib/node_modules/morgan/README.md:var logger = morgan('combined')
./lib/node_modules/morgan/README.md:  logger(req, res, function (err) {
./lib/node_modules/morgan/README.md:### write logs to a file
./lib/node_modules/morgan/README.md:Simple app that will log all requests in the Apache combined format to the file
./lib/node_modules/morgan/README.md:`access.log`.
./lib/node_modules/morgan/README.md:var accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})
./lib/node_modules/morgan/README.md:// setup the logger
./lib/node_modules/morgan/README.md:#### log file rotation
./lib/node_modules/morgan/README.md:Simple app that will log all requests in the Apache combined format to one log
./lib/node_modules/morgan/README.md:file per day in the `log/` directory using the
./lib/node_modules/morgan/README.md:var logDirectory = path.join(__dirname, 'log')
./lib/node_modules/morgan/README.md:// ensure log directory exists
./lib/node_modules/morgan/README.md:fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)
./lib/node_modules/morgan/README.md:var accessLogStream = rfs('access.log', {
./lib/node_modules/morgan/README.md:  path: logDirectory
./lib/node_modules/morgan/README.md:// setup the logger
./lib/node_modules/morgan/README.md:### split / dual logging
./lib/node_modules/morgan/README.md:Sample app that will log all requests to a file using Apache format, but
./lib/node_modules/morgan/README.md:error responses are logged to the console:
./lib/node_modules/morgan/README.md:// log only 4xx and 5xx responses to console
./lib/node_modules/morgan/README.md:// log all requests to access.log
./lib/node_modules/morgan/README.md:  stream: fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})
./lib/node_modules/morgan/index.js: * Default log buffer duration.
./lib/node_modules/morgan/index.js: * Create a logger middleware.
./lib/node_modules/morgan/index.js:  // check if log entry should be skipped
./lib/node_modules/morgan/index.js:  return function logger (req, res, next) {
./lib/node_modules/morgan/index.js:    function logRequest () {
./lib/node_modules/morgan/index.js:      debug('log request')
./lib/node_modules/morgan/index.js:      // immediate log
./lib/node_modules/morgan/index.js:      logRequest()
./lib/node_modules/morgan/index.js:      // log when response finished
./lib/node_modules/morgan/index.js:      onFinished(res, logRequest)
./lib/node_modules/morgan/index.js: * Apache combined log format.
./lib/node_modules/morgan/index.js: * Apache common log format.
./lib/node_modules/morgan/index.js: * Format a Date in the common log format.
./lib/node_modules/log-requests/logger.js:const log = console.log.bind(console)
./lib/node_modules/log-requests/logger.js:module.exports = function logger (options) {
./lib/node_modules/log-requests/logger.js:    log(chalk.bold.inverse('\n\n________________REQUEST SUMMARY________________'))
./lib/node_modules/log-requests/logger.js:    log(prettyjson.render(summary))
./lib/node_modules/log-requests/package.json:  "name": "log-requests",
./lib/node_modules/log-requests/package.json:  "description": "A service that simply echos and logs all requests sent to it",
./lib/node_modules/log-requests/package.json:    "log-requests": "index.js"
./lib/node_modules/log-requests/package.json:    "url": "git+https://github.com/qubitdigital/log-requests.git"
./lib/node_modules/log-requests/package.json:    "url": "https://github.com/qubitdigital/log-requests/issues"
./lib/node_modules/log-requests/package.json:  "homepage": "https://github.com/qubitdigital/log-requests#readme",
./lib/node_modules/log-requests/package.json:  "readme": "# log-requests\nA service that simply echos and logs all requests sent to it\n\n## Usage\n```\nnpm install log-requests\nlog-requests --help\n\nUsage: log-requests [options]\n\nA service that simply echos and logs all requests sent to it\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -p, --port <port>  Specify port [2345]\n  -u, --url          Log url\n  -b, --body         Log body\n  -q, --query        Log query\n  -h, --headers      Log headers\n  -c, --cookies      Log cookies\n\nExamples:\n\n  to log requests to http://localhost:2345:\n\n  log-requests\n\n  to log requests to http://localhost:2000:\n\n  log-requests -p 2000\n  log-requests --port 2000\n\n  to log just the url and cookies for requests to http://localhost:2000:\n\n  log-requests -p 2000 -uc\n  log-requests --port 2000 --url --cookies\n\n  to log just the headers query and body for requests to http://localhost:2000:\n\n  log-requests -p 2000 -hqb\n  log-requests -p 2000 --headers --query --body\n\n```\n\n## Output\n```\nlog-requests\ncurl http://localhost:2345\n```\nResponse:\n```\n\n  {\"url\":\"/\",\"body\":{},\"query\":{},\"headers\":{\"host\":\"localhost:2345\",\"user-agent\":\"curl/7.43.0\",\"accept\":\"*/*\"},\"cookies\":{}}\n\n```\nLog:\n```\n\n  ________________REQUEST SUMMARY________________\n  url:     /\n  body:\n\n  query:\n\n  headers:\n    host:       localhost:2345\n    user-agent: curl/7.43.0\n    accept:     */*\n  cookies:\n```\n\n## Dependencies\nnodejs (https://nodejs.org/en/)\n",
./lib/node_modules/log-requests/package.json:  "_id": "log-requests@1.0.3",
./lib/node_modules/log-requests/package.json:  "_from": "log-requests@"
./lib/node_modules/log-requests/node_modules/chalk/package.json:    "log",
./lib/node_modules/log-requests/node_modules/chalk/package.json:    "logging",
./lib/node_modules/log-requests/node_modules/chalk/package.json:  "readme": "<h1 align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"https://cdn.rawgit.com/chalk/chalk/19935d6484811c5e468817f846b7b3d417d7bf4a/logo.svg\" alt=\"chalk\">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> Terminal string styling done right\n\n[![Build Status](https://travis-ci.org/chalk/chalk.svg?branch=master)](https://travis-ci.org/chalk/chalk)\n[![Coverage Status](https://coveralls.io/repos/chalk/chalk/badge.svg?branch=master)](https://coveralls.io/r/chalk/chalk?branch=master)\n[![](http://img.shields.io/badge/unicorn-approved-ff69b4.svg)](https://www.youtube.com/watch?v=9auOCbH5Ns4)\n\n\n[colors.js](https://github.com/Marak/colors.js) used to be the most popular string styling module, but it has serious deficiencies like extending `String.prototype` which causes all kinds of [problems](https://github.com/yeoman/yo/issues/68). Although there are other ones, they either do too much or not enough.\n\n**Chalk is a clean and focused alternative.**\n\n![](https://github.com/chalk/ansi-styles/raw/master/screenshot.png)\n\n\n## Why\n\n- Highly performant\n- Doesn't extend `String.prototype`\n- Expressive API\n- Ability to nest styles\n- Clean and focused\n- Auto-detects color support\n- Actively maintained\n- [Used by ~4500 modules](https://www.npmjs.com/browse/depended/chalk) as of July 15, 2015\n\n\n## Install\n\n```\n$ npm install --save chalk\n```\n\n\n## Usage\n\nChalk comes with an easy to use composable API where you just chain and nest the styles you want.\n\n```js\nvar chalk = require('chalk');\n\n// style a string\nchalk.blue('Hello world!');\n\n// combine styled and normal strings\nchalk.blue('Hello') + 'World' + chalk.red('!');\n\n// compose multiple styles using the chainable API\nchalk.blue.bgRed.bold('Hello world!');\n\n// pass in multiple arguments\nchalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz');\n\n// nest styles\nchalk.red('Hello', chalk.underline.bgBlue('world') + '!');\n\n// nest styles of the same type even (color, underline, background)\nchalk.green(\n\t'I am a green line ' +\n\tchalk.blue.underline.bold('with a blue substring') +\n\t' that becomes green again!'\n);\n```\n\nEasily define your own themes.\n\n```js\nvar chalk = require('chalk');\nvar error = chalk.bold.red;\nconsole.log(error('Error!'));\n```\n\nTake advantage of console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data).\n\n```js\nvar name = 'Sindre';\nconsole.log(chalk.green('Hello %s'), name);\n//=> Hello Sindre\n```\n\n\n## API\n\n### chalk.`<style>[.<style>...](string, [string...])`\n\nExample: `chalk.red.bold.underline('Hello', 'world');`\n\nChain [styles](#styles) and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that `Chalk.red.yellow.green` is equivalent to `Chalk.green`.\n\nMultiple arguments will be separated by space.\n\n### chalk.enabled\n\nColor support is automatically detected, but you can override it by setting the `enabled` property. You should however only do this in your own code as it applies globally to all chalk consumers.\n\nIf you need to change this in a reusable module create a new instance:\n\n```js\nvar ctx = new chalk.constructor({enabled: false});\n```\n\n### chalk.supportsColor\n\nDetect whether the terminal [supports color](https://github.com/chalk/supports-color). Used internally and handled for you, but exposed for convenience.\n\nCan be overridden by the user with the flags `--color` and `--no-color`. For situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`.\n\n### chalk.styles\n\nExposes the styles as [ANSI escape codes](https://github.com/chalk/ansi-styles).\n\nGenerally not useful, but you might need just the `.open` or `.close` escape code if you're mixing externally styled strings with your own.\n\n```js\nvar chalk = require('chalk');\n\nconsole.log(chalk.styles.red);\n//=> {open: '\\u001b[31m', close: '\\u001b[39m'}\n\nconsole.log(chalk.styles.red.open + 'Hello' + chalk.styles.red.close);\n```\n\n### chalk.hasColor(string)\n\nCheck whether a string [has color](https://github.com/chalk/has-ansi).\n\n### chalk.stripColor(string)\n\n[Strip color](https://github.com/chalk/strip-ansi) from a string.\n\nCan be useful in combination with `.supportsColor` to strip color on externally styled text when it's not supported.\n\nExample:\n\n```js\nvar chalk = require('chalk');\nvar styledString = getText();\n\nif (!chalk.supportsColor) {\n\tstyledString = chalk.stripColor(styledString);\n}\n```\n\n\n## Styles\n\n### Modifiers\n\n- `reset`\n- `bold`\n- `dim`\n- `italic` *(not widely supported)*\n- `underline`\n- `inverse`\n- `hidden`\n- `strikethrough` *(not widely supported)*\n\n### Colors\n\n- `black`\n- `red`\n- `green`\n- `yellow`\n- `blue` *(on Windows the bright version is used as normal blue is illegible)*\n- `magenta`\n- `cyan`\n- `white`\n- `gray`\n\n### Background colors\n\n- `bgBlack`\n- `bgRed`\n- `bgGreen`\n- `bgYellow`\n- `bgBlue`\n- `bgMagenta`\n- `bgCyan`\n- `bgWhite`\n\n\n## 256-colors\n\nChalk does not support anything other than the base eight colors, which guarantees it will work on all terminals and systems. Some terminals, specifically `xterm` compliant ones, will support the full range of 8-bit colors. For this the lower level [ansi-256-colors](https://github.com/jbnicolai/ansi-256-colors) package can be used.\n\n\n## Windows\n\nIf you're on Windows, do yourself a favor and use [`cmder`](http://bliker.github.io/cmder/) instead of `cmd.exe`.\n\n\n## Related\n\n- [chalk-cli](https://github.com/chalk/chalk-cli) - CLI for this module\n- [ansi-styles](https://github.com/chalk/ansi-styles/) - ANSI escape codes for styling strings in the terminal\n- [supports-color](https://github.com/chalk/supports-color/) - Detect whether a terminal supports color\n- [strip-ansi](https://github.com/chalk/strip-ansi) - Strip ANSI escape codes\n- [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes\n- [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes\n- [wrap-ansi](https://github.com/chalk/wrap-ansi) - Wordwrap a string with ANSI escape codes\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
./lib/node_modules/log-requests/node_modules/chalk/node_modules/ansi-styles/package.json:    "log",
./lib/node_modules/log-requests/node_modules/chalk/node_modules/ansi-styles/package.json:    "logging",
./lib/node_modules/log-requests/node_modules/chalk/node_modules/ansi-styles/package.json:  "readme": "# ansi-styles [![Build Status](https://travis-ci.org/chalk/ansi-styles.svg?branch=master)](https://travis-ci.org/chalk/ansi-styles)\n\n> [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) for styling strings in the terminal\n\nYou probably want the higher-level [chalk](https://github.com/chalk/chalk) module for styling your strings.\n\n![](screenshot.png)\n\n\n## Install\n\n```\n$ npm install --save ansi-styles\n```\n\n\n## Usage\n\n```js\nvar ansi = require('ansi-styles');\n\nconsole.log(ansi.green.open + 'Hello world!' + ansi.green.close);\n```\n\n\n## API\n\nEach style has an `open` and `close` property.\n\n\n## Styles\n\n### Modifiers\n\n- `reset`\n- `bold`\n- `dim`\n- `italic` *(not widely supported)*\n- `underline`\n- `inverse`\n- `hidden`\n- `strikethrough` *(not widely supported)*\n\n### Colors\n\n- `black`\n- `red`\n- `green`\n- `yellow`\n- `blue`\n- `magenta`\n- `cyan`\n- `white`\n- `gray`\n\n### Background colors\n\n- `bgBlack`\n- `bgRed`\n- `bgGreen`\n- `bgYellow`\n- `bgBlue`\n- `bgMagenta`\n- `bgCyan`\n- `bgWhite`\n\n\n## Advanced usage\n\nBy default you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module.\n\n- `ansi.modifiers`\n- `ansi.colors`\n- `ansi.bgColors`\n\n\n###### Example\n\n```js\nconsole.log(ansi.colors.green.open);\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
./lib/node_modules/log-requests/node_modules/chalk/node_modules/ansi-styles/readme.md:console.log(ansi.green.open + 'Hello world!' + ansi.green.close);
./lib/node_modules/log-requests/node_modules/chalk/node_modules/ansi-styles/readme.md:console.log(ansi.colors.green.open);
./lib/node_modules/log-requests/node_modules/chalk/node_modules/supports-color/package.json:  "readme": "# supports-color [![Build Status](https://travis-ci.org/chalk/supports-color.svg?branch=master)](https://travis-ci.org/chalk/supports-color)\n\n> Detect whether a terminal supports color\n\n\n## Install\n\n```\n$ npm install --save supports-color\n```\n\n\n## Usage\n\n```js\nvar supportsColor = require('supports-color');\n\nif (supportsColor) {\n\tconsole.log('Terminal supports color');\n}\n```\n\nIt obeys the `--color` and `--no-color` CLI flags.\n\nFor situations where using `--color` is not possible, add an environment variable `FORCE_COLOR` with any value to force color. Trumps `--no-color`.\n\n\n## Related\n\n- [supports-color-cli](https://github.com/chalk/supports-color-cli) - CLI for this module\n- [chalk](https://github.com/chalk/chalk) - Terminal string styling done right\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
./lib/node_modules/log-requests/node_modules/chalk/node_modules/supports-color/readme.md:	console.log('Terminal supports color');
./lib/node_modules/log-requests/node_modules/chalk/node_modules/strip-ansi/package.json:    "log",
./lib/node_modules/log-requests/node_modules/chalk/node_modules/strip-ansi/package.json:    "logging",
./lib/node_modules/log-requests/node_modules/chalk/readme.md:	<img width="360" src="https://cdn.rawgit.com/chalk/chalk/19935d6484811c5e468817f846b7b3d417d7bf4a/logo.svg" alt="chalk">
./lib/node_modules/log-requests/node_modules/chalk/readme.md:console.log(error('Error!'));
./lib/node_modules/log-requests/node_modules/chalk/readme.md:Take advantage of console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data).
./lib/node_modules/log-requests/node_modules/chalk/readme.md:console.log(chalk.green('Hello %s'), name);
./lib/node_modules/log-requests/node_modules/chalk/readme.md:console.log(chalk.styles.red);
./lib/node_modules/log-requests/node_modules/chalk/readme.md:console.log(chalk.styles.red.open + 'Hello' + chalk.styles.red.close);
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/package.json:  "readme": "# safe-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/safe-buffer/master.svg\n[travis-url]: https://travis-ci.org/feross/safe-buffer\n[npm-image]: https://img.shields.io/npm/v/safe-buffer.svg\n[npm-url]: https://npmjs.org/package/safe-buffer\n[downloads-image]: https://img.shields.io/npm/dm/safe-buffer.svg\n[downloads-url]: https://npmjs.org/package/safe-buffer\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n#### Safer Node.js Buffer API\n\n**Use the new Node.js Buffer APIs (`Buffer.from`, `Buffer.alloc`,\n`Buffer.allocUnsafe`, `Buffer.allocUnsafeSlow`) in all versions of Node.js.**\n\n**Uses the built-in implementation when available.**\n\n## install\n\n```\nnpm install safe-buffer\n```\n\n## usage\n\nThe goal of this package is to provide a safe replacement for the node.js `Buffer`.\n\nIt's a drop-in replacement for `Buffer`. You can use it by adding one `require` line to\nthe top of your node.js modules:\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n\n// Existing buffer code will continue to work without issues:\n\nnew Buffer('hey', 'utf8')\nnew Buffer([1, 2, 3], 'utf8')\nnew Buffer(obj)\nnew Buffer(16) // create an uninitialized buffer (potentially unsafe)\n\n// But you can use these new explicit APIs to make clear what you want:\n\nBuffer.from('hey', 'utf8') // convert from many types to a Buffer\nBuffer.alloc(16) // create a zero-filled buffer (safe)\nBuffer.allocUnsafe(16) // create an uninitialized buffer (potentially unsafe)\n```\n\n## api\n\n### Class Method: Buffer.from(array)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `array` {Array}\n\nAllocates a new `Buffer` using an `array` of octets.\n\n```js\nconst buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]);\n  // creates a new Buffer containing ASCII bytes\n  // ['b','u','f','f','e','r']\n```\n\nA `TypeError` will be thrown if `array` is not an `Array`.\n\n### Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `arrayBuffer` {ArrayBuffer} The `.buffer` property of a `TypedArray` or\n  a `new ArrayBuffer()`\n* `byteOffset` {Number} Default: `0`\n* `length` {Number} Default: `arrayBuffer.length - byteOffset`\n\nWhen passed a reference to the `.buffer` property of a `TypedArray` instance,\nthe newly created `Buffer` will share the same allocated memory as the\nTypedArray.\n\n```js\nconst arr = new Uint16Array(2);\narr[0] = 5000;\narr[1] = 4000;\n\nconst buf = Buffer.from(arr.buffer); // shares the memory with arr;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 a0 0f>\n\n// changing the TypedArray changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 70 17>\n```\n\nThe optional `byteOffset` and `length` arguments specify a memory range within\nthe `arrayBuffer` that will be shared by the `Buffer`.\n\n```js\nconst ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\nconsole.log(buf.length);\n  // Prints: 2\n```\n\nA `TypeError` will be thrown if `arrayBuffer` is not an `ArrayBuffer`.\n\n### Class Method: Buffer.from(buffer)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `buffer` {Buffer}\n\nCopies the passed `buffer` data onto a new `Buffer` instance.\n\n```js\nconst buf1 = Buffer.from('buffer');\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\nconsole.log(buf1.toString());\n  // 'auffer'\nconsole.log(buf2.toString());\n  // 'buffer' (copy is not changed)\n```\n\nA `TypeError` will be thrown if `buffer` is not a `Buffer`.\n\n### Class Method: Buffer.from(str[, encoding])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `str` {String} String to encode.\n* `encoding` {String} Encoding to use, Default: `'utf8'`\n\nCreates a new `Buffer` containing the given JavaScript string `str`. If\nprovided, the `encoding` parameter identifies the character encoding.\nIf not provided, `encoding` defaults to `'utf8'`.\n\n```js\nconst buf1 = Buffer.from('this is a tést');\nconsole.log(buf1.toString());\n  // prints: this is a tést\nconsole.log(buf1.toString('ascii'));\n  // prints: this is a tC)st\n\nconst buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');\nconsole.log(buf2.toString());\n  // prints: this is a tést\n```\n\nA `TypeError` will be thrown if `str` is not a string.\n\n### Class Method: Buffer.alloc(size[, fill[, encoding]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n* `fill` {Value} Default: `undefined`\n* `encoding` {String} Default: `utf8`\n\nAllocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the\n`Buffer` will be *zero-filled*.\n\n```js\nconst buf = Buffer.alloc(5);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nThe `size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nIf `fill` is specified, the allocated `Buffer` will be initialized by calling\n`buf.fill(fill)`. See [`buf.fill()`][] for more information.\n\n```js\nconst buf = Buffer.alloc(5, 'a');\nconsole.log(buf);\n  // <Buffer 61 61 61 61 61>\n```\n\nIf both `fill` and `encoding` are specified, the allocated `Buffer` will be\ninitialized by calling `buf.fill(fill, encoding)`. For example:\n\n```js\nconst buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\nconsole.log(buf);\n  // <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n```\n\nCalling `Buffer.alloc(size)` can be significantly slower than the alternative\n`Buffer.allocUnsafe(size)` but ensures that the newly created `Buffer` instance\ncontents will *never contain sensitive data*.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### Class Method: Buffer.allocUnsafe(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* `Buffer` of `size` bytes.  The `size` must\nbe less than or equal to the value of `require('buffer').kMaxLength` (on 64-bit\narchitectures, `kMaxLength` is `(2^31)-1`). Otherwise, a [`RangeError`][] is\nthrown. A zero-length Buffer will be created if a `size` less than or equal to\n0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\n```js\nconst buf = Buffer.allocUnsafe(5);\nconsole.log(buf);\n  // <Buffer 78 e0 82 02 01>\n  // (octets will be different, every time)\nbuf.fill(0);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nA `TypeError` will be thrown if `size` is not a number.\n\nNote that the `Buffer` module pre-allocates an internal `Buffer` instance of\nsize `Buffer.poolSize` that is used as a pool for the fast allocation of new\n`Buffer` instances created using `Buffer.allocUnsafe(size)` (and the deprecated\n`new Buffer(size)` constructor) only when `size` is less than or equal to\n`Buffer.poolSize >> 1` (floor of `Buffer.poolSize` divided by two). The default\nvalue of `Buffer.poolSize` is `8192` but can be modified.\n\nUse of this pre-allocated internal memory pool is a key difference between\ncalling `Buffer.alloc(size, fill)` vs. `Buffer.allocUnsafe(size).fill(fill)`.\nSpecifically, `Buffer.alloc(size, fill)` will *never* use the internal Buffer\npool, while `Buffer.allocUnsafe(size).fill(fill)` *will* use the internal\nBuffer pool if `size` is less than or equal to half `Buffer.poolSize`. The\ndifference is subtle but can be important when an application requires the\nadditional performance that `Buffer.allocUnsafe(size)` provides.\n\n### Class Method: Buffer.allocUnsafeSlow(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* and non-pooled `Buffer` of `size` bytes.  The\n`size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\nWhen using `Buffer.allocUnsafe()` to allocate new `Buffer` instances,\nallocations under 4KB are, by default, sliced from a single pre-allocated\n`Buffer`. This allows applications to avoid the garbage collection overhead of\ncreating many individually allocated Buffers. This approach improves both\nperformance and memory usage by eliminating the need to track and cleanup as\nmany `Persistent` objects.\n\nHowever, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled Buffer instance using `Buffer.allocUnsafeSlow()` then\ncopy out the relevant bits.\n\n```js\n// need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on('readable', () => {\n  const data = socket.read();\n  // allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n  // copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n  store.push(sb);\n});\n```\n\nUse of `Buffer.allocUnsafeSlow()` should be used only as a last resort *after*\na developer has observed undue memory retention in their applications.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### All the Rest\n\nThe rest of the `Buffer` API is exactly the same as in node.js.\n[See the docs](https://nodejs.org/api/buffer.html).\n\n\n## Related links\n\n- [Node.js issue: Buffer(number) is unsafe](https://github.com/nodejs/node/issues/4660)\n- [Node.js Enhancement Proposal: Buffer.from/Buffer.alloc/Buffer.zalloc/Buffer() soft-deprecate](https://github.com/nodejs/node-eps/pull/4)\n\n## Why is `Buffer` unsafe?\n\nToday, the node.js `Buffer` constructor is overloaded to handle many different argument\ntypes like `String`, `Array`, `Object`, `TypedArrayView` (`Uint8Array`, etc.),\n`ArrayBuffer`, and also `Number`.\n\nThe API is optimized for convenience: you can throw any type at it, and it will try to do\nwhat you want.\n\nBecause the Buffer constructor is so powerful, you often see code like this:\n\n```js\n// Convert UTF-8 strings to hex\nfunction toHex (str) {\n  return new Buffer(str).toString('hex')\n}\n```\n\n***But what happens if `toHex` is called with a `Number` argument?***\n\n### Remote Memory Disclosure\n\nIf an attacker can make your program call the `Buffer` constructor with a `Number`\nargument, then they can make it allocate uninitialized memory from the node.js process.\nThis could potentially disclose TLS private keys, user data, or database passwords.\n\nWhen the `Buffer` constructor is passed a `Number` argument, it returns an\n**UNINITIALIZED** block of memory of the specified `size`. When you create a `Buffer` like\nthis, you **MUST** overwrite the contents before returning it to the user.\n\nFrom the [node.js docs](https://nodejs.org/api/buffer.html#buffer_new_buffer_size):\n\n> `new Buffer(size)`\n>\n> - `size` Number\n>\n> The underlying memory for `Buffer` instances created in this way is not initialized.\n> **The contents of a newly created `Buffer` are unknown and could contain sensitive\n> data.** Use `buf.fill(0)` to initialize a Buffer to zeroes.\n\n(Emphasis our own.)\n\nWhenever the programmer intended to create an uninitialized `Buffer` you often see code\nlike this:\n\n```js\nvar buf = new Buffer(16)\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### Would this ever be a problem in real code?\n\nYes. It's surprisingly common to forget to check the type of your variables in a\ndynamically-typed language like JavaScript.\n\nUsually the consequences of assuming the wrong type is that your program crashes with an\nuncaught exception. But the failure mode for forgetting to check the type of arguments to\nthe `Buffer` constructor is more catastrophic.\n\nHere's an example of a vulnerable service that takes a JSON payload and converts it to\nhex:\n\n```js\n// Take a JSON payload {str: \"some string\"} and convert it to hex\nvar server = http.createServer(function (req, res) {\n  var data = ''\n  req.setEncoding('utf8')\n  req.on('data', function (chunk) {\n    data += chunk\n  })\n  req.on('end', function () {\n    var body = JSON.parse(data)\n    res.end(new Buffer(body.str).toString('hex'))\n  })\n})\n\nserver.listen(8080)\n```\n\nIn this example, an http client just has to send:\n\n```json\n{\n  \"str\": 1000\n}\n```\n\nand it will get back 1,000 bytes of uninitialized memory from the server.\n\nThis is a very serious bug. It's similar in severity to the\n[the Heartbleed bug](http://heartbleed.com/) that allowed disclosure of OpenSSL process\nmemory by remote attackers.\n\n\n### Which real-world packages were vulnerable?\n\n#### [`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht)\n\n[Mathias Buus](https://github.com/mafintosh) and I\n([Feross Aboukhadijeh](http://feross.org/)) found this issue in one of our own packages,\n[`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht). The bug would allow\nanyone on the internet to send a series of messages to a user of `bittorrent-dht` and get\nthem to reveal 20 bytes at a time of uninitialized memory from the node.js process.\n\nHere's\n[the commit](https://github.com/feross/bittorrent-dht/commit/6c7da04025d5633699800a99ec3fbadf70ad35b8)\nthat fixed it. We released a new fixed version, created a\n[Node Security Project disclosure](https://nodesecurity.io/advisories/68), and deprecated all\nvulnerable versions on npm so users will get a warning to upgrade to a newer version.\n\n#### [`ws`](https://www.npmjs.com/package/ws)\n\nThat got us wondering if there were other vulnerable packages. Sure enough, within a short\nperiod of time, we found the same issue in [`ws`](https://www.npmjs.com/package/ws), the\nmost popular WebSocket implementation in node.js.\n\nIf certain APIs were called with `Number` parameters instead of `String` or `Buffer` as\nexpected, then uninitialized server memory would be disclosed to the remote peer.\n\nThese were the vulnerable methods:\n\n```js\nsocket.send(number)\nsocket.ping(number)\nsocket.pong(number)\n```\n\nHere's a vulnerable socket server with some echo functionality:\n\n```js\nserver.on('connection', function (socket) {\n  socket.on('message', function (message) {\n    message = JSON.parse(message)\n    if (message.type === 'echo') {\n      socket.send(message.data) // send back the user's message\n    }\n  })\n})\n```\n\n`socket.send(number)` called on the server, will disclose server memory.\n\nHere's [the release](https://github.com/websockets/ws/releases/tag/1.0.1) where the issue\nwas fixed, with a more detailed explanation. Props to\n[Arnout Kazemier](https://github.com/3rd-Eden) for the quick fix. Here's the\n[Node Security Project disclosure](https://nodesecurity.io/advisories/67).\n\n\n### What's the solution?\n\nIt's important that node.js offers a fast way to get memory otherwise performance-critical\napplications would needlessly get a lot slower.\n\nBut we need a better way to *signal our intent* as programmers. **When we want\nuninitialized memory, we should request it explicitly.**\n\nSensitive functionality should not be packed into a developer-friendly API that loosely\naccepts many different types. This type of API encourages the lazy practice of passing\nvariables in without checking the type very carefully.\n\n#### A new API: `Buffer.allocUnsafe(number)`\n\nThe functionality of creating buffers with uninitialized memory should be part of another\nAPI. We propose `Buffer.allocUnsafe(number)`. This way, it's not part of an API that\nfrequently gets user input of all sorts of different types passed into it.\n\n```js\nvar buf = Buffer.allocUnsafe(16) // careful, uninitialized memory!\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### How do we fix node.js core?\n\nWe sent [a PR to node.js core](https://github.com/nodejs/node/pull/4514) (merged as\n`semver-major`) which defends against one case:\n\n```js\nvar str = 16\nnew Buffer(str, 'utf8')\n```\n\nIn this situation, it's implied that the programmer intended the first argument to be a\nstring, since they passed an encoding as a second argument. Today, node.js will allocate\nuninitialized memory in the case of `new Buffer(number, encoding)`, which is probably not\nwhat the programmer intended.\n\nBut this is only a partial solution, since if the programmer does `new Buffer(variable)`\n(without an `encoding` parameter) there's no way to know what they intended. If `variable`\nis sometimes a number, then uninitialized memory will sometimes be returned.\n\n### What's the real long-term fix?\n\nWe could deprecate and remove `new Buffer(number)` and use `Buffer.allocUnsafe(number)` when\nwe need uninitialized memory. But that would break 1000s of packages.\n\n~~We believe the best solution is to:~~\n\n~~1. Change `new Buffer(number)` to return safe, zeroed-out memory~~\n\n~~2. Create a new API for creating uninitialized Buffers. We propose: `Buffer.allocUnsafe(number)`~~\n\n#### Update\n\nWe now support adding three new APIs:\n\n- `Buffer.from(value)` - convert from any type to a buffer\n- `Buffer.alloc(size)` - create a zero-filled buffer\n- `Buffer.allocUnsafe(size)` - create an uninitialized buffer with given size\n\nThis solves the core problem that affected `ws` and `bittorrent-dht` which is\n`Buffer(variable)` getting tricked into taking a number argument.\n\nThis way, existing code continues working and the impact on the npm ecosystem will be\nminimal. Over time, npm maintainers can migrate performance-critical code to use\n`Buffer.allocUnsafe(number)` instead of `new Buffer(number)`.\n\n\n### Conclusion\n\nWe think there's a serious design issue with the `Buffer` API as it exists today. It\npromotes insecure software by putting high-risk functionality into a convenient API\nwith friendly \"developer ergonomics\".\n\nThis wasn't merely a theoretical exercise because we found the issue in some of the\nmost popular npm packages.\n\nFortunately, there's an easy fix that can be applied today. Use `safe-buffer` in place of\n`buffer`.\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n```\n\nEventually, we hope that node.js core can switch to this new, safer behavior. We believe\nthe impact on the ecosystem would be minimal since it's not a breaking change.\nWell-maintained, popular packages would be updated to use `Buffer.alloc` quickly, while\nolder, insecure packages would magically become safe from this attack vector.\n\n\n## links\n\n- [Node.js PR: buffer: throw if both length and enc are passed](https://github.com/nodejs/node/pull/4514)\n- [Node Security Project disclosure for `ws`](https://nodesecurity.io/advisories/67)\n- [Node Security Project disclosure for`bittorrent-dht`](https://nodesecurity.io/advisories/68)\n\n\n## credit\n\nThe original issues in `bittorrent-dht`\n([disclosure](https://nodesecurity.io/advisories/68)) and\n`ws` ([disclosure](https://nodesecurity.io/advisories/67)) were discovered by\n[Mathias Buus](https://github.com/mafintosh) and\n[Feross Aboukhadijeh](http://feross.org/).\n\nThanks to [Adam Baldwin](https://github.com/evilpacket) for helping disclose these issues\nand for his work running the [Node Security Project](https://nodesecurity.io/).\n\nThanks to [John Hiesey](https://github.com/jhiesey) for proofreading this README and\nauditing the code.\n\n\n## license\n\nMIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org)\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf.length);
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString('ascii'));
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/log-requests/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/package.json:  "readme": "# mime-db\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nThis is a database of all mime types.\nIt consists of a single, public JSON file and does not include any logic,\nallowing it to remain as un-opinionated as possible with an API.\nIt aggregates data from the following sources:\n\n- http://www.iana.org/assignments/media-types/media-types.xhtml\n- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types\n\n## Installation\n\n```bash\nnpm install mime-db\n```\n\n### Database Download\n\nIf you're crazy enough to use this in the browser, you can just grab the\nJSON file using [RawGit](https://rawgit.com/). It is recommended to replace\n`master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the\nJSON format may change in the future.\n\n```\nhttps://cdn.rawgit.com/jshttp/mime-db/master/db.json\n```\n\n## Usage\n\n```js\nvar db = require('mime-db');\n\n// grab data on .js files\nvar data = db['application/javascript'];\n```\n\n## Data Structure\n\nThe JSON file is a map lookup for lowercased mime types.\nEach mime type has the following properties:\n\n- `.source` - where the mime type is defined.\n    If not set, it's probably a custom media type.\n    - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n    - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml)\n    - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types)\n- `.extensions[]` - known extensions associated with this mime type.\n- `.compressible` - whether a file of this type can be gzipped.\n- `.charset` - the default charset associated with this type, if any.\n\nIf unknown, every property could be `undefined`.\n\n## Contributing\n\nTo edit the database, only make PRs against `src/custom.json` or\n`src/custom-suffix.json`.\n\nThe `src/custom.json` file is a JSON object with the MIME type as the keys\nand the values being an object with the following keys:\n\n- `compressible` - leave out if you don't know, otherwise `true`/`false` for\n  if the data represented by the time is typically compressible.\n- `extensions` - include an array of file extensions that are associated with\n  the type.\n- `notes` - human-readable notes about the type, typically what the type is.\n- `sources` - include an array of URLs of where the MIME type and the associated\n  extensions are sourced from. This needs to be a [primary source](https://en.wikipedia.org/wiki/Primary_source);\n  links to type aggregating sites and Wikipedia are _not acceptible_.\n\nTo update the build, run `npm run build`.\n\n## Adding Custom Media Types\n\nThe best way to get new media types included in this library is to register\nthem with the IANA. The community registration procedure is outlined in\n[RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types\nregistered with the IANA are automatically pulled into this library.\n\n[npm-version-image]: https://img.shields.io/npm/v/mime-db.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg\n[npm-url]: https://npmjs.org/package/mime-db\n[travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg\n[travis-url]: https://travis-ci.org/jshttp/mime-db\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master\n[node-image]: https://img.shields.io/node/v/mime-db.svg\n[node-url]: https://nodejs.org/en/download/\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/dialog-info+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/sgml-open-catalog": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.flographit": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.iptc.g2.catalogitem+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.nokia.catalogs": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-audit-dialog+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-base+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-group+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-speech+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-transform+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:    "extensions": ["txt","text","conf","def","list","log","in","ini"]
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/prs.prop.logic": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/vnd.si.uricatalogue": {
./lib/node_modules/log-requests/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/README.md:It consists of a single, public JSON file and does not include any logic,
./lib/node_modules/log-requests/node_modules/express/node_modules/finalhandler/package.json:  "readme": "# finalhandler\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nNode.js function to invoke as the final step to respond to HTTP request.\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install finalhandler\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar finalhandler = require('finalhandler')\n```\n\n### finalhandler(req, res, [options])\n\nReturns function to be invoked as the final step for the given `req` and `res`.\nThis function is to be invoked as `fn(err)`. If `err` is falsy, the handler will\nwrite out a 404 response to the `res`. If it is truthy, an error response will\nbe written out to the `res`.\n\nWhen an error is written, the following information is added to the response:\n\n  * The `res.statusCode` is set from `err.status` (or `err.statusCode`). If\n    this value is outside the 4xx or 5xx range, it will be set to 500.\n  * The `res.statusMessage` is set according to the status code.\n  * The body will be the HTML of the status code message if `env` is\n    `'production'`, otherwise will be `err.stack`.\n  * Any headers specified in an `err.headers` object.\n\nThe final handler will also unpipe anything from `req` when it is invoked.\n\n#### options.env\n\nBy default, the environment is determined by `NODE_ENV` variable, but it can be\noverridden by this option.\n\n#### options.onerror\n\nProvide a function to be called with the `err` when it exists. Can be used for\nwriting errors to a central location without excessive function generation. Called\nas `onerror(err, req, res)`.\n\n## Examples\n\n### always 404\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  done()\n})\n\nserver.listen(3000)\n```\n\n### perform simple action\n\n```js\nvar finalhandler = require('finalhandler')\nvar fs = require('fs')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n\n  fs.readFile('index.html', function (err, buf) {\n    if (err) return done(err)\n    res.setHeader('Content-Type', 'text/html')\n    res.end(buf)\n  })\n})\n\nserver.listen(3000)\n```\n\n### use with middleware-style functions\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar serveStatic = require('serve-static')\n\nvar serve = serveStatic('public')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  serve(req, res, done)\n})\n\nserver.listen(3000)\n```\n\n### keep log of all errors\n\n```js\nvar finalhandler = require('finalhandler')\nvar fs = require('fs')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res, {onerror: logerror})\n\n  fs.readFile('index.html', function (err, buf) {\n    if (err) return done(err)\n    res.setHeader('Content-Type', 'text/html')\n    res.end(buf)\n  })\n})\n\nserver.listen(3000)\n\nfunction logerror (err) {\n  console.error(err.stack || err.toString())\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/finalhandler.svg\n[npm-url]: https://npmjs.org/package/finalhandler\n[node-image]: https://img.shields.io/node/v/finalhandler.svg\n[node-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/pillarjs/finalhandler.svg\n[travis-url]: https://travis-ci.org/pillarjs/finalhandler\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/finalhandler.svg\n[coveralls-url]: https://coveralls.io/r/pillarjs/finalhandler?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/finalhandler.svg\n[downloads-url]: https://npmjs.org/package/finalhandler\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/finalhandler/README.md:### keep log of all errors
./lib/node_modules/log-requests/node_modules/express/node_modules/finalhandler/README.md:  var done = finalhandler(req, res, {onerror: logerror})
./lib/node_modules/log-requests/node_modules/express/node_modules/finalhandler/README.md:function logerror (err) {
./lib/node_modules/log-requests/node_modules/express/node_modules/send/package.json:  "readme": "# send\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nSend is a library for streaming files from the file system as a http response\nsupporting partial responses (Ranges), conditional-GET negotiation (If-Match,\nIf-Unmodified-Since, If-None-Match, If-Modified-Since), high test coverage,\nand granular events which may be leveraged to take appropriate actions in your\napplication or framework.\n\nLooking to serve up entire folders mapped to URLs? Try [serve-static](https://www.npmjs.org/package/serve-static).\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install send\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar send = require('send')\n```\n\n### send(req, path, [options])\n\nCreate a new `SendStream` for the given path to send to a `res`. The `req` is\nthe Node.js HTTP request and the `path` is a urlencoded path to send (urlencoded,\nnot the actual file-system path).\n\n#### Options\n\n##### acceptRanges\n\nEnable or disable accepting ranged requests, defaults to true.\nDisabling this will not send `Accept-Ranges` and ignore the contents\nof the `Range` request header.\n\n##### cacheControl\n\nEnable or disable setting `Cache-Control` response header, defaults to\ntrue. Disabling this will ignore the `immutable` and `maxAge` options.\n\n##### dotfiles\n\nSet how \"dotfiles\" are treated when encountered. A dotfile is a file\nor directory that begins with a dot (\".\"). Note this check is done on\nthe path itself without checking if the path actually exists on the\ndisk. If `root` is specified, only the dotfiles above the root are\nchecked (i.e. the root itself can be within a dotfile when when set\nto \"deny\").\n\n  - `'allow'` No special treatment for dotfiles.\n  - `'deny'` Send a 403 for any request for a dotfile.\n  - `'ignore'` Pretend like the dotfile does not exist and 404.\n\nThe default value is _similar_ to `'ignore'`, with the exception that\nthis default will not ignore the files within a directory that begins\nwith a dot, for backward-compatibility.\n\n##### end\n\nByte offset at which the stream ends, defaults to the length of the file\nminus 1. The end is inclusive in the stream, meaning `end: 3` will include\nthe 4th byte in the stream.\n\n##### etag\n\nEnable or disable etag generation, defaults to true.\n\n##### extensions\n\nIf a given file doesn't exist, try appending one of the given extensions,\nin the given order. By default, this is disabled (set to `false`). An\nexample value that will serve extension-less HTML files: `['html', 'htm']`.\nThis is skipped if the requested file already has an extension.\n\n##### immutable\n\nEnable or diable the `immutable` directive in the `Cache-Control` response\nheader, defaults to `false`. If set to `true`, the `maxAge` option should\nalso be specified to enable caching. The `immutable` directive will prevent\nsupported clients from making conditional requests during the life of the\n`maxAge` option to check if the file has changed.\n\n##### index\n\nBy default send supports \"index.html\" files, to disable this\nset `false` or to supply a new index pass a string or an array\nin preferred order.\n\n##### lastModified\n\nEnable or disable `Last-Modified` header, defaults to true. Uses the file\nsystem's last modified value.\n\n##### maxAge\n\nProvide a max-age in milliseconds for http caching, defaults to 0.\nThis can also be a string accepted by the\n[ms](https://www.npmjs.org/package/ms#readme) module.\n\n##### root\n\nServe files relative to `path`.\n\n##### start\n\nByte offset at which the stream starts, defaults to 0. The start is inclusive,\nmeaning `start: 2` will include the 3rd byte in the stream.\n\n#### Events\n\nThe `SendStream` is an event emitter and will emit the following events:\n\n  - `error` an error occurred `(err)`\n  - `directory` a directory was requested `(res, path)`\n  - `file` a file was requested `(path, stat)`\n  - `headers` the headers are about to be set on a file `(res, path, stat)`\n  - `stream` file streaming has started `(stream)`\n  - `end` streaming has completed\n\n#### .pipe\n\nThe `pipe` method is used to pipe the response into the Node.js HTTP response\nobject, typically `send(req, path, options).pipe(res)`.\n\n### .mime\n\nThe `mime` export is the global instance of of the\n[`mime` npm module](https://www.npmjs.com/package/mime).\n\nThis is used to configure the MIME types that are associated with file extensions\nas well as other options for how to resolve the MIME type of a file (like the\ndefault type to use for an unknown file extension).\n\n## Error-handling\n\nBy default when no `error` listeners are present an automatic response will be\nmade, otherwise you have full control over the response, aka you may show a 5xx\npage etc.\n\n## Caching\n\nIt does _not_ perform internal caching, you should use a reverse proxy cache\nsuch as Varnish for this, or those fancy things called CDNs. If your\napplication is small enough that it would benefit from single-node memory\ncaching, it's small enough that it does not need caching at all ;).\n\n## Debugging\n\nTo enable `debug()` instrumentation output export __DEBUG__:\n\n```\n$ DEBUG=send node app\n```\n\n## Running tests\n\n```\n$ npm install\n$ npm test\n```\n\n## Examples\n\n### Small example\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname).pipe(res)\n})\n\nserver.listen(3000)\n```\n\n### Custom file types\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Default unknown types to text/plain\nsend.mime.default_type = 'text/plain'\n\n// Add a custom type\nsend.mime.define({\n  'application/x-my-type': ['x-mt', 'x-mtt']\n})\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname).pipe(res)\n})\n\nserver.listen(3000)\n```\n\n### Custom directory index view\n\nThis is a example of serving up a structure of directories with a\ncustom function to render a listing of a directory.\n\n```js\nvar http = require('http')\nvar fs = require('fs')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Transfer arbitrary files from within /www/example.com/public/*\n// with a custom handler for directory listing\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname, {index: false, root: '/www/example.com/public'})\n  .once('directory', directory)\n  .pipe(res)\n})\n\nserver.listen(3000)\n\n// Custom directory handler\nfunction directory (res, path) {\n  var stream = this\n\n  // redirect to trailing slash for consistent url\n  if (!stream.hasTrailingSlash()) {\n    return stream.redirect(path)\n  }\n\n  // get directory list\n  fs.readdir(path, function onReaddir (err, list) {\n    if (err) return stream.error(err)\n\n    // render an index for the directory\n    res.setHeader('Content-Type', 'text/plain; charset=UTF-8')\n    res.end(list.join('\\n') + '\\n')\n  })\n}\n```\n\n### Serving from a root directory with custom error-handling\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  // your custom error-handling logic:\n  function error (err) {\n    res.statusCode = err.status || 500\n    res.end(err.message)\n  }\n\n  // your custom headers\n  function headers (res, path, stat) {\n    // serve all files for download\n    res.setHeader('Content-Disposition', 'attachment')\n  }\n\n  // your custom directory handling logic:\n  function redirect () {\n    res.statusCode = 301\n    res.setHeader('Location', req.url + '/')\n    res.end('Redirecting to ' + req.url + '/')\n  }\n\n  // transfer arbitrary files from within\n  // /www/example.com/public/*\n  send(req, parseUrl(req).pathname, {root: '/www/example.com/public'})\n  .on('error', error)\n  .on('directory', redirect)\n  .on('headers', headers)\n  .pipe(res)\n})\n\nserver.listen(3000)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/send.svg\n[npm-url]: https://npmjs.org/package/send\n[travis-image]: https://img.shields.io/travis/pillarjs/send/master.svg?label=linux\n[travis-url]: https://travis-ci.org/pillarjs/send\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/send/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/send\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/send/master.svg\n[coveralls-url]: https://coveralls.io/r/pillarjs/send?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/send.svg\n[downloads-url]: https://npmjs.org/package/send\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/package.json:  "readme": "# http-errors\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCreate HTTP errors for Express, Koa, Connect, etc. with ease.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install http-errors\n```\n\n## Example\n\n```js\nvar createError = require('http-errors')\nvar express = require('express')\nvar app = express()\n\napp.use(function (req, res, next) {\n  if (!req.user) return next(createError(401, 'Please login to view this page.'))\n  next()\n})\n```\n\n## API\n\nThis is the current API, currently extracted from Koa and subject to change.\n\nAll errors inherit from JavaScript `Error` and the exported `createError.HttpError`.\n\n### Error Properties\n\n- `expose` - can be used to signal if `message` should be sent to the client,\n  defaulting to `false` when `status` >= 500\n- `headers` - can be an object of header names to values to be sent to the\n  client, defaulting to `undefined`. When defined, the key names should all\n  be lower-cased\n- `message` - the traditional error message, which should be kept short and all\n  single line\n- `status` - the status code of the error, mirroring `statusCode` for general\n  compatibility\n- `statusCode` - the status code of the error, defaulting to `500`\n\n### createError([status], [message], [properties])\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = createError(404, 'This video does not exist!')\n```\n\n- `status: 500` - the status code as a number\n- `message` - the message of the error, defaulting to node's text for that status code.\n- `properties` - custom properties to attach to the object\n\n### new createError\\[code || name\\](\\[msg]\\))\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = new createError.NotFound()\n```\n\n- `code` - the status code as a number\n- `name` - the name of the error as a \"bumpy case\", i.e. `NotFound` or `InternalServerError`.\n\n#### List of all constructors\n\n|Status Code|Constructor Name             |\n|-----------|-----------------------------|\n|400        |BadRequest                   |\n|401        |Unauthorized                 |\n|402        |PaymentRequired              |\n|403        |Forbidden                    |\n|404        |NotFound                     |\n|405        |MethodNotAllowed             |\n|406        |NotAcceptable                |\n|407        |ProxyAuthenticationRequired  |\n|408        |RequestTimeout               |\n|409        |Conflict                     |\n|410        |Gone                         |\n|411        |LengthRequired               |\n|412        |PreconditionFailed           |\n|413        |PayloadTooLarge              |\n|414        |URITooLong                   |\n|415        |UnsupportedMediaType         |\n|416        |RangeNotSatisfiable          |\n|417        |ExpectationFailed            |\n|418        |ImATeapot                    |\n|421        |MisdirectedRequest           |\n|422        |UnprocessableEntity          |\n|423        |Locked                       |\n|424        |FailedDependency             |\n|425        |UnorderedCollection          |\n|426        |UpgradeRequired              |\n|428        |PreconditionRequired         |\n|429        |TooManyRequests              |\n|431        |RequestHeaderFieldsTooLarge  |\n|451        |UnavailableForLegalReasons   |\n|500        |InternalServerError          |\n|501        |NotImplemented               |\n|502        |BadGateway                   |\n|503        |ServiceUnavailable           |\n|504        |GatewayTimeout               |\n|505        |HTTPVersionNotSupported      |\n|506        |VariantAlsoNegotiates        |\n|507        |InsufficientStorage          |\n|508        |LoopDetected                 |\n|509        |BandwidthLimitExceeded       |\n|510        |NotExtended                  |\n|511        |NetworkAuthenticationRequired|\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/http-errors.svg\n[npm-url]: https://npmjs.org/package/http-errors\n[node-version-image]: https://img.shields.io/node/v/http-errors.svg\n[node-version-url]: https://nodejs.org/en/download/\n[travis-image]: https://img.shields.io/travis/jshttp/http-errors.svg\n[travis-url]: https://travis-ci.org/jshttp/http-errors\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/http-errors.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/http-errors\n[downloads-image]: https://img.shields.io/npm/dm/http-errors.svg\n[downloads-url]: https://npmjs.org/package/http-errors\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/Readme.md:logging source.
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    // call to self as log
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    log.call(deprecate, message)
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:function log (message, site) {
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/http-errors/README.md:  if (!req.user) return next(createError(401, 'Please login to view this page.'))
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/mime/package.json:  "readme": "# mime\n\nComprehensive MIME type mapping API based on mime-db module.\n\n## Install\n\nInstall with [npm](http://github.com/isaacs/npm):\n\n    npm install mime\n\n## Contributing / Testing\n\n    npm run test\n\n## Command Line\n\n    mime [path_string]\n\nE.g.\n\n    > mime scripts/jquery.js\n    application/javascript\n\n## API - Queries\n\n### mime.lookup(path)\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\n\n```js\nvar mime = require('mime');\n\nmime.lookup('/path/to/file.txt');         // => 'text/plain'\nmime.lookup('file.txt');                  // => 'text/plain'\nmime.lookup('.TXT');                      // => 'text/plain'\nmime.lookup('htm');                       // => 'text/html'\n```\n\n### mime.default_type\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n\n### mime.extension(type)\nGet the default extension for `type`\n\n```js\nmime.extension('text/html');                 // => 'html'\nmime.extension('application/octet-stream');  // => 'bin'\n```\n\n### mime.charsets.lookup()\n\nMap mime-type to charset\n\n```js\nmime.charsets.lookup('text/plain');        // => 'UTF-8'\n```\n\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\n\n## API - Defining Custom Types\n\nCustom type mappings can be added on a per-project basis via the following APIs.\n\n### mime.define()\n\nAdd custom mime/extension mappings\n\n```js\nmime.define({\n    'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\n    'application/x-my-type': ['x-mt', 'x-mtt'],\n    // etc ...\n});\n\nmime.lookup('x-sft');                 // => 'text/x-some-format'\n```\n\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\n\n```js\nmime.extension('text/x-some-format'); // => 'x-sf'\n```\n\n### mime.load(filepath)\n\nLoad mappings from an Apache \".types\" format file\n\n```js\nmime.load('./my_project.types');\n```\nThe .types file format is simple -  See the `types` dir for examples.\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/mime/build/test.js:console.log('\nAll tests passed');
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/mime/build/build.js:console.log(JSON.stringify(mapByType));
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/mime/README.md:(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)
./lib/node_modules/log-requests/node_modules/express/node_modules/send/node_modules/mime/types.json:{"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":["woff"],"application/font-woff2":["woff2"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["dmg"],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":["bdoc"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-otf":["otf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-ttf":["ttf","ttc"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["iso"],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":["exe"],"application/x-msdownload":["exe","dll","com","bat","msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","wmz","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":["prc","pdb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["3gpp"],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":["mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":["wav"],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":["m4a"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":["ra"],"audio/x-wav":["wav"],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/otf":["otf"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jpeg":["jpeg","jpg","jpe"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":["bmp"],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":["rtf"],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":["org"],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":["xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}
./lib/node_modules/log-requests/node_modules/express/node_modules/send/README.md:  // your custom error-handling logic:
./lib/node_modules/log-requests/node_modules/express/node_modules/send/README.md:  // your custom directory handling logic:
./lib/node_modules/log-requests/node_modules/express/node_modules/depd/Readme.md:logging source.
./lib/node_modules/log-requests/node_modules/express/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:    // call to self as log
./lib/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:    log.call(deprecate, message)
./lib/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:function log (message, site) {
./lib/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./lib/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/log-requests/node_modules/express/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/log-requests/node_modules/express/node_modules/fresh/package.json:  "readme": "# fresh\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nHTTP response freshness testing\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```\n$ npm install fresh\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar fresh = require('fresh')\n```\n\n### fresh(reqHeaders, resHeaders)\n\nCheck freshness of the response using request and response headers.\n\nWhen the response is still \"fresh\" in the client's cache `true` is\nreturned, otherwise `false` is returned to indicate that the client\ncache is now stale and the full response should be sent.\n\nWhen a client sends the `Cache-Control: no-cache` request header to\nindicate an end-to-end reload request, this module will return `false`\nto make handling these requests transparent.\n\n## Known Issues\n\nThis module is designed to only follow the HTTP specifications, not\nto work-around all kinda of client bugs (especially since this module\ntypically does not recieve enough information to understand what the\nclient actually is).\n\nThere is a known issue that in certain versions of Safari, Safari\nwill incorrectly make a request that allows this module to validate\nfreshness of the resource even when Safari does not have a\nrepresentation of the resource in the cache. The module\n[jumanji](https://www.npmjs.com/package/jumanji) can be used in\nan Express application to work-around this issue and also provides\nlinks to further reading on this Safari bug.\n\n## Example\n\n### API usage\n\n<!-- eslint-disable no-redeclare, no-undef -->\n\n```js\nvar reqHeaders = { 'if-none-match': '\"foo\"' }\nvar resHeaders = { 'etag': '\"bar\"' }\nfresh(reqHeaders, resHeaders)\n// => false\n\nvar reqHeaders = { 'if-none-match': '\"foo\"' }\nvar resHeaders = { 'etag': '\"foo\"' }\nfresh(reqHeaders, resHeaders)\n// => true\n```\n\n### Using with Node.js http server\n\n```js\nvar fresh = require('fresh')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  // perform server logic\n  // ... including adding ETag / Last-Modified response headers\n\n  if (isFresh(req, res)) {\n    // client has a fresh copy of resource\n    res.statusCode = 304\n    res.end()\n    return\n  }\n\n  // send the resource\n  res.statusCode = 200\n  res.end('hello, world!')\n})\n\nfunction isFresh (req, res) {\n  return fresh(req.headers, {\n    'etag': res.getHeader('ETag'),\n    'last-modified': res.getHeader('Last-Modified')\n  })\n}\n\nserver.listen(3000)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/fresh.svg\n[npm-url]: https://npmjs.org/package/fresh\n[node-version-image]: https://img.shields.io/node/v/fresh.svg\n[node-version-url]: https://nodejs.org/en/\n[travis-image]: https://img.shields.io/travis/jshttp/fresh/master.svg\n[travis-url]: https://travis-ci.org/jshttp/fresh\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/fresh/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/fresh?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/fresh.svg\n[downloads-url]: https://npmjs.org/package/fresh\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/fresh/README.md:  // perform server logic
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/package.json:    "log",
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:  change the behavior of the debug logging:
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:var log = debug('app:log');
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:// set this namespace to log via console.log
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:log('goes to stdout');
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:// overrides all per-namespace log settings
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:debug.log = console.info.bind(console);
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js:exports.log = log;
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js:function log() {
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js:    && console.log
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/node.js:exports.log = log;
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/node.js:function log() {
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/debug.js: * Previous log timestamp.
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/karma.conf.js:    // level of logging
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./lib/node_modules/log-requests/node_modules/express/node_modules/debug/component.json:    "log",
./lib/node_modules/log-requests/node_modules/express/node_modules/qs/package.json:  "readme": "# qs <sup>[![Version Badge][2]][1]</sup>\n\n[![Build Status][3]][4]\n[![dependency status][5]][6]\n[![dev dependency status][7]][8]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][11]][1]\n\nA querystring parsing and stringifying library with some added security.\n\nLead Maintainer: [Jordan Harband](https://github.com/ljharb)\n\nThe **qs** module was originally created and maintained by [TJ Holowaychuk](https://github.com/visionmedia/node-querystring).\n\n## Usage\n\n```javascript\nvar qs = require('qs');\nvar assert = require('assert');\n\nvar obj = qs.parse('a=c');\nassert.deepEqual(obj, { a: 'c' });\n\nvar str = qs.stringify(obj);\nassert.equal(str, 'a=c');\n```\n\n### Parsing Objects\n\n[](#preventEval)\n```javascript\nqs.parse(string, [options]);\n```\n\n**qs** allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets `[]`.\nFor example, the string `'foo[bar]=baz'` converts to:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar]=baz'), {\n    foo: {\n        bar: 'baz'\n    }\n});\n```\n\nWhen using the `plainObjects` option the parsed value is returned as a null object, created via `Object.create(null)` and as such you should be aware that prototype methods will not exist on it and a user may set those names to whatever value they like:\n\n```javascript\nvar nullObject = qs.parse('a[hasOwnProperty]=b', { plainObjects: true });\nassert.deepEqual(nullObject, { a: { hasOwnProperty: 'b' } });\n```\n\nBy default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use `plainObjects` as mentioned above, or set `allowPrototypes` to `true` which will allow user input to overwrite those properties. *WARNING* It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\n\n```javascript\nvar protoObject = qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true });\nassert.deepEqual(protoObject, { a: { hasOwnProperty: 'b' } });\n```\n\nURI encoded strings work too:\n\n```javascript\nassert.deepEqual(qs.parse('a%5Bb%5D=c'), {\n    a: { b: 'c' }\n});\n```\n\nYou can also nest your objects, like `'foo[bar][baz]=foobarbaz'`:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar][baz]=foobarbaz'), {\n    foo: {\n        bar: {\n            baz: 'foobarbaz'\n        }\n    }\n});\n```\n\nBy default, when nesting objects **qs** will only parse up to 5 children deep. This means if you attempt to parse a string like\n`'a[b][c][d][e][f][g][h][i]=j'` your resulting object will be:\n\n```javascript\nvar expected = {\n    a: {\n        b: {\n            c: {\n                d: {\n                    e: {\n                        f: {\n                            '[g][h][i]': 'j'\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nvar string = 'a[b][c][d][e][f][g][h][i]=j';\nassert.deepEqual(qs.parse(string), expected);\n```\n\nThis depth can be overridden by passing a `depth` option to `qs.parse(string, [options])`:\n\n```javascript\nvar deep = qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1 });\nassert.deepEqual(deep, { a: { b: { '[c][d][e][f][g][h][i]': 'j' } } });\n```\n\nThe depth limit helps mitigate abuse when **qs** is used to parse user input, and it is recommended to keep it a reasonably small number.\n\nFor similar reasons, by default **qs** will only parse up to 1000 parameters. This can be overridden by passing a `parameterLimit` option:\n\n```javascript\nvar limited = qs.parse('a=b&c=d', { parameterLimit: 1 });\nassert.deepEqual(limited, { a: 'b' });\n```\n\nTo bypass the leading question mark, use `ignoreQueryPrefix`:\n\n```javascript\nvar prefixed = qs.parse('?a=b&c=d', { ignoreQueryPrefix: true });\nassert.deepEqual(prefixed, { a: 'b', c: 'd' });\n```\n\nAn optional delimiter can also be passed:\n\n```javascript\nvar delimited = qs.parse('a=b;c=d', { delimiter: ';' });\nassert.deepEqual(delimited, { a: 'b', c: 'd' });\n```\n\nDelimiters can be a regular expression too:\n\n```javascript\nvar regexed = qs.parse('a=b;c=d,e=f', { delimiter: /[;,]/ });\nassert.deepEqual(regexed, { a: 'b', c: 'd', e: 'f' });\n```\n\nOption `allowDots` can be used to enable dot notation:\n\n```javascript\nvar withDots = qs.parse('a.b=c', { allowDots: true });\nassert.deepEqual(withDots, { a: { b: 'c' } });\n```\n\n### Parsing Arrays\n\n**qs** can also parse arrays using a similar `[]` notation:\n\n```javascript\nvar withArray = qs.parse('a[]=b&a[]=c');\nassert.deepEqual(withArray, { a: ['b', 'c'] });\n```\n\nYou may specify an index as well:\n\n```javascript\nvar withIndexes = qs.parse('a[1]=c&a[0]=b');\nassert.deepEqual(withIndexes, { a: ['b', 'c'] });\n```\n\nNote that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number\nto create an array. When creating arrays with specific indices, **qs** will compact a sparse array to only the existing values preserving\ntheir order:\n\n```javascript\nvar noSparse = qs.parse('a[1]=b&a[15]=c');\nassert.deepEqual(noSparse, { a: ['b', 'c'] });\n```\n\nNote that an empty string is also a value, and will be preserved:\n\n```javascript\nvar withEmptyString = qs.parse('a[]=&a[]=b');\nassert.deepEqual(withEmptyString, { a: ['', 'b'] });\n\nvar withIndexedEmptyString = qs.parse('a[0]=b&a[1]=&a[2]=c');\nassert.deepEqual(withIndexedEmptyString, { a: ['b', '', 'c'] });\n```\n\n**qs** will also limit specifying indices in an array to a maximum index of `20`. Any array members with an index of greater than `20` will\ninstead be converted to an object with the index as the key:\n\n```javascript\nvar withMaxIndex = qs.parse('a[100]=b');\nassert.deepEqual(withMaxIndex, { a: { '100': 'b' } });\n```\n\nThis limit can be overridden by passing an `arrayLimit` option:\n\n```javascript\nvar withArrayLimit = qs.parse('a[1]=b', { arrayLimit: 0 });\nassert.deepEqual(withArrayLimit, { a: { '1': 'b' } });\n```\n\nTo disable array parsing entirely, set `parseArrays` to `false`.\n\n```javascript\nvar noParsingArrays = qs.parse('a[]=b', { parseArrays: false });\nassert.deepEqual(noParsingArrays, { a: { '0': 'b' } });\n```\n\nIf you mix notations, **qs** will merge the two items into an object:\n\n```javascript\nvar mixedNotation = qs.parse('a[0]=b&a[b]=c');\nassert.deepEqual(mixedNotation, { a: { '0': 'b', b: 'c' } });\n```\n\nYou can also create arrays of objects:\n\n```javascript\nvar arraysOfObjects = qs.parse('a[][b]=c');\nassert.deepEqual(arraysOfObjects, { a: [{ b: 'c' }] });\n```\n\n### Stringifying\n\n[](#preventEval)\n```javascript\nqs.stringify(object, [options]);\n```\n\nWhen stringifying, **qs** by default URI encodes output. Objects are stringified as you would expect:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b' }), 'a=b');\nassert.equal(qs.stringify({ a: { b: 'c' } }), 'a%5Bb%5D=c');\n```\n\nThis encoding can be disabled by setting the `encode` option to `false`:\n\n```javascript\nvar unencoded = qs.stringify({ a: { b: 'c' } }, { encode: false });\nassert.equal(unencoded, 'a[b]=c');\n```\n\nEncoding can be disabled for keys by setting the `encodeValuesOnly` option to `true`:\n```javascript\nvar encodedValues = qs.stringify(\n    { a: 'b', c: ['d', 'e=f'], f: [['g'], ['h']] },\n    { encodeValuesOnly: true }\n);\nassert.equal(encodedValues,'a=b&c[0]=d&c[1]=e%3Df&f[0][0]=g&f[1][0]=h');\n```\n\nThis encoding can also be replaced by a custom encoding method set as `encoder` option:\n\n```javascript\nvar encoded = qs.stringify({ a: { b: 'c' } }, { encoder: function (str) {\n    // Passed in values `a`, `b`, `c`\n    return // Return encoded string\n}})\n```\n\n_(Note: the `encoder` option does not apply if `encode` is `false`)_\n\nAnalogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:\n\n```javascript\nvar decoded = qs.parse('x=z', { decoder: function (str) {\n    // Passed in values `x`, `z`\n    return // Return decoded string\n}})\n```\n\nExamples beyond this point will be shown as though the output is not URI encoded for clarity. Please note that the return values in these cases *will* be URI encoded during real usage.\n\nWhen arrays are stringified, by default they are given explicit indices:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] });\n// 'a[0]=b&a[1]=c&a[2]=d'\n```\n\nYou may override this by setting the `indices` option to `false`:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] }, { indices: false });\n// 'a=b&a=c&a=d'\n```\n\nYou may use the `arrayFormat` option to specify the format of the output array:\n\n```javascript\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' })\n// 'a[0]=b&a[1]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' })\n// 'a[]=b&a[]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' })\n// 'a=b&a=c'\n```\n\nWhen objects are stringified, by default they use bracket notation:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } });\n// 'a[b][c]=d&a[b][e]=f'\n```\n\nYou may override this to use dot notation by setting the `allowDots` option to `true`:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } }, { allowDots: true });\n// 'a.b.c=d&a.b.e=f'\n```\n\nEmpty strings and null values will omit the value, but the equals sign (=) remains in place:\n\n```javascript\nassert.equal(qs.stringify({ a: '' }), 'a=');\n```\n\nKey with no values (such as an empty object or array) will return nothing:\n\n```javascript\nassert.equal(qs.stringify({ a: [] }), '');\nassert.equal(qs.stringify({ a: {} }), '');\nassert.equal(qs.stringify({ a: [{}] }), '');\nassert.equal(qs.stringify({ a: { b: []} }), '');\nassert.equal(qs.stringify({ a: { b: {}} }), '');\n```\n\nProperties that are set to `undefined` will be omitted entirely:\n\n```javascript\nassert.equal(qs.stringify({ a: null, b: undefined }), 'a=');\n```\n\nThe query string may optionally be prepended with a question mark:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { addQueryPrefix: true }), '?a=b&c=d');\n```\n\nThe delimiter may be overridden with stringify as well:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { delimiter: ';' }), 'a=b;c=d');\n```\n\nIf you only want to override the serialization of `Date` objects, you can provide a `serializeDate` option:\n\n```javascript\nvar date = new Date(7);\nassert.equal(qs.stringify({ a: date }), 'a=1970-01-01T00:00:00.007Z'.replace(/:/g, '%3A'));\nassert.equal(\n    qs.stringify({ a: date }, { serializeDate: function (d) { return d.getTime(); } }),\n    'a=7'\n);\n```\n\nYou may use the `sort` option to affect the order of parameter keys:\n\n```javascript\nfunction alphabeticalSort(a, b) {\n    return a.localeCompare(b);\n}\nassert.equal(qs.stringify({ a: 'c', z: 'y', b : 'f' }, { sort: alphabeticalSort }), 'a=c&b=f&z=y');\n```\n\nFinally, you can use the `filter` option to restrict which keys will be included in the stringified output.\nIf you pass a function, it will be called for each key to obtain the replacement value. Otherwise, if you\npass an array, it will be used to select properties and array indices for stringification:\n\n```javascript\nfunction filterFunc(prefix, value) {\n    if (prefix == 'b') {\n        // Return an `undefined` value to omit a property.\n        return;\n    }\n    if (prefix == 'e[f]') {\n        return value.getTime();\n    }\n    if (prefix == 'e[g][0]') {\n        return value * 2;\n    }\n    return value;\n}\nqs.stringify({ a: 'b', c: 'd', e: { f: new Date(123), g: [2] } }, { filter: filterFunc });\n// 'a=b&c=d&e[f]=123&e[g][0]=4'\nqs.stringify({ a: 'b', c: 'd', e: 'f' }, { filter: ['a', 'e'] });\n// 'a=b&e=f'\nqs.stringify({ a: ['b', 'c', 'd'], e: 'f' }, { filter: ['a', 0, 2] });\n// 'a[0]=b&a[2]=d'\n```\n\n### Handling of `null` values\n\nBy default, `null` values are treated like empty strings:\n\n```javascript\nvar withNull = qs.stringify({ a: null, b: '' });\nassert.equal(withNull, 'a=&b=');\n```\n\nParsing does not distinguish between parameters with and without equal signs. Both are converted to empty strings.\n\n```javascript\nvar equalsInsensitive = qs.parse('a&b=');\nassert.deepEqual(equalsInsensitive, { a: '', b: '' });\n```\n\nTo distinguish between `null` values and empty strings use the `strictNullHandling` flag. In the result string the `null`\nvalues have no `=` sign:\n\n```javascript\nvar strictNull = qs.stringify({ a: null, b: '' }, { strictNullHandling: true });\nassert.equal(strictNull, 'a&b=');\n```\n\nTo parse values without `=` back to `null` use the `strictNullHandling` flag:\n\n```javascript\nvar parsedStrictNull = qs.parse('a&b=', { strictNullHandling: true });\nassert.deepEqual(parsedStrictNull, { a: null, b: '' });\n```\n\nTo completely skip rendering keys with `null` values, use the `skipNulls` flag:\n\n```javascript\nvar nullsSkipped = qs.stringify({ a: 'b', c: null}, { skipNulls: true });\nassert.equal(nullsSkipped, 'a=b');\n```\n\n### Dealing with special character sets\n\nBy default the encoding and decoding of characters is done in `utf-8`. If you\nwish to encode querystrings to a different character set (i.e.\n[Shift JIS](https://en.wikipedia.org/wiki/Shift_JIS)) you can use the\n[`qs-iconv`](https://github.com/martinheidegger/qs-iconv) library:\n\n```javascript\nvar encoder = require('qs-iconv/encoder')('shift_jis');\nvar shiftJISEncoded = qs.stringify({ a: 'こんにちは！' }, { encoder: encoder });\nassert.equal(shiftJISEncoded, 'a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I');\n```\n\nThis also works for decoding of query strings:\n\n```javascript\nvar decoder = require('qs-iconv/decoder')('shift_jis');\nvar obj = qs.parse('a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I', { decoder: decoder });\nassert.deepEqual(obj, { a: 'こんにちは！' });\n```\n\n### RFC 3986 and RFC 1738 space encoding\n\nRFC3986 used as default option and encodes ' ' to *%20* which is backward compatible.\nIn the same time, output can be stringified as per RFC1738 with ' ' equal to '+'.\n\n```\nassert.equal(qs.stringify({ a: 'b c' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC3986' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC1738' }), 'a=b+c');\n```\n\n[1]: https://npmjs.org/package/qs\n[2]: http://versionbadg.es/ljharb/qs.svg\n[3]: https://api.travis-ci.org/ljharb/qs.svg\n[4]: https://travis-ci.org/ljharb/qs\n[5]: https://david-dm.org/ljharb/qs.svg\n[6]: https://david-dm.org/ljharb/qs\n[7]: https://david-dm.org/ljharb/qs/dev-status.svg\n[8]: https://david-dm.org/ljharb/qs?type=dev\n[9]: https://ci.testling.com/ljharb/qs.png\n[10]: https://ci.testling.com/ljharb/qs\n[11]: https://nodei.co/npm/qs.png?downloads=true&stars=true\n[license-image]: http://img.shields.io/npm/l/qs.svg\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/qs.svg\n[downloads-url]: http://npm-stat.com/charts.html?package=qs\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/qs/README.md:Analogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:
./lib/node_modules/log-requests/node_modules/express/node_modules/qs/CHANGELOG.md:- [**#24**](https://github.com/ljharb/qs/issues/24) Changelog? Semver?
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/package.json:  "readme": "# mime-db\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nThis is a database of all mime types.\nIt consists of a single, public JSON file and does not include any logic,\nallowing it to remain as un-opinionated as possible with an API.\nIt aggregates data from the following sources:\n\n- http://www.iana.org/assignments/media-types/media-types.xhtml\n- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types\n\n## Installation\n\n```bash\nnpm install mime-db\n```\n\n### Database Download\n\nIf you're crazy enough to use this in the browser, you can just grab the\nJSON file using [RawGit](https://rawgit.com/). It is recommended to replace\n`master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the\nJSON format may change in the future.\n\n```\nhttps://cdn.rawgit.com/jshttp/mime-db/master/db.json\n```\n\n## Usage\n\n```js\nvar db = require('mime-db');\n\n// grab data on .js files\nvar data = db['application/javascript'];\n```\n\n## Data Structure\n\nThe JSON file is a map lookup for lowercased mime types.\nEach mime type has the following properties:\n\n- `.source` - where the mime type is defined.\n    If not set, it's probably a custom media type.\n    - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n    - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml)\n    - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types)\n- `.extensions[]` - known extensions associated with this mime type.\n- `.compressible` - whether a file of this type can be gzipped.\n- `.charset` - the default charset associated with this type, if any.\n\nIf unknown, every property could be `undefined`.\n\n## Contributing\n\nTo edit the database, only make PRs against `src/custom.json` or\n`src/custom-suffix.json`.\n\nThe `src/custom.json` file is a JSON object with the MIME type as the keys\nand the values being an object with the following keys:\n\n- `compressible` - leave out if you don't know, otherwise `true`/`false` for\n  if the data represented by the time is typically compressible.\n- `extensions` - include an array of file extensions that are associated with\n  the type.\n- `notes` - human-readable notes about the type, typically what the type is.\n- `sources` - include an array of URLs of where the MIME type and the associated\n  extensions are sourced from. This needs to be a [primary source](https://en.wikipedia.org/wiki/Primary_source);\n  links to type aggregating sites and Wikipedia are _not acceptible_.\n\nTo update the build, run `npm run build`.\n\n## Adding Custom Media Types\n\nThe best way to get new media types included in this library is to register\nthem with the IANA. The community registration procedure is outlined in\n[RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types\nregistered with the IANA are automatically pulled into this library.\n\n[npm-version-image]: https://img.shields.io/npm/v/mime-db.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg\n[npm-url]: https://npmjs.org/package/mime-db\n[travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg\n[travis-url]: https://travis-ci.org/jshttp/mime-db\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master\n[node-image]: https://img.shields.io/node/v/mime-db.svg\n[node-url]: https://nodejs.org/en/download/\n",
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/dialog-info+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/sgml-open-catalog": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.flographit": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.iptc.g2.catalogitem+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.nokia.catalogs": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-audit-dialog+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-base+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-group+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-speech+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-transform+xml": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:    "extensions": ["txt","text","conf","def","list","log","in","ini"]
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "text/prs.prop.logic": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "text/vnd.si.uricatalogue": {
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/README.md:It consists of a single, public JSON file and does not include any logic,
./lib/node_modules/log-requests/node_modules/express/node_modules/accepts/node_modules/negotiator/package.json:      "url": "http://blog.izs.me/"
./lib/node_modules/log-requests/node_modules/express/lib/response.js: *    res.location('../login');
./lib/node_modules/log-requests/node_modules/express/lib/response.js: *    res.redirect('../login'); // /blog/post/1 -> /blog/login
./lib/node_modules/log-requests/node_modules/express/lib/application.js:    onerror: logerror.bind(this)
./lib/node_modules/log-requests/node_modules/express/lib/application.js: * was mounted as "/blog" then the
./lib/node_modules/log-requests/node_modules/express/lib/application.js: * return value would be "/blog/admin".
./lib/node_modules/log-requests/node_modules/express/lib/application.js:function logerror(err) {
./lib/node_modules/log-requests/node_modules/express/lib/router/index.js:  // param logic
./lib/node_modules/log-requests/node_modules/express/lib/express.js:  'logger',
./lib/node_modules/log-requests/node_modules/express/History.md:  * Fix regression where `"Request aborted"` is logged using `res.sendFile`
./lib/node_modules/log-requests/node_modules/express/History.md:  * Fix `res.sendfile` logging standard write errors
./lib/node_modules/log-requests/node_modules/express/History.md:  * Fix `res.sendFile` logging standard write errors
./lib/node_modules/log-requests/node_modules/express/History.md:   - `app.configure` - use logic in your own app code
./lib/node_modules/log-requests/node_modules/express/History.md:    - Fix accepting non-object arguments to `logger`
./lib/node_modules/log-requests/node_modules/express/History.md:    - Fix backwards compatibility in `logger`
./lib/node_modules/log-requests/node_modules/express/History.md:  * Removed _pids/logs_ creation from express(1)
./lib/node_modules/log-requests/node_modules/express/History.md:  * Added support for `app.param(fn)` to define param logic
./lib/node_modules/log-requests/node_modules/express/History.md:  * Fixed blog example
./lib/node_modules/log-requests/node_modules/express/History.md:  * Added `app.param()` to map route params to async/sync logic
./lib/node_modules/log-requests/node_modules/express/History.md:    to do this with CommonJS modules. Also view the _blog_ example for
./lib/node_modules/log-requests/node_modules/express/History.md:  * Fixed missing space for combined log format
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log('you ordered a pizza with:');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:if (program.peppers) console.log('  - peppers');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:if (program.pineapple) console.log('  - pineapple');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:if (program.bbqSauce) console.log('  - bbq');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log('  - %s cheese', program.cheese);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log('you ordered a pizza');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:if (program.sauce) console.log('  with sauce');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:else console.log(' without sauce');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('remove ' + dir + (cmd.recursive ? ' recursively' : ''))
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' int: %j', program.integer);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' float: %j', program.float);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' optional: %j', program.optional);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' range: %j..%j', program.range[0], program.range[1]);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' list: %j', program.list);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' collect: %j', program.collect);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' verbosity: %j', program.verbose);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' args: %j', program.args);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' size: %j', program.size);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log(' drink: %j', program.drink);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('rmdir %s', dir);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:        console.log('rmdir %s', oDir);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log('command:', cmdValue);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log('environment:', envValue || "no environment given");
./lib/node_modules/log-requests/node_modules/commander/Readme.md:  console.log('  Examples:');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:  console.log('');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:  console.log('    $ custom-help --help');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:  console.log('    $ custom-help -h');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:  console.log('');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:console.log('stuff');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('setup for %s env(s) with %s mode', env, mode);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('exec "%s" using %s mode', cmd, options.exec_mode);
./lib/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('  Examples:');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:    console.log();
./lib/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('    $ deploy exec sequential');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('    $ deploy exec async');
./lib/node_modules/log-requests/node_modules/commander/Readme.md:    console.log();
./lib/node_modules/log-requests/node_modules/commander/Readme.md:    console.log('deploying "%s"', env);
./lib/node_modules/log-requests/node_modules/commander/package.json:  "readme": "# Commander.js\n\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Join the chat at https://gitter.im/tj/commander.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tj/commander.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).  \n  [API documentation](http://tj.github.com/commander.js/)\n\n\n## Installation\n\n    $ npm install commander --save\n\n## Option parsing\n\nOptions with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-P, --pineapple', 'Add pineapple')\n  .option('-b, --bbq-sauce', 'Add bbq sauce')\n  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n  .parse(process.argv);\n\nconsole.log('you ordered a pizza with:');\nif (program.peppers) console.log('  - peppers');\nif (program.pineapple) console.log('  - pineapple');\nif (program.bbqSauce) console.log('  - bbq');\nconsole.log('  - %s cheese', program.cheese);\n```\n\nShort flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc.\n\nNote that multi-word options starting with `--no` prefix negate the boolean value of the following word. For example, `--no-sauce` sets the value of `program.sauce` to false. \n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .parse(process.argv);\n\nconsole.log('you ordered a pizza');\nif (program.sauce) console.log('  with sauce');\nelse console.log(' without sauce');\n```\n\n## Version option\n\nCalling the `version` implicitly adds the `-V` and `--version` options to the command.\nWhen either of these options is present, the command prints the version number and exits.\n\n    $ ./examples/pizza -V\n    0.0.1\n\nIf you want your program to respond to the `-v` option instead of the `-V` option, simply pass custom flags to the `version` method using the same syntax as the `option` method.\n\n```js\nprogram\n  .version('0.0.1', '-v, --version')\n```\n\nThe version flags can be named anything, but the long option is required.\n\n## Command-specific options\n\nYou can attach options to a command.\n\n```js\n#!/usr/bin/env node\n\nvar program = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmd) {\n    console.log('remove ' + dir + (cmd.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nA command's options are validated when the command is used. Any unknown options will be reported as an error. However, if an action-based command does not define an action, then the options are not validated.\n\n## Coercion\n\n```js\nfunction range(val) {\n  return val.split('..').map(Number);\n}\n\nfunction list(val) {\n  return val.split(',');\n}\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nfunction increaseVerbosity(v, total) {\n  return total + 1;\n}\n\nprogram\n  .version('0.1.0')\n  .usage('[options] <file ...>')\n  .option('-i, --integer <n>', 'An integer argument', parseInt)\n  .option('-f, --float <n>', 'A float argument', parseFloat)\n  .option('-r, --range <a>..<b>', 'A range', range)\n  .option('-l, --list <items>', 'A list', list)\n  .option('-o, --optional [value]', 'An optional value')\n  .option('-c, --collect [value]', 'A repeatable value', collect, [])\n  .option('-v, --verbose', 'A value that can be increased', increaseVerbosity, 0)\n  .parse(process.argv);\n\nconsole.log(' int: %j', program.integer);\nconsole.log(' float: %j', program.float);\nconsole.log(' optional: %j', program.optional);\nprogram.range = program.range || [];\nconsole.log(' range: %j..%j', program.range[0], program.range[1]);\nconsole.log(' list: %j', program.list);\nconsole.log(' collect: %j', program.collect);\nconsole.log(' verbosity: %j', program.verbose);\nconsole.log(' args: %j', program.args);\n```\n\n## Regular Expression\n```js\nprogram\n  .version('0.1.0')\n  .option('-s --size <size>', 'Pizza size', /^(large|medium|small)$/i, 'medium')\n  .option('-d --drink [drink]', 'Drink', /^(coke|pepsi|izze)$/i)\n  .parse(process.argv);\n  \nconsole.log(' size: %j', program.size);\nconsole.log(' drink: %j', program.drink);\n```\n\n## Variadic arguments\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you have to\n append `...` to the argument name.  Here is an example:\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\n An `Array` is used for the value of a variadic argument.  This applies to `program.args` as well as the argument passed\n to your action as demonstrated above.\n\n## Specify the argument syntax\n\n```js\n#!/usr/bin/env node\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n     cmdValue = cmd;\n     envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n   console.error('no command given!');\n   process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\nAngled brackets (e.g. `<cmd>`) indicate required input. Square brackets (e.g. `[env]`) indicate optional input.\n\n## Git-style sub-commands\n\n```js\n// file: ./examples/pm\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nWhen `.command()` is invoked with a description argument, no `.action(callback)` should be called to handle sub-commands, otherwise there will be an error. This tells commander that you're going to use separate executables for sub-commands, much like `git(1)` and other popular tools.  \nThe commander will try to search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-command`, like `pm-install`, `pm-search`.\n\nOptions can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the option from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified.\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### `--harmony`\n\nYou can enable `--harmony` option in two ways:\n* Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. Note some os version don’t support this pattern.\n* Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```  \n $ ./examples/pizza --help\n\n   Usage: pizza [options]\n\n   An application for pizzas ordering\n\n   Options:\n\n     -h, --help           output usage information\n     -V, --version        output the version number\n     -p, --peppers        Add peppers\n     -P, --pineapple      Add pineapple\n     -b, --bbq            Add bbq sauce\n     -c, --cheese <type>  Add the specified type of cheese [marble]\n     -C, --no-cheese      You do not want any cheese\n\n```\n\n## Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for \"--help\". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviours, for example\n in the following executable \"stuff\" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-f, --foo', 'enable some foo')\n  .option('-b, --bar', 'enable some bar')\n  .option('-B, --baz', 'enable some baz');\n\n// must be before .parse() since\n// node's emit() is immediate\n\nprogram.on('--help', function(){\n  console.log('  Examples:');\n  console.log('');\n  console.log('    $ custom-help --help');\n  console.log('    $ custom-help -h');\n  console.log('');\n});\n\nprogram.parse(process.argv);\n\nconsole.log('stuff');\n```\n\nYields the following help output when `node script-name.js -h` or `node script-name.js --help` are run:\n\n```\n\nUsage: custom-help [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n\n  $ custom-help --help\n  $ custom-help -h\n\n```\n\n## .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\nIf you want to display help by default (e.g. if no command was provided), you can use something like:\n\n```js\nvar program = require('commander');\nvar colors = require('colors');\n\nprogram\n  .version('0.1.0')\n  .command('getstream [url]', 'get stream URL')\n  .parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp(make_red);\n}\n\nfunction make_red(txt) {\n  return colors.red(txt); //display the help text in red on the console\n}\n```\n\n## .help(cb)\n\n  Output help information and exit immediately.\n  Optional callback cb allows post-processing of help text before it is displayed.\n\n## Examples\n\n```js\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    var mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('  Examples:');\n    console.log();\n    console.log('    $ deploy exec sequential');\n    console.log('    $ deploy exec async');\n    console.log();\n  });\n\nprogram\n  .command('*')\n  .action(function(env){\n    console.log('deploying \"%s\"', env);\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\nMIT\n",
./lib/node_modules/log-requests/node_modules/commander/index.js: *          console.log('setup');
./lib/node_modules/log-requests/node_modules/commander/index.js: *          console.log('exec "%s"', cmd);
./lib/node_modules/log-requests/node_modules/commander/index.js: *          console.log('dir "%s"', dir);
./lib/node_modules/log-requests/node_modules/commander/index.js: *              console.log('dir "%s"', oDir);
./lib/node_modules/log-requests/node_modules/commander/index.js: *          console.log('deploying "%s"', env);
./lib/node_modules/log-requests/node_modules/commander/typings/index.d.ts:     *          console.log('setup');
./lib/node_modules/log-requests/node_modules/commander/typings/index.d.ts:     *          console.log('exec "%s"', cmd);
./lib/node_modules/log-requests/node_modules/commander/typings/index.d.ts:     *          console.log('dir "%s"', dir);
./lib/node_modules/log-requests/node_modules/commander/typings/index.d.ts:     *              console.log('dir "%s"', oDir);
./lib/node_modules/log-requests/node_modules/commander/typings/index.d.ts:     *          console.log('deploying "%s"', env);
./lib/node_modules/log-requests/node_modules/js-yaml/dist/js-yaml.js:      // Break this `while` cycle and go to the funciton's epilogue.
./lib/node_modules/log-requests/node_modules/js-yaml/dist/js-yaml.js:      break; // Reading is done. Go to the epilogue.
./lib/node_modules/log-requests/node_modules/js-yaml/dist/js-yaml.js:  // Epilogue.
./lib/node_modules/log-requests/node_modules/js-yaml/package.json:      "url": "http://got-ravings.blogspot.com"
./lib/node_modules/log-requests/node_modules/js-yaml/package.json:  "readme": "JS-YAML - YAML 1.2 parser / writer for JavaScript\n=================================================\n\n[![Build Status](https://travis-ci.org/nodeca/js-yaml.svg?branch=master)](https://travis-ci.org/nodeca/js-yaml)\n[![NPM version](https://img.shields.io/npm/v/js-yaml.svg)](https://www.npmjs.org/package/js-yaml)\n\n__[Online Demo](http://nodeca.github.com/js-yaml/)__\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human-friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install -g js-yaml\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<!-- esprima required only for !!js/function -->\n<script src=\"esprima.js\"></script>\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for the online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\nNotes:\n\n1. We have no resources to support browserified version. Don't expect it to be\n   well tested. Don't expect fast fixes if something goes wrong there.\n2. `!!js/function` in browser bundle will not work by default. If you really need\n   it - load `esprima` parser first (via amd or directly).\n3. `!!bin` in browser will return `Array`, because browsers do not support\n   node.js `Buffer` and adding Buffer shims is completely useless on practice.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\n``` javascript\nyaml = require('js-yaml');\nfs   = require('fs');\n\n// Get document, or throw exception on error\ntry {\n  var doc = yaml.safeLoad(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\nobject or throws `YAMLException` on error. By default, does not support regexps,\nfunctions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `onWarning` _(default: null)_ - function to call on warning messages.\n  Loader will throw on warnings if this function is not provided.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n- `json` _(default: false)_ - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, the JSON schema is not as strictly defined in the YAML specification.\nIt allows numbers in any notation, use `Null` and `NULL` as `null`, etc.\nThe core schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources, you\nmust additionally validate object structure to avoid injections:\n\n``` javascript\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string [, iterator] [, options ])\n\nSame as `safeLoad()`, but understands multi-document sources. Applies\n`iterator` to each document if specified, or returns array of documents.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string [, iterator] [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as a YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow an exception if you try to dump regexps or functions. However, you can\ndisable exceptions by setting the `skipInvalid` option to `true`.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n- `sortKeys` _(default: `false`)_ - if `true`, sort keys when dumping YAML. If a\n  function, use the function to sort the keys.\n- `lineWidth` _(default: `80`)_ - set max line width.\n- `noRefs` _(default: `false`)_ - if `true`, don't convert duplicate objects into references\n- `noCompatMode` _(default: `false`)_ - if `true` don't try to be compatible with older\n  yaml versions. Currently: don't quote \"yes\", \"no\" and so on, as required for YAML 1.1\n- `condenseFlow` _(default: `false`)_ - if `true` flow sequences will be condensed, omitting the space between `a, b`. Eg. `'[a,b]'`, and omitting the space between `key: value` and quoting the key. Eg. `'{\"a\":b}'` Can be useful when using yaml for pretty URL query params as spaces are %-encoded.\n\nThe following table show availlable styles (e.g. \"canonical\",\n\"binary\"...) available for each tag (.e.g. !!null, !!int ...). Yaml\noutput is shown on the right side after `=>` (default setting) or `->`:\n\n``` none\n!!null\n  \"canonical\"   -> \"~\"\n  \"lowercase\"   => \"null\"\n  \"uppercase\"   -> \"NULL\"\n  \"camelcase\"   -> \"Null\"\n\n!!int\n  \"binary\"      -> \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       -> \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" -> \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!bool\n  \"lowercase\"   => \"true\", \"false\"\n  \"uppercase\"   -> \"TRUE\", \"FALSE\"\n  \"camelcase\"   -> \"True\", \"False\"\n\n!!float\n  \"lowercase\"   => \".nan\", '.inf'\n  \"uppercase\"   -> \".NAN\", '.INF'\n  \"camelcase\"   -> \".NaN\", '.Inf'\n```\n\nExample:\n\n``` javascript\nsafeDump (object, {\n  'styles': {\n    '!!null': 'canonical' // dump null as ~\n  },\n  'sortKeys': true        // sort object keys\n});\n```\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS does not allow objects\nor arrays as keys, and stringifies (by calling `toString()` method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\nBreaking changes in 2.x.x -> 3.x.x\n----------------------------------\n\nIf you have not used __custom__ tags or loader classes and not loaded yaml\nfiles via `require()`, no changes are needed. Just upgrade the library.\n\nOtherwise, you should:\n\n1. Replace all occurrences of `require('xxxx.yml')` by `fs.readFileSync()` +\n  `yaml.safeLoad()`.\n2. rewrite your custom tags constructors and custom loader\n  classes, to conform the new API. See\n  [examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n  [wiki](https://github.com/nodeca/js-yaml/wiki) for details.\n\n\nLicense\n-------\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n",
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/package.json:  "readme": "argparse\n========\n\n[![Build Status](https://secure.travis-ci.org/nodeca/argparse.svg?branch=master)](http://travis-ci.org/nodeca/argparse)\n[![NPM version](https://img.shields.io/npm/v/argparse.svg)](https://www.npmjs.org/package/argparse)\n\nCLI arguments parser for node.js. Javascript port of python's\n[argparse](http://docs.python.org/dev/library/argparse.html) module\n(original version 3.2). That's a full port, except some very rare options,\nrecorded in issue tracker.\n\n**NB. Difference with original.**\n\n- Method names changed to camelCase. See [generated docs](http://nodeca.github.com/argparse/).\n- Use `defaultValue` instead of `default`.\n- Use `argparse.Const.REMAINDER` instead of `argparse.REMAINDER`, and\n  similarly for constant values `OPTIONAL`, `ZERO_OR_MORE`, and `ONE_OR_MORE`\n  (aliases for `nargs` values `'?'`, `'*'`, `'+'`, respectively), and\n  `SUPPRESS`.\n\n\nExample\n=======\n\ntest.js file:\n\n```javascript\n#!/usr/bin/env node\n'use strict';\n\nvar ArgumentParser = require('../lib/argparse').ArgumentParser;\nvar parser = new ArgumentParser({\n  version: '0.0.1',\n  addHelp:true,\n  description: 'Argparse example'\n});\nparser.addArgument(\n  [ '-f', '--foo' ],\n  {\n    help: 'foo bar'\n  }\n);\nparser.addArgument(\n  [ '-b', '--bar' ],\n  {\n    help: 'bar foo'\n  }\n);\nparser.addArgument(\n  '--baz',\n  {\n    help: 'baz bar'\n  }\n);\nvar args = parser.parseArgs();\nconsole.dir(args);\n```\n\nDisplay help:\n\n```\n$ ./test.js -h\nusage: example.js [-h] [-v] [-f FOO] [-b BAR] [--baz BAZ]\n\nArgparse example\n\nOptional arguments:\n  -h, --help         Show this help message and exit.\n  -v, --version      Show program's version number and exit.\n  -f FOO, --foo FOO  foo bar\n  -b BAR, --bar BAR  bar foo\n  --baz BAZ          baz bar\n```\n\nParse arguments:\n\n```\n$ ./test.js -f=3 --bar=4 --baz 5\n{ foo: '3', bar: '4', baz: '5' }\n```\n\nMore [examples](https://github.com/nodeca/argparse/tree/master/examples).\n\n\nArgumentParser objects\n======================\n\n```\nnew ArgumentParser({parameters hash});\n```\n\nCreates a new ArgumentParser object.\n\n**Supported params:**\n\n- ```description``` - Text to display before the argument help.\n- ```epilog``` - Text to display after the argument help.\n- ```addHelp``` - Add a -h/–help option to the parser. (default: true)\n- ```argumentDefault``` - Set the global default value for arguments. (default: null)\n- ```parents``` - A list of ArgumentParser objects whose arguments should also be included.\n- ```prefixChars``` - The set of characters that prefix optional arguments. (default: ‘-‘)\n- ```formatterClass``` - A class for customizing the help output.\n- ```prog``` - The name of the program (default: `path.basename(process.argv[1])`)\n- ```usage``` - The string describing the program usage (default: generated)\n- ```conflictHandler``` - Usually unnecessary, defines strategy for resolving conflicting optionals.\n\n**Not supported yet**\n\n- ```fromfilePrefixChars``` - The set of characters that prefix files from which additional arguments should be read.\n\n\nDetails in [original ArgumentParser guide](http://docs.python.org/dev/library/argparse.html#argumentparser-objects)\n\n\naddArgument() method\n====================\n\n```\nArgumentParser.addArgument(name or flag or [name] or [flags...], {options})\n```\n\nDefines how a single command-line argument should be parsed.\n\n- ```name or flag or [name] or [flags...]``` - Either a positional name\n  (e.g., `'foo'`), a single option (e.g., `'-f'` or `'--foo'`), an array\n  of a single positional name (e.g., `['foo']`), or an array of options\n  (e.g., `['-f', '--foo']`).\n\nOptions:\n\n- ```action``` - The basic type of action to be taken when this argument is encountered at the command line.\n- ```nargs```- The number of command-line arguments that should be consumed.\n- ```constant``` - A constant value required by some action and nargs selections.\n- ```defaultValue``` - The value produced if the argument is absent from the command line.\n- ```type``` - The type to which the command-line argument should be converted.\n- ```choices``` - A container of the allowable values for the argument.\n- ```required``` - Whether or not the command-line option may be omitted (optionals only).\n- ```help``` - A brief description of what the argument does.\n- ```metavar``` - A name for the argument in usage messages.\n- ```dest``` - The name of the attribute to be added to the object returned by parseArgs().\n\nDetails in [original add_argument guide](http://docs.python.org/dev/library/argparse.html#the-add-argument-method)\n\n\nAction (some details)\n================\n\nArgumentParser objects associate command-line arguments with actions.\nThese actions can do just about anything with the command-line arguments associated\nwith them, though most actions simply add an attribute to the object returned by\nparseArgs(). The action keyword argument specifies how the command-line arguments\nshould be handled. The supported actions are:\n\n- ```store``` - Just stores the argument’s value. This is the default action.\n- ```storeConst``` - Stores value, specified by the const keyword argument.\n  (Note that the const keyword argument defaults to the rather unhelpful None.)\n  The 'storeConst' action is most commonly used with optional arguments, that\n  specify some sort of flag.\n- ```storeTrue``` and ```storeFalse``` - Stores values True and False\n  respectively. These are special cases of 'storeConst'.\n- ```append``` - Stores a list, and appends each argument value to the list.\n  This is useful to allow an option to be specified multiple times.\n- ```appendConst``` - Stores a list, and appends value, specified by the\n  const keyword argument to the list. (Note, that the const keyword argument defaults\n  is None.) The 'appendConst' action is typically used when multiple arguments need\n  to store constants to the same list.\n- ```count``` - Counts the number of times a keyword argument occurs. For example,\n  used for increasing verbosity levels.\n- ```help``` - Prints a complete help message for all the options in the current\n  parser and then exits. By default a help action is automatically added to the parser.\n  See ArgumentParser for details of how the output is created.\n- ```version``` - Prints version information and exit. Expects a `version=`\n  keyword argument in the addArgument() call.\n\nDetails in [original action guide](http://docs.python.org/dev/library/argparse.html#action)\n\n\nSub-commands\n============\n\nArgumentParser.addSubparsers()\n\nMany programs split their functionality into a number of sub-commands, for\nexample, the svn program can invoke sub-commands like `svn checkout`, `svn update`,\nand `svn commit`. Splitting up functionality this way can be a particularly good\nidea when a program performs several different functions which require different\nkinds of command-line arguments. `ArgumentParser` supports creation of such\nsub-commands with `addSubparsers()` method. The `addSubparsers()` method is\nnormally called with no arguments and returns an special action object.\nThis object has a single method `addParser()`, which takes a command name and\nany `ArgumentParser` constructor arguments, and returns an `ArgumentParser` object\nthat can be modified as usual.\n\nExample:\n\nsub_commands.js\n```javascript\n#!/usr/bin/env node\n'use strict';\n\nvar ArgumentParser = require('../lib/argparse').ArgumentParser;\nvar parser = new ArgumentParser({\n  version: '0.0.1',\n  addHelp:true,\n  description: 'Argparse examples: sub-commands',\n});\n\nvar subparsers = parser.addSubparsers({\n  title:'subcommands',\n  dest:\"subcommand_name\"\n});\n\nvar bar = subparsers.addParser('c1', {addHelp:true});\nbar.addArgument(\n  [ '-f', '--foo' ],\n  {\n    action: 'store',\n    help: 'foo3 bar3'\n  }\n);\nvar bar = subparsers.addParser(\n  'c2',\n  {aliases:['co'], addHelp:true}\n);\nbar.addArgument(\n  [ '-b', '--bar' ],\n  {\n    action: 'store',\n    type: 'int',\n    help: 'foo3 bar3'\n  }\n);\n\nvar args = parser.parseArgs();\nconsole.dir(args);\n\n```\n\nDetails in [original sub-commands guide](http://docs.python.org/dev/library/argparse.html#sub-commands)\n\n\nContributors\n============\n\n- [Eugene Shkuropat](https://github.com/shkuropat)\n- [Paul Jacobson](https://github.com/hpaulj)\n\n[others](https://github.com/nodeca/argparse/graphs/contributors)\n\nLicense\n=======\n\nCopyright (c) 2012 [Vitaly Puzrin](https://github.com/puzrin).\nReleased under the MIT license. See\n[LICENSE](https://github.com/nodeca/argparse/blob/master/LICENSE) for details.\n\n\n",
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/README.md:- ```epilog``` - Text to display after the argument help.
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/lib/argument_parser.js: * - `epilog`  Text following the argument descriptions
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/lib/argument_parser.js:  this.epilog = options.epilog;
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/lib/argument_parser.js:  // epilog
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/lib/argument_parser.js:  formatter.addText(this.epilog);
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/argparse/lib/help/formatter.js: *      formatter.addText(this.epilog);
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	        var logical = (operator === '||' || operator === '&&');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	        var body = this.parseDirectivePrologues();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	    Parser.prototype.parseDirectivePrologues = function () {
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	        var body = this.parseDirectivePrologues();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	        var body = this.parseDirectivePrologues();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/dist/esprima.js:	// to catch a logic error. The condition shall be fulfilled in normal case.
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/package.json:    "profile": "node --prof test/profile.js && mv isolate*.log v8.log && node-tick-processor",
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console = { log: print };
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('Usage:');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('   esvalidate [options] [file.js...]');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('Available options:');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('  --format=type  Set the report format, plain (default) or junit');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('  -v, --version  Print program version');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:        console.log('ECMAScript Validator (using Esprima version', esprima.version, ')');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:        console.log();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log('Error: unknown report format ' + options.format + '.');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:        console.log('Error: unknown option ' + entry + '.');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('<?xml version="1.0" encoding="UTF-8"?>');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:    console.log('<testsuites>');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log('<testsuite name="' + fname + '" errors="0" ' +
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:                console.log('  <testcase name="Line ' + error.lineNumber + ': ' + msg + '" ' +
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:                console.log('    <error type="SyntaxError" message="' + error.message + '">' +
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:                console.log('  </testcase>');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log('</testsuite>');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:                console.log(msg);
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log('<testsuite name="' + fname + '" errors="1" failures="0" tests="1" ' +
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log(' <testcase name="' + e.message + '" ' + ' time="0">');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log(' <error type="ParseError" message="' + e.message + '">' +
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log(' </testcase>');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log('</testsuite>');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:            console.log(fname + ':' + e.lineNumber + ': ' + e.message.replace(/^Line\ [0-9]*\:\ /, ''));
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esvalidate.js:        console.log('</testsuites>');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console = { log: print };
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('Usage:');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('   esparse [options] [file.js]');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('Available options:');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --comment      Gather all line and block comments in an array');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --loc          Include line-column location info for each syntax node');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --range        Include index-based range for each syntax node');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --raw          Display the raw value of literals');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --tokens       List all tokens in an array');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  --tolerant     Tolerate errors on a best-effort basis (experimental)');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('  -v, --version  Shows program version');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:            console.log('Error: more than one input file.');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:        console.log('ECMAScript Parser (using Esprima version', esprima.version, ')');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:        console.log();
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:        console.log('Error: unknown option ' + entry + '.');
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log(JSON.stringify(syntax, adjustRegexLiteral, 4));
./lib/node_modules/log-requests/node_modules/js-yaml/node_modules/esprima/bin/esparse.js:    console.log('Error: ' + e.message);
./lib/node_modules/log-requests/node_modules/js-yaml/README.md:  console.log(doc);
./lib/node_modules/log-requests/node_modules/js-yaml/README.md:  console.log(e);
./lib/node_modules/log-requests/node_modules/js-yaml/README.md:  console.log(doc);
./lib/node_modules/log-requests/node_modules/js-yaml/lib/js-yaml/loader.js:      // Break this `while` cycle and go to the funciton's epilogue.
./lib/node_modules/log-requests/node_modules/js-yaml/lib/js-yaml/loader.js:      break; // Reading is done. Go to the epilogue.
./lib/node_modules/log-requests/node_modules/js-yaml/lib/js-yaml/loader.js:  // Epilogue.
./lib/node_modules/log-requests/node_modules/js-yaml/bin/js-yaml.js:  if (isYaml) console.log(JSON.stringify(output, null, '  '));
./lib/node_modules/log-requests/node_modules/js-yaml/bin/js-yaml.js:  else console.log(yaml.dump(output));
./lib/node_modules/log-requests/node_modules/prettyjson/package.json:    "changelog": "git log $(git describe --tags --abbrev=0)..HEAD --pretty='* %s' --first-parent"
./lib/node_modules/log-requests/node_modules/prettyjson/package.json:  "readme": "# prettyjson [![Build Status](https://secure.travis-ci.org/rafeca/prettyjson.png)](http://travis-ci.org/rafeca/prettyjson) [![NPM version](https://badge.fury.io/js/prettyjson.png)](http://badge.fury.io/js/prettyjson) [![Coverage Status](https://coveralls.io/repos/rafeca/prettyjson/badge.png?branch=master)](https://coveralls.io/r/rafeca/prettyjson?branch=master)\n\nPackage for formatting JSON data in a coloured YAML-style, perfect for CLI output.\n\n## How to install\n\nJust install it via NPM:\n\n```bash\n$ npm install -g prettyjson\n```\n\nThis will install `prettyjson` globally, so it will be added automatically\nto your `PATH`.\n\n## Using it (from the CLI)\n\nThis package installs a command line interface to render JSON data in a more\nconvenient way. You can use the CLI in three different ways:\n\n**Decode a JSON file:** If you want to see the contents of a JSON file, just pass\nit as the first argument to the CLI:\n\n```bash\n$ prettyjson package.json\n```\n\n![Example 1](https://raw.github.com/rafeca/prettyjson/master/images/example3.png)\n\n**Decode the stdin:** You can also pipe the result of a command (for example an\nHTTP request) to the CLI to see the JSON result in a clearer way:\n\n```bash\n$ curl https://api.github.com/users/rafeca | prettyjson\n```\n\n![Example 2](https://raw.github.com/rafeca/prettyjson/master/images/example4.png)\n\n**Decode random strings:** if you call the CLI with no arguments, you'll get a\nprompt where you can past JSON strings and they'll be automatically displayed in a clearer way:\n\n![Example 3](https://raw.github.com/rafeca/prettyjson/master/images/example5.png)\n\n### Command line options\n\nIt's possible to customize the output through some command line options:\n\n```bash\n# Change colors\n$ prettyjson --string=red --keys=blue --dash=yellow --number=green package.json\n\n# Do not use colors\n$ prettyjson --nocolor=1 package.json\n\n# Change indentation\n$ prettyjson --indent=4 package.json\n\n# Render arrays elements in a single line\n$ prettyjson --inline-arrays=1 package.json\n```\n\n**Deprecation Notice**: The old configuration through environment variables is\ndeprecated and it will be removed in the next major version (1.0.0).\n\n## Using it (from Node.js)\n\nIt's pretty easy to use it. You just have to include it in your script and call\nthe `render()` method:\n\n```javascript\nvar prettyjson = require('prettyjson');\n\nvar data = {\n  username: 'rafeca',\n  url: 'https://github.com/rafeca',\n  twitter_account: 'https://twitter.com/rafeca',\n  projects: ['prettyprint', 'connfu']\n};\n\nvar options = {\n  noColor: true\n};\n\nconsole.log(prettyjson.render(data, options));\n```\n\nAnd will output:\n\n![Example 4](https://raw.github.com/rafeca/prettyjson/master/images/example1.png)\n\nYou can also configure the colors of the hash keys and array dashes\n(using [colors.js](https://github.com/Marak/colors.js) colors syntax):\n\n```javascript\nvar prettyjson = require('prettyjson');\n\nvar data = {\n  username: 'rafeca',\n  url: 'https://github.com/rafeca',\n  twitter_account: 'https://twitter.com/rafeca',\n  projects: ['prettyprint', 'connfu']\n};\n\nconsole.log(prettyjson.render(data, {\n  keysColor: 'rainbow',\n  dashColor: 'magenta',\n  stringColor: 'white'\n}));\n```\n\nWill output something like:\n\n![Example 5](https://raw.github.com/rafeca/prettyjson/master/images/example2.png)\n\n## Running Tests\n\nTo run the test suite first invoke the following command within the repo,\ninstalling the development dependencies:\n\n```bash\n$ npm install\n```\n\nthen run the tests:\n\n```bash\n$ npm test\n```\n\nOn windows, you can run the tests with:\n\n```cmd\nC:\\git\\prettyjson> npm run-script testwin\n```\n",
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/package.json:  "readme": "# colors.js\r\n[![Build Status](https://travis-ci.org/Marak/colors.js.svg?branch=master)](https://travis-ci.org/Marak/colors.js)\r\n[![version](https://img.shields.io/npm/v/colors.svg)](https://www.npmjs.org/package/colors)\r\n[![dependencies](https://david-dm.org/Marak/colors.js.svg)](https://david-dm.org/Marak/colors.js)\r\n[![devDependencies](https://david-dm.org/Marak/colors.js/dev-status.svg)](https://david-dm.org/Marak/colors.js#info=devDependencies)\r\n\r\nPlease check out the [roadmap](ROADMAP.md) for upcoming features and releases.  Please open Issues to provide feedback, and check the `develop` branch for the latest bleeding-edge updates.\r\n\r\n## get color and style in your node.js console\r\n\r\n![Demo](https://raw.githubusercontent.com/Marak/colors.js/master/screenshots/colors.png)\r\n\r\n## Installation\r\n\r\n    npm install colors\r\n\r\n## colors and styles!\r\n\r\n### text colors\r\n\r\n  - black\r\n  - red\r\n  - green\r\n  - yellow\r\n  - blue\r\n  - magenta\r\n  - cyan\r\n  - white\r\n  - gray\r\n  - grey\r\n\r\n### background colors\r\n\r\n  - bgBlack\r\n  - bgRed\r\n  - bgGreen\r\n  - bgYellow\r\n  - bgBlue\r\n  - bgMagenta\r\n  - bgCyan\r\n  - bgWhite\r\n\r\n### styles\r\n\r\n  - reset\r\n  - bold\r\n  - dim\r\n  - italic\r\n  - underline\r\n  - inverse\r\n  - hidden\r\n  - strikethrough\r\n\r\n### extras\r\n\r\n  - rainbow\r\n  - zebra\r\n  - america\r\n  - trap\r\n  - random\r\n\r\n\r\n## Usage\r\n\r\nBy popular demand, `colors` now ships with two types of usages!\r\n\r\nThe super nifty way\r\n\r\n```js\r\nvar colors = require('colors');\r\n\r\nconsole.log('hello'.green); // outputs green text\r\nconsole.log('i like cake and pies'.underline.red) // outputs red underlined text\r\nconsole.log('inverse the color'.inverse); // inverses the color\r\nconsole.log('OMG Rainbows!'.rainbow); // rainbow\r\nconsole.log('Run the trap'.trap); // Drops the bass\r\n\r\n```\r\n\r\nor a slightly less nifty way which doesn't extend `String.prototype`\r\n\r\n```js\r\nvar colors = require('colors/safe');\r\n\r\nconsole.log(colors.green('hello')); // outputs green text\r\nconsole.log(colors.red.underline('i like cake and pies')) // outputs red underlined text\r\nconsole.log(colors.inverse('inverse the color')); // inverses the color\r\nconsole.log(colors.rainbow('OMG Rainbows!')); // rainbow\r\nconsole.log(colors.trap('Run the trap')); // Drops the bass\r\n\r\n```\r\n\r\nI prefer the first way. Some people seem to be afraid of extending `String.prototype` and prefer the second way. \r\n\r\nIf you are writing good code you will never have an issue with the first approach. If you really don't want to touch `String.prototype`, the second usage will not touch `String` native object.\r\n\r\n## Disabling Colors\r\n\r\nTo disable colors you can pass the following arguments in the command line to your application:\r\n\r\n```bash\r\nnode myapp.js --no-color\r\n```\r\n\r\n## Console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data)\r\n\r\n```js\r\nvar name = 'Marak';\r\nconsole.log(colors.green('Hello %s'), name);\r\n// outputs -> 'Hello Marak'\r\n```\r\n\r\n## Custom themes\r\n\r\n### Using standard API\r\n\r\n```js\r\n\r\nvar colors = require('colors');\r\n\r\ncolors.setTheme({\r\n  silly: 'rainbow',\r\n  input: 'grey',\r\n  verbose: 'cyan',\r\n  prompt: 'grey',\r\n  info: 'green',\r\n  data: 'grey',\r\n  help: 'cyan',\r\n  warn: 'yellow',\r\n  debug: 'blue',\r\n  error: 'red'\r\n});\r\n\r\n// outputs red text\r\nconsole.log(\"this is an error\".error);\r\n\r\n// outputs yellow text\r\nconsole.log(\"this is a warning\".warn);\r\n```\r\n\r\n### Using string safe API\r\n\r\n```js\r\nvar colors = require('colors/safe');\r\n\r\n// set single property\r\nvar error = colors.red;\r\nerror('this is red');\r\n\r\n// set theme\r\ncolors.setTheme({\r\n  silly: 'rainbow',\r\n  input: 'grey',\r\n  verbose: 'cyan',\r\n  prompt: 'grey',\r\n  info: 'green',\r\n  data: 'grey',\r\n  help: 'cyan',\r\n  warn: 'yellow',\r\n  debug: 'blue',\r\n  error: 'red'\r\n});\r\n\r\n// outputs red text\r\nconsole.log(colors.error(\"this is an error\"));\r\n\r\n// outputs yellow text\r\nconsole.log(colors.warn(\"this is a warning\"));\r\n\r\n```\r\n\r\n### Combining Colors\r\n\r\n```javascript\r\nvar colors = require('colors');\r\n\r\ncolors.setTheme({\r\n  custom: ['red', 'underline']\r\n});\r\n\r\nconsole.log('test'.custom);\r\n```\r\n\r\n*Protip: There is a secret undocumented style in `colors`. If you find the style you can summon him.*\r\n",
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('hello'.green); // outputs green text
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('i like cake and pies'.underline.red) // outputs red underlined text
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('inverse the color'.inverse); // inverses the color
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('OMG Rainbows!'.rainbow); // rainbow
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('Run the trap'.trap); // Drops the bass
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.green('hello')); // outputs green text
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.red.underline('i like cake and pies')) // outputs red underlined text
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.inverse('inverse the color')); // inverses the color
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.rainbow('OMG Rainbows!')); // rainbow
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.trap('Run the trap')); // Drops the bass
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:## Console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data)
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.green('Hello %s'), name);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log("this is an error".error);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log("this is a warning".warn);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.error("this is an error"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log(colors.warn("this is a warning"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/README.md:console.log('test'.custom);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.yellow("First some yellow text"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.yellow.underline("Underline that text"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.red.bold("Make it bold and red"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.rainbow("Double Raindows All Day Long"))
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.trap("Drop the bass"))
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.rainbow(colors.trap("DROP THE RAINBOW BASS")));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.bold.italic.underline.red('Chains are also cool.')); // styles not widely supported
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.green('So ') + colors.underline('are') + ' ' + colors.inverse('inverse') + colors.yellow.bold(' styles! ')); // styles not widely supported
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.zebra("Zebras are so fun!"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log("This is " + colors.strikethrough("not") + " fun.");
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.black.bgWhite('Background color attack!'));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.random('Use random styles on everything!'))
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.america('America, Heck Yeah!'));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log('Setting themes is useful')
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js://console.log('Generic logging theme as JSON'.green.bold.underline);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.error("this is an error"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.warn("this is a warning"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.input("this is an input"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:// console.log('Generic logging theme as file'.green.bold.underline);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:colors.setTheme(__dirname + '/../themes/generic-logging.js');
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.error("this is an error"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.warn("this is a warning"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:console.log(colors.input("this is an input"));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/safe-string.js:// console.log(colors.zalgo("Don't summon him"))
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("First some yellow text".yellow);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("Underline that text".yellow.underline);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("Make it bold and red".red.bold);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log(("Double Raindows All Day Long").rainbow)
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("Drop the bass".trap)
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("DROP THE RAINBOW BASS".trap.rainbow)
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Chains are also cool.'.bold.italic.underline.red); // styles not widely supported
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('So '.green + 'are'.underline + ' ' + 'inverse'.inverse + ' styles! '.yellow.bold); // styles not widely supported
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("Zebras are so fun!".zebra);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("This is " + "not".strikethrough + " fun.");
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Background color attack!'.black.bgWhite)
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Use random styles on everything!'.random)
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('America, Heck Yeah!'.america)
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Setting themes is useful')
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Generic logging theme as JSON'.green.bold.underline);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is an error".error);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is a warning".warn);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is an input".input);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log('Generic logging theme as file'.green.bold.underline);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:  colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:  console.log(err);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is an error".error);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is a warning".warn);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js:console.log("this is an input".input);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/examples/normal-usage.js://console.log("Don't summon".zalgo)
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/lib/extendStringPrototype.js:        console.log('warn: '.red + ('String.prototype' + prop).magenta + ' is probably something you don\'t want to override. Ignoring style name');
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/lib/extendStringPrototype.js:        console.log(err);
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/lib/colors.js:    console.log('colors.setTheme now only accepts an object, not a string.  ' +
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/lib/colors.js:      'The old syntax looked like colors.setTheme(__dirname + \'/../themes/generic-logging.js\'); ' +
./lib/node_modules/log-requests/node_modules/prettyjson/node_modules/colors/lib/colors.js:      'The new syntax looks like colors.setTheme(require(__dirname + \'/../themes/generic-logging.js\'));');
./lib/node_modules/log-requests/node_modules/prettyjson/README.md:console.log(prettyjson.render(data, options));
./lib/node_modules/log-requests/node_modules/prettyjson/README.md:console.log(prettyjson.render(data, {
./lib/node_modules/log-requests/node_modules/prettyjson/bin/prettyjson:  console.log(prettyjson.renderString(input, options));
./lib/node_modules/log-requests/node_modules/prettyjson/CONTRIBUTING.md:8. Commit your changes in logical chunks; use git's [interactive
./lib/node_modules/log-requests/node_modules/body-parser/package.json:  "readme": "# body-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nNode.js body parsing middleware.\n\nParse incoming request bodies in a middleware before your handlers, available\nunder the `req.body` property.\n\n[Learn about the anatomy of an HTTP transaction in Node.js](https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/).\n\n_This does not handle multipart bodies_, due to their complex and typically\nlarge nature. For multipart bodies, you may be interested in the following\nmodules:\n\n  * [busboy](https://www.npmjs.org/package/busboy#readme) and\n    [connect-busboy](https://www.npmjs.org/package/connect-busboy#readme)\n  * [multiparty](https://www.npmjs.org/package/multiparty#readme) and\n    [connect-multiparty](https://www.npmjs.org/package/connect-multiparty#readme)\n  * [formidable](https://www.npmjs.org/package/formidable#readme)\n  * [multer](https://www.npmjs.org/package/multer#readme)\n\nThis module provides the following parsers:\n\n  * [JSON body parser](#bodyparserjsonoptions)\n  * [Raw body parser](#bodyparserrawoptions)\n  * [Text body parser](#bodyparsertextoptions)\n  * [URL-encoded form body parser](#bodyparserurlencodedoptions)\n\nOther body parsers you might be interested in:\n\n- [body](https://www.npmjs.org/package/body#readme)\n- [co-body](https://www.npmjs.org/package/co-body#readme)\n\n## Installation\n\n```sh\n$ npm install body-parser\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar bodyParser = require('body-parser')\n```\n\nThe `bodyParser` object exposes various factories to create middlewares. All\nmiddlewares will populate the `req.body` property with the parsed body when\nthe `Content-Type` request header matches the `type` option, or an empty\nobject (`{}`) if there was no body to parse, the `Content-Type` was not matched,\nor an error occurred.\n\nThe various errors returned by this module are described in the\n[errors section](#errors).\n\n### bodyParser.json([options])\n\nReturns middleware that only parses `json` and only looks at requests where\nthe `Content-Type` header matches the `type` option. This parser accepts any\nUnicode encoding of the body and supports automatic inflation of `gzip` and\n`deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`).\n\n#### Options\n\nThe `json` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### reviver\n\nThe `reviver` option is passed directly to `JSON.parse` as the second\nargument. You can find more information on this argument\n[in the MDN documentation about JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter).\n\n##### strict\n\nWhen set to `true`, will only accept arrays and objects; when `false` will\naccept anything `JSON.parse` accepts. Defaults to `true`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `json`), a mime type (like\n`application/json`), or a mime type with a wildcard (like `*/*` or `*/json`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `application/json`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.raw([options])\n\nReturns middleware that parses all bodies as a `Buffer` and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a `Buffer` object\nof the body.\n\n#### Options\n\nThe `raw` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `bin`), a mime type (like\n`application/octet-stream`), or a mime type with a wildcard (like `*/*` or\n`application/*`). If a function, the `type` option is called as `fn(req)`\nand the request is parsed if it returns a truthy value. Defaults to\n`application/octet-stream`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.text([options])\n\nReturns middleware that parses all bodies as a string and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` string containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a string of the\nbody.\n\n#### Options\n\nThe `text` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### defaultCharset\n\nSpecify the default character set for the text content if the charset is not\nspecified in the `Content-Type` header of the request. Defaults to `utf-8`.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `txt`), a mime type (like\n`text/plain`), or a mime type with a wildcard (like `*/*` or `text/*`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `text/plain`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.urlencoded([options])\n\nReturns middleware that only parses `urlencoded` bodies and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser accepts only UTF-8 encoding of the body and supports automatic\ninflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This object will contain\nkey-value pairs, where the value can be a string or array (when `extended` is\n`false`), or any type (when `extended` is `true`).\n\n#### Options\n\nThe `urlencoded` function takes an optional `options` object that may contain\nany of the following keys:\n\n##### extended\n\nThe `extended` option allows to choose between parsing the URL-encoded data\nwith the `querystring` library (when `false`) or the `qs` library (when\n`true`). The \"extended\" syntax allows for rich objects and arrays to be\nencoded into the URL-encoded format, allowing for a JSON-like experience\nwith URL-encoded. For more information, please\n[see the qs library](https://www.npmjs.org/package/qs#readme).\n\nDefaults to `true`, but using the default has been deprecated. Please\nresearch into the difference between `qs` and `querystring` and choose the\nappropriate setting.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### parameterLimit\n\nThe `parameterLimit` option controls the maximum number of parameters that\nare allowed in the URL-encoded data. If a request contains more parameters\nthan this value, a 413 will be returned to the client. Defaults to `1000`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `urlencoded`), a mime type (like\n`application/x-www-form-urlencoded`), or a mime type with a wildcard (like\n`*/x-www-form-urlencoded`). If a function, the `type` option is called as\n`fn(req)` and the request is parsed if it returns a truthy value. Defaults\nto `application/x-www-form-urlencoded`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n## Errors\n\nThe middlewares provided by this module create errors depending on the error\ncondition during parsing. The errors will typically have a `status`/`statusCode`\nproperty that contains the suggested HTTP response code, an `expose` property\nto determine if the `message` property should be displayed to the client, a\n`type` property to determine the type of error without matching against the\n`message`, and a `body` property containing the read body, if available.\n\nThe following are the common errors emitted, though any error can come through\nfor various reasons.\n\n### content encoding unsupported\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an encoding but the \"inflation\" option was set to `false`. The\n`status` property is set to `415`, the `type` property is set to\n`'encoding.unsupported'`, and the `charset` property will be set to the\nencoding that is unsupported.\n\n### request aborted\n\nThis error will occur when the request is aborted by the client before reading\nthe body has finished. The `received` property will be set to the number of\nbytes received before the request was aborted and the `expected` property is\nset to the number of expected bytes. The `status` property is set to `400`\nand `type` property is set to `'request.aborted'`.\n\n### request entity too large\n\nThis error will occur when the request body's size is larger than the \"limit\"\noption. The `limit` property will be set to the byte limit and the `length`\nproperty will be set to the request body's length. The `status` property is\nset to `413` and the `type` property is set to `'entity.too.large'`.\n\n### request size did not match content length\n\nThis error will occur when the request's length did not match the length from\nthe `Content-Length` header. This typically occurs when the request is malformed,\ntypically when the `Content-Length` header was calculated based on characters\ninstead of bytes. The `status` property is set to `400` and the `type` property\nis set to `'request.size.invalid'`.\n\n### stream encoding should not be set\n\nThis error will occur when something called the `req.setEncoding` method prior\nto this middleware. This module operates directly on bytes only and you cannot\ncall `req.setEncoding` when using this module. The `status` property is set to\n`500` and the `type` property is set to `'stream.encoding.set'`.\n\n### too many parameters\n\nThis error will occur when the content of the request exceeds the configured\n`parameterLimit` for the `urlencoded` parser. The `status` property is set to\n`413` and the `type` property is set to `'parameters.too.many'`.\n\n### unsupported charset \"BOGUS\"\n\nThis error will occur when the request had a charset parameter in the\n`Content-Type` header, but the `iconv-lite` module does not support it OR the\nparser does not support it. The charset is contained in the message as well\nas in the `charset` property. The `status` property is set to `415`, the\n`type` property is set to `'charset.unsupported'`, and the `charset` property\nis set to the charset that is unsupported.\n\n### unsupported content encoding \"bogus\"\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an unsupported encoding. The encoding is contained in the message\nas well as in the `encoding` property. The `status` property is set to `415`,\nthe `type` property is set to `'encoding.unsupported'`, and the `encoding`\nproperty is set to the encoding that is unsupported.\n\n## Examples\n\n### Express/Connect top-level generic\n\nThis example demonstrates adding a generic JSON and URL-encoded parser as a\ntop-level middleware, which will parse the bodies of all incoming requests.\nThis is the simplest setup.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n```\n\n### Express route-specific\n\nThis example demonstrates adding body parsers specifically to the routes that\nneed them. In general, this is the most recommended way to use body-parser with\nExpress.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// create application/json parser\nvar jsonParser = bodyParser.json()\n\n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n\n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  res.send('welcome, ' + req.body.username)\n})\n\n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  // create user in req.body\n})\n```\n\n### Change accepted type for parsers\n\nAll the parsers accept a `type` option which allows you to change the\n`Content-Type` that the middleware will parse.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse various different custom JSON types as JSON\napp.use(bodyParser.json({ type: 'application/*+json' }))\n\n// parse some custom thing into a Buffer\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\n\n// parse an HTML body into a string\napp.use(bodyParser.text({ type: 'text/html' }))\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/body-parser.svg\n[npm-url]: https://npmjs.org/package/body-parser\n[travis-image]: https://img.shields.io/travis/expressjs/body-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/body-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/body-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/body-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/body-parser.svg\n[downloads-url]: https://npmjs.org/package/body-parser\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/package.json:  "readme": "# mime-db\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nThis is a database of all mime types.\nIt consists of a single, public JSON file and does not include any logic,\nallowing it to remain as un-opinionated as possible with an API.\nIt aggregates data from the following sources:\n\n- http://www.iana.org/assignments/media-types/media-types.xhtml\n- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types\n\n## Installation\n\n```bash\nnpm install mime-db\n```\n\n### Database Download\n\nIf you're crazy enough to use this in the browser, you can just grab the\nJSON file using [RawGit](https://rawgit.com/). It is recommended to replace\n`master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the\nJSON format may change in the future.\n\n```\nhttps://cdn.rawgit.com/jshttp/mime-db/master/db.json\n```\n\n## Usage\n\n```js\nvar db = require('mime-db');\n\n// grab data on .js files\nvar data = db['application/javascript'];\n```\n\n## Data Structure\n\nThe JSON file is a map lookup for lowercased mime types.\nEach mime type has the following properties:\n\n- `.source` - where the mime type is defined.\n    If not set, it's probably a custom media type.\n    - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n    - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml)\n    - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types)\n- `.extensions[]` - known extensions associated with this mime type.\n- `.compressible` - whether a file of this type can be gzipped.\n- `.charset` - the default charset associated with this type, if any.\n\nIf unknown, every property could be `undefined`.\n\n## Contributing\n\nTo edit the database, only make PRs against `src/custom.json` or\n`src/custom-suffix.json`.\n\nThe `src/custom.json` file is a JSON object with the MIME type as the keys\nand the values being an object with the following keys:\n\n- `compressible` - leave out if you don't know, otherwise `true`/`false` for\n  if the data represented by the time is typically compressible.\n- `extensions` - include an array of file extensions that are associated with\n  the type.\n- `notes` - human-readable notes about the type, typically what the type is.\n- `sources` - include an array of URLs of where the MIME type and the associated\n  extensions are sourced from. This needs to be a [primary source](https://en.wikipedia.org/wiki/Primary_source);\n  links to type aggregating sites and Wikipedia are _not acceptible_.\n\nTo update the build, run `npm run build`.\n\n## Adding Custom Media Types\n\nThe best way to get new media types included in this library is to register\nthem with the IANA. The community registration procedure is outlined in\n[RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types\nregistered with the IANA are automatically pulled into this library.\n\n[npm-version-image]: https://img.shields.io/npm/v/mime-db.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg\n[npm-url]: https://npmjs.org/package/mime-db\n[travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg\n[travis-url]: https://travis-ci.org/jshttp/mime-db\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master\n[node-image]: https://img.shields.io/node/v/mime-db.svg\n[node-url]: https://nodejs.org/en/download/\n",
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/dialog-info+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/sgml-open-catalog": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.flographit": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.iptc.g2.catalogitem+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.nokia.catalogs": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-audit-dialog+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-base+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-group+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-speech+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-transform+xml": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:    "extensions": ["txt","text","conf","def","list","log","in","ini"]
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/prs.prop.logic": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/vnd.si.uricatalogue": {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/README.md:It consists of a single, public JSON file and does not include any logic,
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/package.json:  "readme": "# http-errors\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCreate HTTP errors for Express, Koa, Connect, etc. with ease.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install http-errors\n```\n\n## Example\n\n```js\nvar createError = require('http-errors')\nvar express = require('express')\nvar app = express()\n\napp.use(function (req, res, next) {\n  if (!req.user) return next(createError(401, 'Please login to view this page.'))\n  next()\n})\n```\n\n## API\n\nThis is the current API, currently extracted from Koa and subject to change.\n\nAll errors inherit from JavaScript `Error` and the exported `createError.HttpError`.\n\n### Error Properties\n\n- `expose` - can be used to signal if `message` should be sent to the client,\n  defaulting to `false` when `status` >= 500\n- `headers` - can be an object of header names to values to be sent to the\n  client, defaulting to `undefined`. When defined, the key names should all\n  be lower-cased\n- `message` - the traditional error message, which should be kept short and all\n  single line\n- `status` - the status code of the error, mirroring `statusCode` for general\n  compatibility\n- `statusCode` - the status code of the error, defaulting to `500`\n\n### createError([status], [message], [properties])\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = createError(404, 'This video does not exist!')\n```\n\n- `status: 500` - the status code as a number\n- `message` - the message of the error, defaulting to node's text for that status code.\n- `properties` - custom properties to attach to the object\n\n### new createError\\[code || name\\](\\[msg]\\))\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = new createError.NotFound()\n```\n\n- `code` - the status code as a number\n- `name` - the name of the error as a \"bumpy case\", i.e. `NotFound` or `InternalServerError`.\n\n#### List of all constructors\n\n|Status Code|Constructor Name             |\n|-----------|-----------------------------|\n|400        |BadRequest                   |\n|401        |Unauthorized                 |\n|402        |PaymentRequired              |\n|403        |Forbidden                    |\n|404        |NotFound                     |\n|405        |MethodNotAllowed             |\n|406        |NotAcceptable                |\n|407        |ProxyAuthenticationRequired  |\n|408        |RequestTimeout               |\n|409        |Conflict                     |\n|410        |Gone                         |\n|411        |LengthRequired               |\n|412        |PreconditionFailed           |\n|413        |PayloadTooLarge              |\n|414        |URITooLong                   |\n|415        |UnsupportedMediaType         |\n|416        |RangeNotSatisfiable          |\n|417        |ExpectationFailed            |\n|418        |ImATeapot                    |\n|421        |MisdirectedRequest           |\n|422        |UnprocessableEntity          |\n|423        |Locked                       |\n|424        |FailedDependency             |\n|425        |UnorderedCollection          |\n|426        |UpgradeRequired              |\n|428        |PreconditionRequired         |\n|429        |TooManyRequests              |\n|431        |RequestHeaderFieldsTooLarge  |\n|451        |UnavailableForLegalReasons   |\n|500        |InternalServerError          |\n|501        |NotImplemented               |\n|502        |BadGateway                   |\n|503        |ServiceUnavailable           |\n|504        |GatewayTimeout               |\n|505        |HTTPVersionNotSupported      |\n|506        |VariantAlsoNegotiates        |\n|507        |InsufficientStorage          |\n|508        |LoopDetected                 |\n|509        |BandwidthLimitExceeded       |\n|510        |NotExtended                  |\n|511        |NetworkAuthenticationRequired|\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/http-errors.svg\n[npm-url]: https://npmjs.org/package/http-errors\n[node-version-image]: https://img.shields.io/node/v/http-errors.svg\n[node-version-url]: https://nodejs.org/en/download/\n[travis-image]: https://img.shields.io/travis/jshttp/http-errors.svg\n[travis-url]: https://travis-ci.org/jshttp/http-errors\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/http-errors.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/http-errors\n[downloads-image]: https://img.shields.io/npm/dm/http-errors.svg\n[downloads-url]: https://npmjs.org/package/http-errors\n",
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/Readme.md:logging source.
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    // call to self as log
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    log.call(deprecate, message)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:function log (message, site) {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/http-errors/README.md:  if (!req.user) return next(createError(401, 'Please login to view this page.'))
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/depd/Readme.md:logging source.
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n",
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:    // call to self as log
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:    log.call(deprecate, message)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:function log (message, site) {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/package.json:    "log",
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:  change the behavior of the debug logging:
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:var log = debug('app:log');
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:// set this namespace to log via console.log
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:log('goes to stdout');
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:// overrides all per-namespace log settings
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:debug.log = console.info.bind(console);
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js:exports.log = log;
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js:function log() {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js:    && console.log
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/node.js:exports.log = log;
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/node.js:function log() {
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/debug.js: * Previous log timestamp.
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/karma.conf.js:    // level of logging
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/debug/component.json:    "log",
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/iconv-lite/package.json:  "readme": "## Pure JS character encoding conversion [![Build Status](https://travis-ci.org/ashtuchkin/iconv-lite.svg?branch=master)](https://travis-ci.org/ashtuchkin/iconv-lite)\n\n * Doesn't need native code compilation. Works on Windows and in sandboxed environments like [Cloud9](http://c9.io).\n * Used in popular projects like [Express.js (body_parser)](https://github.com/expressjs/body-parser), \n   [Grunt](http://gruntjs.com/), [Nodemailer](http://www.nodemailer.com/), [Yeoman](http://yeoman.io/) and others.\n * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\n * Intuitive encode/decode API\n * Streaming support for Node v0.10+\n * [Deprecated] Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings.\n * In-browser usage via [Browserify](https://github.com/substack/node-browserify) (~180k gzip compressed with Buffer shim included).\n * Typescript [type definition file](https://github.com/ashtuchkin/iconv-lite/blob/master/lib/index.d.ts) included.\n * React Native is supported (need to explicitly `npm install` two more modules: `buffer` and `stream`).\n * License: MIT.\n\n[![NPM Stats](https://nodei.co/npm/iconv-lite.png?downloads=true&downloadRank=true)](https://npmjs.org/packages/iconv-lite/)\n\n## Usage\n### Basic API\n```javascript\nvar iconv = require('iconv-lite');\n\n// Convert from an encoded buffer to js string.\nstr = iconv.decode(new Buffer([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');\n\n// Convert from js string to an encoded buffer.\nbuf = iconv.encode(\"Sample input string\", 'win1251');\n\n// Check if encoding is supported\niconv.encodingExists(\"us-ascii\")\n```\n\n### Streaming API (Node v0.10+)\n```javascript\n\n// Decode stream (from binary stream to js strings)\nhttp.createServer(function(req, res) {\n    var converterStream = iconv.decodeStream('win1251');\n    req.pipe(converterStream);\n\n    converterStream.on('data', function(str) {\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\n    });\n});\n\n// Convert encoding streaming example\nfs.createReadStream('file-in-win1251.txt')\n    .pipe(iconv.decodeStream('win1251'))\n    .pipe(iconv.encodeStream('ucs2'))\n    .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\nhttp.createServer(function(req, res) {\n    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n        assert(typeof body == 'string');\n        console.log(body); // full request body string\n    });\n});\n```\n\n### [Deprecated] Extend Node.js own encodings\n> NOTE: This doesn't work on latest Node versions. See [details](https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility).\n\n```javascript\n// After this call all Node basic primitives will understand iconv-lite encodings.\niconv.extendNodeEncodings();\n\n// Examples:\nbuf = new Buffer(str, 'win1251');\nbuf.write(str, 'gbk');\nstr = buf.toString('latin1');\nassert(Buffer.isEncoding('iso-8859-15'));\nBuffer.byteLength(str, 'us-ascii');\n\nhttp.createServer(function(req, res) {\n    req.setEncoding('big5');\n    req.collect(function(err, body) {\n        console.log(body);\n    });\n});\n\nfs.createReadStream(\"file.txt\", \"shift_jis\");\n\n// External modules are also supported (if they use Node primitives, which they probably do).\nrequest = require('request');\nrequest({\n    url: \"http://github.com/\", \n    encoding: \"cp932\"\n});\n\n// To remove extensions\niconv.undoExtendNodeEncodings();\n```\n\n## Supported encodings\n\n *  All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex.\n *  Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap.\n *  All widespread singlebyte encodings: Windows 125x family, ISO-8859 family, \n    IBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library. \n    Aliases like 'latin1', 'us-ascii' also supported.\n *  All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2312, GBK, GB18030, Big5, Shift_JIS, EUC-JP.\n\nSee [all supported encodings on wiki](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).\n\nMost singlebyte encodings are generated automatically from [node-iconv](https://github.com/bnoordhuis/node-iconv). Thank you Ben Noordhuis and libiconv authors!\n\nMultibyte encodings are generated from [Unicode.org mappings](http://www.unicode.org/Public/MAPPINGS/) and [WHATWG Encoding Standard mappings](http://encoding.spec.whatwg.org/). Thank you, respective authors!\n\n\n## Encoding/decoding speed\n\nComparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0). \nNote: your results may vary, so please always check on your hardware.\n\n    operation             iconv@2.1.4   iconv-lite@0.4.7\n    ----------------------------------------------------------\n    encode('win1251')     ~96 Mb/s      ~320 Mb/s\n    decode('win1251')     ~95 Mb/s      ~246 Mb/s\n\n## BOM handling\n\n * Decoding: BOM is stripped by default, unless overridden by passing `stripBOM: false` in options\n   (f.ex. `iconv.decode(buf, enc, {stripBOM: false})`).\n   A callback might also be given as a `stripBOM` parameter - it'll be called if BOM character was actually found.\n * If you want to detect UTF-8 BOM when decoding other encodings, use [node-autodetect-decoder-stream](https://github.com/danielgindi/node-autodetect-decoder-stream) module.\n * Encoding: No BOM added, unless overridden by `addBOM: true` option.\n\n## UTF-16 Encodings\n\nThis library supports UTF-16LE, UTF-16BE and UTF-16 encodings. First two are straightforward, but UTF-16 is trying to be\nsmart about endianness in the following ways:\n * Decoding: uses BOM and 'spaces heuristic' to determine input endianness. Default is UTF-16LE, but can be \n   overridden with `defaultEncoding: 'utf-16be'` option. Strips BOM unless `stripBOM: false`.\n * Encoding: uses UTF-16LE and writes BOM by default. Use `addBOM: false` to override.\n\n## Other notes\n\nWhen decoding, be sure to supply a Buffer to decode() method, otherwise [bad things usually happen](https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding).  \nUntranslatable characters are set to � or ?. No transliteration is currently supported.  \nNode versions 0.10.31 and 0.11.13 are buggy, don't use them (see #65, #77).  \n\n## Testing\n\n```bash\n$ git clone git@github.com:ashtuchkin/iconv-lite.git\n$ cd iconv-lite\n$ npm install\n$ npm test\n    \n$ # To view performance:\n$ node test/performance.js\n\n$ # To view test coverage:\n$ npm run coverage\n$ open coverage/lcov-report/index.html\n```\n\n## Adoption\n[![NPM](https://nodei.co/npm-dl/iconv-lite.png)](https://nodei.co/npm/iconv-lite/)\n[![Codeship Status for ashtuchkin/iconv-lite](https://www.codeship.com/projects/81670840-fa72-0131-4520-4a01a6c01acc/status)](https://www.codeship.com/projects/29053)\n",
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(str); // Do something with decoded strings, chunk-by-chunk.
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(body); // full request body string
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(body);
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/qs/package.json:  "readme": "# qs <sup>[![Version Badge][2]][1]</sup>\n\n[![Build Status][3]][4]\n[![dependency status][5]][6]\n[![dev dependency status][7]][8]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][11]][1]\n\nA querystring parsing and stringifying library with some added security.\n\nLead Maintainer: [Jordan Harband](https://github.com/ljharb)\n\nThe **qs** module was originally created and maintained by [TJ Holowaychuk](https://github.com/visionmedia/node-querystring).\n\n## Usage\n\n```javascript\nvar qs = require('qs');\nvar assert = require('assert');\n\nvar obj = qs.parse('a=c');\nassert.deepEqual(obj, { a: 'c' });\n\nvar str = qs.stringify(obj);\nassert.equal(str, 'a=c');\n```\n\n### Parsing Objects\n\n[](#preventEval)\n```javascript\nqs.parse(string, [options]);\n```\n\n**qs** allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets `[]`.\nFor example, the string `'foo[bar]=baz'` converts to:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar]=baz'), {\n    foo: {\n        bar: 'baz'\n    }\n});\n```\n\nWhen using the `plainObjects` option the parsed value is returned as a null object, created via `Object.create(null)` and as such you should be aware that prototype methods will not exist on it and a user may set those names to whatever value they like:\n\n```javascript\nvar nullObject = qs.parse('a[hasOwnProperty]=b', { plainObjects: true });\nassert.deepEqual(nullObject, { a: { hasOwnProperty: 'b' } });\n```\n\nBy default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use `plainObjects` as mentioned above, or set `allowPrototypes` to `true` which will allow user input to overwrite those properties. *WARNING* It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\n\n```javascript\nvar protoObject = qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true });\nassert.deepEqual(protoObject, { a: { hasOwnProperty: 'b' } });\n```\n\nURI encoded strings work too:\n\n```javascript\nassert.deepEqual(qs.parse('a%5Bb%5D=c'), {\n    a: { b: 'c' }\n});\n```\n\nYou can also nest your objects, like `'foo[bar][baz]=foobarbaz'`:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar][baz]=foobarbaz'), {\n    foo: {\n        bar: {\n            baz: 'foobarbaz'\n        }\n    }\n});\n```\n\nBy default, when nesting objects **qs** will only parse up to 5 children deep. This means if you attempt to parse a string like\n`'a[b][c][d][e][f][g][h][i]=j'` your resulting object will be:\n\n```javascript\nvar expected = {\n    a: {\n        b: {\n            c: {\n                d: {\n                    e: {\n                        f: {\n                            '[g][h][i]': 'j'\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nvar string = 'a[b][c][d][e][f][g][h][i]=j';\nassert.deepEqual(qs.parse(string), expected);\n```\n\nThis depth can be overridden by passing a `depth` option to `qs.parse(string, [options])`:\n\n```javascript\nvar deep = qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1 });\nassert.deepEqual(deep, { a: { b: { '[c][d][e][f][g][h][i]': 'j' } } });\n```\n\nThe depth limit helps mitigate abuse when **qs** is used to parse user input, and it is recommended to keep it a reasonably small number.\n\nFor similar reasons, by default **qs** will only parse up to 1000 parameters. This can be overridden by passing a `parameterLimit` option:\n\n```javascript\nvar limited = qs.parse('a=b&c=d', { parameterLimit: 1 });\nassert.deepEqual(limited, { a: 'b' });\n```\n\nTo bypass the leading question mark, use `ignoreQueryPrefix`:\n\n```javascript\nvar prefixed = qs.parse('?a=b&c=d', { ignoreQueryPrefix: true });\nassert.deepEqual(prefixed, { a: 'b', c: 'd' });\n```\n\nAn optional delimiter can also be passed:\n\n```javascript\nvar delimited = qs.parse('a=b;c=d', { delimiter: ';' });\nassert.deepEqual(delimited, { a: 'b', c: 'd' });\n```\n\nDelimiters can be a regular expression too:\n\n```javascript\nvar regexed = qs.parse('a=b;c=d,e=f', { delimiter: /[;,]/ });\nassert.deepEqual(regexed, { a: 'b', c: 'd', e: 'f' });\n```\n\nOption `allowDots` can be used to enable dot notation:\n\n```javascript\nvar withDots = qs.parse('a.b=c', { allowDots: true });\nassert.deepEqual(withDots, { a: { b: 'c' } });\n```\n\n### Parsing Arrays\n\n**qs** can also parse arrays using a similar `[]` notation:\n\n```javascript\nvar withArray = qs.parse('a[]=b&a[]=c');\nassert.deepEqual(withArray, { a: ['b', 'c'] });\n```\n\nYou may specify an index as well:\n\n```javascript\nvar withIndexes = qs.parse('a[1]=c&a[0]=b');\nassert.deepEqual(withIndexes, { a: ['b', 'c'] });\n```\n\nNote that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number\nto create an array. When creating arrays with specific indices, **qs** will compact a sparse array to only the existing values preserving\ntheir order:\n\n```javascript\nvar noSparse = qs.parse('a[1]=b&a[15]=c');\nassert.deepEqual(noSparse, { a: ['b', 'c'] });\n```\n\nNote that an empty string is also a value, and will be preserved:\n\n```javascript\nvar withEmptyString = qs.parse('a[]=&a[]=b');\nassert.deepEqual(withEmptyString, { a: ['', 'b'] });\n\nvar withIndexedEmptyString = qs.parse('a[0]=b&a[1]=&a[2]=c');\nassert.deepEqual(withIndexedEmptyString, { a: ['b', '', 'c'] });\n```\n\n**qs** will also limit specifying indices in an array to a maximum index of `20`. Any array members with an index of greater than `20` will\ninstead be converted to an object with the index as the key:\n\n```javascript\nvar withMaxIndex = qs.parse('a[100]=b');\nassert.deepEqual(withMaxIndex, { a: { '100': 'b' } });\n```\n\nThis limit can be overridden by passing an `arrayLimit` option:\n\n```javascript\nvar withArrayLimit = qs.parse('a[1]=b', { arrayLimit: 0 });\nassert.deepEqual(withArrayLimit, { a: { '1': 'b' } });\n```\n\nTo disable array parsing entirely, set `parseArrays` to `false`.\n\n```javascript\nvar noParsingArrays = qs.parse('a[]=b', { parseArrays: false });\nassert.deepEqual(noParsingArrays, { a: { '0': 'b' } });\n```\n\nIf you mix notations, **qs** will merge the two items into an object:\n\n```javascript\nvar mixedNotation = qs.parse('a[0]=b&a[b]=c');\nassert.deepEqual(mixedNotation, { a: { '0': 'b', b: 'c' } });\n```\n\nYou can also create arrays of objects:\n\n```javascript\nvar arraysOfObjects = qs.parse('a[][b]=c');\nassert.deepEqual(arraysOfObjects, { a: [{ b: 'c' }] });\n```\n\n### Stringifying\n\n[](#preventEval)\n```javascript\nqs.stringify(object, [options]);\n```\n\nWhen stringifying, **qs** by default URI encodes output. Objects are stringified as you would expect:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b' }), 'a=b');\nassert.equal(qs.stringify({ a: { b: 'c' } }), 'a%5Bb%5D=c');\n```\n\nThis encoding can be disabled by setting the `encode` option to `false`:\n\n```javascript\nvar unencoded = qs.stringify({ a: { b: 'c' } }, { encode: false });\nassert.equal(unencoded, 'a[b]=c');\n```\n\nEncoding can be disabled for keys by setting the `encodeValuesOnly` option to `true`:\n```javascript\nvar encodedValues = qs.stringify(\n    { a: 'b', c: ['d', 'e=f'], f: [['g'], ['h']] },\n    { encodeValuesOnly: true }\n);\nassert.equal(encodedValues,'a=b&c[0]=d&c[1]=e%3Df&f[0][0]=g&f[1][0]=h');\n```\n\nThis encoding can also be replaced by a custom encoding method set as `encoder` option:\n\n```javascript\nvar encoded = qs.stringify({ a: { b: 'c' } }, { encoder: function (str) {\n    // Passed in values `a`, `b`, `c`\n    return // Return encoded string\n}})\n```\n\n_(Note: the `encoder` option does not apply if `encode` is `false`)_\n\nAnalogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:\n\n```javascript\nvar decoded = qs.parse('x=z', { decoder: function (str) {\n    // Passed in values `x`, `z`\n    return // Return decoded string\n}})\n```\n\nExamples beyond this point will be shown as though the output is not URI encoded for clarity. Please note that the return values in these cases *will* be URI encoded during real usage.\n\nWhen arrays are stringified, by default they are given explicit indices:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] });\n// 'a[0]=b&a[1]=c&a[2]=d'\n```\n\nYou may override this by setting the `indices` option to `false`:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] }, { indices: false });\n// 'a=b&a=c&a=d'\n```\n\nYou may use the `arrayFormat` option to specify the format of the output array:\n\n```javascript\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' })\n// 'a[0]=b&a[1]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' })\n// 'a[]=b&a[]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' })\n// 'a=b&a=c'\n```\n\nWhen objects are stringified, by default they use bracket notation:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } });\n// 'a[b][c]=d&a[b][e]=f'\n```\n\nYou may override this to use dot notation by setting the `allowDots` option to `true`:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } }, { allowDots: true });\n// 'a.b.c=d&a.b.e=f'\n```\n\nEmpty strings and null values will omit the value, but the equals sign (=) remains in place:\n\n```javascript\nassert.equal(qs.stringify({ a: '' }), 'a=');\n```\n\nKey with no values (such as an empty object or array) will return nothing:\n\n```javascript\nassert.equal(qs.stringify({ a: [] }), '');\nassert.equal(qs.stringify({ a: {} }), '');\nassert.equal(qs.stringify({ a: [{}] }), '');\nassert.equal(qs.stringify({ a: { b: []} }), '');\nassert.equal(qs.stringify({ a: { b: {}} }), '');\n```\n\nProperties that are set to `undefined` will be omitted entirely:\n\n```javascript\nassert.equal(qs.stringify({ a: null, b: undefined }), 'a=');\n```\n\nThe query string may optionally be prepended with a question mark:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { addQueryPrefix: true }), '?a=b&c=d');\n```\n\nThe delimiter may be overridden with stringify as well:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { delimiter: ';' }), 'a=b;c=d');\n```\n\nIf you only want to override the serialization of `Date` objects, you can provide a `serializeDate` option:\n\n```javascript\nvar date = new Date(7);\nassert.equal(qs.stringify({ a: date }), 'a=1970-01-01T00:00:00.007Z'.replace(/:/g, '%3A'));\nassert.equal(\n    qs.stringify({ a: date }, { serializeDate: function (d) { return d.getTime(); } }),\n    'a=7'\n);\n```\n\nYou may use the `sort` option to affect the order of parameter keys:\n\n```javascript\nfunction alphabeticalSort(a, b) {\n    return a.localeCompare(b);\n}\nassert.equal(qs.stringify({ a: 'c', z: 'y', b : 'f' }, { sort: alphabeticalSort }), 'a=c&b=f&z=y');\n```\n\nFinally, you can use the `filter` option to restrict which keys will be included in the stringified output.\nIf you pass a function, it will be called for each key to obtain the replacement value. Otherwise, if you\npass an array, it will be used to select properties and array indices for stringification:\n\n```javascript\nfunction filterFunc(prefix, value) {\n    if (prefix == 'b') {\n        // Return an `undefined` value to omit a property.\n        return;\n    }\n    if (prefix == 'e[f]') {\n        return value.getTime();\n    }\n    if (prefix == 'e[g][0]') {\n        return value * 2;\n    }\n    return value;\n}\nqs.stringify({ a: 'b', c: 'd', e: { f: new Date(123), g: [2] } }, { filter: filterFunc });\n// 'a=b&c=d&e[f]=123&e[g][0]=4'\nqs.stringify({ a: 'b', c: 'd', e: 'f' }, { filter: ['a', 'e'] });\n// 'a=b&e=f'\nqs.stringify({ a: ['b', 'c', 'd'], e: 'f' }, { filter: ['a', 0, 2] });\n// 'a[0]=b&a[2]=d'\n```\n\n### Handling of `null` values\n\nBy default, `null` values are treated like empty strings:\n\n```javascript\nvar withNull = qs.stringify({ a: null, b: '' });\nassert.equal(withNull, 'a=&b=');\n```\n\nParsing does not distinguish between parameters with and without equal signs. Both are converted to empty strings.\n\n```javascript\nvar equalsInsensitive = qs.parse('a&b=');\nassert.deepEqual(equalsInsensitive, { a: '', b: '' });\n```\n\nTo distinguish between `null` values and empty strings use the `strictNullHandling` flag. In the result string the `null`\nvalues have no `=` sign:\n\n```javascript\nvar strictNull = qs.stringify({ a: null, b: '' }, { strictNullHandling: true });\nassert.equal(strictNull, 'a&b=');\n```\n\nTo parse values without `=` back to `null` use the `strictNullHandling` flag:\n\n```javascript\nvar parsedStrictNull = qs.parse('a&b=', { strictNullHandling: true });\nassert.deepEqual(parsedStrictNull, { a: null, b: '' });\n```\n\nTo completely skip rendering keys with `null` values, use the `skipNulls` flag:\n\n```javascript\nvar nullsSkipped = qs.stringify({ a: 'b', c: null}, { skipNulls: true });\nassert.equal(nullsSkipped, 'a=b');\n```\n\n### Dealing with special character sets\n\nBy default the encoding and decoding of characters is done in `utf-8`. If you\nwish to encode querystrings to a different character set (i.e.\n[Shift JIS](https://en.wikipedia.org/wiki/Shift_JIS)) you can use the\n[`qs-iconv`](https://github.com/martinheidegger/qs-iconv) library:\n\n```javascript\nvar encoder = require('qs-iconv/encoder')('shift_jis');\nvar shiftJISEncoded = qs.stringify({ a: 'こんにちは！' }, { encoder: encoder });\nassert.equal(shiftJISEncoded, 'a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I');\n```\n\nThis also works for decoding of query strings:\n\n```javascript\nvar decoder = require('qs-iconv/decoder')('shift_jis');\nvar obj = qs.parse('a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I', { decoder: decoder });\nassert.deepEqual(obj, { a: 'こんにちは！' });\n```\n\n### RFC 3986 and RFC 1738 space encoding\n\nRFC3986 used as default option and encodes ' ' to *%20* which is backward compatible.\nIn the same time, output can be stringified as per RFC1738 with ' ' equal to '+'.\n\n```\nassert.equal(qs.stringify({ a: 'b c' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC3986' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC1738' }), 'a=b+c');\n```\n\n[1]: https://npmjs.org/package/qs\n[2]: http://versionbadg.es/ljharb/qs.svg\n[3]: https://api.travis-ci.org/ljharb/qs.svg\n[4]: https://travis-ci.org/ljharb/qs\n[5]: https://david-dm.org/ljharb/qs.svg\n[6]: https://david-dm.org/ljharb/qs\n[7]: https://david-dm.org/ljharb/qs/dev-status.svg\n[8]: https://david-dm.org/ljharb/qs?type=dev\n[9]: https://ci.testling.com/ljharb/qs.png\n[10]: https://ci.testling.com/ljharb/qs\n[11]: https://nodei.co/npm/qs.png?downloads=true&stars=true\n[license-image]: http://img.shields.io/npm/l/qs.svg\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/qs.svg\n[downloads-url]: http://npm-stat.com/charts.html?package=qs\n",
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/qs/README.md:Analogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:
./lib/node_modules/log-requests/node_modules/body-parser/node_modules/qs/CHANGELOG.md:- [**#24**](https://github.com/ljharb/qs/issues/24) Changelog? Semver?
./lib/node_modules/log-requests/node_modules/body-parser/README.md:// POST /login gets urlencoded bodies
./lib/node_modules/log-requests/node_modules/body-parser/README.md:app.post('/login', urlencodedParser, function (req, res) {
./lib/node_modules/log-requests/node_modules/cookie-parser/package.json:  "readme": "# cookie-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nParse `Cookie` header and populate `req.cookies` with an object keyed by the cookie\nnames. Optionally you may enable signed cookie support by passing a `secret` string,\nwhich assigns `req.secret` so it may be used by other middleware.\n\n## Installation\n\n```sh\n$ npm install cookie-parser\n```\n\n## API\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n```\n\n### cookieParser(secret, options)\n\n- `secret` a string or array used for signing cookies. This is optional and if not specified, will not parse signed cookies. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n- `options` an object that is passed to `cookie.parse` as the second option. See [cookie](https://www.npmjs.org/package/cookie) for more information.\n  - `decode` a function to decode the value of the cookie\n\n### cookieParser.JSONCookie(str)\n\nParse a cookie value as a JSON cookie. This will return the parsed JSON value if it was a JSON cookie, otherwise it will return the passed value.\n\n### cookieParser.JSONCookies(cookies)\n\nGiven an object, this will iterate over the keys and call `JSONCookie` on each value. This will return the same object passed in.\n\n### cookieParser.signedCookie(str, secret)\n\nParse a cookie value as a signed cookie. This will return the parsed unsigned value if it was a signed cookie and the signature was valid, otherwise it will return the passed value.\n\nThe `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n\n### cookieParser.signedCookies(cookies, secret)\n\nGiven an object, this will iterate over the keys and check if any value is a signed cookie. If it is a signed cookie and the signature is valid, the key will be deleted from the object and added to the new object that is returned.\n\nThe `secret` argument can be an array or string. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order.\n\n## Example\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n\napp.get('/', function(req, res) {\n  console.log('Cookies: ', req.cookies)\n})\n\napp.listen(8080)\n\n// curl command that sends an HTTP request with two cookies\n// curl http://127.0.0.1:8080 --cookie \"Cho=Kim;Greet=Hello\"\n```\n\n### [MIT Licensed](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie-parser.svg\n[npm-url]: https://npmjs.org/package/cookie-parser\n[node-version-image]: https://img.shields.io/node/v/cookie-parser.svg\n[node-version-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/expressjs/cookie-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/cookie-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/cookie-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie-parser.svg\n[downloads-url]: https://npmjs.org/package/cookie-parser\n",
./lib/node_modules/log-requests/node_modules/cookie-parser/README.md:  console.log('Cookies: ', req.cookies)
./lib/node_modules/log-requests/node_modules/lodash/string/template.js:  // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
./lib/node_modules/log-requests/node_modules/lodash/package.json:  "readme": "# lodash v3.10.1\n\nThe [modern build](https://github.com/lodash/lodash/wiki/Build-Differences) of [lodash](https://lodash.com/) exported as [Node.js](http://nodejs.org/)/[io.js](https://iojs.org/) modules.\n\nGenerated using [lodash-cli](https://www.npmjs.com/package/lodash-cli):\n```bash\n$ lodash modularize modern exports=node -o ./\n$ lodash modern -d -o ./index.js\n```\n\n## Installation\n\nUsing npm:\n\n```bash\n$ {sudo -H} npm i -g npm\n$ npm i --save lodash\n```\n\nIn Node.js/io.js:\n\n```js\n// load the modern build\nvar _ = require('lodash');\n// or a method category\nvar array = require('lodash/array');\n// or a method (great for smaller builds with browserify/webpack)\nvar chunk = require('lodash/array/chunk');\n```\n\nSee the [package source](https://github.com/lodash/lodash/tree/3.10.1-npm) for more details.\n\n**Note:**<br>\nDon’t assign values to the [special variable](http://nodejs.org/api/repl.html#repl_repl_features) `_` when in the REPL.<br>\nInstall [n_](https://www.npmjs.com/package/n_) for a REPL that includes lodash by default.\n\n## Module formats\n\nlodash is also available in a variety of other builds & module formats.\n\n * npm packages for [modern](https://www.npmjs.com/package/lodash), [compatibility](https://www.npmjs.com/package/lodash-compat), & [per method](https://www.npmjs.com/browse/keyword/lodash-modularized) builds\n * AMD modules for [modern](https://github.com/lodash/lodash/tree/3.10.1-amd) & [compatibility](https://github.com/lodash/lodash-compat/tree/3.10.1-amd) builds\n * ES modules for the [modern](https://github.com/lodash/lodash/tree/3.10.1-es) build\n\n## Further Reading\n\n  * [API Documentation](https://lodash.com/docs)\n  * [Build Differences](https://github.com/lodash/lodash/wiki/Build-Differences)\n  * [Changelog](https://github.com/lodash/lodash/wiki/Changelog)\n  * [Roadmap](https://github.com/lodash/lodash/wiki/Roadmap)\n  * [More Resources](https://github.com/lodash/lodash/wiki/Resources)\n\n## Features\n\n * ~100% [code coverage](https://coveralls.io/r/lodash)\n * Follows [semantic versioning](http://semver.org/) for releases\n * [Lazily evaluated](http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/) chaining\n * [_(…)](https://lodash.com/docs#_) supports implicit chaining\n * [_.ary](https://lodash.com/docs#ary) & [_.rearg](https://lodash.com/docs#rearg) to change function argument limits & order\n * [_.at](https://lodash.com/docs#at) for cherry-picking collection values\n * [_.attempt](https://lodash.com/docs#attempt) to execute functions which may error without a try-catch\n * [_.before](https://lodash.com/docs#before) to complement [_.after](https://lodash.com/docs#after)\n * [_.bindKey](https://lodash.com/docs#bindKey) for binding [*“lazy”*](http://michaux.ca/articles/lazy-function-definition-pattern) defined methods\n * [_.chunk](https://lodash.com/docs#chunk) for splitting an array into chunks of a given size\n * [_.clone](https://lodash.com/docs#clone) supports shallow cloning of `Date` & `RegExp` objects\n * [_.cloneDeep](https://lodash.com/docs#cloneDeep) for deep cloning arrays & objects\n * [_.curry](https://lodash.com/docs#curry) & [_.curryRight](https://lodash.com/docs#curryRight) for creating [curried](http://hughfdjackson.com/javascript/why-curry-helps/) functions\n * [_.debounce](https://lodash.com/docs#debounce) & [_.throttle](https://lodash.com/docs#throttle) are cancelable & accept options for more control\n * [_.defaultsDeep](https://lodash.com/docs#defaultsDeep) for recursively assigning default properties\n * [_.fill](https://lodash.com/docs#fill) to fill arrays with values\n * [_.findKey](https://lodash.com/docs#findKey) for finding keys\n * [_.flow](https://lodash.com/docs#flow) to complement [_.flowRight](https://lodash.com/docs#flowRight) (a.k.a `_.compose`)\n * [_.forEach](https://lodash.com/docs#forEach) supports exiting early\n * [_.forIn](https://lodash.com/docs#forIn) for iterating all enumerable properties\n * [_.forOwn](https://lodash.com/docs#forOwn) for iterating own properties\n * [_.get](https://lodash.com/docs#get) & [_.set](https://lodash.com/docs#set) for deep property getting & setting\n * [_.gt](https://lodash.com/docs#gt), [_.gte](https://lodash.com/docs#gte), [_.lt](https://lodash.com/docs#lt), & [_.lte](https://lodash.com/docs#lte) relational methods\n * [_.inRange](https://lodash.com/docs#inRange) for checking whether a number is within a given range\n * [_.isNative](https://lodash.com/docs#isNative) to check for native functions\n * [_.isPlainObject](https://lodash.com/docs#isPlainObject) & [_.toPlainObject](https://lodash.com/docs#toPlainObject) to check for & convert to `Object` objects\n * [_.isTypedArray](https://lodash.com/docs#isTypedArray) to check for typed arrays\n * [_.mapKeys](https://lodash.com/docs#mapKeys) for mapping keys to an object\n * [_.matches](https://lodash.com/docs#matches) supports deep object comparisons\n * [_.matchesProperty](https://lodash.com/docs#matchesProperty) to complement [_.matches](https://lodash.com/docs#matches) & [_.property](https://lodash.com/docs#property)\n * [_.merge](https://lodash.com/docs#merge) for a deep [_.extend](https://lodash.com/docs#extend)\n * [_.method](https://lodash.com/docs#method) & [_.methodOf](https://lodash.com/docs#methodOf) to create functions that invoke methods\n * [_.modArgs](https://lodash.com/docs#modArgs) for more advanced functional composition\n * [_.parseInt](https://lodash.com/docs#parseInt) for consistent cross-environment behavior\n * [_.pull](https://lodash.com/docs#pull), [_.pullAt](https://lodash.com/docs#pullAt), & [_.remove](https://lodash.com/docs#remove) for mutating arrays\n * [_.random](https://lodash.com/docs#random) supports returning floating-point numbers\n * [_.restParam](https://lodash.com/docs#restParam) & [_.spread](https://lodash.com/docs#spread) for applying rest parameters & spreading arguments to functions\n * [_.runInContext](https://lodash.com/docs#runInContext) for collisionless mixins & easier mocking\n * [_.slice](https://lodash.com/docs#slice) for creating subsets of array-like values\n * [_.sortByAll](https://lodash.com/docs#sortByAll) & [_.sortByOrder](https://lodash.com/docs#sortByOrder) for sorting by multiple properties & orders\n * [_.support](https://lodash.com/docs#support) for flagging environment features\n * [_.template](https://lodash.com/docs#template) supports [*“imports”*](https://lodash.com/docs#templateSettings-imports) options & [ES template delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components)\n * [_.transform](https://lodash.com/docs#transform) as a powerful alternative to [_.reduce](https://lodash.com/docs#reduce) for transforming objects\n * [_.unzipWith](https://lodash.com/docs#unzipWith) & [_.zipWith](https://lodash.com/docs#zipWith) to specify how grouped values should be combined\n * [_.valuesIn](https://lodash.com/docs#valuesIn) for getting values of all enumerable properties\n * [_.xor](https://lodash.com/docs#xor) to complement [_.difference](https://lodash.com/docs#difference), [_.intersection](https://lodash.com/docs#intersection), & [_.union](https://lodash.com/docs#union)\n * [_.add](https://lodash.com/docs#add), [_.round](https://lodash.com/docs#round), [_.sum](https://lodash.com/docs#sum), &\n   [more](https://lodash.com/docs \"_.ceil & _.floor\") math methods\n * [_.bind](https://lodash.com/docs#bind), [_.curry](https://lodash.com/docs#curry), [_.partial](https://lodash.com/docs#partial), &\n   [more](https://lodash.com/docs \"_.bindKey, _.curryRight, _.partialRight\") support customizable argument placeholders\n * [_.capitalize](https://lodash.com/docs#capitalize), [_.trim](https://lodash.com/docs#trim), &\n   [more](https://lodash.com/docs \"_.camelCase, _.deburr, _.endsWith, _.escapeRegExp, _.kebabCase, _.pad, _.padLeft, _.padRight, _.repeat, _.snakeCase, _.startCase, _.startsWith, _.trimLeft, _.trimRight, _.trunc, _.words\") string methods\n * [_.clone](https://lodash.com/docs#clone), [_.isEqual](https://lodash.com/docs#isEqual), &\n   [more](https://lodash.com/docs \"_.assign, _.cloneDeep, _.merge\") accept customizer callbacks\n * [_.dropWhile](https://lodash.com/docs#dropWhile), [_.takeWhile](https://lodash.com/docs#takeWhile), &\n   [more](https://lodash.com/docs \"_.drop, _.dropRight, _.dropRightWhile, _.take, _.takeRight, _.takeRightWhile\") to complement [_.first](https://lodash.com/docs#first), [_.initial](https://lodash.com/docs#initial), [_.last](https://lodash.com/docs#last), & [_.rest](https://lodash.com/docs#rest)\n * [_.findLast](https://lodash.com/docs#findLast), [_.findLastKey](https://lodash.com/docs#findLastKey), &\n   [more](https://lodash.com/docs \"_.curryRight, _.dropRight, _.dropRightWhile, _.flowRight, _.forEachRight, _.forInRight, _.forOwnRight, _.padRight, partialRight, _.takeRight, _.trimRight, _.takeRightWhile\") right-associative methods\n * [_.includes](https://lodash.com/docs#includes), [_.toArray](https://lodash.com/docs#toArray), &\n   [more](https://lodash.com/docs \"_.at, _.countBy, _.every, _.filter, _.find, _.findLast, _.findWhere, _.forEach, _.forEachRight, _.groupBy, _.indexBy, _.invoke, _.map, _.max, _.min, _.partition, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.size, _.some, _.sortBy, _.sortByAll, _.sortByOrder, _.sum, _.where\") accept strings\n * [_#commit](https://lodash.com/docs#prototype-commit) & [_#plant](https://lodash.com/docs#prototype-plant) for working with chain sequences\n * [_#thru](https://lodash.com/docs#thru) to pass values thru a chain sequence\n\n## Support\n\nTested in Chrome 43-44, Firefox 38-39, IE 6-11, MS Edge, Safari 5-8, ChakraNode 0.12.2, io.js 2.5.0, Node.js 0.8.28, 0.10.40, & 0.12.7, PhantomJS 1.9.8, RingoJS 0.11, & Rhino 1.7.6.\nAutomated [browser](https://saucelabs.com/u/lodash) & [CI](https://travis-ci.org/lodash/lodash/) test runs are available. Special thanks to [Sauce Labs](https://saucelabs.com/) for providing automated browser testing.\n",
./lib/node_modules/log-requests/node_modules/lodash/array/fill.js: * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/array/remove.js: * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/array/remove.js: * console.log(evens);
./lib/node_modules/log-requests/node_modules/lodash/array/pullAt.js: * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/array/pullAt.js: * console.log(evens);
./lib/node_modules/log-requests/node_modules/lodash/array/pull.js: * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/chain/wrapperCommit.js: * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/chain/wrapperCommit.js: * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/chain/wrapperCommit.js: * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/chain/wrapperConcat.js: * console.log(wrapped.value());
./lib/node_modules/log-requests/node_modules/lodash/chain/wrapperConcat.js: * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/chain/wrapperReverse.js: * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/README.md:  * [Changelog](https://github.com/lodash/lodash/wiki/Changelog)
./lib/node_modules/log-requests/node_modules/lodash/README.md: * [Lazily evaluated](http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/) chaining
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(evens);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(evens);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(wrapped.value());
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(array);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(n);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs each value from left to right and returns the array
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(n, key);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(n);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs each value from right to left and returns the array
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(_.now() - stamp);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs the number of milliseconds it took for the deferred function to be invoked
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log('done saving!');
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'done saving!' after the two async saves have completed
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *     console.log('clicked ' + this.label);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'clicked docs' when the element is clicked
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(text);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // logs 'deferred' after one or more milliseconds
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(text);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'later' after one second
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(key);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(key);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(key);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'a' and 'b' (iteration order is not guaranteed)
./lib/node_modules/log-requests/node_modules/lodash/index.js:     *   console.log(key);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(object.a[0].b.c);
./lib/node_modules/log-requests/node_modules/lodash/index.js:     * console.log(object.x[0].y.z);
./lib/node_modules/log-requests/node_modules/lodash/index.js:      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
./lib/node_modules/log-requests/node_modules/lodash/date/now.js: *   console.log(_.now() - stamp);
./lib/node_modules/log-requests/node_modules/lodash/date/now.js: * // => logs the number of milliseconds it took for the deferred function to be invoked
./lib/node_modules/log-requests/node_modules/lodash/collection/forEachRight.js: *   console.log(n);
./lib/node_modules/log-requests/node_modules/lodash/collection/forEachRight.js: * // => logs each value from right to left and returns the array
./lib/node_modules/log-requests/node_modules/lodash/collection/forEach.js: *   console.log(n);
./lib/node_modules/log-requests/node_modules/lodash/collection/forEach.js: * // => logs each value from left to right and returns the array
./lib/node_modules/log-requests/node_modules/lodash/collection/forEach.js: *   console.log(n, key);
./lib/node_modules/log-requests/node_modules/lodash/collection/forEach.js: * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
./lib/node_modules/log-requests/node_modules/lodash/object/set.js: * console.log(object.a[0].b.c);
./lib/node_modules/log-requests/node_modules/lodash/object/set.js: * console.log(object.x[0].y.z);
./lib/node_modules/log-requests/node_modules/lodash/object/forIn.js: *   console.log(key);
./lib/node_modules/log-requests/node_modules/lodash/object/forIn.js: * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
./lib/node_modules/log-requests/node_modules/lodash/object/forOwnRight.js: *   console.log(key);
./lib/node_modules/log-requests/node_modules/lodash/object/forOwnRight.js: * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
./lib/node_modules/log-requests/node_modules/lodash/object/forInRight.js: *   console.log(key);
./lib/node_modules/log-requests/node_modules/lodash/object/forInRight.js: * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
./lib/node_modules/log-requests/node_modules/lodash/object/forOwn.js: *   console.log(key);
./lib/node_modules/log-requests/node_modules/lodash/object/forOwn.js: * // => logs 'a' and 'b' (iteration order is not guaranteed)
./lib/node_modules/log-requests/node_modules/lodash/function/delay.js: *   console.log(text);
./lib/node_modules/log-requests/node_modules/lodash/function/delay.js: * // => logs 'later' after one second
./lib/node_modules/log-requests/node_modules/lodash/function/after.js: *   console.log('done saving!');
./lib/node_modules/log-requests/node_modules/lodash/function/after.js: * // => logs 'done saving!' after the two async saves have completed
./lib/node_modules/log-requests/node_modules/lodash/function/bindAll.js: *     console.log('clicked ' + this.label);
./lib/node_modules/log-requests/node_modules/lodash/function/bindAll.js: * // => logs 'clicked docs' when the element is clicked
./lib/node_modules/log-requests/node_modules/lodash/function/defer.js: *   console.log(text);
./lib/node_modules/log-requests/node_modules/lodash/function/defer.js: * // logs 'deferred' after one or more milliseconds
./lib/node_modules/log-requests/README.md:# log-requests
./lib/node_modules/log-requests/README.md:A service that simply echos and logs all requests sent to it
./lib/node_modules/log-requests/README.md:npm install log-requests
./lib/node_modules/log-requests/README.md:log-requests --help
./lib/node_modules/log-requests/README.md:Usage: log-requests [options]
./lib/node_modules/log-requests/README.md:A service that simply echos and logs all requests sent to it
./lib/node_modules/log-requests/README.md:  to log requests to http://localhost:2345:
./lib/node_modules/log-requests/README.md:  log-requests
./lib/node_modules/log-requests/README.md:  to log requests to http://localhost:2000:
./lib/node_modules/log-requests/README.md:  log-requests -p 2000
./lib/node_modules/log-requests/README.md:  log-requests --port 2000
./lib/node_modules/log-requests/README.md:  to log just the url and cookies for requests to http://localhost:2000:
./lib/node_modules/log-requests/README.md:  log-requests -p 2000 -uc
./lib/node_modules/log-requests/README.md:  log-requests --port 2000 --url --cookies
./lib/node_modules/log-requests/README.md:  to log just the headers query and body for requests to http://localhost:2000:
./lib/node_modules/log-requests/README.md:  log-requests -p 2000 -hqb
./lib/node_modules/log-requests/README.md:  log-requests -p 2000 --headers --query --body
./lib/node_modules/log-requests/README.md:log-requests
./lib/node_modules/log-requests/index.js:const logger = require('./logger')
./lib/node_modules/log-requests/index.js:  .description('A service that simply echos and logs all requests sent to it')
./lib/node_modules/log-requests/index.js:  console.log(`  Examples:
./lib/node_modules/log-requests/index.js:    to log requests to http://localhost:2345:
./lib/node_modules/log-requests/index.js:    ${chalk.green('log-requests')}
./lib/node_modules/log-requests/index.js:    to log requests to http://localhost:2000:
./lib/node_modules/log-requests/index.js:    ${chalk.green('log-requests -p 2000')}
./lib/node_modules/log-requests/index.js:    ${chalk.green('log-requests --port 2000')}
./lib/node_modules/log-requests/index.js:    to log just the url and cookies for requests to http://localhost:2000:
./lib/node_modules/log-requests/index.js:    ${chalk.green('log-requests -p 2000 -uc')}
./lib/node_modules/log-requests/index.js:    ${chalk.green('log-requests --port 2000 --url --cookies')}
./lib/node_modules/log-requests/index.js:    to log just the headers query and body for requests to http://localhost:2000:
./lib/node_modules/log-requests/index.js:    ${chalk.green('log-requests -p 2000 -hqb')}
./lib/node_modules/log-requests/index.js:    ${chalk.green('log-requests -p 2000 --headers --query --body')}
./lib/node_modules/log-requests/index.js:logger(program.parse(process.argv))
./lib/node_modules/express/node_modules/safe-buffer/package.json:  "readme": "# safe-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/safe-buffer/master.svg\n[travis-url]: https://travis-ci.org/feross/safe-buffer\n[npm-image]: https://img.shields.io/npm/v/safe-buffer.svg\n[npm-url]: https://npmjs.org/package/safe-buffer\n[downloads-image]: https://img.shields.io/npm/dm/safe-buffer.svg\n[downloads-url]: https://npmjs.org/package/safe-buffer\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n#### Safer Node.js Buffer API\n\n**Use the new Node.js Buffer APIs (`Buffer.from`, `Buffer.alloc`,\n`Buffer.allocUnsafe`, `Buffer.allocUnsafeSlow`) in all versions of Node.js.**\n\n**Uses the built-in implementation when available.**\n\n## install\n\n```\nnpm install safe-buffer\n```\n\n## usage\n\nThe goal of this package is to provide a safe replacement for the node.js `Buffer`.\n\nIt's a drop-in replacement for `Buffer`. You can use it by adding one `require` line to\nthe top of your node.js modules:\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n\n// Existing buffer code will continue to work without issues:\n\nnew Buffer('hey', 'utf8')\nnew Buffer([1, 2, 3], 'utf8')\nnew Buffer(obj)\nnew Buffer(16) // create an uninitialized buffer (potentially unsafe)\n\n// But you can use these new explicit APIs to make clear what you want:\n\nBuffer.from('hey', 'utf8') // convert from many types to a Buffer\nBuffer.alloc(16) // create a zero-filled buffer (safe)\nBuffer.allocUnsafe(16) // create an uninitialized buffer (potentially unsafe)\n```\n\n## api\n\n### Class Method: Buffer.from(array)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `array` {Array}\n\nAllocates a new `Buffer` using an `array` of octets.\n\n```js\nconst buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]);\n  // creates a new Buffer containing ASCII bytes\n  // ['b','u','f','f','e','r']\n```\n\nA `TypeError` will be thrown if `array` is not an `Array`.\n\n### Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `arrayBuffer` {ArrayBuffer} The `.buffer` property of a `TypedArray` or\n  a `new ArrayBuffer()`\n* `byteOffset` {Number} Default: `0`\n* `length` {Number} Default: `arrayBuffer.length - byteOffset`\n\nWhen passed a reference to the `.buffer` property of a `TypedArray` instance,\nthe newly created `Buffer` will share the same allocated memory as the\nTypedArray.\n\n```js\nconst arr = new Uint16Array(2);\narr[0] = 5000;\narr[1] = 4000;\n\nconst buf = Buffer.from(arr.buffer); // shares the memory with arr;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 a0 0f>\n\n// changing the TypedArray changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n  // Prints: <Buffer 88 13 70 17>\n```\n\nThe optional `byteOffset` and `length` arguments specify a memory range within\nthe `arrayBuffer` that will be shared by the `Buffer`.\n\n```js\nconst ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\nconsole.log(buf.length);\n  // Prints: 2\n```\n\nA `TypeError` will be thrown if `arrayBuffer` is not an `ArrayBuffer`.\n\n### Class Method: Buffer.from(buffer)\n<!-- YAML\nadded: v3.0.0\n-->\n\n* `buffer` {Buffer}\n\nCopies the passed `buffer` data onto a new `Buffer` instance.\n\n```js\nconst buf1 = Buffer.from('buffer');\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\nconsole.log(buf1.toString());\n  // 'auffer'\nconsole.log(buf2.toString());\n  // 'buffer' (copy is not changed)\n```\n\nA `TypeError` will be thrown if `buffer` is not a `Buffer`.\n\n### Class Method: Buffer.from(str[, encoding])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `str` {String} String to encode.\n* `encoding` {String} Encoding to use, Default: `'utf8'`\n\nCreates a new `Buffer` containing the given JavaScript string `str`. If\nprovided, the `encoding` parameter identifies the character encoding.\nIf not provided, `encoding` defaults to `'utf8'`.\n\n```js\nconst buf1 = Buffer.from('this is a tést');\nconsole.log(buf1.toString());\n  // prints: this is a tést\nconsole.log(buf1.toString('ascii'));\n  // prints: this is a tC)st\n\nconst buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');\nconsole.log(buf2.toString());\n  // prints: this is a tést\n```\n\nA `TypeError` will be thrown if `str` is not a string.\n\n### Class Method: Buffer.alloc(size[, fill[, encoding]])\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n* `fill` {Value} Default: `undefined`\n* `encoding` {String} Default: `utf8`\n\nAllocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the\n`Buffer` will be *zero-filled*.\n\n```js\nconst buf = Buffer.alloc(5);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nThe `size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nIf `fill` is specified, the allocated `Buffer` will be initialized by calling\n`buf.fill(fill)`. See [`buf.fill()`][] for more information.\n\n```js\nconst buf = Buffer.alloc(5, 'a');\nconsole.log(buf);\n  // <Buffer 61 61 61 61 61>\n```\n\nIf both `fill` and `encoding` are specified, the allocated `Buffer` will be\ninitialized by calling `buf.fill(fill, encoding)`. For example:\n\n```js\nconst buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\nconsole.log(buf);\n  // <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n```\n\nCalling `Buffer.alloc(size)` can be significantly slower than the alternative\n`Buffer.allocUnsafe(size)` but ensures that the newly created `Buffer` instance\ncontents will *never contain sensitive data*.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### Class Method: Buffer.allocUnsafe(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* `Buffer` of `size` bytes.  The `size` must\nbe less than or equal to the value of `require('buffer').kMaxLength` (on 64-bit\narchitectures, `kMaxLength` is `(2^31)-1`). Otherwise, a [`RangeError`][] is\nthrown. A zero-length Buffer will be created if a `size` less than or equal to\n0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\n```js\nconst buf = Buffer.allocUnsafe(5);\nconsole.log(buf);\n  // <Buffer 78 e0 82 02 01>\n  // (octets will be different, every time)\nbuf.fill(0);\nconsole.log(buf);\n  // <Buffer 00 00 00 00 00>\n```\n\nA `TypeError` will be thrown if `size` is not a number.\n\nNote that the `Buffer` module pre-allocates an internal `Buffer` instance of\nsize `Buffer.poolSize` that is used as a pool for the fast allocation of new\n`Buffer` instances created using `Buffer.allocUnsafe(size)` (and the deprecated\n`new Buffer(size)` constructor) only when `size` is less than or equal to\n`Buffer.poolSize >> 1` (floor of `Buffer.poolSize` divided by two). The default\nvalue of `Buffer.poolSize` is `8192` but can be modified.\n\nUse of this pre-allocated internal memory pool is a key difference between\ncalling `Buffer.alloc(size, fill)` vs. `Buffer.allocUnsafe(size).fill(fill)`.\nSpecifically, `Buffer.alloc(size, fill)` will *never* use the internal Buffer\npool, while `Buffer.allocUnsafe(size).fill(fill)` *will* use the internal\nBuffer pool if `size` is less than or equal to half `Buffer.poolSize`. The\ndifference is subtle but can be important when an application requires the\nadditional performance that `Buffer.allocUnsafe(size)` provides.\n\n### Class Method: Buffer.allocUnsafeSlow(size)\n<!-- YAML\nadded: v5.10.0\n-->\n\n* `size` {Number}\n\nAllocates a new *non-zero-filled* and non-pooled `Buffer` of `size` bytes.  The\n`size` must be less than or equal to the value of\n`require('buffer').kMaxLength` (on 64-bit architectures, `kMaxLength` is\n`(2^31)-1`). Otherwise, a [`RangeError`][] is thrown. A zero-length Buffer will\nbe created if a `size` less than or equal to 0 is specified.\n\nThe underlying memory for `Buffer` instances created in this way is *not\ninitialized*. The contents of the newly created `Buffer` are unknown and\n*may contain sensitive data*. Use [`buf.fill(0)`][] to initialize such\n`Buffer` instances to zeroes.\n\nWhen using `Buffer.allocUnsafe()` to allocate new `Buffer` instances,\nallocations under 4KB are, by default, sliced from a single pre-allocated\n`Buffer`. This allows applications to avoid the garbage collection overhead of\ncreating many individually allocated Buffers. This approach improves both\nperformance and memory usage by eliminating the need to track and cleanup as\nmany `Persistent` objects.\n\nHowever, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled Buffer instance using `Buffer.allocUnsafeSlow()` then\ncopy out the relevant bits.\n\n```js\n// need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on('readable', () => {\n  const data = socket.read();\n  // allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n  // copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n  store.push(sb);\n});\n```\n\nUse of `Buffer.allocUnsafeSlow()` should be used only as a last resort *after*\na developer has observed undue memory retention in their applications.\n\nA `TypeError` will be thrown if `size` is not a number.\n\n### All the Rest\n\nThe rest of the `Buffer` API is exactly the same as in node.js.\n[See the docs](https://nodejs.org/api/buffer.html).\n\n\n## Related links\n\n- [Node.js issue: Buffer(number) is unsafe](https://github.com/nodejs/node/issues/4660)\n- [Node.js Enhancement Proposal: Buffer.from/Buffer.alloc/Buffer.zalloc/Buffer() soft-deprecate](https://github.com/nodejs/node-eps/pull/4)\n\n## Why is `Buffer` unsafe?\n\nToday, the node.js `Buffer` constructor is overloaded to handle many different argument\ntypes like `String`, `Array`, `Object`, `TypedArrayView` (`Uint8Array`, etc.),\n`ArrayBuffer`, and also `Number`.\n\nThe API is optimized for convenience: you can throw any type at it, and it will try to do\nwhat you want.\n\nBecause the Buffer constructor is so powerful, you often see code like this:\n\n```js\n// Convert UTF-8 strings to hex\nfunction toHex (str) {\n  return new Buffer(str).toString('hex')\n}\n```\n\n***But what happens if `toHex` is called with a `Number` argument?***\n\n### Remote Memory Disclosure\n\nIf an attacker can make your program call the `Buffer` constructor with a `Number`\nargument, then they can make it allocate uninitialized memory from the node.js process.\nThis could potentially disclose TLS private keys, user data, or database passwords.\n\nWhen the `Buffer` constructor is passed a `Number` argument, it returns an\n**UNINITIALIZED** block of memory of the specified `size`. When you create a `Buffer` like\nthis, you **MUST** overwrite the contents before returning it to the user.\n\nFrom the [node.js docs](https://nodejs.org/api/buffer.html#buffer_new_buffer_size):\n\n> `new Buffer(size)`\n>\n> - `size` Number\n>\n> The underlying memory for `Buffer` instances created in this way is not initialized.\n> **The contents of a newly created `Buffer` are unknown and could contain sensitive\n> data.** Use `buf.fill(0)` to initialize a Buffer to zeroes.\n\n(Emphasis our own.)\n\nWhenever the programmer intended to create an uninitialized `Buffer` you often see code\nlike this:\n\n```js\nvar buf = new Buffer(16)\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### Would this ever be a problem in real code?\n\nYes. It's surprisingly common to forget to check the type of your variables in a\ndynamically-typed language like JavaScript.\n\nUsually the consequences of assuming the wrong type is that your program crashes with an\nuncaught exception. But the failure mode for forgetting to check the type of arguments to\nthe `Buffer` constructor is more catastrophic.\n\nHere's an example of a vulnerable service that takes a JSON payload and converts it to\nhex:\n\n```js\n// Take a JSON payload {str: \"some string\"} and convert it to hex\nvar server = http.createServer(function (req, res) {\n  var data = ''\n  req.setEncoding('utf8')\n  req.on('data', function (chunk) {\n    data += chunk\n  })\n  req.on('end', function () {\n    var body = JSON.parse(data)\n    res.end(new Buffer(body.str).toString('hex'))\n  })\n})\n\nserver.listen(8080)\n```\n\nIn this example, an http client just has to send:\n\n```json\n{\n  \"str\": 1000\n}\n```\n\nand it will get back 1,000 bytes of uninitialized memory from the server.\n\nThis is a very serious bug. It's similar in severity to the\n[the Heartbleed bug](http://heartbleed.com/) that allowed disclosure of OpenSSL process\nmemory by remote attackers.\n\n\n### Which real-world packages were vulnerable?\n\n#### [`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht)\n\n[Mathias Buus](https://github.com/mafintosh) and I\n([Feross Aboukhadijeh](http://feross.org/)) found this issue in one of our own packages,\n[`bittorrent-dht`](https://www.npmjs.com/package/bittorrent-dht). The bug would allow\nanyone on the internet to send a series of messages to a user of `bittorrent-dht` and get\nthem to reveal 20 bytes at a time of uninitialized memory from the node.js process.\n\nHere's\n[the commit](https://github.com/feross/bittorrent-dht/commit/6c7da04025d5633699800a99ec3fbadf70ad35b8)\nthat fixed it. We released a new fixed version, created a\n[Node Security Project disclosure](https://nodesecurity.io/advisories/68), and deprecated all\nvulnerable versions on npm so users will get a warning to upgrade to a newer version.\n\n#### [`ws`](https://www.npmjs.com/package/ws)\n\nThat got us wondering if there were other vulnerable packages. Sure enough, within a short\nperiod of time, we found the same issue in [`ws`](https://www.npmjs.com/package/ws), the\nmost popular WebSocket implementation in node.js.\n\nIf certain APIs were called with `Number` parameters instead of `String` or `Buffer` as\nexpected, then uninitialized server memory would be disclosed to the remote peer.\n\nThese were the vulnerable methods:\n\n```js\nsocket.send(number)\nsocket.ping(number)\nsocket.pong(number)\n```\n\nHere's a vulnerable socket server with some echo functionality:\n\n```js\nserver.on('connection', function (socket) {\n  socket.on('message', function (message) {\n    message = JSON.parse(message)\n    if (message.type === 'echo') {\n      socket.send(message.data) // send back the user's message\n    }\n  })\n})\n```\n\n`socket.send(number)` called on the server, will disclose server memory.\n\nHere's [the release](https://github.com/websockets/ws/releases/tag/1.0.1) where the issue\nwas fixed, with a more detailed explanation. Props to\n[Arnout Kazemier](https://github.com/3rd-Eden) for the quick fix. Here's the\n[Node Security Project disclosure](https://nodesecurity.io/advisories/67).\n\n\n### What's the solution?\n\nIt's important that node.js offers a fast way to get memory otherwise performance-critical\napplications would needlessly get a lot slower.\n\nBut we need a better way to *signal our intent* as programmers. **When we want\nuninitialized memory, we should request it explicitly.**\n\nSensitive functionality should not be packed into a developer-friendly API that loosely\naccepts many different types. This type of API encourages the lazy practice of passing\nvariables in without checking the type very carefully.\n\n#### A new API: `Buffer.allocUnsafe(number)`\n\nThe functionality of creating buffers with uninitialized memory should be part of another\nAPI. We propose `Buffer.allocUnsafe(number)`. This way, it's not part of an API that\nfrequently gets user input of all sorts of different types passed into it.\n\n```js\nvar buf = Buffer.allocUnsafe(16) // careful, uninitialized memory!\n\n// Immediately overwrite the uninitialized buffer with data from another buffer\nfor (var i = 0; i < buf.length; i++) {\n  buf[i] = otherBuf[i]\n}\n```\n\n\n### How do we fix node.js core?\n\nWe sent [a PR to node.js core](https://github.com/nodejs/node/pull/4514) (merged as\n`semver-major`) which defends against one case:\n\n```js\nvar str = 16\nnew Buffer(str, 'utf8')\n```\n\nIn this situation, it's implied that the programmer intended the first argument to be a\nstring, since they passed an encoding as a second argument. Today, node.js will allocate\nuninitialized memory in the case of `new Buffer(number, encoding)`, which is probably not\nwhat the programmer intended.\n\nBut this is only a partial solution, since if the programmer does `new Buffer(variable)`\n(without an `encoding` parameter) there's no way to know what they intended. If `variable`\nis sometimes a number, then uninitialized memory will sometimes be returned.\n\n### What's the real long-term fix?\n\nWe could deprecate and remove `new Buffer(number)` and use `Buffer.allocUnsafe(number)` when\nwe need uninitialized memory. But that would break 1000s of packages.\n\n~~We believe the best solution is to:~~\n\n~~1. Change `new Buffer(number)` to return safe, zeroed-out memory~~\n\n~~2. Create a new API for creating uninitialized Buffers. We propose: `Buffer.allocUnsafe(number)`~~\n\n#### Update\n\nWe now support adding three new APIs:\n\n- `Buffer.from(value)` - convert from any type to a buffer\n- `Buffer.alloc(size)` - create a zero-filled buffer\n- `Buffer.allocUnsafe(size)` - create an uninitialized buffer with given size\n\nThis solves the core problem that affected `ws` and `bittorrent-dht` which is\n`Buffer(variable)` getting tricked into taking a number argument.\n\nThis way, existing code continues working and the impact on the npm ecosystem will be\nminimal. Over time, npm maintainers can migrate performance-critical code to use\n`Buffer.allocUnsafe(number)` instead of `new Buffer(number)`.\n\n\n### Conclusion\n\nWe think there's a serious design issue with the `Buffer` API as it exists today. It\npromotes insecure software by putting high-risk functionality into a convenient API\nwith friendly \"developer ergonomics\".\n\nThis wasn't merely a theoretical exercise because we found the issue in some of the\nmost popular npm packages.\n\nFortunately, there's an easy fix that can be applied today. Use `safe-buffer` in place of\n`buffer`.\n\n```js\nvar Buffer = require('safe-buffer').Buffer\n```\n\nEventually, we hope that node.js core can switch to this new, safer behavior. We believe\nthe impact on the ecosystem would be minimal since it's not a breaking change.\nWell-maintained, popular packages would be updated to use `Buffer.alloc` quickly, while\nolder, insecure packages would magically become safe from this attack vector.\n\n\n## links\n\n- [Node.js PR: buffer: throw if both length and enc are passed](https://github.com/nodejs/node/pull/4514)\n- [Node Security Project disclosure for `ws`](https://nodesecurity.io/advisories/67)\n- [Node Security Project disclosure for`bittorrent-dht`](https://nodesecurity.io/advisories/68)\n\n\n## credit\n\nThe original issues in `bittorrent-dht`\n([disclosure](https://nodesecurity.io/advisories/68)) and\n`ws` ([disclosure](https://nodesecurity.io/advisories/67)) were discovered by\n[Mathias Buus](https://github.com/mafintosh) and\n[Feross Aboukhadijeh](http://feross.org/).\n\nThanks to [Adam Baldwin](https://github.com/evilpacket) for helping disclose these issues\nand for his work running the [Node Security Project](https://nodesecurity.io/).\n\nThanks to [John Hiesey](https://github.com/jhiesey) for proofreading this README and\nauditing the code.\n\n\n## license\n\nMIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org)\n",
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf.length);
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString());
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf1.toString('ascii'));
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf2.toString());
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/express/node_modules/safe-buffer/README.md:console.log(buf);
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/package.json:  "readme": "# mime-db\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nThis is a database of all mime types.\nIt consists of a single, public JSON file and does not include any logic,\nallowing it to remain as un-opinionated as possible with an API.\nIt aggregates data from the following sources:\n\n- http://www.iana.org/assignments/media-types/media-types.xhtml\n- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types\n\n## Installation\n\n```bash\nnpm install mime-db\n```\n\n### Database Download\n\nIf you're crazy enough to use this in the browser, you can just grab the\nJSON file using [RawGit](https://rawgit.com/). It is recommended to replace\n`master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the\nJSON format may change in the future.\n\n```\nhttps://cdn.rawgit.com/jshttp/mime-db/master/db.json\n```\n\n## Usage\n\n```js\nvar db = require('mime-db');\n\n// grab data on .js files\nvar data = db['application/javascript'];\n```\n\n## Data Structure\n\nThe JSON file is a map lookup for lowercased mime types.\nEach mime type has the following properties:\n\n- `.source` - where the mime type is defined.\n    If not set, it's probably a custom media type.\n    - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n    - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml)\n    - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types)\n- `.extensions[]` - known extensions associated with this mime type.\n- `.compressible` - whether a file of this type can be gzipped.\n- `.charset` - the default charset associated with this type, if any.\n\nIf unknown, every property could be `undefined`.\n\n## Contributing\n\nTo edit the database, only make PRs against `src/custom.json` or\n`src/custom-suffix.json`.\n\nThe `src/custom.json` file is a JSON object with the MIME type as the keys\nand the values being an object with the following keys:\n\n- `compressible` - leave out if you don't know, otherwise `true`/`false` for\n  if the data represented by the time is typically compressible.\n- `extensions` - include an array of file extensions that are associated with\n  the type.\n- `notes` - human-readable notes about the type, typically what the type is.\n- `sources` - include an array of URLs of where the MIME type and the associated\n  extensions are sourced from. This needs to be a [primary source](https://en.wikipedia.org/wiki/Primary_source);\n  links to type aggregating sites and Wikipedia are _not acceptible_.\n\nTo update the build, run `npm run build`.\n\n## Adding Custom Media Types\n\nThe best way to get new media types included in this library is to register\nthem with the IANA. The community registration procedure is outlined in\n[RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types\nregistered with the IANA are automatically pulled into this library.\n\n[npm-version-image]: https://img.shields.io/npm/v/mime-db.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg\n[npm-url]: https://npmjs.org/package/mime-db\n[travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg\n[travis-url]: https://travis-ci.org/jshttp/mime-db\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master\n[node-image]: https://img.shields.io/node/v/mime-db.svg\n[node-url]: https://nodejs.org/en/download/\n",
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/dialog-info+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/sgml-open-catalog": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.flographit": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.iptc.g2.catalogitem+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.nokia.catalogs": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-audit-dialog+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-base+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-group+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-speech+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-transform+xml": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:    "extensions": ["txt","text","conf","def","list","log","in","ini"]
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/prs.prop.logic": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/db.json:  "text/vnd.si.uricatalogue": {
./lib/node_modules/express/node_modules/type-is/node_modules/mime-types/node_modules/mime-db/README.md:It consists of a single, public JSON file and does not include any logic,
./lib/node_modules/express/node_modules/finalhandler/package.json:  "readme": "# finalhandler\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nNode.js function to invoke as the final step to respond to HTTP request.\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install finalhandler\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar finalhandler = require('finalhandler')\n```\n\n### finalhandler(req, res, [options])\n\nReturns function to be invoked as the final step for the given `req` and `res`.\nThis function is to be invoked as `fn(err)`. If `err` is falsy, the handler will\nwrite out a 404 response to the `res`. If it is truthy, an error response will\nbe written out to the `res`.\n\nWhen an error is written, the following information is added to the response:\n\n  * The `res.statusCode` is set from `err.status` (or `err.statusCode`). If\n    this value is outside the 4xx or 5xx range, it will be set to 500.\n  * The `res.statusMessage` is set according to the status code.\n  * The body will be the HTML of the status code message if `env` is\n    `'production'`, otherwise will be `err.stack`.\n  * Any headers specified in an `err.headers` object.\n\nThe final handler will also unpipe anything from `req` when it is invoked.\n\n#### options.env\n\nBy default, the environment is determined by `NODE_ENV` variable, but it can be\noverridden by this option.\n\n#### options.onerror\n\nProvide a function to be called with the `err` when it exists. Can be used for\nwriting errors to a central location without excessive function generation. Called\nas `onerror(err, req, res)`.\n\n## Examples\n\n### always 404\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  done()\n})\n\nserver.listen(3000)\n```\n\n### perform simple action\n\n```js\nvar finalhandler = require('finalhandler')\nvar fs = require('fs')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n\n  fs.readFile('index.html', function (err, buf) {\n    if (err) return done(err)\n    res.setHeader('Content-Type', 'text/html')\n    res.end(buf)\n  })\n})\n\nserver.listen(3000)\n```\n\n### use with middleware-style functions\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar serveStatic = require('serve-static')\n\nvar serve = serveStatic('public')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  serve(req, res, done)\n})\n\nserver.listen(3000)\n```\n\n### keep log of all errors\n\n```js\nvar finalhandler = require('finalhandler')\nvar fs = require('fs')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  var done = finalhandler(req, res, {onerror: logerror})\n\n  fs.readFile('index.html', function (err, buf) {\n    if (err) return done(err)\n    res.setHeader('Content-Type', 'text/html')\n    res.end(buf)\n  })\n})\n\nserver.listen(3000)\n\nfunction logerror (err) {\n  console.error(err.stack || err.toString())\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/finalhandler.svg\n[npm-url]: https://npmjs.org/package/finalhandler\n[node-image]: https://img.shields.io/node/v/finalhandler.svg\n[node-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/pillarjs/finalhandler.svg\n[travis-url]: https://travis-ci.org/pillarjs/finalhandler\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/finalhandler.svg\n[coveralls-url]: https://coveralls.io/r/pillarjs/finalhandler?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/finalhandler.svg\n[downloads-url]: https://npmjs.org/package/finalhandler\n",
./lib/node_modules/express/node_modules/finalhandler/README.md:### keep log of all errors
./lib/node_modules/express/node_modules/finalhandler/README.md:  var done = finalhandler(req, res, {onerror: logerror})
./lib/node_modules/express/node_modules/finalhandler/README.md:function logerror (err) {
./lib/node_modules/express/node_modules/send/package.json:  "readme": "# send\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nSend is a library for streaming files from the file system as a http response\nsupporting partial responses (Ranges), conditional-GET negotiation (If-Match,\nIf-Unmodified-Since, If-None-Match, If-Modified-Since), high test coverage,\nand granular events which may be leveraged to take appropriate actions in your\napplication or framework.\n\nLooking to serve up entire folders mapped to URLs? Try [serve-static](https://www.npmjs.org/package/serve-static).\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install send\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar send = require('send')\n```\n\n### send(req, path, [options])\n\nCreate a new `SendStream` for the given path to send to a `res`. The `req` is\nthe Node.js HTTP request and the `path` is a urlencoded path to send (urlencoded,\nnot the actual file-system path).\n\n#### Options\n\n##### acceptRanges\n\nEnable or disable accepting ranged requests, defaults to true.\nDisabling this will not send `Accept-Ranges` and ignore the contents\nof the `Range` request header.\n\n##### cacheControl\n\nEnable or disable setting `Cache-Control` response header, defaults to\ntrue. Disabling this will ignore the `immutable` and `maxAge` options.\n\n##### dotfiles\n\nSet how \"dotfiles\" are treated when encountered. A dotfile is a file\nor directory that begins with a dot (\".\"). Note this check is done on\nthe path itself without checking if the path actually exists on the\ndisk. If `root` is specified, only the dotfiles above the root are\nchecked (i.e. the root itself can be within a dotfile when when set\nto \"deny\").\n\n  - `'allow'` No special treatment for dotfiles.\n  - `'deny'` Send a 403 for any request for a dotfile.\n  - `'ignore'` Pretend like the dotfile does not exist and 404.\n\nThe default value is _similar_ to `'ignore'`, with the exception that\nthis default will not ignore the files within a directory that begins\nwith a dot, for backward-compatibility.\n\n##### end\n\nByte offset at which the stream ends, defaults to the length of the file\nminus 1. The end is inclusive in the stream, meaning `end: 3` will include\nthe 4th byte in the stream.\n\n##### etag\n\nEnable or disable etag generation, defaults to true.\n\n##### extensions\n\nIf a given file doesn't exist, try appending one of the given extensions,\nin the given order. By default, this is disabled (set to `false`). An\nexample value that will serve extension-less HTML files: `['html', 'htm']`.\nThis is skipped if the requested file already has an extension.\n\n##### immutable\n\nEnable or diable the `immutable` directive in the `Cache-Control` response\nheader, defaults to `false`. If set to `true`, the `maxAge` option should\nalso be specified to enable caching. The `immutable` directive will prevent\nsupported clients from making conditional requests during the life of the\n`maxAge` option to check if the file has changed.\n\n##### index\n\nBy default send supports \"index.html\" files, to disable this\nset `false` or to supply a new index pass a string or an array\nin preferred order.\n\n##### lastModified\n\nEnable or disable `Last-Modified` header, defaults to true. Uses the file\nsystem's last modified value.\n\n##### maxAge\n\nProvide a max-age in milliseconds for http caching, defaults to 0.\nThis can also be a string accepted by the\n[ms](https://www.npmjs.org/package/ms#readme) module.\n\n##### root\n\nServe files relative to `path`.\n\n##### start\n\nByte offset at which the stream starts, defaults to 0. The start is inclusive,\nmeaning `start: 2` will include the 3rd byte in the stream.\n\n#### Events\n\nThe `SendStream` is an event emitter and will emit the following events:\n\n  - `error` an error occurred `(err)`\n  - `directory` a directory was requested `(res, path)`\n  - `file` a file was requested `(path, stat)`\n  - `headers` the headers are about to be set on a file `(res, path, stat)`\n  - `stream` file streaming has started `(stream)`\n  - `end` streaming has completed\n\n#### .pipe\n\nThe `pipe` method is used to pipe the response into the Node.js HTTP response\nobject, typically `send(req, path, options).pipe(res)`.\n\n### .mime\n\nThe `mime` export is the global instance of of the\n[`mime` npm module](https://www.npmjs.com/package/mime).\n\nThis is used to configure the MIME types that are associated with file extensions\nas well as other options for how to resolve the MIME type of a file (like the\ndefault type to use for an unknown file extension).\n\n## Error-handling\n\nBy default when no `error` listeners are present an automatic response will be\nmade, otherwise you have full control over the response, aka you may show a 5xx\npage etc.\n\n## Caching\n\nIt does _not_ perform internal caching, you should use a reverse proxy cache\nsuch as Varnish for this, or those fancy things called CDNs. If your\napplication is small enough that it would benefit from single-node memory\ncaching, it's small enough that it does not need caching at all ;).\n\n## Debugging\n\nTo enable `debug()` instrumentation output export __DEBUG__:\n\n```\n$ DEBUG=send node app\n```\n\n## Running tests\n\n```\n$ npm install\n$ npm test\n```\n\n## Examples\n\n### Small example\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname).pipe(res)\n})\n\nserver.listen(3000)\n```\n\n### Custom file types\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Default unknown types to text/plain\nsend.mime.default_type = 'text/plain'\n\n// Add a custom type\nsend.mime.define({\n  'application/x-my-type': ['x-mt', 'x-mtt']\n})\n\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname).pipe(res)\n})\n\nserver.listen(3000)\n```\n\n### Custom directory index view\n\nThis is a example of serving up a structure of directories with a\ncustom function to render a listing of a directory.\n\n```js\nvar http = require('http')\nvar fs = require('fs')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\n// Transfer arbitrary files from within /www/example.com/public/*\n// with a custom handler for directory listing\nvar server = http.createServer(function onRequest (req, res) {\n  send(req, parseUrl(req).pathname, {index: false, root: '/www/example.com/public'})\n  .once('directory', directory)\n  .pipe(res)\n})\n\nserver.listen(3000)\n\n// Custom directory handler\nfunction directory (res, path) {\n  var stream = this\n\n  // redirect to trailing slash for consistent url\n  if (!stream.hasTrailingSlash()) {\n    return stream.redirect(path)\n  }\n\n  // get directory list\n  fs.readdir(path, function onReaddir (err, list) {\n    if (err) return stream.error(err)\n\n    // render an index for the directory\n    res.setHeader('Content-Type', 'text/plain; charset=UTF-8')\n    res.end(list.join('\\n') + '\\n')\n  })\n}\n```\n\n### Serving from a root directory with custom error-handling\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar send = require('send')\n\nvar server = http.createServer(function onRequest (req, res) {\n  // your custom error-handling logic:\n  function error (err) {\n    res.statusCode = err.status || 500\n    res.end(err.message)\n  }\n\n  // your custom headers\n  function headers (res, path, stat) {\n    // serve all files for download\n    res.setHeader('Content-Disposition', 'attachment')\n  }\n\n  // your custom directory handling logic:\n  function redirect () {\n    res.statusCode = 301\n    res.setHeader('Location', req.url + '/')\n    res.end('Redirecting to ' + req.url + '/')\n  }\n\n  // transfer arbitrary files from within\n  // /www/example.com/public/*\n  send(req, parseUrl(req).pathname, {root: '/www/example.com/public'})\n  .on('error', error)\n  .on('directory', redirect)\n  .on('headers', headers)\n  .pipe(res)\n})\n\nserver.listen(3000)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/send.svg\n[npm-url]: https://npmjs.org/package/send\n[travis-image]: https://img.shields.io/travis/pillarjs/send/master.svg?label=linux\n[travis-url]: https://travis-ci.org/pillarjs/send\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/send/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/send\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/send/master.svg\n[coveralls-url]: https://coveralls.io/r/pillarjs/send?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/send.svg\n[downloads-url]: https://npmjs.org/package/send\n",
./lib/node_modules/express/node_modules/send/node_modules/http-errors/package.json:  "readme": "# http-errors\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCreate HTTP errors for Express, Koa, Connect, etc. with ease.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install http-errors\n```\n\n## Example\n\n```js\nvar createError = require('http-errors')\nvar express = require('express')\nvar app = express()\n\napp.use(function (req, res, next) {\n  if (!req.user) return next(createError(401, 'Please login to view this page.'))\n  next()\n})\n```\n\n## API\n\nThis is the current API, currently extracted from Koa and subject to change.\n\nAll errors inherit from JavaScript `Error` and the exported `createError.HttpError`.\n\n### Error Properties\n\n- `expose` - can be used to signal if `message` should be sent to the client,\n  defaulting to `false` when `status` >= 500\n- `headers` - can be an object of header names to values to be sent to the\n  client, defaulting to `undefined`. When defined, the key names should all\n  be lower-cased\n- `message` - the traditional error message, which should be kept short and all\n  single line\n- `status` - the status code of the error, mirroring `statusCode` for general\n  compatibility\n- `statusCode` - the status code of the error, defaulting to `500`\n\n### createError([status], [message], [properties])\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = createError(404, 'This video does not exist!')\n```\n\n- `status: 500` - the status code as a number\n- `message` - the message of the error, defaulting to node's text for that status code.\n- `properties` - custom properties to attach to the object\n\n### new createError\\[code || name\\](\\[msg]\\))\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = new createError.NotFound()\n```\n\n- `code` - the status code as a number\n- `name` - the name of the error as a \"bumpy case\", i.e. `NotFound` or `InternalServerError`.\n\n#### List of all constructors\n\n|Status Code|Constructor Name             |\n|-----------|-----------------------------|\n|400        |BadRequest                   |\n|401        |Unauthorized                 |\n|402        |PaymentRequired              |\n|403        |Forbidden                    |\n|404        |NotFound                     |\n|405        |MethodNotAllowed             |\n|406        |NotAcceptable                |\n|407        |ProxyAuthenticationRequired  |\n|408        |RequestTimeout               |\n|409        |Conflict                     |\n|410        |Gone                         |\n|411        |LengthRequired               |\n|412        |PreconditionFailed           |\n|413        |PayloadTooLarge              |\n|414        |URITooLong                   |\n|415        |UnsupportedMediaType         |\n|416        |RangeNotSatisfiable          |\n|417        |ExpectationFailed            |\n|418        |ImATeapot                    |\n|421        |MisdirectedRequest           |\n|422        |UnprocessableEntity          |\n|423        |Locked                       |\n|424        |FailedDependency             |\n|425        |UnorderedCollection          |\n|426        |UpgradeRequired              |\n|428        |PreconditionRequired         |\n|429        |TooManyRequests              |\n|431        |RequestHeaderFieldsTooLarge  |\n|451        |UnavailableForLegalReasons   |\n|500        |InternalServerError          |\n|501        |NotImplemented               |\n|502        |BadGateway                   |\n|503        |ServiceUnavailable           |\n|504        |GatewayTimeout               |\n|505        |HTTPVersionNotSupported      |\n|506        |VariantAlsoNegotiates        |\n|507        |InsufficientStorage          |\n|508        |LoopDetected                 |\n|509        |BandwidthLimitExceeded       |\n|510        |NotExtended                  |\n|511        |NetworkAuthenticationRequired|\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/http-errors.svg\n[npm-url]: https://npmjs.org/package/http-errors\n[node-version-image]: https://img.shields.io/node/v/http-errors.svg\n[node-version-url]: https://nodejs.org/en/download/\n[travis-image]: https://img.shields.io/travis/jshttp/http-errors.svg\n[travis-url]: https://travis-ci.org/jshttp/http-errors\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/http-errors.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/http-errors\n[downloads-image]: https://img.shields.io/npm/dm/http-errors.svg\n[downloads-url]: https://npmjs.org/package/http-errors\n",
./lib/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/Readme.md:logging source.
./lib/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./lib/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    // call to self as log
./lib/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    log.call(deprecate, message)
./lib/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:function log (message, site) {
./lib/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./lib/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/express/node_modules/send/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/express/node_modules/send/node_modules/http-errors/README.md:  if (!req.user) return next(createError(401, 'Please login to view this page.'))
./lib/node_modules/express/node_modules/send/node_modules/mime/package.json:  "readme": "# mime\n\nComprehensive MIME type mapping API based on mime-db module.\n\n## Install\n\nInstall with [npm](http://github.com/isaacs/npm):\n\n    npm install mime\n\n## Contributing / Testing\n\n    npm run test\n\n## Command Line\n\n    mime [path_string]\n\nE.g.\n\n    > mime scripts/jquery.js\n    application/javascript\n\n## API - Queries\n\n### mime.lookup(path)\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\n\n```js\nvar mime = require('mime');\n\nmime.lookup('/path/to/file.txt');         // => 'text/plain'\nmime.lookup('file.txt');                  // => 'text/plain'\nmime.lookup('.TXT');                      // => 'text/plain'\nmime.lookup('htm');                       // => 'text/html'\n```\n\n### mime.default_type\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n\n### mime.extension(type)\nGet the default extension for `type`\n\n```js\nmime.extension('text/html');                 // => 'html'\nmime.extension('application/octet-stream');  // => 'bin'\n```\n\n### mime.charsets.lookup()\n\nMap mime-type to charset\n\n```js\nmime.charsets.lookup('text/plain');        // => 'UTF-8'\n```\n\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\n\n## API - Defining Custom Types\n\nCustom type mappings can be added on a per-project basis via the following APIs.\n\n### mime.define()\n\nAdd custom mime/extension mappings\n\n```js\nmime.define({\n    'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\n    'application/x-my-type': ['x-mt', 'x-mtt'],\n    // etc ...\n});\n\nmime.lookup('x-sft');                 // => 'text/x-some-format'\n```\n\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\n\n```js\nmime.extension('text/x-some-format'); // => 'x-sf'\n```\n\n### mime.load(filepath)\n\nLoad mappings from an Apache \".types\" format file\n\n```js\nmime.load('./my_project.types');\n```\nThe .types file format is simple -  See the `types` dir for examples.\n",
./lib/node_modules/express/node_modules/send/node_modules/mime/build/test.js:console.log('\nAll tests passed');
./lib/node_modules/express/node_modules/send/node_modules/mime/build/build.js:console.log(JSON.stringify(mapByType));
./lib/node_modules/express/node_modules/send/node_modules/mime/README.md:(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)
./lib/node_modules/express/node_modules/send/node_modules/mime/types.json:{"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":["woff"],"application/font-woff2":["woff2"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["dmg"],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":["bdoc"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-otf":["otf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-ttf":["ttf","ttc"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["iso"],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":["exe"],"application/x-msdownload":["exe","dll","com","bat","msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","wmz","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":["prc","pdb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["3gpp"],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":["mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":["wav"],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":["m4a"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":["ra"],"audio/x-wav":["wav"],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/otf":["otf"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jpeg":["jpeg","jpg","jpe"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":["bmp"],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":["rtf"],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":["org"],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":["xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}
./lib/node_modules/express/node_modules/send/README.md:  // your custom error-handling logic:
./lib/node_modules/express/node_modules/send/README.md:  // your custom directory handling logic:
./lib/node_modules/express/node_modules/depd/Readme.md:logging source.
./lib/node_modules/express/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n",
./lib/node_modules/express/node_modules/depd/index.js:    // call to self as log
./lib/node_modules/express/node_modules/depd/index.js:    log.call(deprecate, message)
./lib/node_modules/express/node_modules/depd/index.js:function log (message, site) {
./lib/node_modules/express/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./lib/node_modules/express/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/express/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/express/node_modules/fresh/package.json:  "readme": "# fresh\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nHTTP response freshness testing\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```\n$ npm install fresh\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar fresh = require('fresh')\n```\n\n### fresh(reqHeaders, resHeaders)\n\nCheck freshness of the response using request and response headers.\n\nWhen the response is still \"fresh\" in the client's cache `true` is\nreturned, otherwise `false` is returned to indicate that the client\ncache is now stale and the full response should be sent.\n\nWhen a client sends the `Cache-Control: no-cache` request header to\nindicate an end-to-end reload request, this module will return `false`\nto make handling these requests transparent.\n\n## Known Issues\n\nThis module is designed to only follow the HTTP specifications, not\nto work-around all kinda of client bugs (especially since this module\ntypically does not recieve enough information to understand what the\nclient actually is).\n\nThere is a known issue that in certain versions of Safari, Safari\nwill incorrectly make a request that allows this module to validate\nfreshness of the resource even when Safari does not have a\nrepresentation of the resource in the cache. The module\n[jumanji](https://www.npmjs.com/package/jumanji) can be used in\nan Express application to work-around this issue and also provides\nlinks to further reading on this Safari bug.\n\n## Example\n\n### API usage\n\n<!-- eslint-disable no-redeclare, no-undef -->\n\n```js\nvar reqHeaders = { 'if-none-match': '\"foo\"' }\nvar resHeaders = { 'etag': '\"bar\"' }\nfresh(reqHeaders, resHeaders)\n// => false\n\nvar reqHeaders = { 'if-none-match': '\"foo\"' }\nvar resHeaders = { 'etag': '\"foo\"' }\nfresh(reqHeaders, resHeaders)\n// => true\n```\n\n### Using with Node.js http server\n\n```js\nvar fresh = require('fresh')\nvar http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  // perform server logic\n  // ... including adding ETag / Last-Modified response headers\n\n  if (isFresh(req, res)) {\n    // client has a fresh copy of resource\n    res.statusCode = 304\n    res.end()\n    return\n  }\n\n  // send the resource\n  res.statusCode = 200\n  res.end('hello, world!')\n})\n\nfunction isFresh (req, res) {\n  return fresh(req.headers, {\n    'etag': res.getHeader('ETag'),\n    'last-modified': res.getHeader('Last-Modified')\n  })\n}\n\nserver.listen(3000)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/fresh.svg\n[npm-url]: https://npmjs.org/package/fresh\n[node-version-image]: https://img.shields.io/node/v/fresh.svg\n[node-version-url]: https://nodejs.org/en/\n[travis-image]: https://img.shields.io/travis/jshttp/fresh/master.svg\n[travis-url]: https://travis-ci.org/jshttp/fresh\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/fresh/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/fresh?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/fresh.svg\n[downloads-url]: https://npmjs.org/package/fresh\n",
./lib/node_modules/express/node_modules/fresh/README.md:  // perform server logic
./lib/node_modules/express/node_modules/debug/package.json:    "log",
./lib/node_modules/express/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./lib/node_modules/express/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./lib/node_modules/express/node_modules/debug/README.md:  change the behavior of the debug logging:
./lib/node_modules/express/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./lib/node_modules/express/node_modules/debug/README.md:var log = debug('app:log');
./lib/node_modules/express/node_modules/debug/README.md:// set this namespace to log via console.log
./lib/node_modules/express/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./lib/node_modules/express/node_modules/debug/README.md:log('goes to stdout');
./lib/node_modules/express/node_modules/debug/README.md:// overrides all per-namespace log settings
./lib/node_modules/express/node_modules/debug/README.md:debug.log = console.info.bind(console);
./lib/node_modules/express/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./lib/node_modules/express/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./lib/node_modules/express/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./lib/node_modules/express/node_modules/debug/src/browser.js:exports.log = log;
./lib/node_modules/express/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./lib/node_modules/express/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./lib/node_modules/express/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./lib/node_modules/express/node_modules/debug/src/browser.js:function log() {
./lib/node_modules/express/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./lib/node_modules/express/node_modules/debug/src/browser.js:    && console.log
./lib/node_modules/express/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./lib/node_modules/express/node_modules/debug/src/node.js:exports.log = log;
./lib/node_modules/express/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./lib/node_modules/express/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./lib/node_modules/express/node_modules/debug/src/node.js:function log() {
./lib/node_modules/express/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./lib/node_modules/express/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./lib/node_modules/express/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./lib/node_modules/express/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./lib/node_modules/express/node_modules/debug/src/debug.js: * Previous log timestamp.
./lib/node_modules/express/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./lib/node_modules/express/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./lib/node_modules/express/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./lib/node_modules/express/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./lib/node_modules/express/node_modules/debug/karma.conf.js:    // level of logging
./lib/node_modules/express/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./lib/node_modules/express/node_modules/debug/component.json:    "log",
./lib/node_modules/express/node_modules/body-parser/package.json:  "readme": "# body-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nNode.js body parsing middleware.\n\nParse incoming request bodies in a middleware before your handlers, available\nunder the `req.body` property.\n\n[Learn about the anatomy of an HTTP transaction in Node.js](https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/).\n\n_This does not handle multipart bodies_, due to their complex and typically\nlarge nature. For multipart bodies, you may be interested in the following\nmodules:\n\n  * [busboy](https://www.npmjs.org/package/busboy#readme) and\n    [connect-busboy](https://www.npmjs.org/package/connect-busboy#readme)\n  * [multiparty](https://www.npmjs.org/package/multiparty#readme) and\n    [connect-multiparty](https://www.npmjs.org/package/connect-multiparty#readme)\n  * [formidable](https://www.npmjs.org/package/formidable#readme)\n  * [multer](https://www.npmjs.org/package/multer#readme)\n\nThis module provides the following parsers:\n\n  * [JSON body parser](#bodyparserjsonoptions)\n  * [Raw body parser](#bodyparserrawoptions)\n  * [Text body parser](#bodyparsertextoptions)\n  * [URL-encoded form body parser](#bodyparserurlencodedoptions)\n\nOther body parsers you might be interested in:\n\n- [body](https://www.npmjs.org/package/body#readme)\n- [co-body](https://www.npmjs.org/package/co-body#readme)\n\n## Installation\n\n```sh\n$ npm install body-parser\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar bodyParser = require('body-parser')\n```\n\nThe `bodyParser` object exposes various factories to create middlewares. All\nmiddlewares will populate the `req.body` property with the parsed body when\nthe `Content-Type` request header matches the `type` option, or an empty\nobject (`{}`) if there was no body to parse, the `Content-Type` was not matched,\nor an error occurred.\n\nThe various errors returned by this module are described in the\n[errors section](#errors).\n\n### bodyParser.json([options])\n\nReturns middleware that only parses `json` and only looks at requests where\nthe `Content-Type` header matches the `type` option. This parser accepts any\nUnicode encoding of the body and supports automatic inflation of `gzip` and\n`deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`).\n\n#### Options\n\nThe `json` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### reviver\n\nThe `reviver` option is passed directly to `JSON.parse` as the second\nargument. You can find more information on this argument\n[in the MDN documentation about JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter).\n\n##### strict\n\nWhen set to `true`, will only accept arrays and objects; when `false` will\naccept anything `JSON.parse` accepts. Defaults to `true`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `json`), a mime type (like\n`application/json`), or a mime type with a wildcard (like `*/*` or `*/json`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `application/json`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.raw([options])\n\nReturns middleware that parses all bodies as a `Buffer` and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a `Buffer` object\nof the body.\n\n#### Options\n\nThe `raw` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `bin`), a mime type (like\n`application/octet-stream`), or a mime type with a wildcard (like `*/*` or\n`application/*`). If a function, the `type` option is called as `fn(req)`\nand the request is parsed if it returns a truthy value. Defaults to\n`application/octet-stream`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.text([options])\n\nReturns middleware that parses all bodies as a string and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser supports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` string containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a string of the\nbody.\n\n#### Options\n\nThe `text` function takes an optional `options` object that may contain any of\nthe following keys:\n\n##### defaultCharset\n\nSpecify the default character set for the text content if the charset is not\nspecified in the `Content-Type` header of the request. Defaults to `utf-8`.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `txt`), a mime type (like\n`text/plain`), or a mime type with a wildcard (like `*/*` or `text/*`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `text/plain`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.urlencoded([options])\n\nReturns middleware that only parses `urlencoded` bodies and only looks at\nrequests where the `Content-Type` header matches the `type` option. This\nparser accepts only UTF-8 encoding of the body and supports automatic\ninflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This object will contain\nkey-value pairs, where the value can be a string or array (when `extended` is\n`false`), or any type (when `extended` is `true`).\n\n#### Options\n\nThe `urlencoded` function takes an optional `options` object that may contain\nany of the following keys:\n\n##### extended\n\nThe `extended` option allows to choose between parsing the URL-encoded data\nwith the `querystring` library (when `false`) or the `qs` library (when\n`true`). The \"extended\" syntax allows for rich objects and arrays to be\nencoded into the URL-encoded format, allowing for a JSON-like experience\nwith URL-encoded. For more information, please\n[see the qs library](https://www.npmjs.org/package/qs#readme).\n\nDefaults to `true`, but using the default has been deprecated. Please\nresearch into the difference between `qs` and `querystring` and choose the\nappropriate setting.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `'100kb'`.\n\n##### parameterLimit\n\nThe `parameterLimit` option controls the maximum number of parameters that\nare allowed in the URL-encoded data. If a request contains more parameters\nthan this value, a 413 will be returned to the client. Defaults to `1000`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `urlencoded`), a mime type (like\n`application/x-www-form-urlencoded`), or a mime type with a wildcard (like\n`*/x-www-form-urlencoded`). If a function, the `type` option is called as\n`fn(req)` and the request is parsed if it returns a truthy value. Defaults\nto `application/x-www-form-urlencoded`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n## Errors\n\nThe middlewares provided by this module create errors depending on the error\ncondition during parsing. The errors will typically have a `status`/`statusCode`\nproperty that contains the suggested HTTP response code, an `expose` property\nto determine if the `message` property should be displayed to the client, a\n`type` property to determine the type of error without matching against the\n`message`, and a `body` property containing the read body, if available.\n\nThe following are the common errors emitted, though any error can come through\nfor various reasons.\n\n### content encoding unsupported\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an encoding but the \"inflation\" option was set to `false`. The\n`status` property is set to `415`, the `type` property is set to\n`'encoding.unsupported'`, and the `charset` property will be set to the\nencoding that is unsupported.\n\n### request aborted\n\nThis error will occur when the request is aborted by the client before reading\nthe body has finished. The `received` property will be set to the number of\nbytes received before the request was aborted and the `expected` property is\nset to the number of expected bytes. The `status` property is set to `400`\nand `type` property is set to `'request.aborted'`.\n\n### request entity too large\n\nThis error will occur when the request body's size is larger than the \"limit\"\noption. The `limit` property will be set to the byte limit and the `length`\nproperty will be set to the request body's length. The `status` property is\nset to `413` and the `type` property is set to `'entity.too.large'`.\n\n### request size did not match content length\n\nThis error will occur when the request's length did not match the length from\nthe `Content-Length` header. This typically occurs when the request is malformed,\ntypically when the `Content-Length` header was calculated based on characters\ninstead of bytes. The `status` property is set to `400` and the `type` property\nis set to `'request.size.invalid'`.\n\n### stream encoding should not be set\n\nThis error will occur when something called the `req.setEncoding` method prior\nto this middleware. This module operates directly on bytes only and you cannot\ncall `req.setEncoding` when using this module. The `status` property is set to\n`500` and the `type` property is set to `'stream.encoding.set'`.\n\n### too many parameters\n\nThis error will occur when the content of the request exceeds the configured\n`parameterLimit` for the `urlencoded` parser. The `status` property is set to\n`413` and the `type` property is set to `'parameters.too.many'`.\n\n### unsupported charset \"BOGUS\"\n\nThis error will occur when the request had a charset parameter in the\n`Content-Type` header, but the `iconv-lite` module does not support it OR the\nparser does not support it. The charset is contained in the message as well\nas in the `charset` property. The `status` property is set to `415`, the\n`type` property is set to `'charset.unsupported'`, and the `charset` property\nis set to the charset that is unsupported.\n\n### unsupported content encoding \"bogus\"\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an unsupported encoding. The encoding is contained in the message\nas well as in the `encoding` property. The `status` property is set to `415`,\nthe `type` property is set to `'encoding.unsupported'`, and the `encoding`\nproperty is set to the encoding that is unsupported.\n\n## Examples\n\n### Express/Connect top-level generic\n\nThis example demonstrates adding a generic JSON and URL-encoded parser as a\ntop-level middleware, which will parse the bodies of all incoming requests.\nThis is the simplest setup.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n```\n\n### Express route-specific\n\nThis example demonstrates adding body parsers specifically to the routes that\nneed them. In general, this is the most recommended way to use body-parser with\nExpress.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// create application/json parser\nvar jsonParser = bodyParser.json()\n\n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n\n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  res.send('welcome, ' + req.body.username)\n})\n\n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  // create user in req.body\n})\n```\n\n### Change accepted type for parsers\n\nAll the parsers accept a `type` option which allows you to change the\n`Content-Type` that the middleware will parse.\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse various different custom JSON types as JSON\napp.use(bodyParser.json({ type: 'application/*+json' }))\n\n// parse some custom thing into a Buffer\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\n\n// parse an HTML body into a string\napp.use(bodyParser.text({ type: 'text/html' }))\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/body-parser.svg\n[npm-url]: https://npmjs.org/package/body-parser\n[travis-image]: https://img.shields.io/travis/expressjs/body-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/body-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/body-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/body-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/body-parser.svg\n[downloads-url]: https://npmjs.org/package/body-parser\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./lib/node_modules/express/node_modules/body-parser/node_modules/http-errors/package.json:  "readme": "# http-errors\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCreate HTTP errors for Express, Koa, Connect, etc. with ease.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```bash\n$ npm install http-errors\n```\n\n## Example\n\n```js\nvar createError = require('http-errors')\nvar express = require('express')\nvar app = express()\n\napp.use(function (req, res, next) {\n  if (!req.user) return next(createError(401, 'Please login to view this page.'))\n  next()\n})\n```\n\n## API\n\nThis is the current API, currently extracted from Koa and subject to change.\n\nAll errors inherit from JavaScript `Error` and the exported `createError.HttpError`.\n\n### Error Properties\n\n- `expose` - can be used to signal if `message` should be sent to the client,\n  defaulting to `false` when `status` >= 500\n- `headers` - can be an object of header names to values to be sent to the\n  client, defaulting to `undefined`. When defined, the key names should all\n  be lower-cased\n- `message` - the traditional error message, which should be kept short and all\n  single line\n- `status` - the status code of the error, mirroring `statusCode` for general\n  compatibility\n- `statusCode` - the status code of the error, defaulting to `500`\n\n### createError([status], [message], [properties])\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = createError(404, 'This video does not exist!')\n```\n\n- `status: 500` - the status code as a number\n- `message` - the message of the error, defaulting to node's text for that status code.\n- `properties` - custom properties to attach to the object\n\n### new createError\\[code || name\\](\\[msg]\\))\n\n<!-- eslint-disable no-undef, no-unused-vars -->\n\n```js\nvar err = new createError.NotFound()\n```\n\n- `code` - the status code as a number\n- `name` - the name of the error as a \"bumpy case\", i.e. `NotFound` or `InternalServerError`.\n\n#### List of all constructors\n\n|Status Code|Constructor Name             |\n|-----------|-----------------------------|\n|400        |BadRequest                   |\n|401        |Unauthorized                 |\n|402        |PaymentRequired              |\n|403        |Forbidden                    |\n|404        |NotFound                     |\n|405        |MethodNotAllowed             |\n|406        |NotAcceptable                |\n|407        |ProxyAuthenticationRequired  |\n|408        |RequestTimeout               |\n|409        |Conflict                     |\n|410        |Gone                         |\n|411        |LengthRequired               |\n|412        |PreconditionFailed           |\n|413        |PayloadTooLarge              |\n|414        |URITooLong                   |\n|415        |UnsupportedMediaType         |\n|416        |RangeNotSatisfiable          |\n|417        |ExpectationFailed            |\n|418        |ImATeapot                    |\n|421        |MisdirectedRequest           |\n|422        |UnprocessableEntity          |\n|423        |Locked                       |\n|424        |FailedDependency             |\n|425        |UnorderedCollection          |\n|426        |UpgradeRequired              |\n|428        |PreconditionRequired         |\n|429        |TooManyRequests              |\n|431        |RequestHeaderFieldsTooLarge  |\n|451        |UnavailableForLegalReasons   |\n|500        |InternalServerError          |\n|501        |NotImplemented               |\n|502        |BadGateway                   |\n|503        |ServiceUnavailable           |\n|504        |GatewayTimeout               |\n|505        |HTTPVersionNotSupported      |\n|506        |VariantAlsoNegotiates        |\n|507        |InsufficientStorage          |\n|508        |LoopDetected                 |\n|509        |BandwidthLimitExceeded       |\n|510        |NotExtended                  |\n|511        |NetworkAuthenticationRequired|\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/http-errors.svg\n[npm-url]: https://npmjs.org/package/http-errors\n[node-version-image]: https://img.shields.io/node/v/http-errors.svg\n[node-version-url]: https://nodejs.org/en/download/\n[travis-image]: https://img.shields.io/travis/jshttp/http-errors.svg\n[travis-url]: https://travis-ci.org/jshttp/http-errors\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/http-errors.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/http-errors\n[downloads-image]: https://img.shields.io/npm/dm/http-errors.svg\n[downloads-url]: https://npmjs.org/package/http-errors\n",
./lib/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/Readme.md:logging source.
./lib/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/package.json:  "readme": "# depd\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nDeprecate all the things\n\n> With great modules comes great responsibility; mark things deprecated!\n\n## Install\n\nThis module is installed directly using `npm`:\n\n```sh\n$ npm install depd\n```\n\nThis module can also be bundled with systems like\n[Browserify](http://browserify.org/) or [webpack](https://webpack.github.io/),\nthough by default this module will alter it's API to no longer display or\ntrack deprecations.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar deprecate = require('depd')('my-module')\n```\n\nThis library allows you to display deprecation messages to your users.\nThis library goes above and beyond with deprecation warnings by\nintrospection of the call stack (but only the bits that it is interested\nin).\n\nInstead of just warning on the first invocation of a deprecated\nfunction and never again, this module will warn on the first invocation\nof a deprecated function per unique call site, making it ideal to alert\nusers of all deprecated uses across the code base, rather than just\nwhatever happens to execute first.\n\nThe deprecation warnings from this module also include the file and line\ninformation for the call into the module that the deprecated function was\nin.\n\n**NOTE** this library has a similar interface to the `debug` module, and\nthis module uses the calling file to get the boundary for the call stacks,\nso you should always create a new `deprecate` object in each file and not\nwithin some central file.\n\n### depd(namespace)\n\nCreate a new deprecate function that uses the given namespace name in the\nmessages and will display the call site prior to the stack entering the\nfile this function was called from. It is highly suggested you use the\nname of your module as the namespace.\n\n### deprecate(message)\n\nCall this function from deprecated code to display a deprecation message.\nThis message will appear once per unique caller site. Caller site is the\nfirst call site in the stack in a different file from the caller of this\nfunction.\n\nIf the message is omitted, a message is generated for you based on the site\nof the `deprecate()` call and will display the name of the function called,\nsimilar to the name displayed in a stack trace.\n\n### deprecate.function(fn, message)\n\nCall this function to wrap a given function in a deprecation message on any\ncall to the function. An optional message can be supplied to provide a custom\nmessage.\n\n### deprecate.property(obj, prop, message)\n\nCall this function to wrap a given property on object in a deprecation message\non any accessing or setting of the property. An optional message can be supplied\nto provide a custom message.\n\nThe method must be called on the object where the property belongs (not\ninherited from the prototype).\n\nIf the property is a data descriptor, it will be converted to an accessor\ndescriptor in order to display the deprecation message.\n\n### process.on('deprecation', fn)\n\nThis module will allow easy capturing of deprecation errors by emitting the\nerrors as the type \"deprecation\" on the global `process`. If there are no\nlisteners for this type, the errors are written to STDERR as normal, but if\nthere are any listeners, nothing will be written to STDERR and instead only\nemitted. From there, you can write the errors in a different format or to a\nlogging source.\n\nThe error represents the deprecation and is emitted only once with the same\nrules as writing to STDERR. The error has the following properties:\n\n  - `message` - This is the message given by the library\n  - `name` - This is always `'DeprecationError'`\n  - `namespace` - This is the namespace the deprecation came from\n  - `stack` - This is the stack of the call to the deprecated thing\n\nExample `error.stack` output:\n\n```\nDeprecationError: my-cool-module deprecated oldfunction\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:456:26)\n    at evalScript (node.js:532:25)\n    at startup (node.js:80:7)\n    at node.js:902:3\n```\n\n### process.env.NO_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `NO_DEPRECATION`\nis provided as a quick solution to silencing deprecation warnings from being\noutput. The format of this is similar to that of `DEBUG`:\n\n```sh\n$ NO_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will suppress deprecations from being output for \"my-module\" and \"othermod\".\nThe value is a list of comma-separated namespaces. To suppress every warning\nacross all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--no-deprecation` to the `node` executable will suppress\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not suppress the deperecations given to any \"deprecation\"\nevent listeners, just the output to STDERR.\n\n### process.env.TRACE_DEPRECATION\n\nAs a user of modules that are deprecated, the environment variable `TRACE_DEPRECATION`\nis provided as a solution to getting more detailed location information in deprecation\nwarnings by including the entire stack trace. The format of this is the same as\n`NO_DEPRECATION`:\n\n```sh\n$ TRACE_DEPRECATION=my-module,othermod node app.js\n```\n\nThis will include stack traces for deprecations being output for \"my-module\" and\n\"othermod\". The value is a list of comma-separated namespaces. To trace every\nwarning across all namespaces, use the value `*` for a namespace.\n\nProviding the argument `--trace-deprecation` to the `node` executable will trace\nall deprecations (only available in Node.js 0.8 or higher).\n\n**NOTE** This will not trace the deperecations silenced by `NO_DEPRECATION`.\n\n## Display\n\n![message](files/message.png)\n\nWhen a user calls a function in your library that you mark deprecated, they\nwill see the following written to STDERR (in the given colors, similar colors\nand layout to the `debug` module):\n\n```\nbright cyan    bright yellow\n|              |          reset       cyan\n|              |          |           |\n▼              ▼          ▼           ▼\nmy-cool-module deprecated oldfunction [eval]-wrapper:6:22\n▲              ▲          ▲           ▲\n|              |          |           |\nnamespace      |          |           location of mycoolmod.oldfunction() call\n               |          deprecation message\n               the word \"deprecated\"\n```\n\nIf the user redirects their STDERR to a file or somewhere that does not support\ncolors, they see (similar layout to the `debug` module):\n\n```\nSun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22\n▲                             ▲              ▲          ▲              ▲\n|                             |              |          |              |\ntimestamp of message          namespace      |          |             location of mycoolmod.oldfunction() call\n                                             |          deprecation message\n                                             the word \"deprecated\"\n```\n\n## Examples\n\n### Deprecating all calls to a function\n\nThis will display a deprecated message about \"oldfunction\" being deprecated\nfrom \"my-module\" on STDERR.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\n// message automatically derived from function name\n// Object.oldfunction\nexports.oldfunction = deprecate.function(function oldfunction () {\n  // all calls to function are deprecated\n})\n\n// specific message\nexports.oldfunction = deprecate.function(function () {\n  // all calls to function are deprecated\n}, 'oldfunction')\n```\n\n### Conditionally deprecating a function call\n\nThis will display a deprecated message about \"weirdfunction\" being deprecated\nfrom \"my-module\" on STDERR when called with less than 2 arguments.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  }\n}\n```\n\nWhen calling `deprecate` as a function, the warning is counted per call site\nwithin your own module, so you can display different deprecations depending\non different situations and the users will still get all the warnings:\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.weirdfunction = function () {\n  if (arguments.length < 2) {\n    // calls with 0 or 1 args are deprecated\n    deprecate('weirdfunction args < 2')\n  } else if (typeof arguments[0] !== 'string') {\n    // calls with non-string first argument are deprecated\n    deprecate('weirdfunction non-string first arg')\n  }\n}\n```\n\n### Deprecating property access\n\nThis will display a deprecated message about \"oldprop\" being deprecated\nfrom \"my-module\" on STDERR when accessed. A deprecation will be displayed\nwhen setting the value and when getting the value.\n\n```js\nvar deprecate = require('depd')('my-cool-module')\n\nexports.oldprop = 'something'\n\n// message automatically derives from property name\ndeprecate.property(exports, 'oldprop')\n\n// explicit message\ndeprecate.property(exports, 'oldprop', 'oldprop >= 0.10')\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/depd.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/depd.svg\n[npm-url]: https://npmjs.org/package/depd\n[travis-image]: https://img.shields.io/travis/dougwilson/nodejs-depd/master.svg?label=linux\n[travis-url]: https://travis-ci.org/dougwilson/nodejs-depd\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/nodejs-depd/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/nodejs-depd\n[coveralls-image]: https://img.shields.io/coveralls/dougwilson/nodejs-depd/master.svg\n[coveralls-url]: https://coveralls.io/r/dougwilson/nodejs-depd?branch=master\n[node-image]: https://img.shields.io/node/v/depd.svg\n[node-url]: https://nodejs.org/en/download/\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
./lib/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    // call to self as log
./lib/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    log.call(deprecate, message)
./lib/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:function log (message, site) {
./lib/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:    'log.call(deprecate, message, site)\n' +
./lib/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/express/node_modules/body-parser/node_modules/http-errors/node_modules/depd/index.js:      log.call(deprecate, message, site)
./lib/node_modules/express/node_modules/body-parser/node_modules/http-errors/README.md:  if (!req.user) return next(createError(401, 'Please login to view this page.'))
./lib/node_modules/express/node_modules/body-parser/node_modules/iconv-lite/package.json:  "readme": "## Pure JS character encoding conversion [![Build Status](https://travis-ci.org/ashtuchkin/iconv-lite.svg?branch=master)](https://travis-ci.org/ashtuchkin/iconv-lite)\n\n * Doesn't need native code compilation. Works on Windows and in sandboxed environments like [Cloud9](http://c9.io).\n * Used in popular projects like [Express.js (body_parser)](https://github.com/expressjs/body-parser), \n   [Grunt](http://gruntjs.com/), [Nodemailer](http://www.nodemailer.com/), [Yeoman](http://yeoman.io/) and others.\n * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\n * Intuitive encode/decode API\n * Streaming support for Node v0.10+\n * [Deprecated] Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings.\n * In-browser usage via [Browserify](https://github.com/substack/node-browserify) (~180k gzip compressed with Buffer shim included).\n * Typescript [type definition file](https://github.com/ashtuchkin/iconv-lite/blob/master/lib/index.d.ts) included.\n * React Native is supported (need to explicitly `npm install` two more modules: `buffer` and `stream`).\n * License: MIT.\n\n[![NPM Stats](https://nodei.co/npm/iconv-lite.png?downloads=true&downloadRank=true)](https://npmjs.org/packages/iconv-lite/)\n\n## Usage\n### Basic API\n```javascript\nvar iconv = require('iconv-lite');\n\n// Convert from an encoded buffer to js string.\nstr = iconv.decode(new Buffer([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');\n\n// Convert from js string to an encoded buffer.\nbuf = iconv.encode(\"Sample input string\", 'win1251');\n\n// Check if encoding is supported\niconv.encodingExists(\"us-ascii\")\n```\n\n### Streaming API (Node v0.10+)\n```javascript\n\n// Decode stream (from binary stream to js strings)\nhttp.createServer(function(req, res) {\n    var converterStream = iconv.decodeStream('win1251');\n    req.pipe(converterStream);\n\n    converterStream.on('data', function(str) {\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\n    });\n});\n\n// Convert encoding streaming example\nfs.createReadStream('file-in-win1251.txt')\n    .pipe(iconv.decodeStream('win1251'))\n    .pipe(iconv.encodeStream('ucs2'))\n    .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\nhttp.createServer(function(req, res) {\n    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n        assert(typeof body == 'string');\n        console.log(body); // full request body string\n    });\n});\n```\n\n### [Deprecated] Extend Node.js own encodings\n> NOTE: This doesn't work on latest Node versions. See [details](https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility).\n\n```javascript\n// After this call all Node basic primitives will understand iconv-lite encodings.\niconv.extendNodeEncodings();\n\n// Examples:\nbuf = new Buffer(str, 'win1251');\nbuf.write(str, 'gbk');\nstr = buf.toString('latin1');\nassert(Buffer.isEncoding('iso-8859-15'));\nBuffer.byteLength(str, 'us-ascii');\n\nhttp.createServer(function(req, res) {\n    req.setEncoding('big5');\n    req.collect(function(err, body) {\n        console.log(body);\n    });\n});\n\nfs.createReadStream(\"file.txt\", \"shift_jis\");\n\n// External modules are also supported (if they use Node primitives, which they probably do).\nrequest = require('request');\nrequest({\n    url: \"http://github.com/\", \n    encoding: \"cp932\"\n});\n\n// To remove extensions\niconv.undoExtendNodeEncodings();\n```\n\n## Supported encodings\n\n *  All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex.\n *  Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap.\n *  All widespread singlebyte encodings: Windows 125x family, ISO-8859 family, \n    IBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library. \n    Aliases like 'latin1', 'us-ascii' also supported.\n *  All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2312, GBK, GB18030, Big5, Shift_JIS, EUC-JP.\n\nSee [all supported encodings on wiki](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).\n\nMost singlebyte encodings are generated automatically from [node-iconv](https://github.com/bnoordhuis/node-iconv). Thank you Ben Noordhuis and libiconv authors!\n\nMultibyte encodings are generated from [Unicode.org mappings](http://www.unicode.org/Public/MAPPINGS/) and [WHATWG Encoding Standard mappings](http://encoding.spec.whatwg.org/). Thank you, respective authors!\n\n\n## Encoding/decoding speed\n\nComparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0). \nNote: your results may vary, so please always check on your hardware.\n\n    operation             iconv@2.1.4   iconv-lite@0.4.7\n    ----------------------------------------------------------\n    encode('win1251')     ~96 Mb/s      ~320 Mb/s\n    decode('win1251')     ~95 Mb/s      ~246 Mb/s\n\n## BOM handling\n\n * Decoding: BOM is stripped by default, unless overridden by passing `stripBOM: false` in options\n   (f.ex. `iconv.decode(buf, enc, {stripBOM: false})`).\n   A callback might also be given as a `stripBOM` parameter - it'll be called if BOM character was actually found.\n * If you want to detect UTF-8 BOM when decoding other encodings, use [node-autodetect-decoder-stream](https://github.com/danielgindi/node-autodetect-decoder-stream) module.\n * Encoding: No BOM added, unless overridden by `addBOM: true` option.\n\n## UTF-16 Encodings\n\nThis library supports UTF-16LE, UTF-16BE and UTF-16 encodings. First two are straightforward, but UTF-16 is trying to be\nsmart about endianness in the following ways:\n * Decoding: uses BOM and 'spaces heuristic' to determine input endianness. Default is UTF-16LE, but can be \n   overridden with `defaultEncoding: 'utf-16be'` option. Strips BOM unless `stripBOM: false`.\n * Encoding: uses UTF-16LE and writes BOM by default. Use `addBOM: false` to override.\n\n## Other notes\n\nWhen decoding, be sure to supply a Buffer to decode() method, otherwise [bad things usually happen](https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding).  \nUntranslatable characters are set to � or ?. No transliteration is currently supported.  \nNode versions 0.10.31 and 0.11.13 are buggy, don't use them (see #65, #77).  \n\n## Testing\n\n```bash\n$ git clone git@github.com:ashtuchkin/iconv-lite.git\n$ cd iconv-lite\n$ npm install\n$ npm test\n    \n$ # To view performance:\n$ node test/performance.js\n\n$ # To view test coverage:\n$ npm run coverage\n$ open coverage/lcov-report/index.html\n```\n\n## Adoption\n[![NPM](https://nodei.co/npm-dl/iconv-lite.png)](https://nodei.co/npm/iconv-lite/)\n[![Codeship Status for ashtuchkin/iconv-lite](https://www.codeship.com/projects/81670840-fa72-0131-4520-4a01a6c01acc/status)](https://www.codeship.com/projects/29053)\n",
./lib/node_modules/express/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(str); // Do something with decoded strings, chunk-by-chunk.
./lib/node_modules/express/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(body); // full request body string
./lib/node_modules/express/node_modules/body-parser/node_modules/iconv-lite/README.md:        console.log(body);
./lib/node_modules/express/node_modules/body-parser/README.md:// POST /login gets urlencoded bodies
./lib/node_modules/express/node_modules/body-parser/README.md:app.post('/login', urlencodedParser, function (req, res) {
./lib/node_modules/express/node_modules/qs/package.json:  "readme": "# qs <sup>[![Version Badge][2]][1]</sup>\n\n[![Build Status][3]][4]\n[![dependency status][5]][6]\n[![dev dependency status][7]][8]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][11]][1]\n\nA querystring parsing and stringifying library with some added security.\n\nLead Maintainer: [Jordan Harband](https://github.com/ljharb)\n\nThe **qs** module was originally created and maintained by [TJ Holowaychuk](https://github.com/visionmedia/node-querystring).\n\n## Usage\n\n```javascript\nvar qs = require('qs');\nvar assert = require('assert');\n\nvar obj = qs.parse('a=c');\nassert.deepEqual(obj, { a: 'c' });\n\nvar str = qs.stringify(obj);\nassert.equal(str, 'a=c');\n```\n\n### Parsing Objects\n\n[](#preventEval)\n```javascript\nqs.parse(string, [options]);\n```\n\n**qs** allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets `[]`.\nFor example, the string `'foo[bar]=baz'` converts to:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar]=baz'), {\n    foo: {\n        bar: 'baz'\n    }\n});\n```\n\nWhen using the `plainObjects` option the parsed value is returned as a null object, created via `Object.create(null)` and as such you should be aware that prototype methods will not exist on it and a user may set those names to whatever value they like:\n\n```javascript\nvar nullObject = qs.parse('a[hasOwnProperty]=b', { plainObjects: true });\nassert.deepEqual(nullObject, { a: { hasOwnProperty: 'b' } });\n```\n\nBy default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use `plainObjects` as mentioned above, or set `allowPrototypes` to `true` which will allow user input to overwrite those properties. *WARNING* It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\n\n```javascript\nvar protoObject = qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true });\nassert.deepEqual(protoObject, { a: { hasOwnProperty: 'b' } });\n```\n\nURI encoded strings work too:\n\n```javascript\nassert.deepEqual(qs.parse('a%5Bb%5D=c'), {\n    a: { b: 'c' }\n});\n```\n\nYou can also nest your objects, like `'foo[bar][baz]=foobarbaz'`:\n\n```javascript\nassert.deepEqual(qs.parse('foo[bar][baz]=foobarbaz'), {\n    foo: {\n        bar: {\n            baz: 'foobarbaz'\n        }\n    }\n});\n```\n\nBy default, when nesting objects **qs** will only parse up to 5 children deep. This means if you attempt to parse a string like\n`'a[b][c][d][e][f][g][h][i]=j'` your resulting object will be:\n\n```javascript\nvar expected = {\n    a: {\n        b: {\n            c: {\n                d: {\n                    e: {\n                        f: {\n                            '[g][h][i]': 'j'\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nvar string = 'a[b][c][d][e][f][g][h][i]=j';\nassert.deepEqual(qs.parse(string), expected);\n```\n\nThis depth can be overridden by passing a `depth` option to `qs.parse(string, [options])`:\n\n```javascript\nvar deep = qs.parse('a[b][c][d][e][f][g][h][i]=j', { depth: 1 });\nassert.deepEqual(deep, { a: { b: { '[c][d][e][f][g][h][i]': 'j' } } });\n```\n\nThe depth limit helps mitigate abuse when **qs** is used to parse user input, and it is recommended to keep it a reasonably small number.\n\nFor similar reasons, by default **qs** will only parse up to 1000 parameters. This can be overridden by passing a `parameterLimit` option:\n\n```javascript\nvar limited = qs.parse('a=b&c=d', { parameterLimit: 1 });\nassert.deepEqual(limited, { a: 'b' });\n```\n\nTo bypass the leading question mark, use `ignoreQueryPrefix`:\n\n```javascript\nvar prefixed = qs.parse('?a=b&c=d', { ignoreQueryPrefix: true });\nassert.deepEqual(prefixed, { a: 'b', c: 'd' });\n```\n\nAn optional delimiter can also be passed:\n\n```javascript\nvar delimited = qs.parse('a=b;c=d', { delimiter: ';' });\nassert.deepEqual(delimited, { a: 'b', c: 'd' });\n```\n\nDelimiters can be a regular expression too:\n\n```javascript\nvar regexed = qs.parse('a=b;c=d,e=f', { delimiter: /[;,]/ });\nassert.deepEqual(regexed, { a: 'b', c: 'd', e: 'f' });\n```\n\nOption `allowDots` can be used to enable dot notation:\n\n```javascript\nvar withDots = qs.parse('a.b=c', { allowDots: true });\nassert.deepEqual(withDots, { a: { b: 'c' } });\n```\n\n### Parsing Arrays\n\n**qs** can also parse arrays using a similar `[]` notation:\n\n```javascript\nvar withArray = qs.parse('a[]=b&a[]=c');\nassert.deepEqual(withArray, { a: ['b', 'c'] });\n```\n\nYou may specify an index as well:\n\n```javascript\nvar withIndexes = qs.parse('a[1]=c&a[0]=b');\nassert.deepEqual(withIndexes, { a: ['b', 'c'] });\n```\n\nNote that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number\nto create an array. When creating arrays with specific indices, **qs** will compact a sparse array to only the existing values preserving\ntheir order:\n\n```javascript\nvar noSparse = qs.parse('a[1]=b&a[15]=c');\nassert.deepEqual(noSparse, { a: ['b', 'c'] });\n```\n\nNote that an empty string is also a value, and will be preserved:\n\n```javascript\nvar withEmptyString = qs.parse('a[]=&a[]=b');\nassert.deepEqual(withEmptyString, { a: ['', 'b'] });\n\nvar withIndexedEmptyString = qs.parse('a[0]=b&a[1]=&a[2]=c');\nassert.deepEqual(withIndexedEmptyString, { a: ['b', '', 'c'] });\n```\n\n**qs** will also limit specifying indices in an array to a maximum index of `20`. Any array members with an index of greater than `20` will\ninstead be converted to an object with the index as the key:\n\n```javascript\nvar withMaxIndex = qs.parse('a[100]=b');\nassert.deepEqual(withMaxIndex, { a: { '100': 'b' } });\n```\n\nThis limit can be overridden by passing an `arrayLimit` option:\n\n```javascript\nvar withArrayLimit = qs.parse('a[1]=b', { arrayLimit: 0 });\nassert.deepEqual(withArrayLimit, { a: { '1': 'b' } });\n```\n\nTo disable array parsing entirely, set `parseArrays` to `false`.\n\n```javascript\nvar noParsingArrays = qs.parse('a[]=b', { parseArrays: false });\nassert.deepEqual(noParsingArrays, { a: { '0': 'b' } });\n```\n\nIf you mix notations, **qs** will merge the two items into an object:\n\n```javascript\nvar mixedNotation = qs.parse('a[0]=b&a[b]=c');\nassert.deepEqual(mixedNotation, { a: { '0': 'b', b: 'c' } });\n```\n\nYou can also create arrays of objects:\n\n```javascript\nvar arraysOfObjects = qs.parse('a[][b]=c');\nassert.deepEqual(arraysOfObjects, { a: [{ b: 'c' }] });\n```\n\n### Stringifying\n\n[](#preventEval)\n```javascript\nqs.stringify(object, [options]);\n```\n\nWhen stringifying, **qs** by default URI encodes output. Objects are stringified as you would expect:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b' }), 'a=b');\nassert.equal(qs.stringify({ a: { b: 'c' } }), 'a%5Bb%5D=c');\n```\n\nThis encoding can be disabled by setting the `encode` option to `false`:\n\n```javascript\nvar unencoded = qs.stringify({ a: { b: 'c' } }, { encode: false });\nassert.equal(unencoded, 'a[b]=c');\n```\n\nEncoding can be disabled for keys by setting the `encodeValuesOnly` option to `true`:\n```javascript\nvar encodedValues = qs.stringify(\n    { a: 'b', c: ['d', 'e=f'], f: [['g'], ['h']] },\n    { encodeValuesOnly: true }\n);\nassert.equal(encodedValues,'a=b&c[0]=d&c[1]=e%3Df&f[0][0]=g&f[1][0]=h');\n```\n\nThis encoding can also be replaced by a custom encoding method set as `encoder` option:\n\n```javascript\nvar encoded = qs.stringify({ a: { b: 'c' } }, { encoder: function (str) {\n    // Passed in values `a`, `b`, `c`\n    return // Return encoded string\n}})\n```\n\n_(Note: the `encoder` option does not apply if `encode` is `false`)_\n\nAnalogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:\n\n```javascript\nvar decoded = qs.parse('x=z', { decoder: function (str) {\n    // Passed in values `x`, `z`\n    return // Return decoded string\n}})\n```\n\nExamples beyond this point will be shown as though the output is not URI encoded for clarity. Please note that the return values in these cases *will* be URI encoded during real usage.\n\nWhen arrays are stringified, by default they are given explicit indices:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] });\n// 'a[0]=b&a[1]=c&a[2]=d'\n```\n\nYou may override this by setting the `indices` option to `false`:\n\n```javascript\nqs.stringify({ a: ['b', 'c', 'd'] }, { indices: false });\n// 'a=b&a=c&a=d'\n```\n\nYou may use the `arrayFormat` option to specify the format of the output array:\n\n```javascript\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' })\n// 'a[0]=b&a[1]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' })\n// 'a[]=b&a[]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' })\n// 'a=b&a=c'\n```\n\nWhen objects are stringified, by default they use bracket notation:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } });\n// 'a[b][c]=d&a[b][e]=f'\n```\n\nYou may override this to use dot notation by setting the `allowDots` option to `true`:\n\n```javascript\nqs.stringify({ a: { b: { c: 'd', e: 'f' } } }, { allowDots: true });\n// 'a.b.c=d&a.b.e=f'\n```\n\nEmpty strings and null values will omit the value, but the equals sign (=) remains in place:\n\n```javascript\nassert.equal(qs.stringify({ a: '' }), 'a=');\n```\n\nKey with no values (such as an empty object or array) will return nothing:\n\n```javascript\nassert.equal(qs.stringify({ a: [] }), '');\nassert.equal(qs.stringify({ a: {} }), '');\nassert.equal(qs.stringify({ a: [{}] }), '');\nassert.equal(qs.stringify({ a: { b: []} }), '');\nassert.equal(qs.stringify({ a: { b: {}} }), '');\n```\n\nProperties that are set to `undefined` will be omitted entirely:\n\n```javascript\nassert.equal(qs.stringify({ a: null, b: undefined }), 'a=');\n```\n\nThe query string may optionally be prepended with a question mark:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { addQueryPrefix: true }), '?a=b&c=d');\n```\n\nThe delimiter may be overridden with stringify as well:\n\n```javascript\nassert.equal(qs.stringify({ a: 'b', c: 'd' }, { delimiter: ';' }), 'a=b;c=d');\n```\n\nIf you only want to override the serialization of `Date` objects, you can provide a `serializeDate` option:\n\n```javascript\nvar date = new Date(7);\nassert.equal(qs.stringify({ a: date }), 'a=1970-01-01T00:00:00.007Z'.replace(/:/g, '%3A'));\nassert.equal(\n    qs.stringify({ a: date }, { serializeDate: function (d) { return d.getTime(); } }),\n    'a=7'\n);\n```\n\nYou may use the `sort` option to affect the order of parameter keys:\n\n```javascript\nfunction alphabeticalSort(a, b) {\n    return a.localeCompare(b);\n}\nassert.equal(qs.stringify({ a: 'c', z: 'y', b : 'f' }, { sort: alphabeticalSort }), 'a=c&b=f&z=y');\n```\n\nFinally, you can use the `filter` option to restrict which keys will be included in the stringified output.\nIf you pass a function, it will be called for each key to obtain the replacement value. Otherwise, if you\npass an array, it will be used to select properties and array indices for stringification:\n\n```javascript\nfunction filterFunc(prefix, value) {\n    if (prefix == 'b') {\n        // Return an `undefined` value to omit a property.\n        return;\n    }\n    if (prefix == 'e[f]') {\n        return value.getTime();\n    }\n    if (prefix == 'e[g][0]') {\n        return value * 2;\n    }\n    return value;\n}\nqs.stringify({ a: 'b', c: 'd', e: { f: new Date(123), g: [2] } }, { filter: filterFunc });\n// 'a=b&c=d&e[f]=123&e[g][0]=4'\nqs.stringify({ a: 'b', c: 'd', e: 'f' }, { filter: ['a', 'e'] });\n// 'a=b&e=f'\nqs.stringify({ a: ['b', 'c', 'd'], e: 'f' }, { filter: ['a', 0, 2] });\n// 'a[0]=b&a[2]=d'\n```\n\n### Handling of `null` values\n\nBy default, `null` values are treated like empty strings:\n\n```javascript\nvar withNull = qs.stringify({ a: null, b: '' });\nassert.equal(withNull, 'a=&b=');\n```\n\nParsing does not distinguish between parameters with and without equal signs. Both are converted to empty strings.\n\n```javascript\nvar equalsInsensitive = qs.parse('a&b=');\nassert.deepEqual(equalsInsensitive, { a: '', b: '' });\n```\n\nTo distinguish between `null` values and empty strings use the `strictNullHandling` flag. In the result string the `null`\nvalues have no `=` sign:\n\n```javascript\nvar strictNull = qs.stringify({ a: null, b: '' }, { strictNullHandling: true });\nassert.equal(strictNull, 'a&b=');\n```\n\nTo parse values without `=` back to `null` use the `strictNullHandling` flag:\n\n```javascript\nvar parsedStrictNull = qs.parse('a&b=', { strictNullHandling: true });\nassert.deepEqual(parsedStrictNull, { a: null, b: '' });\n```\n\nTo completely skip rendering keys with `null` values, use the `skipNulls` flag:\n\n```javascript\nvar nullsSkipped = qs.stringify({ a: 'b', c: null}, { skipNulls: true });\nassert.equal(nullsSkipped, 'a=b');\n```\n\n### Dealing with special character sets\n\nBy default the encoding and decoding of characters is done in `utf-8`. If you\nwish to encode querystrings to a different character set (i.e.\n[Shift JIS](https://en.wikipedia.org/wiki/Shift_JIS)) you can use the\n[`qs-iconv`](https://github.com/martinheidegger/qs-iconv) library:\n\n```javascript\nvar encoder = require('qs-iconv/encoder')('shift_jis');\nvar shiftJISEncoded = qs.stringify({ a: 'こんにちは！' }, { encoder: encoder });\nassert.equal(shiftJISEncoded, 'a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I');\n```\n\nThis also works for decoding of query strings:\n\n```javascript\nvar decoder = require('qs-iconv/decoder')('shift_jis');\nvar obj = qs.parse('a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I', { decoder: decoder });\nassert.deepEqual(obj, { a: 'こんにちは！' });\n```\n\n### RFC 3986 and RFC 1738 space encoding\n\nRFC3986 used as default option and encodes ' ' to *%20* which is backward compatible.\nIn the same time, output can be stringified as per RFC1738 with ' ' equal to '+'.\n\n```\nassert.equal(qs.stringify({ a: 'b c' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC3986' }), 'a=b%20c');\nassert.equal(qs.stringify({ a: 'b c' }, { format : 'RFC1738' }), 'a=b+c');\n```\n\n[1]: https://npmjs.org/package/qs\n[2]: http://versionbadg.es/ljharb/qs.svg\n[3]: https://api.travis-ci.org/ljharb/qs.svg\n[4]: https://travis-ci.org/ljharb/qs\n[5]: https://david-dm.org/ljharb/qs.svg\n[6]: https://david-dm.org/ljharb/qs\n[7]: https://david-dm.org/ljharb/qs/dev-status.svg\n[8]: https://david-dm.org/ljharb/qs?type=dev\n[9]: https://ci.testling.com/ljharb/qs.png\n[10]: https://ci.testling.com/ljharb/qs\n[11]: https://nodei.co/npm/qs.png?downloads=true&stars=true\n[license-image]: http://img.shields.io/npm/l/qs.svg\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/qs.svg\n[downloads-url]: http://npm-stat.com/charts.html?package=qs\n",
./lib/node_modules/express/node_modules/qs/README.md:Analogue to the `encoder` there is a `decoder` option for `parse` to override decoding of properties and values:
./lib/node_modules/express/node_modules/qs/CHANGELOG.md:- [**#24**](https://github.com/ljharb/qs/issues/24) Changelog? Semver?
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/package.json:  "readme": "# mime-db\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nThis is a database of all mime types.\nIt consists of a single, public JSON file and does not include any logic,\nallowing it to remain as un-opinionated as possible with an API.\nIt aggregates data from the following sources:\n\n- http://www.iana.org/assignments/media-types/media-types.xhtml\n- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types\n\n## Installation\n\n```bash\nnpm install mime-db\n```\n\n### Database Download\n\nIf you're crazy enough to use this in the browser, you can just grab the\nJSON file using [RawGit](https://rawgit.com/). It is recommended to replace\n`master` with [a release tag](https://github.com/jshttp/mime-db/tags) as the\nJSON format may change in the future.\n\n```\nhttps://cdn.rawgit.com/jshttp/mime-db/master/db.json\n```\n\n## Usage\n\n```js\nvar db = require('mime-db');\n\n// grab data on .js files\nvar data = db['application/javascript'];\n```\n\n## Data Structure\n\nThe JSON file is a map lookup for lowercased mime types.\nEach mime type has the following properties:\n\n- `.source` - where the mime type is defined.\n    If not set, it's probably a custom media type.\n    - `apache` - [Apache common media types](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n    - `iana` - [IANA-defined media types](http://www.iana.org/assignments/media-types/media-types.xhtml)\n    - `nginx` - [nginx media types](http://hg.nginx.org/nginx/raw-file/default/conf/mime.types)\n- `.extensions[]` - known extensions associated with this mime type.\n- `.compressible` - whether a file of this type can be gzipped.\n- `.charset` - the default charset associated with this type, if any.\n\nIf unknown, every property could be `undefined`.\n\n## Contributing\n\nTo edit the database, only make PRs against `src/custom.json` or\n`src/custom-suffix.json`.\n\nThe `src/custom.json` file is a JSON object with the MIME type as the keys\nand the values being an object with the following keys:\n\n- `compressible` - leave out if you don't know, otherwise `true`/`false` for\n  if the data represented by the time is typically compressible.\n- `extensions` - include an array of file extensions that are associated with\n  the type.\n- `notes` - human-readable notes about the type, typically what the type is.\n- `sources` - include an array of URLs of where the MIME type and the associated\n  extensions are sourced from. This needs to be a [primary source](https://en.wikipedia.org/wiki/Primary_source);\n  links to type aggregating sites and Wikipedia are _not acceptible_.\n\nTo update the build, run `npm run build`.\n\n## Adding Custom Media Types\n\nThe best way to get new media types included in this library is to register\nthem with the IANA. The community registration procedure is outlined in\n[RFC 6838 section 5](http://tools.ietf.org/html/rfc6838#section-5). Types\nregistered with the IANA are automatically pulled into this library.\n\n[npm-version-image]: https://img.shields.io/npm/v/mime-db.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/mime-db.svg\n[npm-url]: https://npmjs.org/package/mime-db\n[travis-image]: https://img.shields.io/travis/jshttp/mime-db/master.svg\n[travis-url]: https://travis-ci.org/jshttp/mime-db\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/mime-db/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/mime-db?branch=master\n[node-image]: https://img.shields.io/node/v/mime-db.svg\n[node-url]: https://nodejs.org/en/download/\n",
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/dialog-info+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/sgml-open-catalog": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.flographit": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.iptc.g2.catalogitem+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.nokia.catalogs": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-audit-dialog+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-base+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-group+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-speech+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "application/vnd.radisys.msml-dialog-transform+xml": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:    "extensions": ["txt","text","conf","def","list","log","in","ini"]
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "text/prs.prop.logic": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/db.json:  "text/vnd.si.uricatalogue": {
./lib/node_modules/express/node_modules/accepts/node_modules/mime-types/node_modules/mime-db/README.md:It consists of a single, public JSON file and does not include any logic,
./lib/node_modules/express/node_modules/accepts/node_modules/negotiator/package.json:      "url": "http://blog.izs.me/"
./lib/node_modules/express/lib/response.js: *    res.location('../login');
./lib/node_modules/express/lib/response.js: *    res.redirect('../login'); // /blog/post/1 -> /blog/login
./lib/node_modules/express/lib/application.js:    onerror: logerror.bind(this)
./lib/node_modules/express/lib/application.js: * was mounted as "/blog" then the
./lib/node_modules/express/lib/application.js: * return value would be "/blog/admin".
./lib/node_modules/express/lib/application.js:function logerror(err) {
./lib/node_modules/express/lib/router/index.js:  // param logic
./lib/node_modules/express/lib/express.js:  'logger',
./lib/node_modules/express/History.md:  * Fix regression where `"Request aborted"` is logged using `res.sendFile`
./lib/node_modules/express/History.md:  * Fix `res.sendfile` logging standard write errors
./lib/node_modules/express/History.md:  * Fix `res.sendFile` logging standard write errors
./lib/node_modules/express/History.md:   - `app.configure` - use logic in your own app code
./lib/node_modules/express/History.md:    - Fix accepting non-object arguments to `logger`
./lib/node_modules/express/History.md:    - Fix backwards compatibility in `logger`
./lib/node_modules/express/History.md:  * Removed _pids/logs_ creation from express(1)
./lib/node_modules/express/History.md:  * Added support for `app.param(fn)` to define param logic
./lib/node_modules/express/History.md:  * Fixed blog example
./lib/node_modules/express/History.md:  * Added `app.param()` to map route params to async/sync logic
./lib/node_modules/express/History.md:    to do this with CommonJS modules. Also view the _blog_ example for
./lib/node_modules/express/History.md:  * Fixed missing space for combined log format
./lib/node_modules/express-http-proxy/.npmignore:*.log
./lib/node_modules/express-http-proxy/node_modules/raw-body/node_modules/iconv-lite/package.json:  "readme": "## Pure JS character encoding conversion\n\n<!-- [![Build Status](https://secure.travis-ci.org/ashtuchkin/iconv-lite.png?branch=master)](http://travis-ci.org/ashtuchkin/iconv-lite) -->\n\n * Doesn't need native code compilation. Works on Windows and in sandboxed environments like [Cloud9](http://c9.io).\n * Used in popular projects like [Express.js (body_parser)](https://github.com/expressjs/body-parser), \n   [Grunt](http://gruntjs.com/), [Nodemailer](http://www.nodemailer.com/), [Yeoman](http://yeoman.io/) and others.\n * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\n * Intuitive encode/decode API\n * Streaming support for Node v0.10+\n * Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings.\n * In-browser usage via [Browserify](https://github.com/substack/node-browserify) (~180k gzip compressed with Buffer shim included).\n * License: MIT.\n\n[![NPM Stats](https://nodei.co/npm/iconv-lite.png?downloads=true&downloadRank=true)](https://npmjs.org/packages/iconv-lite/)\n\n## Usage\n### Basic API\n```javascript\nvar iconv = require('iconv-lite');\n\n// Convert from an encoded buffer to js string.\nstr = iconv.decode(new Buffer([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');\n\n// Convert from js string to an encoded buffer.\nbuf = iconv.encode(\"Sample input string\", 'win1251');\n\n// Check if encoding is supported\niconv.encodingExists(\"us-ascii\")\n```\n\n### Streaming API (Node v0.10+)\n```javascript\n\n// Decode stream (from binary stream to js strings)\nhttp.createServer(function(req, res) {\n    var converterStream = iconv.decodeStream('win1251');\n    req.pipe(converterStream);\n\n    converterStream.on('data', function(str) {\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\n    });\n});\n\n// Convert encoding streaming example\nfs.createReadStream('file-in-win1251.txt')\n    .pipe(iconv.decodeStream('win1251'))\n    .pipe(iconv.encodeStream('ucs2'))\n    .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\nhttp.createServer(function(req, res) {\n    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n        assert(typeof body == 'string');\n        console.log(body); // full request body string\n    });\n});\n```\n\n### Extend Node.js own encodings\n```javascript\n// After this call all Node basic primitives will understand iconv-lite encodings.\niconv.extendNodeEncodings();\n\n// Examples:\nbuf = new Buffer(str, 'win1251');\nbuf.write(str, 'gbk');\nstr = buf.toString('latin1');\nassert(Buffer.isEncoding('iso-8859-15'));\nBuffer.byteLength(str, 'us-ascii');\n\nhttp.createServer(function(req, res) {\n    req.setEncoding('big5');\n    req.collect(function(err, body) {\n        console.log(body);\n    });\n});\n\nfs.createReadStream(\"file.txt\", \"shift_jis\");\n\n// External modules are also supported (if they use Node primitives, which they probably do).\nrequest = require('request');\nrequest({\n    url: \"http://github.com/\", \n    encoding: \"cp932\"\n});\n\n// To remove extensions\niconv.undoExtendNodeEncodings();\n```\n\n## Supported encodings\n\n *  All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex.\n *  Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap.\n *  All widespread singlebyte encodings: Windows 125x family, ISO-8859 family, \n    IBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library. \n    Aliases like 'latin1', 'us-ascii' also supported.\n *  All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2313, GBK, GB18030, Big5, Shift_JIS, EUC-JP.\n\nSee [all supported encodings on wiki](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).\n\nMost singlebyte encodings are generated automatically from [node-iconv](https://github.com/bnoordhuis/node-iconv). Thank you Ben Noordhuis and libiconv authors!\n\nMultibyte encodings are generated from [Unicode.org mappings](http://www.unicode.org/Public/MAPPINGS/) and [WHATWG Encoding Standard mappings](http://encoding.spec.whatwg.org/). Thank you, respective authors!\n\n\n## Encoding/decoding speed\n\nComparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0). \nNote: your results may vary, so please always check on your hardware.\n\n    operation             iconv@2.1.4   iconv-lite@0.4.7\n    ----------------------------------------------------------\n    encode('win1251')     ~96 Mb/s      ~320 Mb/s\n    decode('win1251')     ~95 Mb/s      ~246 Mb/s\n\n\n## Notes\n\nWhen decoding, be sure to supply a Buffer to decode() method, otherwise [bad things usually happen](https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding).  \nUntranslatable characters are set to � or ?. No transliteration is currently supported.  \nUses BOM to determine endianness, but doesn't remove it. Use ['strip-bom' module](https://github.com/sindresorhus/strip-bom).  \nNode versions 0.10.31 and 0.11.13 are buggy, don't use them (see #65, #77).  \n\n## Testing\n\n```bash\n$ git clone git@github.com:ashtuchkin/iconv-lite.git\n$ cd iconv-lite\n$ npm install\n$ npm test\n    \n$ # To view performance:\n$ node test/performance.js\n\n$ # To view test coverage:\n$ npm run coverage\n$ open coverage/lcov-report/index.html\n```\n\n## Adoption\n[![NPM](https://nodei.co/npm-dl/iconv-lite.png)](https://nodei.co/npm/iconv-lite/)\n[![Codeship Status for ashtuchkin/iconv-lite](https://www.codeship.io/projects/81670840-fa72-0131-4520-4a01a6c01acc/status)](https://www.codeship.io/projects/29053)\n",
./lib/node_modules/express-http-proxy/node_modules/raw-body/node_modules/iconv-lite/README.md:        console.log(str); // Do something with decoded strings, chunk-by-chunk.
./lib/node_modules/express-http-proxy/node_modules/raw-body/node_modules/iconv-lite/README.md:        console.log(body); // full request body string
./lib/node_modules/express-http-proxy/node_modules/raw-body/node_modules/iconv-lite/README.md:        console.log(body);
./lib/node_modules/opn/node_modules/is-wsl/package.json:  "readme": "# is-wsl [![Build Status](https://travis-ci.org/sindresorhus/is-wsl.svg?branch=master)](https://travis-ci.org/sindresorhus/is-wsl)\n\n> Check if the process is running inside [Windows Subsystem for Linux](https://msdn.microsoft.com/commandline/wsl/about) (Bash on Windows)\n\nCan be useful if you need to work around unimplemented or buggy features in WSL.\n\n\n## Install\n\n```\n$ npm install --save is-wsl\n```\n\n\n## Usage\n\n```js\nconst isWsl = require('is-wsl');\n\n// When running inside Windows Subsystem for Linux\nconsole.log(isWsl);\n//=> true\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
./lib/node_modules/opn/node_modules/is-wsl/readme.md:console.log(isWsl);
./lib/node_modules/micromatch/package.json:  "readme": "# micromatch [![NPM version](https://img.shields.io/npm/v/micromatch.svg?style=flat)](https://www.npmjs.com/package/micromatch) [![NPM monthly downloads](https://img.shields.io/npm/dm/micromatch.svg?style=flat)](https://npmjs.org/package/micromatch) [![NPM total downloads](https://img.shields.io/npm/dt/micromatch.svg?style=flat)](https://npmjs.org/package/micromatch) [![Linux Build Status](https://img.shields.io/travis/micromatch/micromatch.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/micromatch) [![Windows Build Status](https://img.shields.io/appveyor/ci/micromatch/micromatch.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/micromatch/micromatch)\n\n> Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Table of Contents\n\n<details>\n<summary><strong>Details</strong></summary>\n\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Why use micromatch?](#why-use-micromatch)\n  * [Matching features](#matching-features)\n- [Switching to micromatch](#switching-to-micromatch)\n  * [From minimatch](#from-minimatch)\n  * [From multimatch](#from-multimatch)\n- [API](#api)\n- [Options](#options)\n  * [options.basename](#optionsbasename)\n  * [options.bash](#optionsbash)\n  * [options.cache](#optionscache)\n  * [options.dot](#optionsdot)\n  * [options.failglob](#optionsfailglob)\n  * [options.ignore](#optionsignore)\n  * [options.matchBase](#optionsmatchbase)\n  * [options.nobrace](#optionsnobrace)\n  * [options.nocase](#optionsnocase)\n  * [options.nodupes](#optionsnodupes)\n  * [options.noext](#optionsnoext)\n  * [options.nonegate](#optionsnonegate)\n  * [options.noglobstar](#optionsnoglobstar)\n  * [options.nonull](#optionsnonull)\n  * [options.nullglob](#optionsnullglob)\n  * [options.snapdragon](#optionssnapdragon)\n  * [options.sourcemap](#optionssourcemap)\n  * [options.unescape](#optionsunescape)\n  * [options.unixify](#optionsunixify)\n- [Extended globbing](#extended-globbing)\n  * [extglobs](#extglobs)\n  * [braces](#braces)\n  * [regex character classes](#regex-character-classes)\n  * [regex groups](#regex-groups)\n  * [POSIX bracket expressions](#posix-bracket-expressions)\n- [Notes](#notes)\n  * [Bash 4.3 parity](#bash-43-parity)\n  * [Backslashes](#backslashes)\n- [Contributing](#contributing)\n- [Benchmarks](#benchmarks)\n  * [Running benchmarks](#running-benchmarks)\n  * [Latest results](#latest-results)\n- [About](#about)\n\n</details>\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save micromatch\n```\n\n## Quickstart\n\n```js\nvar mm = require('micromatch');\nmm(list, patterns[, options]);\n```\n\nThe [main export](#micromatch) takes a list of strings and one or more glob patterns:\n\n```js\nconsole.log(mm(['foo', 'bar', 'qux'], ['f*', 'b*'])); \n//=> ['foo', 'bar']\n```\n\nUse [.isMatch()](#ismatch) to get true/false:\n\n```js\nconsole.log(mm.isMatch('foo', 'f*'));  \n//=> true\n```\n\n[Switching](#switching-to-micromatch) from minimatch and multimatch is easy!\n\n## Why use micromatch?\n\n> micromatch is a [drop-in replacement](#switching-to-micromatch) for minimatch and multimatch\n\n* Supports all of the same matching features as [minimatch](https://github.com/isaacs/minimatch) and [multimatch](https://github.com/sindresorhus/multimatch)\n* Micromatch uses [snapdragon](https://github.com/jonschlinkert/snapdragon) for parsing and compiling globs, which provides granular control over the entire conversion process in a way that is easy to understand, reason about, and maintain.\n* More consistently accurate matching [than minimatch](https://github.com/yarnpkg/yarn/pull/3339), with more than 36,000 [test assertions](./test) to prove it.\n* More complete support for the Bash 4.3 specification than minimatch and multimatch. In fact, micromatch passes _all of the spec tests_ from bash, including some that bash still fails.\n* [Faster matching](#benchmarks), from a combination of optimized glob patterns, faster algorithms, and regex caching.\n* [Micromatch is safer](https://github.com/micromatch/braces#braces-is-safe), and is not subject to DoS with brace patterns, like minimatch and multimatch.\n* More reliable windows support than minimatch and multimatch.\n\n### Matching features\n\n* Support for multiple glob patterns (no need for wrappers like multimatch)\n* Wildcards (`**`, `*.js`)\n* Negation (`'!a/*.js'`, `'*!(b).js']`)\n* [extglobs](https://github.com/micromatch/extglob) (`+(x|y)`, `!(a|b)`)\n* [POSIX character classes](https://github.com/micromatch/expand-brackets) (`[[:alpha:][:digit:]]`)\n* [brace expansion](https://github.com/micromatch/braces) (`foo/{1..5}.md`, `bar/{a,b,c}.js`)\n* regex character classes (`foo-[1-5].js`)\n* regex logical \"or\" (`foo/(abc|xyz).js`)\n\nYou can mix and match these features to create whatever patterns you need!\n\n## Switching to micromatch\n\nThere is one notable difference between micromatch and minimatch in regards to how backslashes are handled. See [the notes about backslashes](#backslashes) for more information.\n\n### From minimatch\n\nUse [mm.isMatch()](#ismatch) instead of `minimatch()`:\n\n```js\nmm.isMatch('foo', 'b*');\n//=> false\n```\n\nUse [mm.match()](#match) instead of `minimatch.match()`:\n\n```js\nmm.match(['foo', 'bar'], 'b*');\n//=> 'bar'\n```\n\n### From multimatch\n\nSame signature:\n\n```js\nmm(['foo', 'bar', 'baz'], ['f*', '*z']);\n//=> ['foo', 'baz']\n```\n\n## API\n\n### [micromatch](index.js#L41)\n\nThe main function takes a list of strings and one or more glob patterns to use for matching.\n\n**Params**\n\n* `list` **{Array}**: A list of strings to match\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm(list, patterns[, options]);\n\nconsole.log(mm(['a.js', 'a.txt'], ['*.js']));\n//=> [ 'a.js' ]\n```\n\n### [.match](index.js#L93)\n\nSimilar to the main function, but `pattern` must be a string.\n\n**Params**\n\n* `list` **{Array}**: Array of strings to match\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.match(list, pattern[, options]);\n\nconsole.log(mm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));\n//=> ['a.a', 'a.aa']\n```\n\n### [.isMatch](index.js#L154)\n\nReturns true if the specified `string` matches the given glob `pattern`.\n\n**Params**\n\n* `string` **{String}**: String to match\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if the string matches the glob pattern.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.isMatch(string, pattern[, options]);\n\nconsole.log(mm.isMatch('a.a', '*.a'));\n//=> true\nconsole.log(mm.isMatch('a.b', '*.a'));\n//=> false\n```\n\n### [.some](index.js#L192)\n\nReturns true if some of the strings in the given `list` match any of the given glob `patterns`.\n\n**Params**\n\n* `list` **{String|Array}**: The string or array of strings to test. Returns as soon as the first match is found.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.some(list, patterns[, options]);\n\nconsole.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// true\nconsole.log(mm.some(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n### [.every](index.js#L228)\n\nReturns true if every string in the given `list` matches any of the given glob `patterns`.\n\n**Params**\n\n* `list` **{String|Array}**: The string or array of strings to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.every(list, patterns[, options]);\n\nconsole.log(mm.every('foo.js', ['foo.js']));\n// true\nconsole.log(mm.every(['foo.js', 'bar.js'], ['*.js']));\n// true\nconsole.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// false\nconsole.log(mm.every(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n### [.any](index.js#L260)\n\nReturns true if **any** of the given glob `patterns` match the specified `string`.\n\n**Params**\n\n* `str` **{String|Array}**: The string to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.any(string, patterns[, options]);\n\nconsole.log(mm.any('a.a', ['b.*', '*.a']));\n//=> true\nconsole.log(mm.any('a.a', 'b.*'));\n//=> false\n```\n\n### [.all](index.js#L308)\n\nReturns true if **all** of the given `patterns` match the specified string.\n\n**Params**\n\n* `str` **{String|Array}**: The string to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.all(string, patterns[, options]);\n\nconsole.log(mm.all('foo.js', ['foo.js']));\n// true\n\nconsole.log(mm.all('foo.js', ['*.js', '!foo.js']));\n// false\n\nconsole.log(mm.all('foo.js', ['*.js', 'foo.js']));\n// true\n\nconsole.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n// true\n```\n\n### [.not](index.js#L340)\n\nReturns a list of strings that _**do not match any**_ of the given `patterns`.\n\n**Params**\n\n* `list` **{Array}**: Array of strings to match.\n* `patterns` **{String|Array}**: One or more glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of strings that **do not match** the given patterns.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.not(list, patterns[, options]);\n\nconsole.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n//=> ['b.b', 'c.c']\n```\n\n### [.contains](index.js#L376)\n\nReturns true if the given `string` contains the given pattern. Similar to [.isMatch](#isMatch) but the pattern can match any part of the string.\n\n**Params**\n\n* `str` **{String}**: The string to match.\n* `patterns` **{String|Array}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if the patter matches any part of `str`.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.contains(string, pattern[, options]);\n\nconsole.log(mm.contains('aa/bb/cc', '*b'));\n//=> true\nconsole.log(mm.contains('aa/bb/cc', '*d'));\n//=> false\n```\n\n### [.matchKeys](index.js#L432)\n\nFilter the keys of the given object with the given `glob` pattern and `options`. Does not attempt to match nested keys. If you need this feature, use [glob-object](https://github.com/jonschlinkert/glob-object) instead.\n\n**Params**\n\n* `object` **{Object}**: The object with keys to filter.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Object}**: Returns an object with only keys that match the given patterns.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.matchKeys(object, patterns[, options]);\n\nvar obj = { aa: 'a', ab: 'b', ac: 'c' };\nconsole.log(mm.matchKeys(obj, '*b'));\n//=> { ab: 'b' }\n```\n\n### [.matcher](index.js#L461)\n\nReturns a memoized matcher function from the given glob `pattern` and `options`. The returned function takes a string to match as its only argument and returns true if the string is a match.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed.\n* `returns` **{Function}**: Returns a matcher function.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.matcher(pattern[, options]);\n\nvar isMatch = mm.matcher('*.!(*a)');\nconsole.log(isMatch('a.a'));\n//=> false\nconsole.log(isMatch('a.b'));\n//=> true\n```\n\n### [.capture](index.js#L536)\n\nReturns an array of matches captured by `pattern` in `string, or`null` if the pattern did not match.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `string` **{String}**: String to match\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns an array of captures if the string matches the glob pattern, otherwise `null`.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.capture(pattern, string[, options]);\n\nconsole.log(mm.capture('test/*.js', 'test/foo.js'));\n//=> ['foo']\nconsole.log(mm.capture('test/*.js', 'foo/bar.css'));\n//=> null\n```\n\n### [.makeRe](index.js#L571)\n\nCreate a regular expression from the given glob `pattern`.\n\n**Params**\n\n* `pattern` **{String}**: A glob pattern to convert to regex.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed.\n* `returns` **{RegExp}**: Returns a regex created from the given pattern.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.makeRe(pattern[, options]);\n\nconsole.log(mm.makeRe('*.js'));\n//=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n```\n\n### [.braces](index.js#L618)\n\nExpand the given brace `pattern`.\n\n**Params**\n\n* `pattern` **{String}**: String with brace pattern to expand.\n* `options` **{Object}**: Any [options](#options) to change how expansion is performed. See the [braces](https://github.com/micromatch/braces) library for all available options.\n* `returns` **{Array}**\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nconsole.log(mm.braces('foo/{a,b}/bar'));\n//=> ['foo/(a|b)/bar']\n\nconsole.log(mm.braces('foo/{a,b}/bar', {expand: true}));\n//=> ['foo/(a|b)/bar']\n```\n\n### [.create](index.js#L685)\n\nParses the given glob `pattern` and returns an array of abstract syntax trees (ASTs), with the compiled `output` and optional source `map` on each AST.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern to parse and compile.\n* `options` **{Object}**: Any [options](#options) to change how parsing and compiling is performed.\n* `returns` **{Object}**: Returns an object with the parsed AST, compiled string and optional source map.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.create(pattern[, options]);\n\nconsole.log(mm.create('abc/*.js'));\n// [{ options: { source: 'string', sourcemap: true },\n//   state: {},\n//   compilers:\n//    { ... },\n//   output: '(\\\\.[\\\\\\\\\\\\/])?abc\\\\/(?!\\\\.)(?=.)[^\\\\/]*?\\\\.js',\n//   ast:\n//    { type: 'root',\n//      errors: [],\n//      nodes:\n//       [ ... ],\n//      dot: false,\n//      input: 'abc/*.js' },\n//   parsingErrors: [],\n//   map:\n//    { version: 3,\n//      sources: [ 'string' ],\n//      names: [],\n//      mappings: 'AAAA,GAAG,EAAC,kBAAC,EAAC,EAAE',\n//      sourcesContent: [ 'abc/*.js' ] },\n//   position: { line: 1, column: 28 },\n//   content: {},\n//   files: {},\n//   idx: 6 }]\n```\n\n### [.parse](index.js#L732)\n\nParse the given `str` with the given `options`.\n\n**Params**\n\n* `str` **{String}**\n* `options` **{Object}**\n* `returns` **{Object}**: Returns an AST\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.parse(pattern[, options]);\n\nvar ast = mm.parse('a/{b,c}/d');\nconsole.log(ast);\n// { type: 'root',\n//   errors: [],\n//   input: 'a/{b,c}/d',\n//   nodes:\n//    [ { type: 'bos', val: '' },\n//      { type: 'text', val: 'a/' },\n//      { type: 'brace',\n//        nodes:\n//         [ { type: 'brace.open', val: '{' },\n//           { type: 'text', val: 'b,c' },\n//           { type: 'brace.close', val: '}' } ] },\n//      { type: 'text', val: '/d' },\n//      { type: 'eos', val: '' } ] }\n```\n\n### [.compile](index.js#L780)\n\nCompile the given `ast` or string with the given `options`.\n\n**Params**\n\n* `ast` **{Object|String}**\n* `options` **{Object}**\n* `returns` **{Object}**: Returns an object that has an `output` property with the compiled string.\n\n**Example**\n\n```js\nvar mm = require('micromatch');\nmm.compile(ast[, options]);\n\nvar ast = mm.parse('a/{b,c}/d');\nconsole.log(mm.compile(ast));\n// { options: { source: 'string' },\n//   state: {},\n//   compilers:\n//    { eos: [Function],\n//      noop: [Function],\n//      bos: [Function],\n//      brace: [Function],\n//      'brace.open': [Function],\n//      text: [Function],\n//      'brace.close': [Function] },\n//   output: [ 'a/(b|c)/d' ],\n//   ast:\n//    { ... },\n//   parsingErrors: [] }\n```\n\n### [.clearCache](index.js#L801)\n\nClear the regex cache.\n\n**Example**\n\n```js\nmm.clearCache();\n```\n\n## Options\n\n* [basename](#optionsbasename)\n* [bash](#optionsbash)\n* [cache](#optionscache)\n* [dot](#optionsdot)\n* [failglob](#optionsfailglob)\n* [ignore](#optionsignore)\n* [matchBase](#optionsmatchBase)\n* [nobrace](#optionsnobrace)\n* [nocase](#optionsnocase)\n* [nodupes](#optionsnodupes)\n* [noext](#optionsnoext)\n* [noglobstar](#optionsnoglobstar)\n* [nonull](#optionsnonull)\n* [nullglob](#optionsnullglob)\n* [snapdragon](#optionssnapdragon)\n* [sourcemap](#optionssourcemap)\n* [unescape](#optionsunescape)\n* [unixify](#optionsunixify)\n\n### options.basename\n\nAllow glob patterns without slashes to match a file path based on its basename. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `matchBase`.\n\n**Type**: `Boolean`\n\n**Default**: `false`\n\n**Example**\n\n```js\nmm(['a/b.js', 'a/c.md'], '*.js');\n//=> []\n\nmm(['a/b.js', 'a/c.md'], '*.js', {matchBase: true});\n//=> ['a/b.js']\n```\n\n### options.bash\n\nEnabled by default, this option enforces bash-like behavior with stars immediately following a bracket expression. Bash bracket expressions are similar to regex character classes, but unlike regex, a star following a bracket expression **does not repeat the bracketed characters**. Instead, the star is treated the same as an other star.\n\n**Type**: `Boolean`\n\n**Default**: `true`\n\n**Example**\n\n```js\nvar files = ['abc', 'ajz'];\nconsole.log(mm(files, '[a-c]*'));\n//=> ['abc', 'ajz']\n\nconsole.log(mm(files, '[a-c]*', {bash: false}));\n```\n\n### options.cache\n\nDisable regex and function memoization.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.dot\n\nMatch dotfiles. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `dot`.\n\n**Type**: `Boolean`\n\n**Default**: `false`\n\n### options.failglob\n\nSimilar to the `--failglob` behavior in Bash, throws an error when no matches are found.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.ignore\n\nString or array of glob patterns to match files to ignore.\n\n**Type**: `String|Array`\n\n**Default**: `undefined`\n\n### options.matchBase\n\nAlias for [options.basename](#options-basename).\n\n### options.nobrace\n\nDisable expansion of brace patterns. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `nobrace`.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nSee [braces](https://github.com/micromatch/braces) for more information about extended brace expansion.\n\n### options.nocase\n\nUse a case-insensitive regex for matching files. Same behavior as [minimatch](https://github.com/isaacs/minimatch).\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.nodupes\n\nRemove duplicate elements from the result array.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Example**\n\nExample of using the `unescape` and `nodupes` options together:\n\n```js\nmm.match(['a/b/c', 'a/b/c'], 'a/b/c');\n//=> ['a/b/c', 'a/b/c']\n\nmm.match(['a/b/c', 'a/b/c'], 'a/b/c', {nodupes: true});\n//=> ['abc']\n```\n\n### options.noext\n\nDisable extglob support, so that extglobs are regarded as literal characters.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Examples**\n\n```js\nmm(['a/z', 'a/b', 'a/!(z)'], 'a/!(z)');\n//=> ['a/b', 'a/!(z)']\n\nmm(['a/z', 'a/b', 'a/!(z)'], 'a/!(z)', {noext: true});\n//=> ['a/!(z)'] (matches only as literal characters)\n```\n\n### options.nonegate\n\nDisallow negation (`!`) patterns, and treat leading `!` as a literal character to match.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.noglobstar\n\nDisable matching with globstars (`**`).\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n```js\nmm(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**');\n//=> ['a/b', 'a/b/c', 'a/b/c/d']\n\nmm(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**', {noglobstar: true});\n//=> ['a/b']\n```\n\n### options.nonull\n\nAlias for [options.nullglob](#options-nullglob).\n\n### options.nullglob\n\nIf `true`, when no matches are found the actual (arrayified) glob pattern is returned instead of an empty array. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `nonull`.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n### options.snapdragon\n\nPass your own instance of [snapdragon](https://github.com/jonschlinkert/snapdragon), to customize parsers or compilers.\n\n**Type**: `Object`\n\n**Default**: `undefined`\n\n### options.sourcemap\n\nGenerate a source map by enabling the `sourcemap` option with the `.parse`, `.compile`, or `.create` methods.\n\n_(Note that sourcemaps are currently not enabled for brace patterns)_\n\n**Examples**\n\n``` js\nvar mm = require('micromatch');\nvar pattern = '*(*(of*(a)x)z)';\n\nvar res = mm.create('abc/*.js', {sourcemap: true});\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'string' ],\n//   names: [],\n//   mappings: 'AAAA,GAAG,EAAC,iBAAC,EAAC,EAAE',\n//   sourcesContent: [ 'abc/*.js' ] }\n\nvar ast = mm.parse('abc/**/*.js');\nvar res = mm.compile(ast, {sourcemap: true});\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'string' ],\n//   names: [],\n//   mappings: 'AAAA,GAAG,EAAC,2BAAE,EAAC,iBAAC,EAAC,EAAE',\n//   sourcesContent: [ 'abc/**/*.js' ] }\n\nvar ast = mm.parse(pattern);\nvar res = mm.compile(ast, {sourcemap: true});\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'string' ],\n//   names: [],\n//   mappings: 'AAAA,CAAE,CAAE,EAAE,CAAE,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC',\n//   sourcesContent: [ '*(*(of*(a)x)z)' ] }\n```\n\n### options.unescape\n\nRemove backslashes from returned matches.\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Example**\n\nIn this example we want to match a literal `*`:\n\n```js\nmm.match(['abc', 'a\\\\*c'], 'a\\\\*c');\n//=> ['a\\\\*c']\n\nmm.match(['abc', 'a\\\\*c'], 'a\\\\*c', {unescape: true});\n//=> ['a*c']\n```\n\n### options.unixify\n\nConvert path separators on returned files to posix/unix-style forward slashes.\n\n**Type**: `Boolean`\n\n**Default**: `true` on windows, `false` everywhere else\n\n**Example**\n\n```js\nmm.match(['a\\\\b\\\\c'], 'a/**');\n//=> ['a/b/c']\n\nmm.match(['a\\\\b\\\\c'], {unixify: false});\n//=> ['a\\\\b\\\\c']\n```\n\n## Extended globbing\n\nMicromatch also supports extended globbing features.\n\n### extglobs\n\nExtended globbing, as described by the bash man page:\n\n| **pattern** | **regex equivalent** | **description** | \n| --- | --- | --- |\n| `?(pattern)` | `(pattern)?` | Matches zero or one occurrence of the given patterns |\n| `*(pattern)` | `(pattern)*` | Matches zero or more occurrences of the given patterns |\n| `+(pattern)` | `(pattern)+` | Matches one or more occurrences of the given patterns |\n| `@(pattern)` | `(pattern)` <sup>*</sup> | Matches one of the given patterns |\n| `!(pattern)` | N/A (equivalent regex is much more complicated) | Matches anything except one of the given patterns |\n\n<sup><strong>*</strong></sup> Note that `@` isn't a RegEx character.\n\nPowered by [extglob](https://github.com/micromatch/extglob). Visit that library for the full range of options or to report extglob related issues.\n\n### braces\n\nBrace patterns can be used to match specific ranges or sets of characters. For example, the pattern `*/{1..3}/*` would match any of following strings:\n\n```\nfoo/1/bar\nfoo/2/bar\nfoo/3/bar\nbaz/1/qux\nbaz/2/qux\nbaz/3/qux\n```\n\nVisit [braces](https://github.com/micromatch/braces) to see the full range of features and options related to brace expansion, or to create brace matching or expansion related issues.\n\n### regex character classes\n\nGiven the list: `['a.js', 'b.js', 'c.js', 'd.js', 'E.js']`:\n\n* `[ac].js`: matches both `a` and `c`, returning `['a.js', 'c.js']`\n* `[b-d].js`: matches from `b` to `d`, returning `['b.js', 'c.js', 'd.js']`\n* `[b-d].js`: matches from `b` to `d`, returning `['b.js', 'c.js', 'd.js']`\n* `a/[A-Z].js`: matches and uppercase letter, returning `['a/E.md']`\n\nLearn about [regex character classes](http://www.regular-expressions.info/charclass.html).\n\n### regex groups\n\nGiven `['a.js', 'b.js', 'c.js', 'd.js', 'E.js']`:\n\n* `(a|c).js`: would match either `a` or `c`, returning `['a.js', 'c.js']`\n* `(b|d).js`: would match either `b` or `d`, returning `['b.js', 'd.js']`\n* `(b|[A-Z]).js`: would match either `b` or an uppercase letter, returning `['b.js', 'E.js']`\n\nAs with regex, parens can be nested, so patterns like `((a|b)|c)/b` will work. Although brace expansion might be friendlier to use, depending on preference.\n\n### POSIX bracket expressions\n\nPOSIX brackets are intended to be more user-friendly than regex character classes. This of course is in the eye of the beholder.\n\n**Example**\n\n```js\nmm.isMatch('a1', '[[:alpha:][:digit:]]');\n//=> true\n\nmm.isMatch('a1', '[[:alpha:][:alpha:]]');\n//=> false\n```\n\nSee [expand-brackets](https://github.com/jonschlinkert/expand-brackets) for more information about bracket expressions.\n\n***\n\n## Notes\n\n### Bash 4.3 parity\n\nWhenever possible matching behavior is based on behavior Bash 4.3, which is mostly consistent with minimatch.\n\nHowever, it's suprising how many edge cases and rabbit holes there are with glob matching, and since there is no real glob specification, and micromatch is more accurate than both Bash and minimatch, there are cases where best-guesses were made for behavior. In a few cases where Bash had no answers, we used wildmatch (used by git) as a fallback.\n\n### Backslashes\n\nThere is an important, notable difference between minimatch and micromatch _in regards to how backslashes are handled_ in glob patterns.\n\n* Micromatch exclusively and explicitly reserves backslashes for escaping characters in a glob pattern, even on windows. This is consistent with bash behavior.\n* Minimatch converts all backslashes to forward slashes, which means you can't use backslashes to escape any characters in your glob patterns.\n\nWe made this decision for micromatch for a couple of reasons:\n\n* consistency with bash conventions.\n* glob patterns are not filepaths. They are a type of [regular language](https://en.wikipedia.org/wiki/Regular_language) that is converted to a JavaScript regular expression. Thus, when forward slashes are defined in a glob pattern, the resulting regular expression will match windows or POSIX path separators just fine.\n\n**A note about joining paths to globs**\n\nNote that when you pass something like `path.join('foo', '*')` to micromatch, you are creating a filepath and expecting it to still work as a glob pattern. This causes problems on windows, since the `path.sep` is `\\\\`.\n\nIn other words, since `\\\\` is reserved as an escape character in globs, on windows `path.join('foo', '*')` would result in `foo\\\\*`, which tells micromatch to match `*` as a literal character. This is the same behavior as bash.\n\n## Contributing\n\nAll contributions are welcome! Please read [the contributing guide](.github/contributing.md) to get started.\n\n**Bug reports**\n\nPlease create an issue if you encounter a bug or matching behavior that doesn't seem correct. If you find a matching-related issue, please:\n\n* [research existing issues first](../../issues) (open and closed)\n* visit the [GNU Bash documentation](https://www.gnu.org/software/bash/manual/) to see how Bash deals with the pattern\n* visit the [minimatch](https://github.com/isaacs/minimatch) documentation to cross-check expected behavior in node.js\n* if all else fails, since there is no real specification for globs we will probably need to discuss expected behavior and decide how to resolve it. which means any detail you can provide to help with this discussion would be greatly appreciated.\n\n**Platform issues**\n\nIt's important to us that micromatch work consistently on all platforms. If you encounter any platform-specific matching or path related issues, please let us know (pull requests are also greatly appreciated).\n\n## Benchmarks\n\n### Running benchmarks\n\nInstall dev dependencies:\n\n```bash\nnpm i -d && npm run benchmark\n```\n\n### Latest results\n\nAs of February 18, 2018 (longer bars are better):\n\n```sh\n# braces-globstar-large-list (485691 bytes)\n  micromatch ██████████████████████████████████████████████████ (517 ops/sec ±0.49%)\n  minimatch  █ (18.92 ops/sec ±0.54%)\n  multimatch █ (18.94 ops/sec ±0.62%)\n\n  micromatch is faster by an avg. of 2,733%\n\n# braces-multiple (3362 bytes)\n  micromatch ██████████████████████████████████████████████████ (33,625 ops/sec ±0.45%)\n  minimatch   (2.92 ops/sec ±3.26%)\n  multimatch  (2.90 ops/sec ±2.76%)\n\n  micromatch is faster by an avg. of 1,156,935%\n\n# braces-range (727 bytes)\n  micromatch █████████████████████████████████████████████████ (155,220 ops/sec ±0.56%)\n  minimatch  ██████ (20,186 ops/sec ±1.27%)\n  multimatch ██████ (19,809 ops/sec ±0.60%)\n\n  micromatch is faster by an avg. of 776%\n\n# braces-set (2858 bytes)\n  micromatch █████████████████████████████████████████████████ (24,354 ops/sec ±0.92%)\n  minimatch  █████ (2,566 ops/sec ±0.56%)\n  multimatch ████ (2,431 ops/sec ±1.25%)\n\n  micromatch is faster by an avg. of 975%\n\n# globstar-large-list (485686 bytes)\n  micromatch █████████████████████████████████████████████████ (504 ops/sec ±0.45%)\n  minimatch  ███ (33.36 ops/sec ±1.08%)\n  multimatch ███ (33.19 ops/sec ±1.35%)\n\n  micromatch is faster by an avg. of 1,514%\n\n# globstar-long-list (90647 bytes)\n  micromatch ██████████████████████████████████████████████████ (2,694 ops/sec ±1.08%)\n  minimatch  ████████████████ (870 ops/sec ±1.09%)\n  multimatch ████████████████ (862 ops/sec ±0.84%)\n\n  micromatch is faster by an avg. of 311%\n\n# globstar-short-list (182 bytes)\n  micromatch ██████████████████████████████████████████████████ (328,921 ops/sec ±1.06%)\n  minimatch  █████████ (64,808 ops/sec ±1.42%)\n  multimatch ████████ (57,991 ops/sec ±2.11%)\n\n  micromatch is faster by an avg. of 536%\n\n# no-glob (701 bytes)\n  micromatch █████████████████████████████████████████████████ (415,935 ops/sec ±0.36%)\n  minimatch  ███████████ (92,730 ops/sec ±1.44%)\n  multimatch █████████ (81,958 ops/sec ±2.13%)\n\n  micromatch is faster by an avg. of 476%\n\n# star-basename-long (12339 bytes)\n  micromatch █████████████████████████████████████████████████ (7,963 ops/sec ±0.36%)\n  minimatch  ███████████████████████████████ (5,072 ops/sec ±0.83%)\n  multimatch ███████████████████████████████ (5,028 ops/sec ±0.40%)\n\n  micromatch is faster by an avg. of 158%\n\n# star-basename-short (349 bytes)\n  micromatch ██████████████████████████████████████████████████ (269,552 ops/sec ±0.70%)\n  minimatch  ██████████████████████ (122,457 ops/sec ±1.39%)\n  multimatch ████████████████████ (110,788 ops/sec ±1.99%)\n\n  micromatch is faster by an avg. of 231%\n\n# star-folder-long (19207 bytes)\n  micromatch █████████████████████████████████████████████████ (3,806 ops/sec ±0.38%)\n  minimatch  ████████████████████████████ (2,204 ops/sec ±0.32%)\n  multimatch ██████████████████████████ (2,020 ops/sec ±1.07%)\n\n  micromatch is faster by an avg. of 180%\n\n# star-folder-short (551 bytes)\n  micromatch ██████████████████████████████████████████████████ (249,077 ops/sec ±0.40%)\n  minimatch  ███████████ (59,431 ops/sec ±1.67%)\n  multimatch ███████████ (55,569 ops/sec ±1.43%)\n\n  micromatch is faster by an avg. of 433%\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [braces](https://www.npmjs.com/package/braces): Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support… [more](https://github.com/micromatch/braces) | [homepage](https://github.com/micromatch/braces \"Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.\")\n* [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/jonschlinkert/expand-brackets \"Expand POSIX bracket expressions (character classes) in glob patterns.\")\n* [extglob](https://www.npmjs.com/package/extglob): Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob… [more](https://github.com/micromatch/extglob) | [homepage](https://github.com/micromatch/extglob \"Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\")\n* [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n* [nanomatch](https://www.npmjs.com/package/nanomatch): Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash… [more](https://github.com/micromatch/nanomatch) | [homepage](https://github.com/micromatch/nanomatch \"Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash 4.3 wildcard support only (no support for exglobs, posix brackets or braces)\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 457 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 12 | [es128](https://github.com/es128) |\n| 8 | [doowb](https://github.com/doowb) |\n| 3 | [paulmillr](https://github.com/paulmillr) |\n| 2 | [TrySound](https://github.com/TrySound) |\n| 2 | [MartinKolarik](https://github.com/MartinKolarik) |\n| 2 | [charlike-old](https://github.com/charlike-old) |\n| 1 | [amilajack](https://github.com/amilajack) |\n| 1 | [mrmlnc](https://github.com/mrmlnc) |\n| 1 | [devongovett](https://github.com/devongovett) |\n| 1 | [DianeLooney](https://github.com/DianeLooney) |\n| 1 | [UltCombo](https://github.com/UltCombo) |\n| 1 | [tomByrer](https://github.com/tomByrer) |\n| 1 | [fidian](https://github.com/fidian) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 18, 2018._",
./lib/node_modules/micromatch/node_modules/extglob/package.json:    "helper-changelog": "^0.3.0",
./lib/node_modules/micromatch/node_modules/extglob/package.json:      "helper-changelog"
./lib/node_modules/micromatch/node_modules/extglob/package.json:  "readme": "# extglob [![NPM version](https://img.shields.io/npm/v/extglob.svg?style=flat)](https://www.npmjs.com/package/extglob) [![NPM monthly downloads](https://img.shields.io/npm/dm/extglob.svg?style=flat)](https://npmjs.org/package/extglob) [![NPM total downloads](https://img.shields.io/npm/dt/extglob.svg?style=flat)](https://npmjs.org/package/extglob) [![Linux Build Status](https://img.shields.io/travis/micromatch/extglob.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/extglob) [![Windows Build Status](https://img.shields.io/appveyor/ci/micromatch/extglob.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/micromatch/extglob)\n\n> Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save extglob\n```\n\n* Convert an extglob string to a regex-compatible string.\n* More complete (and correct) support than [minimatch](https://github.com/isaacs/minimatch) (minimatch fails a large percentage of the extglob tests)\n* Handles [negation patterns](#extglob-patterns)\n* Handles [nested patterns](#extglob-patterns)\n* Organized code base, easy to maintain and make changes when edge cases arise\n* As you can see by the [benchmarks](#benchmarks), extglob doesn't pay with speed for it's completeness, accuracy and quality.\n\n**Heads up!**: This library only supports extglobs, to handle full glob patterns and other extended globbing features use [micromatch](https://github.com/jonschlinkert/micromatch) instead.\n\n## Usage\n\nThe main export is a function that takes a string and options, and returns an object with the parsed AST and the compiled `.output`, which is a regex-compatible string that can be used for matching.\n\n```js\nvar extglob = require('extglob');\nconsole.log(extglob('!(xyz)*.js'));\n```\n\n## Extglob cheatsheet\n\nExtended globbing patterns can be defined as follows (as described by the [bash man page](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html)):\n\n| **pattern** | **regex equivalent** | **description** | \n| --- | --- | --- |\n| `?(pattern-list)` | `(...|...)?` | Matches zero or one occurrence of the given pattern(s) |\n| `*(pattern-list)` | `(...|...)*` | Matches zero or more occurrences of the given pattern(s) |\n| `+(pattern-list)` | `(...|...)+` | Matches one or more occurrences of the given pattern(s) |\n| `@(pattern-list)` | `(...|...)` <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> | Matches one of the given pattern(s) |\n| `!(pattern-list)` | N/A | Matches anything except one of the given pattern(s) |\n\n## API\n\n### [extglob](index.js#L36)\n\nConvert the given `extglob` pattern into a regex-compatible string. Returns an object with the compiled result and the parsed AST.\n\n**Params**\n\n* `pattern` **{String}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nconsole.log(extglob('*.!(*a)'));\n//=> '(?!\\\\.)[^/]*?\\\\.(?!(?!\\\\.)[^/]*?a\\\\b).*?'\n```\n\n### [.match](index.js#L56)\n\nTakes an array of strings and an extglob pattern and returns a new array that contains only the strings that match the pattern.\n\n**Params**\n\n* `list` **{Array}**: Array of strings to match\n* `pattern` **{String}**: Extglob pattern\n* `options` **{Object}**\n* `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nconsole.log(extglob.match(['a.a', 'a.b', 'a.c'], '*.!(*a)'));\n//=> ['a.b', 'a.c']\n```\n\n### [.isMatch](index.js#L111)\n\nReturns true if the specified `string` matches the given extglob `pattern`.\n\n**Params**\n\n* `string` **{String}**: String to match\n* `pattern` **{String}**: Extglob pattern\n* `options` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar extglob = require('extglob');\n\nconsole.log(extglob.isMatch('a.a', '*.!(*a)'));\n//=> false\nconsole.log(extglob.isMatch('a.b', '*.!(*a)'));\n//=> true\n```\n\n### [.contains](index.js#L150)\n\nReturns true if the given `string` contains the given pattern. Similar to `.isMatch` but the pattern can match any part of the string.\n\n**Params**\n\n* `str` **{String}**: The string to match.\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `options` **{Object}**\n* `returns` **{Boolean}**: Returns true if the patter matches any part of `str`.\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nconsole.log(extglob.contains('aa/bb/cc', '*b'));\n//=> true\nconsole.log(extglob.contains('aa/bb/cc', '*d'));\n//=> false\n```\n\n### [.matcher](index.js#L184)\n\nTakes an extglob pattern and returns a matcher function. The returned function takes the string to match as its only argument.\n\n**Params**\n\n* `pattern` **{String}**: Extglob pattern\n* `options` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nvar isMatch = extglob.matcher('*.!(*a)');\n\nconsole.log(isMatch('a.a'));\n//=> false\nconsole.log(isMatch('a.b'));\n//=> true\n```\n\n### [.create](index.js#L214)\n\nConvert the given `extglob` pattern into a regex-compatible string. Returns an object with the compiled result and the parsed AST.\n\n**Params**\n\n* `str` **{String}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nconsole.log(extglob.create('*.!(*a)').output);\n//=> '(?!\\\\.)[^/]*?\\\\.(?!(?!\\\\.)[^/]*?a\\\\b).*?'\n```\n\n### [.capture](index.js#L248)\n\nReturns an array of matches captured by `pattern` in `string`, or `null` if the pattern did not match.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `string` **{String}**: String to match\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns an array of captures if the string matches the glob pattern, otherwise `null`.\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nextglob.capture(pattern, string[, options]);\n\nconsole.log(extglob.capture('test/*.js', 'test/foo.js'));\n//=> ['foo']\nconsole.log(extglob.capture('test/*.js', 'foo/bar.css'));\n//=> null\n```\n\n### [.makeRe](index.js#L281)\n\nCreate a regular expression from the given `pattern` and `options`.\n\n**Params**\n\n* `pattern` **{String}**: The pattern to convert to regex.\n* `options` **{Object}**\n* `returns` **{RegExp}**\n\n**Example**\n\n```js\nvar extglob = require('extglob');\nvar re = extglob.makeRe('*.!(*a)');\nconsole.log(re);\n//=> /^[^\\/]*?\\.(?![^\\/]*?a)[^\\/]*?$/\n```\n\n## Options\n\nAvailable options are based on the options from Bash (and the option names used in bash).\n\n### options.nullglob\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nWhen enabled, the pattern itself will be returned when no matches are found.\n\n### options.nonull\n\nAlias for [options.nullglob](#optionsnullglob), included for parity with minimatch.\n\n### options.cache\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nFunctions are memoized based on the given glob patterns and options. Disable memoization by setting `options.cache` to false.\n\n### options.failglob\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nThrow an error is no matches are found.\n\n## Benchmarks\n\nLast run on December 21, 2017\n\n```sh\n# negation-nested (49 bytes)\n  extglob x 2,228,255 ops/sec ±0.98% (89 runs sampled)\n  minimatch x 207,875 ops/sec ±0.61% (91 runs sampled)\n\n  fastest is extglob (by 1072% avg)\n\n# negation-simple (43 bytes)\n  extglob x 2,205,668 ops/sec ±1.00% (91 runs sampled)\n  minimatch x 311,923 ops/sec ±1.25% (91 runs sampled)\n\n  fastest is extglob (by 707% avg)\n\n# range-false (57 bytes)\n  extglob x 2,263,877 ops/sec ±0.40% (94 runs sampled)\n  minimatch x 271,372 ops/sec ±1.02% (91 runs sampled)\n\n  fastest is extglob (by 834% avg)\n\n# range-true (56 bytes)\n  extglob x 2,161,891 ops/sec ±0.41% (92 runs sampled)\n  minimatch x 268,265 ops/sec ±1.17% (91 runs sampled)\n\n  fastest is extglob (by 806% avg)\n\n# star-simple (46 bytes)\n  extglob x 2,211,081 ops/sec ±0.49% (92 runs sampled)\n  minimatch x 343,319 ops/sec ±0.59% (91 runs sampled)\n\n  fastest is extglob (by 644% avg)\n\n```\n\n## Differences from Bash\n\nThis library has complete parity with Bash 4.3 with only a couple of minor differences.\n\n* In some cases Bash returns true if the given string \"contains\" the pattern, whereas this library returns true if the string is an exact match for the pattern. You can relax this by setting `options.contains` to true.\n* This library is more accurate than Bash and thus does not fail some of the tests that Bash 4.3 still lists as failing in their unit tests\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [braces](https://www.npmjs.com/package/braces): Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support… [more](https://github.com/micromatch/braces) | [homepage](https://github.com/micromatch/braces \"Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.\")\n* [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/jonschlinkert/expand-brackets \"Expand POSIX bracket expressions (character classes) in glob patterns.\")\n* [expand-range](https://www.npmjs.com/package/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. Used… [more](https://github.com/jonschlinkert/expand-range) | [homepage](https://github.com/jonschlinkert/expand-range \"Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. Used by [micromatch].\")\n* [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/micromatch/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 49 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [isiahmeadows](https://github.com/isiahmeadows) |\n| 1 | [doowb](https://github.com/doowb) |\n| 1 | [devongovett](https://github.com/devongovett) |\n| 1 | [mjbvz](https://github.com/mjbvz) |\n| 1 | [shinnn](https://github.com/shinnn) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on December 21, 2017._\n\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\"  class=\"footnote-item\">`@` isn \"'t a RegEx character.\" <a href=\"#fnref1\" class=\"footnote-backref\">↩</a>\n\n</li>\n</ol>\n</section>",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/package.json:    "helper-changelog": "^0.3.0",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/package.json:      "helper-changelog"
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/package.json:  "readme": "# expand-brackets [![NPM version](https://img.shields.io/npm/v/expand-brackets.svg?style=flat)](https://www.npmjs.com/package/expand-brackets) [![NPM monthly downloads](https://img.shields.io/npm/dm/expand-brackets.svg?style=flat)](https://npmjs.org/package/expand-brackets)  [![NPM total downloads](https://img.shields.io/npm/dt/expand-brackets.svg?style=flat)](https://npmjs.org/package/expand-brackets) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/expand-brackets.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/expand-brackets) [![Windows Build Status](https://img.shields.io/appveyor/ci/jonschlinkert/expand-brackets.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/jonschlinkert/expand-brackets)\n\n> Expand POSIX bracket expressions (character classes) in glob patterns.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save expand-brackets\n```\n\n## Usage\n\n```js\nvar brackets = require('expand-brackets');\nbrackets(string[, options]);\n```\n\n**Params**\n\nThe main export is a function that takes the following parameters:\n\n* `pattern` **{String}**: the pattern to convert\n* `options` **{Object}**: optionally supply an options object\n* `returns` **{String}**: returns a string that can be used to create a regex\n\n**Example**\n\n```js\nconsole.log(brackets('[![:lower:]]'));\n//=> '[^a-z]'\n```\n\n## API\n\n### [brackets](index.js#L29)\n\nParses the given POSIX character class `pattern` and returns a\nstring that can be used for creating regular expressions for matching.\n\n**Params**\n\n* `pattern` **{String}**\n* `options` **{Object}**\n* `returns` **{Object}**\n\n### [.match](index.js#L54)\n\nTakes an array of strings and a POSIX character class pattern, and returns a new array with only the strings that matched the pattern.\n\n**Example**\n\n```js\nvar brackets = require('expand-brackets');\nconsole.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));\n//=> ['a']\n\nconsole.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));\n//=> ['a', 'ab']\n```\n\n**Params**\n\n* `arr` **{Array}**: Array of strings to match\n* `pattern` **{String}**: POSIX character class pattern(s)\n* `options` **{Object}**\n* `returns` **{Array}**\n\n### [.isMatch](index.js#L100)\n\nReturns true if the specified `string` matches the given brackets `pattern`.\n\n**Example**\n\n```js\nvar brackets = require('expand-brackets');\n\nconsole.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));\n//=> true\nconsole.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));\n//=> false\n```\n\n**Params**\n\n* `string` **{String}**: String to match\n* `pattern` **{String}**: Poxis pattern\n* `options` **{String}**\n* `returns` **{Boolean}**\n\n### [.matcher](index.js#L123)\n\nTakes a POSIX character class pattern and returns a matcher function. The returned function takes the string to match as its only argument.\n\n**Example**\n\n```js\nvar brackets = require('expand-brackets');\nvar isMatch = brackets.matcher('[[:lower:]].[[:upper:]]');\n\nconsole.log(isMatch('a.a'));\n//=> false\nconsole.log(isMatch('a.A'));\n//=> true\n```\n\n**Params**\n\n* `pattern` **{String}**: Poxis pattern\n* `options` **{String}**\n* `returns` **{Boolean}**\n\n### [.makeRe](index.js#L145)\n\nCreate a regular expression from the given `pattern`.\n\n**Example**\n\n```js\nvar brackets = require('expand-brackets');\nvar re = brackets.makeRe('[[:alpha:]]');\nconsole.log(re);\n//=> /^(?:[a-zA-Z])$/\n```\n\n**Params**\n\n* `pattern` **{String}**: The pattern to convert to regex.\n* `options` **{Object}**\n* `returns` **{RegExp}**\n\n### [.create](index.js#L187)\n\nParses the given POSIX character class `pattern` and returns an object with the compiled `output` and optional source `map`.\n\n**Example**\n\n```js\nvar brackets = require('expand-brackets');\nconsole.log(brackets('[[:alpha:]]'));\n// { options: { source: 'string' },\n//   input: '[[:alpha:]]',\n//   state: {},\n//   compilers:\n//    { eos: [Function],\n//      noop: [Function],\n//      bos: [Function],\n//      not: [Function],\n//      escape: [Function],\n//      text: [Function],\n//      posix: [Function],\n//      bracket: [Function],\n//      'bracket.open': [Function],\n//      'bracket.inner': [Function],\n//      'bracket.literal': [Function],\n//      'bracket.close': [Function] },\n//   output: '[a-zA-Z]',\n//   ast:\n//    { type: 'root',\n//      errors: [],\n//      nodes: [ [Object], [Object], [Object] ] },\n//   parsingErrors: [] }\n```\n\n**Params**\n\n* `pattern` **{String}**\n* `options` **{Object}**\n* `returns` **{Object}**\n\n## Options\n\n### options.sourcemap\n\nGenerate a source map for the given pattern.\n\n**Example**\n\n```js\nvar res = brackets('[:alpha:]', {sourcemap: true});\n\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'brackets' ],\n//   names: [],\n//   mappings: 'AAAA,MAAS',\n//   sourcesContent: [ '[:alpha:]' ] }\n```\n\n### POSIX Character classes\n\nThe following named POSIX bracket expressions are supported:\n\n* `[:alnum:]`: Alphanumeric characters (`a-zA-Z0-9]`)\n* `[:alpha:]`: Alphabetic characters (`a-zA-Z]`)\n* `[:blank:]`: Space and tab (`[ t]`)\n* `[:digit:]`: Digits (`[0-9]`)\n* `[:lower:]`: Lowercase letters (`[a-z]`)\n* `[:punct:]`: Punctuation and symbols. (`[!\"#$%&'()*+, -./:;<=>?@ [\\]^_``{|}~]`)\n* `[:upper:]`: Uppercase letters (`[A-Z]`)\n* `[:word:]`: Word characters (letters, numbers and underscores) (`[A-Za-z0-9_]`)\n* `[:xdigit:]`: Hexadecimal digits (`[A-Fa-f0-9]`)\n\nSee [posix-character-classes](https://github.com/jonschlinkert/posix-character-classes) for more details.\n\n**Not supported**\n\n* [equivalence classes](https://www.gnu.org/software/gawk/manual/html_node/Bracket-Expressions.html) are not supported\n* [POSIX.2 collating symbols](https://www.gnu.org/software/gawk/manual/html_node/Bracket-Expressions.html) are not supported\n\n## Changelog\n\n### v2.0.0\n\n**Breaking changes**\n\n* The main export now returns the compiled string, instead of the object returned from the compiler\n\n**Added features**\n\n* Adds a `.create` method to do what the main function did before v2.0.0\n\n### v0.2.0\n\nIn addition to performance and matching improvements, the v0.2.0 refactor adds complete POSIX character class support, with the exception of equivalence classes and POSIX.2 collating symbols which are not relevant to node.js usage.\n\n**Added features**\n\n* parser is exposed, so that expand-brackets parsers can be used by upstream parsers (like [micromatch](https://github.com/jonschlinkert/micromatch))\n* compiler is exposed, so that expand-brackets compilers can be used by upstream compilers\n* source maps\n\n**source map example**\n\n```js\nvar brackets = require('expand-brackets');\nvar res = brackets('[:alpha:]');\nconsole.log(res.map);\n\n{ version: 3,\n     sources: [ 'brackets' ],\n     names: [],\n     mappings: 'AAAA,MAAS',\n     sourcesContent: [ '[:alpha:]' ] }\n```\n\n## About\n\n### Related projects\n\n* [braces](https://www.npmjs.com/package/braces): Fast, comprehensive, bash-like brace expansion implemented in JavaScript. Complete support for the Bash 4.3 braces… [more](https://github.com/jonschlinkert/braces) | [homepage](https://github.com/jonschlinkert/braces \"Fast, comprehensive, bash-like brace expansion implemented in JavaScript. Complete support for the Bash 4.3 braces specification, without sacrificing speed.\")\n* [extglob](https://www.npmjs.com/package/extglob): Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob… [more](https://github.com/jonschlinkert/extglob) | [homepage](https://github.com/jonschlinkert/extglob \"Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n* [nanomatch](https://www.npmjs.com/package/nanomatch): Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash… [more](https://github.com/jonschlinkert/nanomatch) | [homepage](https://github.com/jonschlinkert/nanomatch \"Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash 4.3 wildcard support only (no support for exglobs, posix brackets or braces)\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor**<br/> | \n| --- | --- |\n| 66 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [MartinKolarik](https://github.com/MartinKolarik) |\n| 2 | [es128](https://github.com/es128) |\n| 1 | [eush77](https://github.com/eush77) |\n\n### Building docs\n\n_(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/expand-brackets/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.2.0, on December 12, 2016._",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/package.json:    "log",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:  change the behavior of the debug logging:
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:var log = debug('app:log');
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:// set this namespace to log via console.log
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:log('goes to stdout');
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:// overrides all per-namespace log settings
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:debug.log = console.info.bind(console);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js:exports.log = log;
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js:function log() {
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js:    && console.log
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/node.js:exports.log = log;
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/node.js:function log() {
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/debug.js: * Previous log timestamp.
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/karma.conf.js:    // level of logging
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/debug/component.json:    "log",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://badge.fury.io/js/define-property.svg)](http://badge.fury.io/js/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i define-property --save\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## Related projects\n\n* [delegate-object](https://www.npmjs.com/package/delegate-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/delegate-object) | [homepage](https://github.com/doowb/delegate-object)\n* [forward-object](https://www.npmjs.com/package/forward-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/forward-object) | [homepage](https://github.com/doowb/forward-object)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n* [mixin-object](https://www.npmjs.com/package/mixin-object): Mixin the own and inherited properties of other objects onto the first object. Pass an… [more](https://www.npmjs.com/package/mixin-object) | [homepage](https://github.com/jonschlinkert/mixin-object)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/define-property/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on August 31, 2015._\n",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/package.json:  "readme": "# kind-of [![NPM version](https://img.shields.io/npm/v/kind-of.svg?style=flat)](https://www.npmjs.com/package/kind-of) [![NPM monthly downloads](https://img.shields.io/npm/dm/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![NPM total downloads](https://img.shields.io/npm/dt/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/kind-of.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/kind-of)\n\n> Get the native type of a value.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save kind-of\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install kind-of --save\n```\n\n## Why use this?\n\n1. [it's fast](#benchmarks) | [optimizations](#optimizations)\n2. [better type checking](#better-type-checking)\n\n## Usage\n\n> es5, browser and es6 ready\n\n```js\nvar kindOf = require('kind-of');\n\nkindOf(undefined);\n//=> 'undefined'\n\nkindOf(null);\n//=> 'null'\n\nkindOf(true);\n//=> 'boolean'\n\nkindOf(false);\n//=> 'boolean'\n\nkindOf(new Boolean(true));\n//=> 'boolean'\n\nkindOf(new Buffer(''));\n//=> 'buffer'\n\nkindOf(42);\n//=> 'number'\n\nkindOf(new Number(42));\n//=> 'number'\n\nkindOf('str');\n//=> 'string'\n\nkindOf(new String('str'));\n//=> 'string'\n\nkindOf(arguments);\n//=> 'arguments'\n\nkindOf({});\n//=> 'object'\n\nkindOf(Object.create(null));\n//=> 'object'\n\nkindOf(new Test());\n//=> 'object'\n\nkindOf(new Date());\n//=> 'date'\n\nkindOf([]);\n//=> 'array'\n\nkindOf([1, 2, 3]);\n//=> 'array'\n\nkindOf(new Array());\n//=> 'array'\n\nkindOf(/foo/);\n//=> 'regexp'\n\nkindOf(new RegExp('foo'));\n//=> 'regexp'\n\nkindOf(function () {});\n//=> 'function'\n\nkindOf(function * () {});\n//=> 'function'\n\nkindOf(new Function());\n//=> 'function'\n\nkindOf(new Map());\n//=> 'map'\n\nkindOf(new WeakMap());\n//=> 'weakmap'\n\nkindOf(new Set());\n//=> 'set'\n\nkindOf(new WeakSet());\n//=> 'weakset'\n\nkindOf(Symbol('str'));\n//=> 'symbol'\n\nkindOf(new Int8Array());\n//=> 'int8array'\n\nkindOf(new Uint8Array());\n//=> 'uint8array'\n\nkindOf(new Uint8ClampedArray());\n//=> 'uint8clampedarray'\n\nkindOf(new Int16Array());\n//=> 'int16array'\n\nkindOf(new Uint16Array());\n//=> 'uint16array'\n\nkindOf(new Int32Array());\n//=> 'int32array'\n\nkindOf(new Uint32Array());\n//=> 'uint32array'\n\nkindOf(new Float32Array());\n//=> 'float32array'\n\nkindOf(new Float64Array());\n//=> 'float64array'\n```\n\n## Release history\n\n### v4.0.0\n\n**Added**\n\n* `promise` support\n\n### v5.0.0\n\n**Added**\n\n* `Set Iterator` and `Map Iterator` support\n\n**Fixed**\n\n* Now returns `generatorfunction` for generator functions\n\n## Benchmarks\n\nBenchmarked against [typeof](http://github.com/CodingFu/typeof) and [type-of](https://github.com/ForbesLindesay/type-of).\nNote that performaces is slower for es6 features `Map`, `WeakMap`, `Set` and `WeakSet`.\n\n```bash\n#1: array\n  current x 23,329,397 ops/sec ±0.82% (94 runs sampled)\n  lib-type-of x 4,170,273 ops/sec ±0.55% (94 runs sampled)\n  lib-typeof x 9,686,935 ops/sec ±0.59% (98 runs sampled)\n\n#2: boolean\n  current x 27,197,115 ops/sec ±0.85% (94 runs sampled)\n  lib-type-of x 3,145,791 ops/sec ±0.73% (97 runs sampled)\n  lib-typeof x 9,199,562 ops/sec ±0.44% (99 runs sampled)\n\n#3: date\n  current x 20,190,117 ops/sec ±0.86% (92 runs sampled)\n  lib-type-of x 5,166,970 ops/sec ±0.74% (94 runs sampled)\n  lib-typeof x 9,610,821 ops/sec ±0.50% (96 runs sampled)\n\n#4: function\n  current x 23,855,460 ops/sec ±0.60% (97 runs sampled)\n  lib-type-of x 5,667,740 ops/sec ±0.54% (100 runs sampled)\n  lib-typeof x 10,010,644 ops/sec ±0.44% (100 runs sampled)\n\n#5: null\n  current x 27,061,047 ops/sec ±0.97% (96 runs sampled)\n  lib-type-of x 13,965,573 ops/sec ±0.62% (97 runs sampled)\n  lib-typeof x 8,460,194 ops/sec ±0.61% (97 runs sampled)\n\n#6: number\n  current x 25,075,682 ops/sec ±0.53% (99 runs sampled)\n  lib-type-of x 2,266,405 ops/sec ±0.41% (98 runs sampled)\n  lib-typeof x 9,821,481 ops/sec ±0.45% (99 runs sampled)\n\n#7: object\n  current x 3,348,980 ops/sec ±0.49% (99 runs sampled)\n  lib-type-of x 3,245,138 ops/sec ±0.60% (94 runs sampled)\n  lib-typeof x 9,262,952 ops/sec ±0.59% (99 runs sampled)\n\n#8: regex\n  current x 21,284,827 ops/sec ±0.72% (96 runs sampled)\n  lib-type-of x 4,689,241 ops/sec ±0.43% (100 runs sampled)\n  lib-typeof x 8,957,593 ops/sec ±0.62% (98 runs sampled)\n\n#9: string\n  current x 25,379,234 ops/sec ±0.58% (96 runs sampled)\n  lib-type-of x 3,635,148 ops/sec ±0.76% (93 runs sampled)\n  lib-typeof x 9,494,134 ops/sec ±0.49% (98 runs sampled)\n\n#10: undef\n  current x 27,459,221 ops/sec ±1.01% (93 runs sampled)\n  lib-type-of x 14,360,433 ops/sec ±0.52% (99 runs sampled)\n  lib-typeof x 23,202,868 ops/sec ±0.59% (94 runs sampled)\n\n```\n\n## Optimizations\n\nIn 7 out of 8 cases, this library is 2x-10x faster than other top libraries included in the benchmarks. There are a few things that lead to this performance advantage, none of them hard and fast rules, but all of them simple and repeatable in almost any code library:\n\n1. Optimize around the fastest and most common use cases first. Of course, this will change from project-to-project, but I took some time to understand how and why `typeof` checks were being used in my own libraries and other libraries I use a lot.\n2. Optimize around bottlenecks - In other words, the order in which conditionals are implemented is significant, because each check is only as fast as the failing checks that came before it. Here, the biggest bottleneck by far is checking for plain objects (an object that was created by the `Object` constructor). I opted to make this check happen by process of elimination rather than brute force up front (e.g. by using something like `val.constructor.name`), so that every other type check would not be penalized it.\n3. Don't do uneccessary processing - why do `.slice(8, -1).toLowerCase();` just to get the word `regex`? It's much faster to do `if (type === '[object RegExp]') return 'regex'`\n4. There is no reason to make the code in a microlib as terse as possible, just to win points for making it shorter. It's always better to favor performant code over terse code. You will always only be using a single `require()` statement to use the library anyway, regardless of how the code is written.\n\n## Better type checking\n\nkind-of is more correct than other type checking libs I've looked at. For example, here are some differing results from other popular libs:\n\n### [typeof](https://github.com/CodingFu/typeof) lib\n\nIncorrectly tests instances of custom constructors (pretty common):\n\n```js\nvar typeOf = require('typeof');\nfunction Test() {}\nconsole.log(typeOf(new Test()));\n//=> 'test'\n```\n\nReturns `object` instead of `arguments`:\n\n```js\nfunction foo() {\n  console.log(typeOf(arguments)) //=> 'object'\n}\nfoo();\n```\n\n### [type-of](https://github.com/ForbesLindesay/type-of) lib\n\nIncorrectly returns `object` for generator functions, buffers, `Map`, `Set`, `WeakMap` and `WeakSet`:\n\n```js\nfunction * foo() {}\nconsole.log(typeOf(foo));\n//=> 'object'\nconsole.log(typeOf(new Buffer('')));\n//=> 'object'\nconsole.log(typeOf(new Map()));\n//=> 'object'\nconsole.log(typeOf(new Set()));\n//=> 'object'\nconsole.log(typeOf(new WeakMap()));\n//=> 'object'\nconsole.log(typeOf(new WeakSet()));\n//=> 'object'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n<details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n<details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n<details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-number](https://www.npmjs.com/package/is-number): Returns true if the value is a number. comprehensive tests. | [homepage](https://github.com/jonschlinkert/is-number \"Returns true if the value is a number. comprehensive tests.\")\n* [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive.  | [homepage](https://github.com/jonschlinkert/is-primitive \"Returns `true` if the value is a primitive. \")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 82 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 3 | [aretecode](https://github.com/aretecode) |\n| 2 | [miguelmota](https://github.com/miguelmota) |\n| 1 | [dtothefp](https://github.com/dtothefp) |\n| 1 | [ksheedlo](https://github.com/ksheedlo) |\n| 1 | [pdehaan](https://github.com/pdehaan) |\n| 1 | [laggingreflex](https://github.com/laggingreflex) |\n| 1 | [charlike](https://github.com/charlike) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on October 13, 2017._",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Test()));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:  console.log(typeOf(arguments)) //=> 'object'
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(foo));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Buffer('')));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Map()));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Set()));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakMap()));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakSet()));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg)](https://www.npmjs.com/package/is-data-descriptor) [![Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm i is-data-descriptor --save\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## Related projects\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor)\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://www.npmjs.com/package/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor)\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-data-descriptor/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 [Jon Schlinkert](https://github.com/jonschlinkert)\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb) on December 28, 2015._",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/posix-character-classes/package.json:  "readme": "# posix-character-classes [![NPM version](https://img.shields.io/npm/v/posix-character-classes.svg?style=flat)](https://www.npmjs.com/package/posix-character-classes) [![NPM monthly downloads](https://img.shields.io/npm/dm/posix-character-classes.svg?style=flat)](https://npmjs.org/package/posix-character-classes)  [![NPM total downloads](https://img.shields.io/npm/dt/posix-character-classes.svg?style=flat)](https://npmjs.org/package/posix-character-classes) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/posix-character-classes.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/posix-character-classes)\n\n> POSIX character classes for creating regular expressions.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save posix-character-classes\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add posix-character-classes\n```\n\n## Usage\n\n```js\nvar posix = require('posix-character-classes');\nconsole.log(posix.alpha);\n//=> 'A-Za-z'\n```\n\n## POSIX Character classes\n\nThe POSIX standard supports the following classes or categories of charactersh (note that classes must be defined within brackets)<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>:\n\n| **POSIX class** | **Equivalent to** | **Matches** | \n| --- | --- | --- |\n| `[:alnum:]` | `[A-Za-z0-9]` | digits, uppercase and lowercase letters |\n| `[:alpha:]` | `[A-Za-z]` | upper- and lowercase letters |\n| `[:ascii:]` | `[\\x00-\\x7F]` | ASCII characters |\n| `[:blank:]` | `[ \\t]` | space and TAB characters only |\n| `[:cntrl:]` | `[\\x00-\\x1F\\x7F]` | Control characters |\n| `[:digit:]` | `[0-9]` | digits |\n| `[:graph:]` | `[^[:cntrl:]]` | graphic characters (all characters which have graphic representation) |\n| `[:lower:]` | `[a-z]` | lowercase letters |\n| `[:print:]` | `[[:graph] ]` | graphic characters and space |\n| `[:punct:]` | ``[-!\"#$%&'()*+,./:;<=>?@[]^_`{ | }~]`` | all punctuation characters (all graphic characters except letters and digits) |\n| `[:space:]` | `[ \\t\\n\\r\\f\\v]` | all blank (whitespace) characters, including spaces, tabs, new lines, carriage returns, form feeds, and vertical tabs |\n| `[:upper:]` | `[A-Z]` | uppercase letters |\n| `[:word:]` | `[A-Za-z0-9_]` | word characters |\n| `[:xdigit:]` | `[0-9A-Fa-f]` | hexadecimal digits |\n\n## Examples\n\n* `a[[:digit:]]b` matches `a0b`, `a1b`, ..., `a9b`.\n* `a[:digit:]b` is invalid, character classes must be enclosed in brackets\n* `[[:digit:]abc]` matches any digit, as well as `a`, `b`, and `c`.\n* `[abc[:digit:]]` is the same as the previous, matching any digit, as well as `a`, `b`, and `c`\n* `[^ABZ[:lower:]]` matches any character except lowercase letters, `A`, `B`, and `Z`.\n\n## About\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 20, 2017._\n\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\"  class=\"footnote-item\">table and examples are based on the WikiBooks page for [Regular Expressions/POSIX Basic Regular Expressions](https://en.wikibooks.org/wiki/Regular_Expressions/POSIX_Basic_Regular_Expressions), which is available under the [Creative Commons Attribution-ShareAlike License](https://creativecommons.org/licenses/by-sa/3.0/). <a href=\"#fnref1\" class=\"footnote-backref\">↩</a>\n\n</li>\n</ol>\n</section>",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/node_modules/posix-character-classes/README.md:console.log(posix.alpha);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets('[![:lower:]]'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(isMatch('a.a'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(isMatch('a.A'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(re);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(brackets('[[:alpha:]]'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(res.map);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:## Changelog
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/README.md:console.log(res.map);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(isMatch('a.a'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(isMatch('a.A'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(re);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/expand-brackets/index.js: * console.log(brackets('[[:alpha:]]'));
./lib/node_modules/micromatch/node_modules/extglob/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://img.shields.io/npm/v/define-property.svg?style=flat)](https://www.npmjs.com/package/define-property) [![NPM monthly downloads](https://img.shields.io/npm/dm/define-property.svg?style=flat)](https://npmjs.org/package/define-property)  [![NPM total downloads](https://img.shields.io/npm/dt/define-property.svg?style=flat)](https://npmjs.org/package/define-property) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/define-property.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save define-property\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add define-property\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## About\n\n### Related projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target… [more](https://github.com/jonschlinkert/assign-deep) | [homepage](https://github.com/jonschlinkert/assign-deep \"Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target (first) object.\")\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow \"Extend an object with the properties of additional objects. node.js/javascript util.\")\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep \"Recursively merge values in a javascript object.\")\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep \"Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 20, 2017._",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg?style=flat)](https://www.npmjs.com/package/is-data-descriptor) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![NPM total downloads](https://img.shields.io/npm/dt/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-data-descriptor\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor \"Returns true if a value has the characteristics of a valid JavaScript accessor descriptor.\")\n* [is-data-descriptor](https://www.npmjs.com/package/is-data-descriptor): Returns true if a value has the characteristics of a valid JavaScript data descriptor. | [homepage](https://github.com/jonschlinkert/is-data-descriptor \"Returns true if a value has the characteristics of a valid JavaScript data descriptor.\")\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://github.com/jonschlinkert/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor \"Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for data descriptors and accessor descriptors.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 21 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [realityking](https://github.com/realityking) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 01, 2017._",
./lib/node_modules/micromatch/node_modules/extglob/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/define-property/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/extglob/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob('!(xyz)*.js'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob('*.!(*a)'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.match(['a.a', 'a.b', 'a.c'], '*.!(*a)'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.isMatch('a.a', '*.!(*a)'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.isMatch('a.b', '*.!(*a)'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.contains('aa/bb/cc', '*b'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.contains('aa/bb/cc', '*d'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(isMatch('a.a'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(isMatch('a.b'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.create('*.!(*a)').output);
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.capture('test/*.js', 'test/foo.js'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(extglob.capture('test/*.js', 'foo/bar.css'));
./lib/node_modules/micromatch/node_modules/extglob/README.md:console.log(re);
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob('*.!(*a)'));
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.match(['a.a', 'a.b', 'a.c'], '*.!(*a)'));
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.isMatch('a.a', '*.!(*a)'));
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.isMatch('a.b', '*.!(*a)'));
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.contains('aa/bb/cc', '*b'));
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.contains('aa/bb/cc', '*d'));
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(isMatch('a.a'));
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(isMatch('a.b'));
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.create('*.!(*a)').output);
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.capture('test/*.js', 'test/foo.js'));
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(extglob.capture('test/*.js', 'foo/bar.css'));
./lib/node_modules/micromatch/node_modules/extglob/index.js: * console.log(re);
./lib/node_modules/micromatch/node_modules/braces/package.json:  "readme": "# braces [![NPM version](https://img.shields.io/npm/v/braces.svg?style=flat)](https://www.npmjs.com/package/braces) [![NPM monthly downloads](https://img.shields.io/npm/dm/braces.svg?style=flat)](https://npmjs.org/package/braces) [![NPM total downloads](https://img.shields.io/npm/dt/braces.svg?style=flat)](https://npmjs.org/package/braces) [![Linux Build Status](https://img.shields.io/travis/micromatch/braces.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/braces) [![Windows Build Status](https://img.shields.io/appveyor/ci/micromatch/braces.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/micromatch/braces)\n\n> Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save braces\n```\n\n## Why use braces?\n\nBrace patterns are great for matching ranges. Users (and implementors) shouldn't have to think about whether or not they will break their application (or yours) from accidentally defining an aggressive brace pattern. _Braces is the only library that offers a [solution to this problem](#performance)_.\n\n* **Safe(r)**: Braces isn't vulnerable to DoS attacks like [brace-expansion](https://github.com/juliangruber/brace-expansion), [minimatch](https://github.com/isaacs/minimatch) and [multimatch](https://github.com/sindresorhus/multimatch) (a different bug than the [other regex DoS bug](https://medium.com/node-security/minimatch-redos-vulnerability-590da24e6d3c#.jew0b6mpc)).\n* **Accurate**: complete support for the [Bash 4.3 Brace Expansion](www.gnu.org/software/bash/) specification (passes all of the Bash braces tests)\n* **[fast and performant](#benchmarks)**: Starts fast, runs fast and [scales well](#performance) as patterns increase in complexity.\n* **Organized code base**: with parser and compiler that are eas(y|ier) to maintain and update when edge cases crop up.\n* **Well-tested**: thousands of test assertions. Passes 100% of the [minimatch](https://github.com/isaacs/minimatch) and [brace-expansion](https://github.com/juliangruber/brace-expansion) unit tests as well (as of the writing of this).\n\n## Usage\n\nThe main export is a function that takes one or more brace `patterns` and `options`.\n\n```js\nvar braces = require('braces');\nbraces(pattern[, options]);\n```\n\nBy default, braces returns an optimized regex-source string. To get an array of brace patterns, use `brace.expand()`.\n\nThe following section explains the difference in more detail. _(If you're curious about \"why\" braces does this by default, see [brace matching pitfalls](#brace-matching-pitfalls)_.\n\n### Optimized vs. expanded braces\n\n**Optimized**\n\nBy default, patterns are optimized for regex and matching:\n\n```js\nconsole.log(braces('a/{x,y,z}/b'));\n//=> ['a/(x|y|z)/b']\n```\n\n**Expanded**\n\nTo expand patterns the same way as Bash or [minimatch](https://github.com/isaacs/minimatch), use the [.expand](#expand) method:\n\n```js\nconsole.log(braces.expand('a/{x,y,z}/b'));\n//=> ['a/x/b', 'a/y/b', 'a/z/b']\n```\n\nOr use [options.expand](#optionsexpand):\n\n```js\nconsole.log(braces('a/{x,y,z}/b', {expand: true}));\n//=> ['a/x/b', 'a/y/b', 'a/z/b']\n```\n\n## Features\n\n* [lists](#lists): Supports \"lists\": `a/{b,c}/d` => `['a/b/d', 'a/c/d']`\n* [sequences](#sequences): Supports alphabetical or numerical \"sequences\" (ranges): `{1..3}` => `['1', '2', '3']`\n* [steps](#steps): Supports \"steps\" or increments: `{2..10..2}` => `['2', '4', '6', '8', '10']`\n* [escaping](#escaping)\n* [options](#options)\n\n### Lists\n\nUses [fill-range](https://github.com/jonschlinkert/fill-range) for expanding alphabetical or numeric lists:\n\n```js\nconsole.log(braces('a/{foo,bar,baz}/*.js'));\n//=> ['a/(foo|bar|baz)/*.js']\n\nconsole.log(braces.expand('a/{foo,bar,baz}/*.js'));\n//=> ['a/foo/*.js', 'a/bar/*.js', 'a/baz/*.js']\n```\n\n### Sequences\n\nUses [fill-range](https://github.com/jonschlinkert/fill-range) for expanding alphabetical or numeric ranges (bash \"sequences\"):\n\n```js\nconsole.log(braces.expand('{1..3}'));     // ['1', '2', '3']\nconsole.log(braces.expand('a{01..03}b')); // ['a01b', 'a02b', 'a03b']\nconsole.log(braces.expand('a{1..3}b'));   // ['a1b', 'a2b', 'a3b']\nconsole.log(braces.expand('{a..c}'));     // ['a', 'b', 'c']\nconsole.log(braces.expand('foo/{a..c}')); // ['foo/a', 'foo/b', 'foo/c']\n\n// supports padded ranges\nconsole.log(braces('a{01..03}b'));   //=> [ 'a(0[1-3])b' ]\nconsole.log(braces('a{001..300}b')); //=> [ 'a(0{2}[1-9]|0[1-9][0-9]|[12][0-9]{2}|300)b' ]\n```\n\n### Steps\n\nSteps, or increments, may be used with ranges:\n\n```js\nconsole.log(braces.expand('{2..10..2}'));\n//=> ['2', '4', '6', '8', '10']\n\nconsole.log(braces('{2..10..2}'));\n//=> ['(2|4|6|8|10)']\n```\n\nWhen the [.optimize](#optimize) method is used, or [options.optimize](#optionsoptimize) is set to true, sequences are passed to [to-regex-range](https://github.com/jonschlinkert/to-regex-range) for expansion.\n\n### Nesting\n\nBrace patterns may be nested. The results of each expanded string are not sorted, and left to right order is preserved.\n\n**\"Expanded\" braces**\n\n```js\nconsole.log(braces.expand('a{b,c,/{x,y}}/e'));\n//=> ['ab/e', 'ac/e', 'a/x/e', 'a/y/e']\n\nconsole.log(braces.expand('a/{x,{1..5},y}/c'));\n//=> ['a/x/c', 'a/1/c', 'a/2/c', 'a/3/c', 'a/4/c', 'a/5/c', 'a/y/c']\n```\n\n**\"Optimized\" braces**\n\n```js\nconsole.log(braces('a{b,c,/{x,y}}/e'));\n//=> ['a(b|c|/(x|y))/e']\n\nconsole.log(braces('a/{x,{1..5},y}/c'));\n//=> ['a/(x|([1-5])|y)/c']\n```\n\n### Escaping\n\n**Escaping braces**\n\nA brace pattern will not be expanded or evaluted if _either the opening or closing brace is escaped_:\n\n```js\nconsole.log(braces.expand('a\\\\{d,c,b}e'));\n//=> ['a{d,c,b}e']\n\nconsole.log(braces.expand('a{d,c,b\\\\}e'));\n//=> ['a{d,c,b}e']\n```\n\n**Escaping commas**\n\nCommas inside braces may also be escaped:\n\n```js\nconsole.log(braces.expand('a{b\\\\,c}d'));\n//=> ['a{b,c}d']\n\nconsole.log(braces.expand('a{d\\\\,c,b}e'));\n//=> ['ad,ce', 'abe']\n```\n\n**Single items**\n\nFollowing bash conventions, a brace pattern is also not expanded when it contains a single character:\n\n```js\nconsole.log(braces.expand('a{b}c'));\n//=> ['a{b}c']\n```\n\n## Options\n\n### options.maxLength\n\n**Type**: `Number`\n\n**Default**: `65,536`\n\n**Description**: Limit the length of the input string. Useful when the input string is generated or your application allows users to pass a string, et cetera.\n\n```js\nconsole.log(braces('a/{b,c}/d', { maxLength: 3 }));  //=> throws an error\n```\n\n### options.expand\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Description**: Generate an \"expanded\" brace pattern (this option is unncessary with the `.expand` method, which does the same thing).\n\n```js\nconsole.log(braces('a/{b,c}/d', {expand: true}));\n//=> [ 'a/b/d', 'a/c/d' ]\n```\n\n### options.optimize\n\n**Type**: `Boolean`\n\n**Default**: `true`\n\n**Description**: Enabled by default.\n\n```js\nconsole.log(braces('a/{b,c}/d'));\n//=> [ 'a/(b|c)/d' ]\n```\n\n### options.nodupes\n\n**Type**: `Boolean`\n\n**Default**: `true`\n\n**Description**: Duplicates are removed by default. To keep duplicates, pass `{nodupes: false}` on the options\n\n### options.rangeLimit\n\n**Type**: `Number`\n\n**Default**: `250`\n\n**Description**: When `braces.expand()` is used, or `options.expand` is true, brace patterns will automatically be [optimized](#optionsoptimize) when the difference between the range minimum and range maximum exceeds the `rangeLimit`. This is to prevent huge ranges from freezing your application.\n\nYou can set this to any number, or change `options.rangeLimit` to `Inifinity` to disable this altogether.\n\n**Examples**\n\n```js\n// pattern exceeds the \"rangeLimit\", so it's optimized automatically\nconsole.log(braces.expand('{1..1000}'));\n//=> ['([1-9]|[1-9][0-9]{1,2}|1000)']\n\n// pattern does not exceed \"rangeLimit\", so it's NOT optimized\nconsole.log(braces.expand('{1..100}'));\n//=> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']\n```\n\n### options.transform\n\n**Type**: `Function`\n\n**Default**: `undefined`\n\n**Description**: Customize range expansion.\n\n```js\nvar range = braces.expand('x{a..e}y', {\n  transform: function(str) {\n    return 'foo' + str;\n  }\n});\n\nconsole.log(range);\n//=> [ 'xfooay', 'xfooby', 'xfoocy', 'xfoody', 'xfooey' ]\n```\n\n### options.quantifiers\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Description**: In regular expressions, quanitifiers can be used to specify how many times a token can be repeated. For example, `a{1,3}` will match the letter `a` one to three times.\n\nUnfortunately, regex quantifiers happen to share the same syntax as [Bash lists](#lists)\n\nThe `quantifiers` option tells braces to detect when [regex quantifiers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#quantifiers) are defined in the given pattern, and not to try to expand them as lists.\n\n**Examples**\n\n```js\nvar braces = require('braces');\nconsole.log(braces('a/b{1,3}/{x,y,z}'));\n//=> [ 'a/b(1|3)/(x|y|z)' ]\nconsole.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true}));\n//=> [ 'a/b{1,3}/(x|y|z)' ]\nconsole.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true, expand: true}));\n//=> [ 'a/b{1,3}/x', 'a/b{1,3}/y', 'a/b{1,3}/z' ]\n```\n\n### options.unescape\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\n**Description**: Strip backslashes that were used for escaping from the result.\n\n## What is \"brace expansion\"?\n\nBrace expansion is a type of parameter expansion that was made popular by unix shells for generating lists of strings, as well as regex-like matching when used alongside wildcards (globs).\n\nIn addition to \"expansion\", braces are also used for matching. In other words:\n\n* [brace expansion](#brace-expansion) is for generating new lists\n* [brace matching](#brace-matching) is for filtering existing lists\n\n<details>\n<summary><strong>More about brace expansion</strong> (click to expand)</summary>\n\nThere are two main types of brace expansion:\n\n1. **lists**: which are defined using comma-separated values inside curly braces: `{a,b,c}`\n2. **sequences**: which are defined using a starting value and an ending value, separated by two dots: `a{1..3}b`. Optionally, a third argument may be passed to define a \"step\" or increment to use: `a{1..100..10}b`. These are also sometimes referred to as \"ranges\".\n\nHere are some example brace patterns to illustrate how they work:\n\n**Sets**\n\n```\n{a,b,c}       => a b c\n{a,b,c}{1,2}  => a1 a2 b1 b2 c1 c2\n```\n\n**Sequences**\n\n```\n{1..9}        => 1 2 3 4 5 6 7 8 9\n{4..-4}       => 4 3 2 1 0 -1 -2 -3 -4\n{1..20..3}    => 1 4 7 10 13 16 19\n{a..j}        => a b c d e f g h i j\n{j..a}        => j i h g f e d c b a\n{a..z..3}     => a d g j m p s v y\n```\n\n**Combination**\n\nSets and sequences can be mixed together or used along with any other strings.\n\n```\n{a,b,c}{1..3}   => a1 a2 a3 b1 b2 b3 c1 c2 c3\nfoo/{a,b,c}/bar => foo/a/bar foo/b/bar foo/c/bar\n```\n\nThe fact that braces can be \"expanded\" from relatively simple patterns makes them ideal for quickly generating test fixtures, file paths, and similar use cases.\n\n## Brace matching\n\nIn addition to _expansion_, brace patterns are also useful for performing regular-expression-like matching.\n\nFor example, the pattern `foo/{1..3}/bar` would match any of following strings:\n\n```\nfoo/1/bar\nfoo/2/bar\nfoo/3/bar\n```\n\nBut not:\n\n```\nbaz/1/qux\nbaz/2/qux\nbaz/3/qux\n```\n\nBraces can also be combined with [glob patterns](https://github.com/jonschlinkert/micromatch) to perform more advanced wildcard matching. For example, the pattern `*/{1..3}/*` would match any of following strings:\n\n```\nfoo/1/bar\nfoo/2/bar\nfoo/3/bar\nbaz/1/qux\nbaz/2/qux\nbaz/3/qux\n```\n\n## Brace matching pitfalls\n\nAlthough brace patterns offer a user-friendly way of matching ranges or sets of strings, there are also some major disadvantages and potential risks you should be aware of.\n\n### tldr\n\n**\"brace bombs\"**\n\n* brace expansion can eat up a huge amount of processing resources\n* as brace patterns increase _linearly in size_, the system resources required to expand the pattern increase exponentially\n* users can accidentally (or intentially) exhaust your system's resources resulting in the equivalent of a DoS attack (bonus: no programming knowledge is required!)\n\nFor a more detailed explanation with examples, see the [geometric complexity](#geometric-complexity) section.\n\n### The solution\n\nJump to the [performance section](#performance) to see how Braces solves this problem in comparison to other libraries.\n\n### Geometric complexity\n\nAt minimum, brace patterns with sets limited to two elements have quadradic or `O(n^2)` complexity. But the complexity of the algorithm increases exponentially as the number of sets, _and elements per set_, increases, which is `O(n^c)`.\n\nFor example, the following sets demonstrate quadratic (`O(n^2)`) complexity:\n\n```\n{1,2}{3,4}      => (2X2)    => 13 14 23 24\n{1,2}{3,4}{5,6} => (2X2X2)  => 135 136 145 146 235 236 245 246\n```\n\nBut add an element to a set, and we get a n-fold Cartesian product with `O(n^c)` complexity:\n\n```\n{1,2,3}{4,5,6}{7,8,9} => (3X3X3) => 147 148 149 157 158 159 167 168 169 247 248 \n                                    249 257 258 259 267 268 269 347 348 349 357 \n                                    358 359 367 368 369\n```\n\nNow, imagine how this complexity grows given that each element is a n-tuple:\n\n```\n{1..100}{1..100}         => (100X100)     => 10,000 elements (38.4 kB)\n{1..100}{1..100}{1..100} => (100X100X100) => 1,000,000 elements (5.76 MB)\n```\n\nAlthough these examples are clearly contrived, they demonstrate how brace patterns can quickly grow out of control.\n\n**More information**\n\nInterested in learning more about brace expansion?\n\n* [linuxjournal/bash-brace-expansion](http://www.linuxjournal.com/content/bash-brace-expansion)\n* [rosettacode/Brace_expansion](https://rosettacode.org/wiki/Brace_expansion)\n* [cartesian product](https://en.wikipedia.org/wiki/Cartesian_product)\n\n</details>\n\n## Performance\n\nBraces is not only screaming fast, it's also more accurate the other brace expansion libraries.\n\n### Better algorithms\n\nFortunately there is a solution to the [\"brace bomb\" problem](#brace-matching-pitfalls): _don't expand brace patterns into an array when they're used for matching_.\n\nInstead, convert the pattern into an optimized regular expression. This is easier said than done, and braces is the only library that does this currently.\n\n**The proof is in the numbers**\n\nMinimatch gets exponentially slower as patterns increase in complexity, braces does not. The following results were generated using `braces()` and `minimatch.braceExpand()`, respectively.\n\n| **Pattern** | **braces** | **[minimatch](https://github.com/isaacs/minimatch)** | \n| --- | --- | --- |\n| `{1..9007199254740991}`<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> | `298 B` (5ms 459μs) | N/A (freezes) |\n| `{1..1000000000000000}` | `41 B` (1ms 15μs) | N/A (freezes) |\n| `{1..100000000000000}` | `40 B` (890μs) | N/A (freezes) |\n| `{1..10000000000000}` | `39 B` (2ms 49μs) | N/A (freezes) |\n| `{1..1000000000000}` | `38 B` (608μs) | N/A (freezes) |\n| `{1..100000000000}` | `37 B` (397μs) | N/A (freezes) |\n| `{1..10000000000}` | `35 B` (983μs) | N/A (freezes) |\n| `{1..1000000000}` | `34 B` (798μs) | N/A (freezes) |\n| `{1..100000000}` | `33 B` (733μs) | N/A (freezes) |\n| `{1..10000000}` | `32 B` (5ms 632μs) | `78.89 MB` (16s 388ms 569μs) |\n| `{1..1000000}` | `31 B` (1ms 381μs) | `6.89 MB` (1s 496ms 887μs) |\n| `{1..100000}` | `30 B` (950μs) | `588.89 kB` (146ms 921μs) |\n| `{1..10000}` | `29 B` (1ms 114μs) | `48.89 kB` (14ms 187μs) |\n| `{1..1000}` | `28 B` (760μs) | `3.89 kB` (1ms 453μs) |\n| `{1..100}` | `22 B` (345μs) | `291 B` (196μs) |\n| `{1..10}` | `10 B` (533μs) | `20 B` (37μs) |\n| `{1..3}` | `7 B` (190μs) | `5 B` (27μs) |\n\n### Faster algorithms\n\nWhen you need expansion, braces is still much faster.\n\n_(the following results were generated using `braces.expand()` and `minimatch.braceExpand()`, respectively)_\n\n| **Pattern** | **braces** | **[minimatch](https://github.com/isaacs/minimatch)** | \n| --- | --- | --- |\n| `{1..10000000}` | `78.89 MB` (2s 698ms 642μs) | `78.89 MB` (18s 601ms 974μs) |\n| `{1..1000000}` | `6.89 MB` (458ms 576μs) | `6.89 MB` (1s 491ms 621μs) |\n| `{1..100000}` | `588.89 kB` (20ms 728μs) | `588.89 kB` (156ms 919μs) |\n| `{1..10000}` | `48.89 kB` (2ms 202μs) | `48.89 kB` (13ms 641μs) |\n| `{1..1000}` | `3.89 kB` (1ms 796μs) | `3.89 kB` (1ms 958μs) |\n| `{1..100}` | `291 B` (424μs) | `291 B` (211μs) |\n| `{1..10}` | `20 B` (487μs) | `20 B` (72μs) |\n| `{1..3}` | `5 B` (166μs) | `5 B` (27μs) |\n\nIf you'd like to run these comparisons yourself, see [test/support/generate.js](test/support/generate.js).\n\n## Benchmarks\n\n### Running benchmarks\n\nInstall dev dependencies:\n\n```bash\nnpm i -d && npm benchmark\n```\n\n### Latest results\n\n```bash\nBenchmarking: (8 of 8)\n · combination-nested\n · combination\n · escaped\n · list-basic\n · list-multiple\n · no-braces\n · sequence-basic\n · sequence-multiple\n\n# benchmark/fixtures/combination-nested.js (52 bytes)\n  brace-expansion x 4,756 ops/sec ±1.09% (86 runs sampled)\n  braces x 11,202,303 ops/sec ±1.06% (88 runs sampled)\n  minimatch x 4,816 ops/sec ±0.99% (87 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/combination.js (51 bytes)\n  brace-expansion x 625 ops/sec ±0.87% (87 runs sampled)\n  braces x 11,031,884 ops/sec ±0.72% (90 runs sampled)\n  minimatch x 637 ops/sec ±0.84% (88 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/escaped.js (44 bytes)\n  brace-expansion x 163,325 ops/sec ±1.05% (87 runs sampled)\n  braces x 10,655,071 ops/sec ±1.22% (88 runs sampled)\n  minimatch x 147,495 ops/sec ±0.96% (88 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/list-basic.js (40 bytes)\n  brace-expansion x 99,726 ops/sec ±1.07% (83 runs sampled)\n  braces x 10,596,584 ops/sec ±0.98% (88 runs sampled)\n  minimatch x 100,069 ops/sec ±1.17% (86 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/list-multiple.js (52 bytes)\n  brace-expansion x 34,348 ops/sec ±1.08% (88 runs sampled)\n  braces x 9,264,131 ops/sec ±1.12% (88 runs sampled)\n  minimatch x 34,893 ops/sec ±0.87% (87 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/no-braces.js (48 bytes)\n  brace-expansion x 275,368 ops/sec ±1.18% (89 runs sampled)\n  braces x 9,134,677 ops/sec ±0.95% (88 runs sampled)\n  minimatch x 3,755,954 ops/sec ±1.13% (89 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/sequence-basic.js (41 bytes)\n  brace-expansion x 5,492 ops/sec ±1.35% (87 runs sampled)\n  braces x 8,485,034 ops/sec ±1.28% (89 runs sampled)\n  minimatch x 5,341 ops/sec ±1.17% (87 runs sampled)\n\n  fastest is braces\n\n# benchmark/fixtures/sequence-multiple.js (51 bytes)\n  brace-expansion x 116 ops/sec ±0.77% (77 runs sampled)\n  braces x 9,445,118 ops/sec ±1.32% (84 runs sampled)\n  minimatch x 109 ops/sec ±1.16% (76 runs sampled)\n\n  fastest is braces\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/jonschlinkert/expand-brackets \"Expand POSIX bracket expressions (character classes) in glob patterns.\")\n* [extglob](https://www.npmjs.com/package/extglob): Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob… [more](https://github.com/micromatch/extglob) | [homepage](https://github.com/micromatch/extglob \"Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\")\n* [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/micromatch/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n* [nanomatch](https://www.npmjs.com/package/nanomatch): Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash… [more](https://github.com/micromatch/nanomatch) | [homepage](https://github.com/micromatch/nanomatch \"Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash 4.3 wildcard support only (no support for exglobs, posix brackets or braces)\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 188 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 4 | [doowb](https://github.com/doowb) |\n| 1 | [es128](https://github.com/es128) |\n| 1 | [eush77](https://github.com/eush77) |\n| 1 | [hemanth](https://github.com/hemanth) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 17, 2018._\n\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\"  class=\"footnote-item\">this is the largest safe integer allowed in JavaScript. <a href=\"#fnref1\" class=\"footnote-backref\">↩</a>\n\n</li>\n</ol>\n</section>",
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/package.json:  "readme": "# snapdragon-node [![NPM version](https://img.shields.io/npm/v/snapdragon-node.svg?style=flat)](https://www.npmjs.com/package/snapdragon-node) [![NPM monthly downloads](https://img.shields.io/npm/dm/snapdragon-node.svg?style=flat)](https://npmjs.org/package/snapdragon-node) [![NPM total downloads](https://img.shields.io/npm/dt/snapdragon-node.svg?style=flat)](https://npmjs.org/package/snapdragon-node) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/snapdragon-node.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/snapdragon-node)\n\n> Snapdragon utility for creating a new AST node in custom code, such as plugins.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save snapdragon-node\n```\n\n## Usage\n\nWith [snapdragon](https://github.com/jonschlinkert/snapdragon) v0.9.0 and higher you can use `this.node()` to create a new `Node`, whenever it makes sense.\n\n```js\nvar Node = require('snapdragon-node');\nvar Snapdragon = require('snapdragon');\nvar snapdragon = new Snapdragon();\n\n// example usage inside a parser visitor function\nsnapdragon.parser.set('foo', function() {\n  // get the current \"start\" position\n  var pos = this.position();\n\n  // returns the match if regex matches the substring \n  // at the current position on `parser.input`\n  var match = this.match(/foo/);\n  if (match) {\n    // call \"pos\" on the node, to set the start and end \n    // positions, and return the node to push it onto the AST\n    // (snapdragon will push the node onto the correct\n    // nodes array, based on the stack)\n    return pos(new Node({type: 'bar', val: match[0]}));\n  }\n});\n```\n\n## API\n\n### [Node](index.js#L22)\n\nCreate a new AST `Node` with the given `val` and `type`.\n\n**Params**\n\n* `val` **{String|Object}**: Pass a matched substring, or an object to merge onto the node.\n* `type` **{String}**: The node type to use when `val` is a string.\n* `returns` **{Object}**: node instance\n\n**Example**\n\n```js\nvar node = new Node('*', 'Star');\nvar node = new Node({type: 'star', val: '*'});\n```\n\n### [.isNode](index.js#L61)\n\nReturns true if the given value is a node.\n\n**Params**\n\n* `node` **{Object}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar node = new Node({type: 'foo'});\nconsole.log(Node.isNode(node)); //=> true\nconsole.log(Node.isNode({})); //=> false\n```\n\n### [.define](index.js#L80)\n\nDefine a non-enumberable property on the node instance. Useful for adding properties that shouldn't be extended or visible during debugging.\n\n**Params**\n\n* `name` **{String}**\n* `val` **{any}**\n* `returns` **{Object}**: returns the node instance\n\n**Example**\n\n```js\nvar node = new Node();\nnode.define('foo', 'something non-enumerable');\n```\n\n### [.isEmpty](index.js#L100)\n\nReturns true if `node.val` is an empty string, or `node.nodes` does not contain any non-empty text nodes.\n\n**Params**\n\n* `fn` **{Function}**: (optional) Filter function that is called on `node` and/or child nodes. `isEmpty` will return false immediately when the filter function returns false on any nodes.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar node = new Node({type: 'text'});\nnode.isEmpty(); //=> true\nnode.val = 'foo';\nnode.isEmpty(); //=> false\n```\n\n### [.push](index.js#L118)\n\nGiven node `foo` and node `bar`, push node `bar` onto `foo.nodes`, and set `foo` as `bar.parent`.\n\n**Params**\n\n* `node` **{Object}**\n* `returns` **{Number}**: Returns the length of `node.nodes`\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nfoo.push(bar);\n```\n\n### [.unshift](index.js#L140)\n\nGiven node `foo` and node `bar`, unshift node `bar` onto `foo.nodes`, and set `foo` as `bar.parent`.\n\n**Params**\n\n* `node` **{Object}**\n* `returns` **{Number}**: Returns the length of `node.nodes`\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nfoo.unshift(bar);\n```\n\n### [.pop](index.js#L167)\n\nPop a node from `node.nodes`.\n\n* `returns` **{Number}**: Returns the popped `node`\n\n**Example**\n\n```js\nvar node = new Node({type: 'foo'});\nnode.push(new Node({type: 'a'}));\nnode.push(new Node({type: 'b'}));\nnode.push(new Node({type: 'c'}));\nnode.push(new Node({type: 'd'}));\nconsole.log(node.nodes.length);\n//=> 4\nnode.pop();\nconsole.log(node.nodes.length);\n//=> 3\n```\n\n### [.shift](index.js#L190)\n\nShift a node from `node.nodes`.\n\n* `returns` **{Object}**: Returns the shifted `node`\n\n**Example**\n\n```js\nvar node = new Node({type: 'foo'});\nnode.push(new Node({type: 'a'}));\nnode.push(new Node({type: 'b'}));\nnode.push(new Node({type: 'c'}));\nnode.push(new Node({type: 'd'}));\nconsole.log(node.nodes.length);\n//=> 4\nnode.shift();\nconsole.log(node.nodes.length);\n//=> 3\n```\n\n### [.remove](index.js#L205)\n\nRemove `node` from `node.nodes`.\n\n**Params**\n\n* `node` **{Object}**\n* `returns` **{Object}**: Returns the removed node.\n\n**Example**\n\n```js\nnode.remove(childNode);\n```\n\n### [.find](index.js#L231)\n\nGet the first child node from `node.nodes` that matches the given `type`. If `type` is a number, the child node at that index is returned.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Object}**: Returns a child node or undefined.\n\n**Example**\n\n```js\nvar child = node.find(1); //<= index of the node to get\nvar child = node.find('foo'); //<= node.type of a child node\nvar child = node.find(/^(foo|bar)$/); //<= regex to match node.type\nvar child = node.find(['foo', 'bar']); //<= array of node.type(s)\n```\n\n### [.isType](index.js#L249)\n\nReturn true if the node is the given `type`.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar node = new Node({type: 'bar'});\ncosole.log(node.isType('foo'));          // false\ncosole.log(node.isType(/^(foo|bar)$/));  // true\ncosole.log(node.isType(['foo', 'bar'])); // true\n```\n\n### [.hasType](index.js#L270)\n\nReturn true if the `node.nodes` has the given `type`.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nfoo.push(bar);\n\ncosole.log(foo.hasType('qux'));          // false\ncosole.log(foo.hasType(/^(qux|bar)$/));  // true\ncosole.log(foo.hasType(['qux', 'bar'])); // true\n```\n\n* `returns` **{Array}**\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nfoo.push(bar);\nfoo.push(baz);\n\nconsole.log(bar.siblings.length) // 2\nconsole.log(baz.siblings.length) // 2\n```\n\n* `returns` **{Number}**\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nvar qux = new Node({type: 'qux'});\nfoo.push(bar);\nfoo.push(baz);\nfoo.unshift(qux);\n\nconsole.log(bar.index) // 1\nconsole.log(baz.index) // 2\nconsole.log(qux.index) // 0\n```\n\n* `returns` **{Object}**\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nfoo.push(bar);\nfoo.push(baz);\n\nconsole.log(baz.prev.type) // 'bar'\n```\n\n* `returns` **{Object}**\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nfoo.push(bar);\nfoo.push(baz);\n\nconsole.log(bar.siblings.length) // 2\nconsole.log(baz.siblings.length) // 2\n```\n\n* `returns` **{Object}**: The first node, or undefiend\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nvar qux = new Node({type: 'qux'});\nfoo.push(bar);\nfoo.push(baz);\nfoo.push(qux);\n\nconsole.log(foo.first.type) // 'bar'\n```\n\n* `returns` **{Object}**: The last node, or undefiend\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nvar qux = new Node({type: 'qux'});\nfoo.push(bar);\nfoo.push(baz);\nfoo.push(qux);\n\nconsole.log(foo.last.type) // 'qux'\n```\n\n* `returns` **{Object}**: The last node, or undefiend\n\n**Example**\n\n```js\nvar foo = new Node({type: 'foo'});\nvar bar = new Node({type: 'bar'});\nvar baz = new Node({type: 'baz'});\nvar qux = new Node({type: 'qux'});\nfoo.push(bar);\nfoo.push(baz);\nfoo.push(qux);\n\nconsole.log(foo.last.type) // 'qux'\n```\n\n## Release history\n\nChangelog entries are classified using the following labels from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog):\n\n* `added`: for new features\n* `changed`: for changes in existing functionality\n* `deprecated`: for once-stable features removed in upcoming releases\n* `removed`: for deprecated features removed in this release\n* `fixed`: for any bug fixes\n\nCustom labels used in this changelog:\n\n* `dependencies`: bumps dependencies\n* `housekeeping`: code re-organization, minor edits, or other changes that don't fit in one of the other categories.\n\n### [2.0.0] - 2017-05-01\n\n**Changed**\n\n* `.unshiftNode` was renamed to [.unshift](#unshift)\n* `.pushNode` was renamed to [.push](#push)\n* `.getNode` was renamed to [.find](#find)\n\n**Added**\n\n* [.isNode](#isNode)\n* [.isEmpty](#isEmpty)\n* [.pop](#pop)\n* [.shift](#shift)\n* [.remove](#remove)\n\n### [0.1.0]\n\nFirst release.\n\n## About\n\n### Related projects\n\n* [breakdance](https://www.npmjs.com/package/breakdance): Breakdance is a node.js library for converting HTML to markdown. Highly pluggable, flexible and easy… [more](http://breakdance.io) | [homepage](http://breakdance.io \"Breakdance is a node.js library for converting HTML to markdown. Highly pluggable, flexible and easy to use. It's time for your markup to get down.\")\n* [snapdragon-capture](https://www.npmjs.com/package/snapdragon-capture): Snapdragon plugin that adds a capture method to the parser instance. | [homepage](https://github.com/jonschlinkert/snapdragon-capture \"Snapdragon plugin that adds a capture method to the parser instance.\")\n* [snapdragon-cheerio](https://www.npmjs.com/package/snapdragon-cheerio): Snapdragon plugin for converting a cheerio AST to a snapdragon AST. | [homepage](https://github.com/jonschlinkert/snapdragon-cheerio \"Snapdragon plugin for converting a cheerio AST to a snapdragon AST.\")\n* [snapdragon-util](https://www.npmjs.com/package/snapdragon-util): Utilities for the snapdragon parser/compiler. | [homepage](https://github.com/jonschlinkert/snapdragon-util \"Utilities for the snapdragon parser/compiler.\")\n* [snapdragon](https://www.npmjs.com/package/snapdragon): Easy-to-use plugin system for creating powerful, fast and versatile parsers and compilers, with built-in source-map… [more](https://github.com/jonschlinkert/snapdragon) | [homepage](https://github.com/jonschlinkert/snapdragon \"Easy-to-use plugin system for creating powerful, fast and versatile parsers and compilers, with built-in source-map support.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on June 25, 2017._",
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/package.json:  "readme": "# snapdragon-util [![NPM version](https://img.shields.io/npm/v/snapdragon-util.svg?style=flat)](https://www.npmjs.com/package/snapdragon-util) [![NPM monthly downloads](https://img.shields.io/npm/dm/snapdragon-util.svg?style=flat)](https://npmjs.org/package/snapdragon-util) [![NPM total downloads](https://img.shields.io/npm/dt/snapdragon-util.svg?style=flat)](https://npmjs.org/package/snapdragon-util) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/snapdragon-util.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/snapdragon-util)\n\n> Utilities for the snapdragon parser/compiler.\n\n<details>\n<summary><strong>Table of Contents</strong></summary>\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Release history](#release-history)\n  * [[3.0.0] - 2017-05-01](#300---2017-05-01)\n  * [[0.1.0]](#010)\n- [About](#about)\n\n</details>\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save snapdragon-util\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add snapdragon-util\n```\n\n## Usage\n\n```js\nvar util = require('snapdragon-util');\n```\n\n## API\n\n### [.isNode](index.js#L21)\n\nReturns true if the given value is a node.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar node = new Node({type: 'foo'});\nconsole.log(utils.isNode(node)); //=> true\nconsole.log(utils.isNode({})); //=> false\n```\n\n### [.noop](index.js#L37)\n\nEmit an empty string for the given `node`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{undefined}**\n\n**Example**\n\n```js\n// do nothing for beginning-of-string\nsnapdragon.compiler.set('bos', utils.noop);\n```\n\n### [.identity](index.js#L53)\n\nAppdend `node.val` to `compiler.output`, exactly as it was created by the parser.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{undefined}**\n\n**Example**\n\n```js\nsnapdragon.compiler.set('text', utils.identity);\n```\n\n### [.append](index.js#L76)\n\nPreviously named `.emit`, this method appends the given `val` to `compiler.output` for the given node. Useful when you know what value should be appended advance, regardless of the actual value of `node.val`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Function}**: Returns a compiler middleware function.\n\n**Example**\n\n```js\nsnapdragon.compiler\n  .set('i', function(node) {\n    this.mapVisit(node);\n  })\n  .set('i.open', utils.append('<i>'))\n  .set('i.close', utils.append('</i>'))\n```\n\n### [.toNoop](index.js#L99)\n\nUsed in compiler middleware, this onverts an AST node into an empty `text` node and deletes `node.nodes` if it exists. The advantage of this method is that, as opposed to completely removing the node, indices will not need to be re-calculated in sibling nodes, and nothing is appended to the output.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `nodes` **{Array}**: Optionally pass a new `nodes` value, to replace the existing `node.nodes` array.\n\n**Example**\n\n```js\nutils.toNoop(node);\n// convert `node.nodes` to the given value instead of deleting it\nutils.toNoop(node, []);\n```\n\n### [.visit](index.js#L128)\n\nVisit `node` with the given `fn`. The built-in `.visit` method in snapdragon automatically calls registered compilers, this allows you to pass a visitor function.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `fn` **{Function}**\n* `returns` **{Object}**: returns the node after recursively visiting all child nodes.\n\n**Example**\n\n```js\nsnapdragon.compiler.set('i', function(node) {\n  utils.visit(node, function(childNode) {\n    // do stuff with \"childNode\"\n    return childNode;\n  });\n});\n```\n\n### [.mapVisit](index.js#L155)\n\nMap [visit](#visit) the given `fn` over `node.nodes`. This is called by [visit](#visit), use this method if you do not want `fn` to be called on the first node.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `options` **{Object}**\n* `fn` **{Function}**\n* `returns` **{Object}**: returns the node\n\n**Example**\n\n```js\nsnapdragon.compiler.set('i', function(node) {\n  utils.mapVisit(node, function(childNode) {\n    // do stuff with \"childNode\"\n    return childNode;\n  });\n});\n```\n\n### [.addOpen](index.js#L194)\n\nUnshift an `*.open` node onto `node.nodes`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `Node` **{Function}**: (required) Node constructor function from [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node).\n* `filter` **{Function}**: Optionaly specify a filter function to exclude the node.\n* `returns` **{Object}**: Returns the created opening node.\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nsnapdragon.parser.set('brace', function(node) {\n  var match = this.match(/^{/);\n  if (match) {\n    var parent = new Node({type: 'brace'});\n    utils.addOpen(parent, Node);\n    console.log(parent.nodes[0]):\n    // { type: 'brace.open', val: '' };\n\n    // push the parent \"brace\" node onto the stack\n    this.push(parent);\n\n    // return the parent node, so it's also added to the AST\n    return brace;\n  }\n});\n```\n\n### [.addClose](index.js#L244)\n\nPush a `*.close` node onto `node.nodes`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `Node` **{Function}**: (required) Node constructor function from [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node).\n* `filter` **{Function}**: Optionaly specify a filter function to exclude the node.\n* `returns` **{Object}**: Returns the created closing node.\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nsnapdragon.parser.set('brace', function(node) {\n  var match = this.match(/^}/);\n  if (match) {\n    var parent = this.parent();\n    if (parent.type !== 'brace') {\n      throw new Error('missing opening: ' + '}');\n    }\n\n    utils.addClose(parent, Node);\n    console.log(parent.nodes[parent.nodes.length - 1]):\n    // { type: 'brace.close', val: '' };\n\n    // no need to return a node, since the parent\n    // was already added to the AST\n    return;\n  }\n});\n```\n\n### [.wrapNodes](index.js#L274)\n\nWraps the given `node` with `*.open` and `*.close` nodes.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `Node` **{Function}**: (required) Node constructor function from [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node).\n* `filter` **{Function}**: Optionaly specify a filter function to exclude the node.\n* `returns` **{Object}**: Returns the node\n\n### [.pushNode](index.js#L299)\n\nPush the given `node` onto `parent.nodes`, and set `parent` as `node.parent.\n\n**Params**\n\n* `parent` **{Object}**\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Object}**: Returns the child node\n\n**Example**\n\n```js\nvar parent = new Node({type: 'foo'});\nvar node = new Node({type: 'bar'});\nutils.pushNode(parent, node);\nconsole.log(parent.nodes[0].type) // 'bar'\nconsole.log(node.parent.type) // 'foo'\n```\n\n### [.unshiftNode](index.js#L325)\n\nUnshift `node` onto `parent.nodes`, and set `parent` as `node.parent.\n\n**Params**\n\n* `parent` **{Object}**\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{undefined}**\n\n**Example**\n\n```js\nvar parent = new Node({type: 'foo'});\nvar node = new Node({type: 'bar'});\nutils.unshiftNode(parent, node);\nconsole.log(parent.nodes[0].type) // 'bar'\nconsole.log(node.parent.type) // 'foo'\n```\n\n### [.popNode](index.js#L354)\n\nPop the last `node` off of `parent.nodes`. The advantage of using this method is that it checks for `node.nodes` and works with any version of `snapdragon-node`.\n\n**Params**\n\n* `parent` **{Object}**\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Number|Undefined}**: Returns the length of `node.nodes` or undefined.\n\n**Example**\n\n```js\nvar parent = new Node({type: 'foo'});\nutils.pushNode(parent, new Node({type: 'foo'}));\nutils.pushNode(parent, new Node({type: 'bar'}));\nutils.pushNode(parent, new Node({type: 'baz'}));\nconsole.log(parent.nodes.length); //=> 3\nutils.popNode(parent);\nconsole.log(parent.nodes.length); //=> 2\n```\n\n### [.shiftNode](index.js#L382)\n\nShift the first `node` off of `parent.nodes`. The advantage of using this method is that it checks for `node.nodes` and works with any version of `snapdragon-node`.\n\n**Params**\n\n* `parent` **{Object}**\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Number|Undefined}**: Returns the length of `node.nodes` or undefined.\n\n**Example**\n\n```js\nvar parent = new Node({type: 'foo'});\nutils.pushNode(parent, new Node({type: 'foo'}));\nutils.pushNode(parent, new Node({type: 'bar'}));\nutils.pushNode(parent, new Node({type: 'baz'}));\nconsole.log(parent.nodes.length); //=> 3\nutils.shiftNode(parent);\nconsole.log(parent.nodes.length); //=> 2\n```\n\n### [.removeNode](index.js#L409)\n\nRemove the specified `node` from `parent.nodes`.\n\n**Params**\n\n* `parent` **{Object}**\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Object|undefined}**: Returns the removed node, if successful, or undefined if it does not exist on `parent.nodes`.\n\n**Example**\n\n```js\nvar parent = new Node({type: 'abc'});\nvar foo = new Node({type: 'foo'});\nutils.pushNode(parent, foo);\nutils.pushNode(parent, new Node({type: 'bar'}));\nutils.pushNode(parent, new Node({type: 'baz'}));\nconsole.log(parent.nodes.length); //=> 3\nutils.removeNode(parent, foo);\nconsole.log(parent.nodes.length); //=> 2\n```\n\n### [.isType](index.js#L443)\n\nReturns true if `node.type` matches the given `type`. Throws a `TypeError` if `node` is not an instance of `Node`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar node = new Node({type: 'foo'});\nconsole.log(utils.isType(node, 'foo')); // false\nconsole.log(utils.isType(node, 'bar')); // true\n```\n\n### [.hasType](index.js#L486)\n\nReturns true if the given `node` has the given `type` in `node.nodes`. Throws a `TypeError` if `node` is not an instance of `Node`.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar node = new Node({\n  type: 'foo',\n  nodes: [\n    new Node({type: 'bar'}),\n    new Node({type: 'baz'})\n  ]\n});\nconsole.log(utils.hasType(node, 'xyz')); // false\nconsole.log(utils.hasType(node, 'baz')); // true\n```\n\n### [.firstOfType](index.js#L519)\n\nReturns the first node from `node.nodes` of the given `type`\n\n**Params**\n\n* `nodes` **{Array}**\n* `type` **{String}**\n* `returns` **{Object|undefined}**: Returns the first matching node or undefined.\n\n**Example**\n\n```js\nvar node = new Node({\n  type: 'foo',\n  nodes: [\n    new Node({type: 'text', val: 'abc'}),\n    new Node({type: 'text', val: 'xyz'})\n  ]\n});\n\nvar textNode = utils.firstOfType(node.nodes, 'text');\nconsole.log(textNode.val);\n//=> 'abc'\n```\n\n### [.findNode](index.js#L556)\n\nReturns the node at the specified index, or the first node of the given `type` from `node.nodes`.\n\n**Params**\n\n* `nodes` **{Array}**\n* `type` **{String|Number}**: Node type or index.\n* `returns` **{Object}**: Returns a node or undefined.\n\n**Example**\n\n```js\nvar node = new Node({\n  type: 'foo',\n  nodes: [\n    new Node({type: 'text', val: 'abc'}),\n    new Node({type: 'text', val: 'xyz'})\n  ]\n});\n\nvar nodeOne = utils.findNode(node.nodes, 'text');\nconsole.log(nodeOne.val);\n//=> 'abc'\n\nvar nodeTwo = utils.findNode(node.nodes, 1);\nconsole.log(nodeTwo.val);\n//=> 'xyz'\n```\n\n### [.isOpen](index.js#L584)\n\nReturns true if the given node is an \"*.open\" node.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar brace = new Node({type: 'brace'});\nvar open = new Node({type: 'brace.open'});\nvar close = new Node({type: 'brace.close'});\n\nconsole.log(utils.isOpen(brace)); // false\nconsole.log(utils.isOpen(open)); // true\nconsole.log(utils.isOpen(close)); // false\n```\n\n### [.isClose](index.js#L607)\n\nReturns true if the given node is a \"*.close\" node.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar brace = new Node({type: 'brace'});\nvar open = new Node({type: 'brace.open'});\nvar close = new Node({type: 'brace.close'});\n\nconsole.log(utils.isClose(brace)); // false\nconsole.log(utils.isClose(open)); // false\nconsole.log(utils.isClose(close)); // true\n```\n\n### [.hasOpen](index.js#L633)\n\nReturns true if `node.nodes` **has** an `.open` node\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar brace = new Node({\n  type: 'brace',\n  nodes: []\n});\n\nvar open = new Node({type: 'brace.open'});\nconsole.log(utils.hasOpen(brace)); // false\n\nbrace.pushNode(open);\nconsole.log(utils.hasOpen(brace)); // true\n```\n\n### [.hasClose](index.js#L663)\n\nReturns true if `node.nodes` **has** a `.close` node\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar brace = new Node({\n  type: 'brace',\n  nodes: []\n});\n\nvar close = new Node({type: 'brace.close'});\nconsole.log(utils.hasClose(brace)); // false\n\nbrace.pushNode(close);\nconsole.log(utils.hasClose(brace)); // true\n```\n\n### [.hasOpenAndClose](index.js#L697)\n\nReturns true if `node.nodes` has both `.open` and `.close` nodes\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar Node = require('snapdragon-node');\nvar brace = new Node({\n  type: 'brace',\n  nodes: []\n});\n\nvar open = new Node({type: 'brace.open'});\nvar close = new Node({type: 'brace.close'});\nconsole.log(utils.hasOpen(brace)); // false\nconsole.log(utils.hasClose(brace)); // false\n\nbrace.pushNode(open);\nbrace.pushNode(close);\nconsole.log(utils.hasOpen(brace)); // true\nconsole.log(utils.hasClose(brace)); // true\n```\n\n### [.addType](index.js#L719)\n\nPush the given `node` onto the `state.inside` array for the given type. This array is used as a specialized \"stack\" for only the given `node.type`.\n\n**Params**\n\n* `state` **{Object}**: The `compiler.state` object or custom state object.\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Array}**: Returns the `state.inside` stack for the given type.\n\n**Example**\n\n```js\nvar state = { inside: {}};\nvar node = new Node({type: 'brace'});\nutils.addType(state, node);\nconsole.log(state.inside);\n//=> { brace: [{type: 'brace'}] }\n```\n\n### [.removeType](index.js#L759)\n\nRemove the given `node` from the `state.inside` array for the given type. This array is used as a specialized \"stack\" for only the given `node.type`.\n\n**Params**\n\n* `state` **{Object}**: The `compiler.state` object or custom state object.\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `returns` **{Array}**: Returns the `state.inside` stack for the given type.\n\n**Example**\n\n```js\nvar state = { inside: {}};\nvar node = new Node({type: 'brace'});\nutils.addType(state, node);\nconsole.log(state.inside);\n//=> { brace: [{type: 'brace'}] }\nutils.removeType(state, node);\n//=> { brace: [] }\n```\n\n### [.isEmpty](index.js#L788)\n\nReturns true if `node.val` is an empty string, or `node.nodes` does not contain any non-empty text nodes.\n\n**Params**\n\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `fn` **{Function}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar node = new Node({type: 'text'});\nutils.isEmpty(node); //=> true\nnode.val = 'foo';\nutils.isEmpty(node); //=> false\n```\n\n### [.isInsideType](index.js#L833)\n\nReturns true if the `state.inside` stack for the given type exists and has one or more nodes on it.\n\n**Params**\n\n* `state` **{Object}**\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar state = { inside: {}};\nvar node = new Node({type: 'brace'});\nconsole.log(utils.isInsideType(state, 'brace')); //=> false\nutils.addType(state, node);\nconsole.log(utils.isInsideType(state, 'brace')); //=> true\nutils.removeType(state, node);\nconsole.log(utils.isInsideType(state, 'brace')); //=> false\n```\n\n### [.isInside](index.js#L867)\n\nReturns true if `node` is either a child or grand-child of the given `type`, or `state.inside[type]` is a non-empty array.\n\n**Params**\n\n* `state` **{Object}**: Either the `compiler.state` object, if it exists, or a user-supplied state object.\n* `node` **{Object}**: Instance of [snapdragon-node](https://github.com/jonschlinkert/snapdragon-node)\n* `type` **{String}**: The `node.type` to check for.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar state = { inside: {}};\nvar node = new Node({type: 'brace'});\nvar open = new Node({type: 'brace.open'});\nconsole.log(utils.isInside(state, open, 'brace')); //=> false\nutils.pushNode(node, open);\nconsole.log(utils.isInside(state, open, 'brace')); //=> true\n```\n\n### [.last](index.js#L915)\n\nGet the last `n` element from the given `array`. Used for getting\na node from `node.nodes.`\n\n**Params**\n\n* `array` **{Array}**\n* `n` **{Number}**\n* `returns` **{undefined}**\n\n### [.arrayify](index.js#L935)\n\nCast the given `val` to an array.\n\n**Params**\n\n* `val` **{any}**\n* `returns` **{Array}**\n\n**Example**\n\n```js\nconsole.log(utils.arraify(''));\n//=> []\nconsole.log(utils.arraify('foo'));\n//=> ['foo']\nconsole.log(utils.arraify(['foo']));\n//=> ['foo']\n```\n\n### [.stringify](index.js#L948)\n\nConvert the given `val` to a string by joining with `,`. Useful\nfor creating a cheerio/CSS/DOM-style selector from a list of strings.\n\n**Params**\n\n* `val` **{any}**\n* `returns` **{Array}**\n\n### [.trim](index.js#L961)\n\nEnsure that the given value is a string and call `.trim()` on it,\nor return an empty string.\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n## Release history\n\nChangelog entries are classified using the following labels from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog):\n\n* `added`: for new features\n* `changed`: for changes in existing functionality\n* `deprecated`: for once-stable features removed in upcoming releases\n* `removed`: for deprecated features removed in this release\n* `fixed`: for any bug fixes\n\nCustom labels used in this changelog:\n\n* `dependencies`: bumps dependencies\n* `housekeeping`: code re-organization, minor edits, or other changes that don't fit in one of the other categories.\n\n### [3.0.0] - 2017-05-01\n\n**Changed**\n\n* `.emit` was renamed to [.append](#append)\n* `.addNode` was renamed to [.pushNode](#pushNode)\n* `.getNode` was renamed to [.findNode](#findNode)\n* `.isEmptyNodes` was renamed to [.isEmpty](#isEmpty): also now works with `node.nodes` and/or `node.val`\n\n**Added**\n\n* [.identity](#identity)\n* [.removeNode](#removeNode)\n* [.shiftNode](#shiftNode)\n* [.popNode](#popNode)\n\n### [0.1.0]\n\nFirst release.\n\n## About\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on May 01, 2017._",
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isNode(node)); //=> true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isNode({})); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:    console.log(parent.nodes[0]):
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:    console.log(parent.nodes[parent.nodes.length - 1]):
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes[0].type) // 'bar'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(node.parent.type) // 'foo'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes[0].type) // 'bar'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(node.parent.type) // 'foo'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 3
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 3
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 3
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(parent.nodes.length); //=> 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isType(node, 'foo')); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isType(node, 'bar')); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasType(node, 'xyz')); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasType(node, 'baz')); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(textNode.val);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(nodeOne.val);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(nodeTwo.val);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isOpen(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isOpen(open)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isOpen(close)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isClose(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isClose(open)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isClose(close)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasOpen(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasOpen(brace)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasClose(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasClose(brace)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasOpen(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasClose(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasOpen(brace)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.hasClose(brace)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(state.inside);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(state.inside);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isInsideType(state, 'brace')); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isInsideType(state, 'brace')); //=> true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isInsideType(state, 'brace')); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isInside(state, open, 'brace')); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.isInside(state, open, 'brace')); //=> true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.arraify(''));
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.arraify('foo'));
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:console.log(utils.arraify(['foo']));
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:Changelog entries are classified using the following labels from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog):
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/README.md:Custom labels used in this changelog:
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isNode(node)); //=> true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isNode({})); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: *     console.log(parent.nodes[0]):
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: *     console.log(parent.nodes[parent.nodes.length - 1]):
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes[0].type) // 'bar'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(node.parent.type) // 'foo'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes[0].type) // 'bar'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(node.parent.type) // 'foo'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 3
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 3
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 3
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(parent.nodes.length); //=> 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isType(node, 'foo')); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isType(node, 'bar')); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasType(node, 'xyz')); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasType(node, 'baz')); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(textNode.val);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(nodeOne.val);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(nodeTwo.val);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isOpen(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isOpen(open)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isOpen(close)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isClose(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isClose(open)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isClose(close)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasOpen(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasOpen(brace)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasClose(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasClose(brace)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasOpen(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasClose(brace)); // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasOpen(brace)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.hasClose(brace)); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(state.inside);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(state.inside);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isInsideType(state, 'brace')); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isInsideType(state, 'brace')); //=> true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isInsideType(state, 'brace')); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isInside(state, open, 'brace')); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.isInside(state, open, 'brace')); //=> true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.arrayify(''));
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.arrayify('foo'));
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/node_modules/snapdragon-util/index.js: * console.log(utils.arrayify(['foo']));
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(Node.isNode(node)); //=> true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(Node.isNode({})); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(node.nodes.length);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(node.nodes.length);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(node.nodes.length);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(node.nodes.length);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(node.isType('foo'));          // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(node.isType(/^(foo|bar)$/));  // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(node.isType(['foo', 'bar'])); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(foo.hasType('qux'));          // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(foo.hasType(/^(qux|bar)$/));  // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:cosole.log(foo.hasType(['qux', 'bar'])); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(bar.siblings.length) // 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(baz.siblings.length) // 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(bar.index) // 1
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(baz.index) // 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(qux.index) // 0
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(baz.prev.type) // 'bar'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(bar.siblings.length) // 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(baz.siblings.length) // 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(foo.first.type) // 'bar'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(foo.last.type) // 'qux'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:console.log(foo.last.type) // 'qux'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:Changelog entries are classified using the following labels from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog):
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/README.md:Custom labels used in this changelog:
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(Node.isNode(node)); //=> true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(Node.isNode({})); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(node.nodes.length);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(node.nodes.length);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(node.nodes.length);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(node.nodes.length);
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(node.isType('foo'));          // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(node.isType(/^(foo|bar)$/));  // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(node.isType(['foo', 'bar'])); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(foo.hasType('qux'));          // false
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(foo.hasType(/^(qux|bar)$/));  // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * cosole.log(foo.hasType(['qux', 'bar'])); // true
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(bar.siblings.length) // 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(baz.siblings.length) // 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(bar.index) // 1
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(baz.index) // 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(qux.index) // 0
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(baz.prev.type) // 'bar'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(bar.siblings.length) // 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(baz.siblings.length) // 2
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(foo.first.type) // 'bar'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(foo.last.type) // 'qux'
./lib/node_modules/micromatch/node_modules/braces/node_modules/snapdragon-node/index.js: * console.log(foo.last.type) // 'qux'
./lib/node_modules/micromatch/node_modules/braces/node_modules/split-string/package.json:  "readme": "# split-string [![NPM version](https://img.shields.io/npm/v/split-string.svg?style=flat)](https://www.npmjs.com/package/split-string) [![NPM monthly downloads](https://img.shields.io/npm/dm/split-string.svg?style=flat)](https://npmjs.org/package/split-string) [![NPM total downloads](https://img.shields.io/npm/dt/split-string.svg?style=flat)](https://npmjs.org/package/split-string) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/split-string.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/split-string)\n\n> Split a string on a character except when the character is escaped.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save split-string\n```\n\n<!-- section: Why use this? -->\n\n<details>\n<summary><strong>Why use this?</strong></summary>\n\n<br>\n\nAlthough it's easy to split on a string:\n\n```js\nconsole.log('a.b.c'.split('.'));\n//=> ['a', 'b', 'c']\n```\n\nIt's more challenging to split a string whilst respecting escaped or quoted characters.\n\n**Bad**\n\n```js\nconsole.log('a\\\\.b.c'.split('.'));\n//=> ['a\\\\', 'b', 'c']\n\nconsole.log('\"a.b.c\".d'.split('.'));\n//=> ['\"a', 'b', 'c\"', 'd']\n```\n\n**Good**\n\n```js\nvar split = require('split-string');\nconsole.log(split('a\\\\.b.c'));\n//=> ['a.b', 'c']\n\nconsole.log(split('\"a.b.c\".d'));\n//=> ['a.b.c', 'd']\n```\n\nSee the [options](#options) to learn how to choose the separator or retain quotes or escaping.\n\n<br>\n\n</details>\n\n## Usage\n\n```js\nvar split = require('split-string');\n\nsplit('a.b.c');\n//=> ['a', 'b', 'c']\n\n// respects escaped characters\nsplit('a.b.c\\\\.d');\n//=> ['a', 'b', 'c.d']\n\n// respects double-quoted strings\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n```\n\n**Brackets**\n\nAlso respects brackets [unless disabled](#optionsbrackets):\n\n```js\nsplit('a (b c d) e', ' ');\n//=> ['a', '(b c d)', 'e']\n```\n\n## Options\n\n### options.brackets\n\n**Type**: `object|boolean`\n\n**Default**: `undefined`\n\n**Description**\n\nIf enabled, split-string will not split inside brackets. The following brackets types are supported when `options.brackets` is `true`,\n\n```js\n{\n  '<': '>',\n  '(': ')',\n  '[': ']',\n  '{': '}'\n}\n```\n\nOr, if object of brackets must be passed, each property on the object must be a bracket type, where the property key is the opening delimiter and property value is the closing delimiter.\n\n**Examples**\n\n```js\n// no bracket support by default\nsplit('a.{b.c}');\n//=> [ 'a', '{b', 'c}' ]\n\n// support all basic bracket types: \"<>{}[]()\"\nsplit('a.{b.c}', {brackets: true});\n//=> [ 'a', '{b.c}' ]\n\n// also supports nested brackets \nsplit('a.{b.{c.d}.e}.f', {brackets: true});\n//=> [ 'a', '{b.{c.d}.e}', 'f' ]\n\n// support only the specified brackets\nsplit('[a.b].(c.d)', {brackets: {'[': ']'}});\n//=> [ '[a.b]', '(c', 'd)' ]\n```\n\n### options.sep\n\n**Type**: `string`\n\n**Default**: `.`\n\nThe separator/character to split on.\n\n**Example**\n\n```js\nsplit('a.b,c', {sep: ','});\n//=> ['a.b', 'c']\n\n// you can also pass the separator as string as the last argument\nsplit('a.b,c', ',');\n//=> ['a.b', 'c']\n```\n\n### options.keepEscaping\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep backslashes in the result.\n\n**Example**\n\n```js\nsplit('a.b\\\\.c');\n//=> ['a', 'b.c']\n\nsplit('a.b.\\\\c', {keepEscaping: true});\n//=> ['a', 'b\\.c']\n```\n\n### options.keepQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep single- or double-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\"b.c.d\".e', {keepQuotes: true});\n//=> ['a', '\"b.c.d\"', 'e']\n\nsplit('a.\\'b.c.d\\'.e', {keepQuotes: true});\n//=> ['a', '\\'b.c.d\\'', 'e']\n```\n\n### options.keepDoubleQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep double-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\"b.c.d\".e', {keepDoubleQuotes: true});\n//=> ['a', '\"b.c.d\"', 'e']\n```\n\n### options.keepSingleQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep single-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\\'b.c.d\\'.e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\\'b.c.d\\'.e', {keepSingleQuotes: true});\n//=> ['a', '\\'b.c.d\\'', 'e']\n```\n\n## Customizer\n\n**Type**: `function`\n\n**Default**: `undefined`\n\nPass a function as the last argument to customize how tokens are added to the array.\n\n**Example**\n\n```js\nvar arr = split('a.b', function(tok) {\n  if (tok.arr[tok.arr.length - 1] === 'a') {\n    tok.split = false;\n  }\n});\nconsole.log(arr);\n//=> ['a.b']\n```\n\n**Properties**\n\nThe `tok` object has the following properties:\n\n* `tok.val` (string) The current value about to be pushed onto the result array\n* `tok.idx` (number) the current index in the string\n* `tok.str` (string) the entire string\n* `tok.arr` (array) the result array\n\n## Release history\n\n### v3.0.0 - 2017-06-17\n\n**Added**\n\n* adds support for brackets\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [deromanize](https://www.npmjs.com/package/deromanize): Convert roman numerals to arabic numbers (useful for books, outlines, documentation, slide decks, etc) | [homepage](https://github.com/jonschlinkert/deromanize \"Convert roman numerals to arabic numbers (useful for books, outlines, documentation, slide decks, etc)\")\n* [randomatic](https://www.npmjs.com/package/randomatic): Generate randomized strings of a specified length using simple character sequences. The original generate-password. | [homepage](https://github.com/jonschlinkert/randomatic \"Generate randomized strings of a specified length using simple character sequences. The original generate-password.\")\n* [repeat-string](https://www.npmjs.com/package/repeat-string): Repeat the given string n times. Fastest implementation for repeating a string. | [homepage](https://github.com/jonschlinkert/repeat-string \"Repeat the given string n times. Fastest implementation for repeating a string.\")\n* [romanize](https://www.npmjs.com/package/romanize): Convert numbers to roman numerals (useful for books, outlines, documentation, slide decks, etc) | [homepage](https://github.com/jonschlinkert/romanize \"Convert numbers to roman numerals (useful for books, outlines, documentation, slide decks, etc)\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 28 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 9 | [doowb](https://github.com/doowb) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 19, 2017._",
./lib/node_modules/micromatch/node_modules/braces/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/package.json:  "readme": "# assign-symbols [![NPM version](https://badge.fury.io/js/assign-symbols.svg)](http://badge.fury.io/js/assign-symbols)\n\n> Assign the enumerable es6 Symbol properties from an object (or objects) to the first object passed on the arguments. Can be used as a supplement to other extend, assign or merge methods as a polyfill for the Symbols part of the es6 Object.assign method.\n\nFrom the [Mozilla Developer docs for Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol):\n\n> A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i assign-symbols --save\n```\n\n## Usage\n\n```js\nvar assignSymbols = require('assign-symbols');\nvar obj = {};\n\nvar one = {};\nvar symbolOne = Symbol('aaa');\none[symbolOne] = 'bbb';\n\nvar two = {};\nvar symbolTwo = Symbol('ccc');\ntwo[symbolTwo] = 'ddd';\n\nassignSymbols(obj, one, two);\n\nconsole.log(obj[symbolOne]);\n//=> 'bbb'\nconsole.log(obj[symbolTwo]);\n//=> 'ddd'\n```\n\n## Similar projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties of source objects to a destination object. | [homepage](https://github.com/jonschlinkert/assign-deep)\n* [clone-deep](https://www.npmjs.com/package/clone-deep): Recursively (deep) clone JavaScript native types, like Object, Array, RegExp, Date as well as primitives. | [homepage](https://github.com/jonschlinkert/clone-deep)\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow)\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/assign-symbols/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 06, 2015._",
./lib/node_modules/micromatch/node_modules/braces/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolOne]);
./lib/node_modules/micromatch/node_modules/braces/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolTwo]);
./lib/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log('a.b.c'.split('.'));
./lib/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log('a\\.b.c'.split('.'));
./lib/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log('"a.b.c".d'.split('.'));
./lib/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log(split('a\\.b.c'));
./lib/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log(split('"a.b.c".d'));
./lib/node_modules/micromatch/node_modules/braces/node_modules/split-string/README.md:console.log(arr);
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/package.json:  "readme": "# fill-range [![NPM version](https://img.shields.io/npm/v/fill-range.svg?style=flat)](https://www.npmjs.com/package/fill-range) [![NPM monthly downloads](https://img.shields.io/npm/dm/fill-range.svg?style=flat)](https://npmjs.org/package/fill-range)  [![NPM total downloads](https://img.shields.io/npm/dt/fill-range.svg?style=flat)](https://npmjs.org/package/fill-range) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/fill-range.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/fill-range)\n\n> Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Examples](#examples)\n- [Options](#options)\n  * [options.step](#optionsstep)\n  * [options.strictRanges](#optionsstrictranges)\n  * [options.stringify](#optionsstringify)\n  * [options.toRegex](#optionstoregex)\n  * [options.transform](#optionstransform)\n- [About](#about)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save fill-range\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add fill-range\n```\n\n## Usage\n\nExpands numbers and letters, optionally using a `step` as the last argument. _(Numbers may be defined as JavaScript numbers or strings)_.\n\n```js\nvar fill = require('fill-range');\nfill(from, to[, step, options]);\n\n// examples\nconsole.log(fill('1', '10'));                  //=> '[ '1', '2', '3', '4', '5', '6', '7', '8', '9', '10' ]'\nconsole.log(fill('1', '10', {toRegex: true})); //=> [1-9]|10\n```\n\n**Params**\n\n* `from`: **{String|Number}** the number or letter to start with\n* `to`: **{String|Number}** the number or letter to end with\n* `step`: **{String|Number|Object|Function}** Optionally pass a [step](#optionsstep) to use.\n* `options`: **{Object|Function}**: See all available [options](#options)\n\n## Examples\n\nBy default, an array of values is returned.\n\n**Alphabetical ranges**\n\n```js\nconsole.log(fill('a', 'e')); //=> ['a', 'b', 'c', 'd', 'e']\nconsole.log(fill('A', 'E')); //=> [ 'A', 'B', 'C', 'D', 'E' ]\n```\n\n**Numerical ranges**\n\nNumbers can be defined as actual numbers or strings.\n\n```js\nconsole.log(fill(1, 5));     //=> [ 1, 2, 3, 4, 5 ]\nconsole.log(fill('1', '5')); //=> [ 1, 2, 3, 4, 5 ]\n```\n\n**Negative ranges**\n\nNumbers can be defined as actual numbers or strings.\n\n```js\nconsole.log(fill('-5', '-1')); //=> [ '-5', '-4', '-3', '-2', '-1' ]\nconsole.log(fill('-5', '5')); //=> [ '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5' ]\n```\n\n**Steps (increments)**\n\n```js\n// numerical ranges with increments\nconsole.log(fill('0', '25', 4)); //=> [ '0', '4', '8', '12', '16', '20', '24' ]\nconsole.log(fill('0', '25', 5)); //=> [ '0', '5', '10', '15', '20', '25' ]\nconsole.log(fill('0', '25', 6)); //=> [ '0', '6', '12', '18', '24' ]\n\n// alphabetical ranges with increments\nconsole.log(fill('a', 'z', 4)); //=> [ 'a', 'e', 'i', 'm', 'q', 'u', 'y' ]\nconsole.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]\nconsole.log(fill('a', 'z', 6)); //=> [ 'a', 'g', 'm', 's', 'y' ]\n```\n\n## Options\n\n### options.step\n\n**Type**: `number` (formatted as a string or number)\n\n**Default**: `undefined`\n\n**Description**: The increment to use for the range. Can be used with letters or numbers.\n\n**Example(s)**\n\n```js\n// numbers\nconsole.log(fill('1', '10', 2)); //=> [ '1', '3', '5', '7', '9' ]\nconsole.log(fill('1', '10', 3)); //=> [ '1', '4', '7', '10' ]\nconsole.log(fill('1', '10', 4)); //=> [ '1', '5', '9' ]\n\n// letters\nconsole.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]\nconsole.log(fill('a', 'z', 7)); //=> [ 'a', 'h', 'o', 'v' ]\nconsole.log(fill('a', 'z', 9)); //=> [ 'a', 'j', 's' ]\n```\n\n### options.strictRanges\n\n**Type**: `boolean`\n\n**Default**: `false`\n\n**Description**: By default, `null` is returned when an invalid range is passed. Enable this option to throw a `RangeError` on invalid ranges.\n\n**Example(s)**\n\nThe following are all invalid:\n\n```js\nfill('1.1', '2');   // decimals not supported in ranges\nfill('a', '2');     // incompatible range values\nfill(1, 10, 'foo'); // invalid \"step\" argument\n```\n\n### options.stringify\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\n**Description**: Cast all returned values to strings. By default, integers are returned as numbers.\n\n**Example(s)**\n\n```js\nconsole.log(fill(1, 5));                    //=> [ 1, 2, 3, 4, 5 ]\nconsole.log(fill(1, 5, {stringify: true})); //=> [ '1', '2', '3', '4', '5' ]\n```\n\n### options.toRegex\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\n**Description**: Create a regex-compatible source string, instead of expanding values to an array.\n\n**Example(s)**\n\n```js\n// alphabetical range\nconsole.log(fill('a', 'e', {toRegex: true})); //=> '[a-e]'\n// alphabetical with step\nconsole.log(fill('a', 'z', 3, {toRegex: true})); //=> 'a|d|g|j|m|p|s|v|y'\n// numerical range\nconsole.log(fill('1', '100', {toRegex: true})); //=> '[1-9]|[1-9][0-9]|100'\n// numerical range with zero padding\nconsole.log(fill('000001', '100000', {toRegex: true}));\n//=> '0{5}[1-9]|0{4}[1-9][0-9]|0{3}[1-9][0-9]{2}|0{2}[1-9][0-9]{3}|0[1-9][0-9]{4}|100000'\n```\n\n### options.transform\n\n**Type**: `function`\n\n**Default**: `undefined`\n\n**Description**: Customize each value in the returned array (or [string](#optionstoRegex)). _(you can also pass this function as the last argument to `fill()`)_.\n\n**Example(s)**\n\n```js\n// increase padding by two\nvar arr = fill('01', '05', function(val, a, b, step, idx, arr, options) {\n  return repeat('0', (options.maxLength + 2) - val.length) + val;\n});\n\nconsole.log(arr);\n//=> ['0001', '0002', '0003', '0004', '0005']\n```\n\n## About\n\n### Related projects\n\n* [braces](https://www.npmjs.com/package/braces): Fast, comprehensive, bash-like brace expansion implemented in JavaScript. Complete support for the Bash 4.3 braces… [more](https://github.com/jonschlinkert/braces) | [homepage](https://github.com/jonschlinkert/braces \"Fast, comprehensive, bash-like brace expansion implemented in JavaScript. Complete support for the Bash 4.3 braces specification, without sacrificing speed.\")\n* [expand-range](https://www.npmjs.com/package/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See… [more](https://github.com/jonschlinkert/expand-range) | [homepage](https://github.com/jonschlinkert/expand-range \"Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch.\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n* [to-regex-range](https://www.npmjs.com/package/to-regex-range): Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than… [more](https://github.com/jonschlinkert/to-regex-range) | [homepage](https://github.com/jonschlinkert/to-regex-range \"Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.87 million test assertions.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 103 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 2   | [paulmillr](https://github.com/paulmillr) |  \n| 1   | [edorivai](https://github.com/edorivai) |  \n| 1   | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |  \n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 23, 2017._",
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/package.json:  "readme": "# to-regex-range [![NPM version](https://img.shields.io/npm/v/to-regex-range.svg?style=flat)](https://www.npmjs.com/package/to-regex-range) [![NPM monthly downloads](https://img.shields.io/npm/dm/to-regex-range.svg?style=flat)](https://npmjs.org/package/to-regex-range)  [![NPM total downloads](https://img.shields.io/npm/dt/to-regex-range.svg?style=flat)](https://npmjs.org/package/to-regex-range) [![Linux Build Status](https://img.shields.io/travis/micromatch/to-regex-range.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/to-regex-range)\n\n> Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save to-regex-range\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add to-regex-range\n```\n\n<details>\n<summary><strong>What does this do?</strong></summary>\n\n<br>\n\nThis libary generates the `source` string to be passed to `new RegExp()` for matching a range of numbers.\n\n**Example**\n\n```js\nvar toRegexRange = require('to-regex-range');\nvar regex = new RegExp(toRegexRange('15', '95'));\n```\n\nA string is returned so that you can do whatever you need with it before passing it to `new RegExp()` (like adding `^` or `$` boundaries, defining flags, or combining it another string).\n\n<br>\n\n</details>\n\n<details>\n<summary><strong>Why use this library?</strong></summary>\n\n<br>\n\n### Convenience\n\nCreating regular expressions for matching numbers gets deceptively complicated pretty fast.\n\nFor example, let's say you need a validation regex for matching part of a user-id, postal code, social security number, tax id, etc:\n\n* regex for matching `1` => `/1/` (easy enough)\n* regex for matching `1` through `5` => `/[1-5]/` (not bad...)\n* regex for matching `1` or `5` => `/(1|5)/` (still easy...)\n* regex for matching `1` through `50` => `/([1-9]|[1-4][0-9]|50)/` (uh-oh...)\n* regex for matching `1` through `55` => `/([1-9]|[1-4][0-9]|5[0-5])/` (no prob, I can do this...)\n* regex for matching `1` through `555` => `/([1-9]|[1-9][0-9]|[1-4][0-9]{2}|5[0-4][0-9]|55[0-5])/` (maybe not...)\n* regex for matching `0001` through `5555` => `/(0{3}[1-9]|0{2}[1-9][0-9]|0[1-9][0-9]{2}|[1-4][0-9]{3}|5[0-4][0-9]{2}|55[0-4][0-9]|555[0-5])/` (okay, I get the point!)\n\nThe numbers are contrived, but they're also really basic. In the real world you might need to generate a regex on-the-fly for validation.\n\n**Learn more**\n\nIf you're interested in learning more about [character classes](http://www.regular-expressions.info/charclass.html) and other regex features, I personally have always found [regular-expressions.info](http://www.regular-expressions.info/charclass.html) to be pretty useful.\n\n### Heavily tested\n\nAs of April 27, 2017, this library runs [2,783,483 test assertions](./test/test.js) against generated regex-ranges to provide brute-force verification that results are indeed correct.\n\nTests run in ~870ms on my MacBook Pro, 2.5 GHz Intel Core i7.\n\n### Highly optimized\n\nGenerated regular expressions are highly optimized:\n\n* duplicate sequences and character classes are reduced using quantifiers\n* smart enough to use `?` conditionals when number(s) or range(s) can be positive or negative\n* uses fragment caching to avoid processing the same exact string more than once\n\n<br>\n\n</details>\n\n## Usage\n\nAdd this library to your javascript application with the following line of code\n\n```js\nvar toRegexRange = require('to-regex-range');\n```\n\nThe main export is a function that takes two integers: the `min` value and `max` value (formatted as strings or numbers).\n\n```js\nvar source = toRegexRange('15', '95');\n//=> 1[5-9]|[2-8][0-9]|9[0-5]\n\nvar re = new RegExp('^' + source + '$');\nconsole.log(re.test('14')); //=> false\nconsole.log(re.test('50')); //=> true\nconsole.log(re.test('94')); //=> true\nconsole.log(re.test('96')); //=> false\n```\n\n## Options\n\n### options.capture\n\n**Type**: `boolean`\n\n**Deafault**: `undefined`\n\nWrap the returned value in parentheses when there is more than one regex condition. Useful when you're dynamically generating ranges.\n\n```js\nconsole.log(toRegexRange('-10', '10'));\n//=> -[1-9]|-?10|[0-9]\n\nconsole.log(toRegexRange('-10', '10', {capture: true}));\n//=> (-[1-9]|-?10|[0-9])\n```\n\n### options.shorthand\n\n**Type**: `boolean`\n\n**Deafault**: `undefined`\n\nUse the regex shorthand for `[0-9]`:\n\n```js\nconsole.log(toRegexRange('0', '999999'));\n//=> [0-9]|[1-9][0-9]{1,5}\n\nconsole.log(toRegexRange('0', '999999', {shorthand: true}));\n//=> \\d|[1-9]\\d{1,5}\n```\n\n### options.relaxZeros\n\n**Type**: `boolean`\n\n**Default**: `true`\n\nThis option only applies to **negative zero-padded ranges**. By default, when a negative zero-padded range is defined, the number of leading zeros is relaxed using `-0*`.\n\n```js\nconsole.log(toRegexRange('-001', '100'));\n//=> -0*1|0{2}[0-9]|0[1-9][0-9]|100\n\nconsole.log(toRegexRange('-001', '100', {relaxZeros: false}));\n//=> -0{2}1|0{2}[0-9]|0[1-9][0-9]|100\n```\n\n<details>\n<summary><strong>Why are zeros relaxed for negative zero-padded ranges by default?</strong></summary>\n\nConsider the following.\n\n```js\nvar regex = toRegexRange('-001', '100');\n```\n\n_Note that `-001` and `100` are both three digits long_.\n\nIn most zero-padding implementations, only a single leading zero is enough to indicate that zero-padding should be applied. Thus, the leading zeros would be \"corrected\" on the negative range in the example to `-01`, instead of `-001`, to make total length of each string no greater than the length of the largest number in the range (in other words, `-001` is 4 digits, but `100` is only three digits).\n\nIf zeros were not relaxed by default, you might expect the resulting regex of the above pattern to match `-001` - given that it's defined that way in the arguments - _but it wouldn't_. It would, however, match `-01`. This gets even more ambiguous with large ranges, like `-01` to `1000000`.\n\nThus, we relax zeros by default to provide a more predictable experience for users.\n\n</details>\n\n## Examples\n\n| **Range** | **Result** | **Compile time** | \n| --- | --- | --- |\n| `toRegexRange('5, 5')` | `5` | _33μs_ |\n| `toRegexRange('5, 6')` | `5\\|6` | _53μs_ |\n| `toRegexRange('29, 51')` | `29\\|[34][0-9]\\|5[01]` | _699μs_ |\n| `toRegexRange('31, 877')` | `3[1-9]\\|[4-9][0-9]\\|[1-7][0-9]{2}\\|8[0-6][0-9]\\|87[0-7]` | _711μs_ |\n| `toRegexRange('111, 555')` | `11[1-9]\\|1[2-9][0-9]\\|[2-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5]` | _62μs_ |\n| `toRegexRange('-10, 10')` | `-[1-9]\\|-?10\\|[0-9]` | _74μs_ |\n| `toRegexRange('-100, -10')` | `-1[0-9]\\|-[2-9][0-9]\\|-100` | _49μs_ |\n| `toRegexRange('-100, 100')` | `-[1-9]\\|-?[1-9][0-9]\\|-?100\\|[0-9]` | _45μs_ |\n| `toRegexRange('001, 100')` | `0{2}[1-9]\\|0[1-9][0-9]\\|100` | _158μs_ |\n| `toRegexRange('0010, 1000')` | `0{2}1[0-9]\\|0{2}[2-9][0-9]\\|0[1-9][0-9]{2}\\|1000` | _61μs_ |\n| `toRegexRange('1, 2')` | `1\\|2` | _10μs_ |\n| `toRegexRange('1, 5')` | `[1-5]` | _24μs_ |\n| `toRegexRange('1, 10')` | `[1-9]\\|10` | _23μs_ |\n| `toRegexRange('1, 100')` | `[1-9]\\|[1-9][0-9]\\|100` | _30μs_ |\n| `toRegexRange('1, 1000')` | `[1-9]\\|[1-9][0-9]{1,2}\\|1000` | _52μs_ |\n| `toRegexRange('1, 10000')` | `[1-9]\\|[1-9][0-9]{1,3}\\|10000` | _47μs_ |\n| `toRegexRange('1, 100000')` | `[1-9]\\|[1-9][0-9]{1,4}\\|100000` | _44μs_ |\n| `toRegexRange('1, 1000000')` | `[1-9]\\|[1-9][0-9]{1,5}\\|1000000` | _49μs_ |\n| `toRegexRange('1, 10000000')` | `[1-9]\\|[1-9][0-9]{1,6}\\|10000000` | _63μs_ |\n\n## Heads up!\n\n**Order of arguments**\n\nWhen the `min` is larger than the `max`, values will be flipped to create a valid range:\n\n```js\ntoRegexRange('51', '29');\n```\n\nIs effectively flipped to:\n\n```js\ntoRegexRange('29', '51');\n//=> 29|[3-4][0-9]|5[0-1]\n```\n\n**Steps / increments**\n\nThis library does not support steps (increments). A pr to add support would be welcome.\n\n## History\n\n### v2.0.0 - 2017-04-21\n\n**New features**\n\nAdds support for zero-padding!\n\n### v1.0.0\n\n**Optimizations**\n\nRepeating ranges are now grouped using quantifiers. rocessing time is roughly the same, but the generated regex is much smaller, which should result in faster matching.\n\n## Attribution\n\nInspired by the python library [range-regex](https://github.com/dimka665/range-regex).\n\n## About\n\n### Related projects\n\n* [expand-range](https://www.npmjs.com/package/expand-range): Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See… [more](https://github.com/jonschlinkert/expand-range) | [homepage](https://github.com/jonschlinkert/expand-range \"Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. See the benchmarks. Used by micromatch.\")\n* [fill-range](https://www.npmjs.com/package/fill-range): Fill in a range of numbers or letters, optionally passing an increment or `step` to… [more](https://github.com/jonschlinkert/fill-range) | [homepage](https://github.com/jonschlinkert/fill-range \"Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n* [repeat-element](https://www.npmjs.com/package/repeat-element): Create an array by repeating the given value n times. | [homepage](https://github.com/jonschlinkert/repeat-element \"Create an array by repeating the given value n times.\")\n* [repeat-string](https://www.npmjs.com/package/repeat-string): Repeat the given string n times. Fastest implementation for repeating a string. | [homepage](https://github.com/jonschlinkert/repeat-string \"Repeat the given string n times. Fastest implementation for repeating a string.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on April 27, 2017._",
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(re.test('14')); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(re.test('50')); //=> true
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(re.test('94')); //=> true
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(re.test('96')); //=> false
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('-10', '10'));
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('-10', '10', {capture: true}));
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('0', '999999'));
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('0', '999999', {shorthand: true}));
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('-001', '100'));
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/node_modules/to-regex-range/README.md:console.log(toRegexRange('-001', '100', {relaxZeros: false}));
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '10'));                  //=> '[ '1', '2', '3', '4', '5', '6', '7', '8', '9', '10' ]'
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '10', {toRegex: true})); //=> [1-9]|10
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'e')); //=> ['a', 'b', 'c', 'd', 'e']
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('A', 'E')); //=> [ 'A', 'B', 'C', 'D', 'E' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill(1, 5));     //=> [ 1, 2, 3, 4, 5 ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '5')); //=> [ 1, 2, 3, 4, 5 ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('-5', '-1')); //=> [ '-5', '-4', '-3', '-2', '-1' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('-5', '5')); //=> [ '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('0', '25', 4)); //=> [ '0', '4', '8', '12', '16', '20', '24' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('0', '25', 5)); //=> [ '0', '5', '10', '15', '20', '25' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('0', '25', 6)); //=> [ '0', '6', '12', '18', '24' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 4)); //=> [ 'a', 'e', 'i', 'm', 'q', 'u', 'y' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 6)); //=> [ 'a', 'g', 'm', 's', 'y' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '10', 2)); //=> [ '1', '3', '5', '7', '9' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '10', 3)); //=> [ '1', '4', '7', '10' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '10', 4)); //=> [ '1', '5', '9' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 7)); //=> [ 'a', 'h', 'o', 'v' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 9)); //=> [ 'a', 'j', 's' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill(1, 5));                    //=> [ 1, 2, 3, 4, 5 ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill(1, 5, {stringify: true})); //=> [ '1', '2', '3', '4', '5' ]
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'e', {toRegex: true})); //=> '[a-e]'
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('a', 'z', 3, {toRegex: true})); //=> 'a|d|g|j|m|p|s|v|y'
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('1', '100', {toRegex: true})); //=> '[1-9]|[1-9][0-9]|100'
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(fill('000001', '100000', {toRegex: true}));
./lib/node_modules/micromatch/node_modules/braces/node_modules/fill-range/README.md:console.log(arr);
./lib/node_modules/micromatch/node_modules/braces/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://img.shields.io/npm/v/define-property.svg?style=flat)](https://www.npmjs.com/package/define-property) [![NPM monthly downloads](https://img.shields.io/npm/dm/define-property.svg?style=flat)](https://npmjs.org/package/define-property)  [![NPM total downloads](https://img.shields.io/npm/dt/define-property.svg?style=flat)](https://npmjs.org/package/define-property) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/define-property.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save define-property\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add define-property\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## About\n\n### Related projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target… [more](https://github.com/jonschlinkert/assign-deep) | [homepage](https://github.com/jonschlinkert/assign-deep \"Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target (first) object.\")\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow \"Extend an object with the properties of additional objects. node.js/javascript util.\")\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep \"Recursively merge values in a javascript object.\")\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep \"Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 20, 2017._",
./lib/node_modules/micromatch/node_modules/braces/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg?style=flat)](https://www.npmjs.com/package/is-data-descriptor) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![NPM total downloads](https://img.shields.io/npm/dt/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-data-descriptor\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor \"Returns true if a value has the characteristics of a valid JavaScript accessor descriptor.\")\n* [is-data-descriptor](https://www.npmjs.com/package/is-data-descriptor): Returns true if a value has the characteristics of a valid JavaScript data descriptor. | [homepage](https://github.com/jonschlinkert/is-data-descriptor \"Returns true if a value has the characteristics of a valid JavaScript data descriptor.\")\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://github.com/jonschlinkert/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor \"Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for data descriptors and accessor descriptors.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 21 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [realityking](https://github.com/realityking) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 01, 2017._",
./lib/node_modules/micromatch/node_modules/braces/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./lib/node_modules/micromatch/node_modules/braces/node_modules/define-property/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/braces/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{x,y,z}/b'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a/{x,y,z}/b'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{x,y,z}/b', {expand: true}));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{foo,bar,baz}/*.js'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a/{foo,bar,baz}/*.js'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('{1..3}'));     // ['1', '2', '3']
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{01..03}b')); // ['a01b', 'a02b', 'a03b']
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{1..3}b'));   // ['a1b', 'a2b', 'a3b']
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('{a..c}'));     // ['a', 'b', 'c']
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('foo/{a..c}')); // ['foo/a', 'foo/b', 'foo/c']
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a{01..03}b'));   //=> [ 'a(0[1-3])b' ]
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a{001..300}b')); //=> [ 'a(0{2}[1-9]|0[1-9][0-9]|[12][0-9]{2}|300)b' ]
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('{2..10..2}'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('{2..10..2}'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{b,c,/{x,y}}/e'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a/{x,{1..5},y}/c'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a{b,c,/{x,y}}/e'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{x,{1..5},y}/c'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a\\{d,c,b}e'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{d,c,b\\}e'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{b\\,c}d'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{d\\,c,b}e'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('a{b}c'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{b,c}/d', { maxLength: 3 }));  //=> throws an error
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{b,c}/d', {expand: true}));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/{b,c}/d'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('{1..1000}'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces.expand('{1..100}'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(range);
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/b{1,3}/{x,y,z}'));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true}));
./lib/node_modules/micromatch/node_modules/braces/README.md:console.log(braces('a/b{1,3}/{x,y,z}', {quantifiers: true, expand: true}));
./lib/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces('{a,b,c}'));
./lib/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces('{a,b,c}', {expand: true}));
./lib/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces.expand('a/{b,c}/d'));
./lib/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces.expand('a/{b,c}/d'));
./lib/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
./lib/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces.makeRe('id-{200..300}'));
./lib/node_modules/micromatch/node_modules/braces/index.js: * console.log(ast);
./lib/node_modules/micromatch/node_modules/braces/index.js: * console.log(braces.compile(ast));
./lib/node_modules/micromatch/node_modules/braces/lib/parsers-parens.js:      console.log(brace)
./lib/node_modules/micromatch/node_modules/kind-of/package.json:  "readme": "# kind-of [![NPM version](https://img.shields.io/npm/v/kind-of.svg?style=flat)](https://www.npmjs.com/package/kind-of) [![NPM monthly downloads](https://img.shields.io/npm/dm/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![NPM total downloads](https://img.shields.io/npm/dt/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/kind-of.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/kind-of)\n\n> Get the native type of a value.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save kind-of\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install kind-of --save\n```\n\n## Why use this?\n\n1. [it's fast](#benchmarks) | [optimizations](#optimizations)\n2. [better type checking](#better-type-checking)\n\n## Usage\n\n> es5, es6, and browser ready\n\n```js\nvar kindOf = require('kind-of');\n\nkindOf(undefined);\n//=> 'undefined'\n\nkindOf(null);\n//=> 'null'\n\nkindOf(true);\n//=> 'boolean'\n\nkindOf(false);\n//=> 'boolean'\n\nkindOf(new Buffer(''));\n//=> 'buffer'\n\nkindOf(42);\n//=> 'number'\n\nkindOf('str');\n//=> 'string'\n\nkindOf(arguments);\n//=> 'arguments'\n\nkindOf({});\n//=> 'object'\n\nkindOf(Object.create(null));\n//=> 'object'\n\nkindOf(new Test());\n//=> 'object'\n\nkindOf(new Date());\n//=> 'date'\n\nkindOf([1, 2, 3]);\n//=> 'array'\n\nkindOf(/foo/);\n//=> 'regexp'\n\nkindOf(new RegExp('foo'));\n//=> 'regexp'\n\nkindOf(new Error('error'));\n//=> 'error'\n\nkindOf(function () {});\n//=> 'function'\n\nkindOf(function * () {});\n//=> 'generatorfunction'\n\nkindOf(Symbol('str'));\n//=> 'symbol'\n\nkindOf(new Map());\n//=> 'map'\n\nkindOf(new WeakMap());\n//=> 'weakmap'\n\nkindOf(new Set());\n//=> 'set'\n\nkindOf(new WeakSet());\n//=> 'weakset'\n\nkindOf(new Int8Array());\n//=> 'int8array'\n\nkindOf(new Uint8Array());\n//=> 'uint8array'\n\nkindOf(new Uint8ClampedArray());\n//=> 'uint8clampedarray'\n\nkindOf(new Int16Array());\n//=> 'int16array'\n\nkindOf(new Uint16Array());\n//=> 'uint16array'\n\nkindOf(new Int32Array());\n//=> 'int32array'\n\nkindOf(new Uint32Array());\n//=> 'uint32array'\n\nkindOf(new Float32Array());\n//=> 'float32array'\n\nkindOf(new Float64Array());\n//=> 'float64array'\n```\n\n## Benchmarks\n\nBenchmarked against [typeof](http://github.com/CodingFu/typeof) and [type-of](https://github.com/ForbesLindesay/type-of).\n\n```bash\n# arguments (32 bytes)\n  kind-of x 17,024,098 ops/sec ±1.90% (86 runs sampled)\n  lib-type-of x 11,926,235 ops/sec ±1.34% (83 runs sampled)\n  lib-typeof x 9,245,257 ops/sec ±1.22% (87 runs sampled)\n\n  fastest is kind-of (by 161% avg)\n\n# array (22 bytes)\n  kind-of x 17,196,492 ops/sec ±1.07% (88 runs sampled)\n  lib-type-of x 8,838,283 ops/sec ±1.02% (87 runs sampled)\n  lib-typeof x 8,677,848 ops/sec ±0.87% (87 runs sampled)\n\n  fastest is kind-of (by 196% avg)\n\n# boolean (24 bytes)\n  kind-of x 16,841,600 ops/sec ±1.10% (86 runs sampled)\n  lib-type-of x 8,096,787 ops/sec ±0.95% (87 runs sampled)\n  lib-typeof x 8,423,345 ops/sec ±1.15% (86 runs sampled)\n\n  fastest is kind-of (by 204% avg)\n\n# buffer (38 bytes)\n  kind-of x 14,848,060 ops/sec ±1.05% (86 runs sampled)\n  lib-type-of x 3,671,577 ops/sec ±1.49% (87 runs sampled)\n  lib-typeof x 8,360,236 ops/sec ±1.24% (86 runs sampled)\n\n  fastest is kind-of (by 247% avg)\n\n# date (30 bytes)\n  kind-of x 16,067,761 ops/sec ±1.58% (86 runs sampled)\n  lib-type-of x 8,954,436 ops/sec ±1.40% (87 runs sampled)\n  lib-typeof x 8,488,307 ops/sec ±1.51% (84 runs sampled)\n\n  fastest is kind-of (by 184% avg)\n\n# error (36 bytes)\n  kind-of x 9,634,090 ops/sec ±1.12% (89 runs sampled)\n  lib-type-of x 7,735,624 ops/sec ±1.32% (86 runs sampled)\n  lib-typeof x 7,442,160 ops/sec ±1.11% (90 runs sampled)\n\n  fastest is kind-of (by 127% avg)\n\n# function (34 bytes)\n  kind-of x 10,031,494 ops/sec ±1.27% (86 runs sampled)\n  lib-type-of x 9,502,757 ops/sec ±1.17% (89 runs sampled)\n  lib-typeof x 8,278,985 ops/sec ±1.08% (88 runs sampled)\n\n  fastest is kind-of (by 113% avg)\n\n# null (24 bytes)\n  kind-of x 18,159,808 ops/sec ±1.92% (86 runs sampled)\n  lib-type-of x 12,927,635 ops/sec ±1.01% (88 runs sampled)\n  lib-typeof x 7,958,234 ops/sec ±1.21% (89 runs sampled)\n\n  fastest is kind-of (by 174% avg)\n\n# number (22 bytes)\n  kind-of x 17,846,779 ops/sec ±0.91% (85 runs sampled)\n  lib-type-of x 3,316,636 ops/sec ±1.19% (86 runs sampled)\n  lib-typeof x 2,329,477 ops/sec ±2.21% (85 runs sampled)\n\n  fastest is kind-of (by 632% avg)\n\n# object-plain (47 bytes)\n  kind-of x 7,085,155 ops/sec ±1.05% (88 runs sampled)\n  lib-type-of x 8,870,930 ops/sec ±1.06% (83 runs sampled)\n  lib-typeof x 8,716,024 ops/sec ±1.05% (87 runs sampled)\n\n  fastest is lib-type-of (by 112% avg)\n\n# regex (25 bytes)\n  kind-of x 14,196,052 ops/sec ±1.65% (84 runs sampled)\n  lib-type-of x 9,554,164 ops/sec ±1.25% (88 runs sampled)\n  lib-typeof x 8,359,691 ops/sec ±1.07% (87 runs sampled)\n\n  fastest is kind-of (by 158% avg)\n\n# string (33 bytes)\n  kind-of x 16,131,428 ops/sec ±1.41% (85 runs sampled)\n  lib-type-of x 7,273,172 ops/sec ±1.05% (87 runs sampled)\n  lib-typeof x 7,382,635 ops/sec ±1.17% (85 runs sampled)\n\n  fastest is kind-of (by 220% avg)\n\n# symbol (34 bytes)\n  kind-of x 17,011,537 ops/sec ±1.24% (86 runs sampled)\n  lib-type-of x 3,492,454 ops/sec ±1.23% (89 runs sampled)\n  lib-typeof x 7,471,235 ops/sec ±2.48% (87 runs sampled)\n\n  fastest is kind-of (by 310% avg)\n\n# template-strings (36 bytes)\n  kind-of x 15,434,250 ops/sec ±1.46% (83 runs sampled)\n  lib-type-of x 7,157,907 ops/sec ±0.97% (87 runs sampled)\n  lib-typeof x 7,517,986 ops/sec ±0.92% (86 runs sampled)\n\n  fastest is kind-of (by 210% avg)\n\n# undefined (29 bytes)\n  kind-of x 19,167,115 ops/sec ±1.71% (87 runs sampled)\n  lib-type-of x 15,477,740 ops/sec ±1.63% (85 runs sampled)\n  lib-typeof x 19,075,495 ops/sec ±1.17% (83 runs sampled)\n\n  fastest is lib-typeof,kind-of\n\n```\n\n## Optimizations\n\nIn 7 out of 8 cases, this library is 2x-10x faster than other top libraries included in the benchmarks. There are a few things that lead to this performance advantage, none of them hard and fast rules, but all of them simple and repeatable in almost any code library:\n\n1. Optimize around the fastest and most common use cases first. Of course, this will change from project-to-project, but I took some time to understand how and why `typeof` checks were being used in my own libraries and other libraries I use a lot.\n2. Optimize around bottlenecks - In other words, the order in which conditionals are implemented is significant, because each check is only as fast as the failing checks that came before it. Here, the biggest bottleneck by far is checking for plain objects (an object that was created by the `Object` constructor). I opted to make this check happen by process of elimination rather than brute force up front (e.g. by using something like `val.constructor.name`), so that every other type check would not be penalized it.\n3. Don't do uneccessary processing - why do `.slice(8, -1).toLowerCase();` just to get the word `regex`? It's much faster to do `if (type === '[object RegExp]') return 'regex'`\n4. There is no reason to make the code in a microlib as terse as possible, just to win points for making it shorter. It's always better to favor performant code over terse code. You will always only be using a single `require()` statement to use the library anyway, regardless of how the code is written.\n\n## Better type checking\n\nkind-of seems to be more consistently \"correct\" than other type checking libs I've looked at. For example, here are some differing results from other popular libs:\n\n### [typeof](https://github.com/CodingFu/typeof) lib\n\nIncorrectly identifies instances of custom constructors (pretty common):\n\n```js\nvar typeOf = require('typeof');\nfunction Test() {}\nconsole.log(typeOf(new Test()));\n//=> 'test'\n```\n\nReturns `object` instead of `arguments`:\n\n```js\nfunction foo() {\n  console.log(typeOf(arguments)) //=> 'object'\n}\nfoo();\n```\n\n### [type-of](https://github.com/ForbesLindesay/type-of) lib\n\nIncorrectly returns `object` for generator functions, buffers, `Map`, `Set`, `WeakMap` and `WeakSet`:\n\n```js\nfunction * foo() {}\nconsole.log(typeOf(foo));\n//=> 'object'\nconsole.log(typeOf(new Buffer('')));\n//=> 'object'\nconsole.log(typeOf(new Map()));\n//=> 'object'\nconsole.log(typeOf(new Set()));\n//=> 'object'\nconsole.log(typeOf(new WeakMap()));\n//=> 'object'\nconsole.log(typeOf(new WeakSet()));\n//=> 'object'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-number](https://www.npmjs.com/package/is-number): Returns true if the value is a number. comprehensive tests. | [homepage](https://github.com/jonschlinkert/is-number \"Returns true if the value is a number. comprehensive tests.\")\n* [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive.  | [homepage](https://github.com/jonschlinkert/is-primitive \"Returns `true` if the value is a primitive. \")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 98 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 3 | [aretecode](https://github.com/aretecode) |\n| 2 | [miguelmota](https://github.com/miguelmota) |\n| 1 | [dtothefp](https://github.com/dtothefp) |\n| 1 | [ianstormtaylor](https://github.com/ianstormtaylor) |\n| 1 | [ksheedlo](https://github.com/ksheedlo) |\n| 1 | [pdehaan](https://github.com/pdehaan) |\n| 1 | [laggingreflex](https://github.com/laggingreflex) |\n| 1 | [charlike-old](https://github.com/charlike-old) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on December 01, 2017._",
./lib/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new Test()));
./lib/node_modules/micromatch/node_modules/kind-of/README.md:  console.log(typeOf(arguments)) //=> 'object'
./lib/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(foo));
./lib/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new Buffer('')));
./lib/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new Map()));
./lib/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new Set()));
./lib/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new WeakMap()));
./lib/node_modules/micromatch/node_modules/kind-of/README.md:console.log(typeOf(new WeakSet()));
./lib/node_modules/micromatch/node_modules/arr-diff/package.json:  "readme": "# arr-diff [![NPM version](https://img.shields.io/npm/v/arr-diff.svg?style=flat)](https://www.npmjs.com/package/arr-diff) [![NPM monthly downloads](https://img.shields.io/npm/dm/arr-diff.svg?style=flat)](https://npmjs.org/package/arr-diff) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/arr-diff.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/arr-diff)\n\n> Returns an array with only the unique values from the first array, by excluding all values from additional arrays using strict equality for comparisons.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save arr-diff\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add arr-diff\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install arr-diff --save\n```\n\n## Usage\n\nReturns the difference between the first array and additional arrays.\n\n```js\nvar diff = require('arr-diff');\n\nvar a = ['a', 'b', 'c', 'd'];\nvar b = ['b', 'c'];\n\nconsole.log(diff(a, b))\n//=> ['a', 'd']\n```\n\n## Benchmarks\n\nThis library versus [array-differ](https://github.com/sindresorhus/array-differ), on April 14, 2017:\n\n```\nBenchmarking: (4 of 4)\n · long-dupes\n · long\n · med\n · short\n\n# benchmark/fixtures/long-dupes.js (100804 bytes)\n  arr-diff-3.0.0 x 822 ops/sec ±0.67% (86 runs sampled)\n  arr-diff-4.0.0 x 2,141 ops/sec ±0.42% (89 runs sampled)\n  array-differ x 708 ops/sec ±0.70% (89 runs sampled)\n\n  fastest is arr-diff-4.0.0\n\n# benchmark/fixtures/long.js (94529 bytes)\n  arr-diff-3.0.0 x 882 ops/sec ±0.60% (87 runs sampled)\n  arr-diff-4.0.0 x 2,329 ops/sec ±0.97% (83 runs sampled)\n  array-differ x 769 ops/sec ±0.61% (90 runs sampled)\n\n  fastest is arr-diff-4.0.0\n\n# benchmark/fixtures/med.js (708 bytes)\n  arr-diff-3.0.0 x 856,150 ops/sec ±0.42% (89 runs sampled)\n  arr-diff-4.0.0 x 4,665,249 ops/sec ±1.06% (89 runs sampled)\n  array-differ x 653,888 ops/sec ±1.02% (86 runs sampled)\n\n  fastest is arr-diff-4.0.0\n\n# benchmark/fixtures/short.js (60 bytes)\n  arr-diff-3.0.0 x 3,078,467 ops/sec ±0.77% (93 runs sampled)\n  arr-diff-4.0.0 x 9,213,296 ops/sec ±0.65% (89 runs sampled)\n  array-differ x 1,337,051 ops/sec ±0.91% (92 runs sampled)\n\n  fastest is arr-diff-4.0.0\n```\n\n## About\n\n### Related projects\n\n* [arr-flatten](https://www.npmjs.com/package/arr-flatten): Recursively flatten an array or arrays. This is the fastest implementation of array flatten. | [homepage](https://github.com/jonschlinkert/arr-flatten \"Recursively flatten an array or arrays. This is the fastest implementation of array flatten.\")\n* [array-filter](https://www.npmjs.com/package/array-filter): Array#filter for older browsers. | [homepage](https://github.com/juliangruber/array-filter \"Array#filter for older browsers.\")\n* [array-intersection](https://www.npmjs.com/package/array-intersection): Return an array with the unique values present in _all_ given arrays using strict equality… [more](https://github.com/jonschlinkert/array-intersection) | [homepage](https://github.com/jonschlinkert/array-intersection \"Return an array with the unique values present in _all_ given arrays using strict equality for comparisons.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 33 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [paulmillr](https://github.com/paulmillr) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 14, 2017._",
./lib/node_modules/micromatch/node_modules/arr-diff/README.md:console.log(diff(a, b))
./lib/node_modules/micromatch/node_modules/snapdragon/package.json:  "readme": "# snapdragon [![NPM version](https://img.shields.io/npm/v/snapdragon.svg?style=flat)](https://www.npmjs.com/package/snapdragon) [![NPM downloads](https://img.shields.io/npm/dm/snapdragon.svg?style=flat)](https://npmjs.org/package/snapdragon) [![Build Status](https://img.shields.io/travis/jonschlinkert/snapdragon.svg?style=flat)](https://travis-ci.org/jonschlinkert/snapdragon)\n\n> Fast, pluggable and easy-to-use parser-renderer factory.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save snapdragon\n```\n\nCreated by [jonschlinkert](https://github.com/jonschlinkert) and [doowb](https://github.com/doowb).\n\n**Features**\n\n* Bootstrap your own parser, get sourcemap support for free\n* All parsing and compiling is handled by simple, reusable middleware functions\n* Inspired by the parsers in [pug](http://jade-lang.com) and [css](https://github.com/reworkcss/css).\n\n## History\n\n### v0.5.0\n\n**Breaking changes**\n\nSubstantial breaking changes were made in v0.5.0! Most of these changes are part of a larger refactor that will be finished in 0.6.0, including the introduction of a `Lexer` class.\n\n* Renderer was renamed to `Compiler`\n* the `.render` method was renamed to `.compile`\n* Many other smaller changes. A more detailed overview will be provided in 0.6.0. If you don't have to time review code, I recommend you wait for the 0.6.0 release.\n\n## Usage examples\n\n```js\nvar Snapdragon = require('snapdragon');\nvar snapdragon = new Snapdragon();\n```\n\n**Parse**\n\n```js\nvar ast = snapdragon.parser('some string', options)\n  // parser middleware that can be called by other middleware\n  .set('foo', function () {})\n  // parser middleware, runs immediately in the order defined\n  .use(bar())\n  .use(baz())\n```\n\n**Render**\n\n```js\n// pass the `ast` from the parse method\nvar res = snapdragon.compiler(ast)\n  // compiler middleware, called when the name of the middleware\n  // matches the `node.type` (defined in a parser middleware)\n  .set('bar', function () {})\n  .set('baz', function () {})\n  .compile()\n```\n\nSee the [examples](./examples/).\n\n## Getting started\n\n**Parsers**\n\nParsers are middleware functions used for parsing a string into an ast node.\n\n```js\nvar ast = snapdragon.parser(str, options)\n  .use(function() {\n    var pos = this.position();\n    var m = this.match(/^\\./);\n    if (!m) return;\n    return pos({\n      // `type` specifies the compiler to use\n      type: 'dot',\n      val: m[0]\n    });\n  })\n```\n\n**AST node**\n\nWhen the parser finds a match, `pos()` is called, pushing a token for that node onto the ast that looks something like:\n\n```js\n{ type: 'dot',\n  val: '.',\n  position:\n   { start: { lineno: 1, column: 1 },\n     end: { lineno: 1, column: 2 } }}\n```\n\n**Renderers**\n\nRenderers are _named_ middleware functions that visit over an array of ast nodes to compile a string.\n\n```js\nvar res = snapdragon.compiler(ast)\n  .set('dot', function (node) {\n    console.log(node.val)\n    //=> '.'\n    return this.emit(node.val);\n  })\n```\n\n**Source maps**\n\nIf you want source map support, make sure to emit the position as well.\n\n```js\nvar res = snapdragon.compiler(ast)\n  .set('dot', function (node) {\n    return this.emit(node.val, node.position);\n  })\n```\n\n## Docs\n\n### Parser middleware\n\nA parser middleware is a function that returns an abject called a `token`. This token is pushed onto the AST as a node.\n\n**Example token**\n\n```js\n{ type: 'dot',\n  val: '.',\n  position:\n   { start: { lineno: 1, column: 1 },\n     end: { lineno: 1, column: 2 } }}\n```\n\n**Example parser middleware**\n\nMatch a single `.` in a string:\n\n1. Get the starting position by calling `this.position()`\n2. pass a regex for matching a single dot to the `.match` method\n3. if **no match** is found, return `undefined`\n4. if a **match** is found, `pos()` is called, which returns a token with:\n  - `type`: the name of the [compiler] to use\n  - `val`: The actual value captured by the regex. In this case, a `.`. Note that you can capture and return whatever will be needed by the corresponding [compiler].\n  - The ending position: automatically calculated by adding the length of the first capture group to the starting position.\n\n## Renderer middleware\n\nRenderers are run when the name of the compiler middleware matches the `type` defined on an ast `node` (which is defined in a parser).\n\n**Example**\n\nExercise: Parse a dot, then compile it as an escaped dot.\n\n```js\nvar ast = snapdragon.parser('.')\n  .use(function () {\n    var pos = this.position();\n    var m = this.match(/^\\./);\n    if (!m) return;\n    return pos({\n      // define the `type` of compiler to use\n      type: 'dot',\n      val: m[0]\n    })\n  })\n\nvar result = snapdragon.compiler(ast)\n  .set('dot', function (node) {\n    return this.emit('\\\\' + node.val);\n  })\n  .compile()\n\nconsole.log(result.output);\n//=> '\\.'\n```\n\n## API\n\n### [Parser](lib/parser.js#L19)\n\nCreate a new `Parser` with the given `input` and `options`.\n\n**Params**\n\n* `input` **{String}**\n* `options` **{Object}**\n\n### [.define](lib/parser.js#L103)\n\nDefine a non-enumberable property on the `Parser` instance.\n\n**Example**\n\n```js\nparser.define('foo', 'bar');\n```\n\n**Params**\n\n* `key` **{String}**: propery name\n* `val` **{any}**: property value\n* `returns` **{Object}**: Returns the Parser instance for chaining.\n\nSet parser `name` with the given `fn`\n\n**Params**\n\n* `name` **{String}**\n* `fn` **{Function}**\n\nGet parser `name`\n\n**Params**\n\n* `name` **{String}**\n\nPush a `token` onto the `type` stack.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Object}** `token`\n\nPop a token off of the `type` stack\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Object}**: Returns a token\n\nReturn true if inside a `stack` node. Types are `braces`, `parens` or `brackets`.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nparser.isType(node, 'brace');\n```\n\n**Params**\n\n* `node` **{Object}**\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n### [.define](lib/compiler.js#L71)\n\nDefine a non-enumberable property on the `Compiler` instance.\n\n**Example**\n\n```js\ncompiler.define('foo', 'bar');\n```\n\n**Params**\n\n* `key` **{String}**: propery name\n* `val` **{any}**: property value\n* `returns` **{Object}**: Returns the Compiler instance for chaining.\n\n## About\n\n### Related projects\n\n* [braces](https://www.npmjs.com/package/braces): Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces… [more](https://github.com/jonschlinkert/braces) | [homepage](https://github.com/jonschlinkert/braces \"Fastest brace expansion for node.js, with the most complete support for the Bash 4.3 braces specification.\")\n* [expand-brackets](https://www.npmjs.com/package/expand-brackets): Expand POSIX bracket expressions (character classes) in glob patterns. | [homepage](https://github.com/jonschlinkert/expand-brackets \"Expand POSIX bracket expressions (character classes) in glob patterns.\")\n* [extglob](https://www.npmjs.com/package/extglob): Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to… [more](https://github.com/jonschlinkert/extglob) | [homepage](https://github.com/jonschlinkert/extglob \"Convert extended globs to regex-compatible strings. Add (almost) the expressive power of regular expressions to glob patterns.\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/jonschlinkert/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor**<br/> | \n| --- | --- |\n| 106 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [doowb](https://github.com/doowb) |\n\n### Building docs\n\n_(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/snapdragon/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.1.31, on October 10, 2016._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:console.log(smc.sources);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:console.log(smc.originalPositionFor({
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:console.log(smc.generatedPositionFor({
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:console.log(compile(ast).toStringWithSourceMap({
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:console.log(map.toString());
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:consumer.eachMapping(function (m) { console.log(m); })
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:node.walk(function (code, loc) { console.log("WALK:", code, loc); })
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map/README.md:node.walkSourceContents(function (source, contents) { console.log("WALK:", source, ":", contents); })
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/package.json:  "readme": "<p align=\"center\">\n  <a href=\"https://github.com/node-base/base\">\n    <img height=\"250\" width=\"250\" src=\"https://raw.githubusercontent.com/node-base/base/master/docs/logo.png\">\n  </a>\n</p>\n\n# base [![NPM version](https://img.shields.io/npm/v/base.svg?style=flat)](https://www.npmjs.com/package/base) [![NPM monthly downloads](https://img.shields.io/npm/dm/base.svg?style=flat)](https://npmjs.org/package/base)  [![NPM total downloads](https://img.shields.io/npm/dt/base.svg?style=flat)](https://npmjs.org/package/base) [![Linux Build Status](https://img.shields.io/travis/node-base/base.svg?style=flat&label=Travis)](https://travis-ci.org/node-base/base)\n\n> base is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting with a handful of common methods, like `set`, `get`, `del` and `use`.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save base\n```\n\n## What is Base?\n\nBase is a framework for rapidly creating high quality node.js applications, using plugins like building blocks.\n\n### Guiding principles\n\nThe core team follows these principles to help guide API decisions:\n\n* **Compact API surface**: The smaller the API surface, the easier the library will be to learn and use.\n* **Easy to extend**: Implementors can use any npm package, and write plugins in pure JavaScript. If you're building complex apps, Base simplifies inheritance.\n* **Easy to test**: No special setup should be required to unit test `Base` or base plugins\n\n### Minimal API surface\n\n[The API](#api) was designed to provide only the minimum necessary functionality for creating a useful application, with or without [plugins](#plugins).\n\n**Base core**\n\nBase itself ships with only a handful of [useful methods](#api), such as:\n\n* `.set`: for setting values on the instance\n* `.get`: for getting values from the instance\n* `.has`: to check if a property exists on the instance\n* `.define`: for setting non-enumerable values on the instance\n* `.use`: for adding plugins\n\n**Be generic**\n\nWhen deciding on method to add or remove, we try to answer these questions:\n\n1. Will all or most Base applications need this method?\n2. Will this method encourage practices or enforce conventions that are beneficial to implementors?\n3. Can or should this be done in a plugin instead?\n\n### Composability\n\n**Plugin system**\n\nIt couldn't be easier to extend Base with any features or custom functionality you can think of.\n\nBase plugins are just functions that take an instance of `Base`:\n\n```js\nvar base = new Base();\n\nfunction plugin(base) {\n  // do plugin stuff, in pure JavaScript\n}\n// use the plugin\nbase.use(plugin);\n```\n\n**Inheritance**\n\nEasily inherit Base using `.extend`:\n\n```js\nvar Base = require('base');\n\nfunction MyApp() {\n  Base.call(this);\n}\nBase.extend(MyApp);\n\nvar app = new MyApp();\napp.set('a', 'b');\napp.get('a');\n//=> 'b';\n```\n\n**Inherit or instantiate with a namespace**\n\nBy default, the `.get`, `.set` and `.has` methods set and get values from the root of the `base` instance. You can customize this using the `.namespace` method exposed on the exported function. For example:\n\n```js\nvar Base = require('base');\n// get and set values on the `base.cache` object\nvar base = Base.namespace('cache');\n\nvar app = base();\napp.set('foo', 'bar');\nconsole.log(app.cache.foo);\n//=> 'bar'\n```\n\n## API\n\n**Usage**\n\n```js\nvar Base = require('base');\nvar app = new Base();\napp.set('foo', 'bar');\nconsole.log(app.foo);\n//=> 'bar'\n```\n\n### [Base](index.js#L44)\n\nCreate an instance of `Base` with the given `config` and `options`.\n\n**Params**\n\n* `config` **{Object}**: If supplied, this object is passed to [cache-base](https://github.com/jonschlinkert/cache-base) to merge onto the the instance upon instantiation.\n* `options` **{Object}**: If supplied, this object is used to initialize the `base.options` object.\n\n**Example**\n\n```js\n// initialize with `config` and `options`\nvar app = new Base({isApp: true}, {abc: true});\napp.set('foo', 'bar');\n\n// values defined with the given `config` object will be on the root of the instance\nconsole.log(app.baz); //=> undefined\nconsole.log(app.foo); //=> 'bar'\n// or use `.get`\nconsole.log(app.get('isApp')); //=> true\nconsole.log(app.get('foo')); //=> 'bar'\n\n// values defined with the given `options` object will be on `app.options\nconsole.log(app.options.abc); //=> true\n```\n\n### [.is](index.js#L107)\n\nSet the given `name` on `app._name` and `app.is*` properties. Used for doing lookups in plugins.\n\n**Params**\n\n* `name` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\napp.is('foo');\nconsole.log(app._name);\n//=> 'foo'\nconsole.log(app.isFoo);\n//=> true\napp.is('bar');\nconsole.log(app.isFoo);\n//=> true\nconsole.log(app.isBar);\n//=> true\nconsole.log(app._name);\n//=> 'bar'\n```\n\n### [.isRegistered](index.js#L145)\n\nReturns true if a plugin has already been registered on an instance.\n\nPlugin implementors are encouraged to use this first thing in a plugin\nto prevent the plugin from being called more than once on the same\ninstance.\n\n**Params**\n\n* `name` **{String}**: The plugin name.\n* `register` **{Boolean}**: If the plugin if not already registered, to record it as being registered pass `true` as the second argument.\n* `returns` **{Boolean}**: Returns true if a plugin is already registered.\n\n**Events**\n\n* `emits`: `plugin` Emits the name of the plugin being registered. Useful for unit tests, to ensure plugins are only registered once.\n\n**Example**\n\n```js\nvar base = new Base();\nbase.use(function(app) {\n  if (app.isRegistered('myPlugin')) return;\n  // do stuff to `app`\n});\n\n// to also record the plugin as being registered\nbase.use(function(app) {\n  if (app.isRegistered('myPlugin', true)) return;\n  // do stuff to `app`\n});\n```\n\n### [.use](index.js#L175)\n\nDefine a plugin function to be called immediately upon init. Plugins are chainable and expose the following arguments to the plugin function:\n\n* `app`: the current instance of `Base`\n* `base`: the [first ancestor instance](#base) of `Base`\n\n**Params**\n\n* `fn` **{Function}**: plugin function to call\n* `returns` **{Object}**: Returns the item instance for chaining.\n\n**Example**\n\n```js\nvar app = new Base()\n  .use(foo)\n  .use(bar)\n  .use(baz)\n```\n\n### [.define](index.js#L197)\n\nThe `.define` method is used for adding non-enumerable property on the instance. Dot-notation is **not supported** with `define`.\n\n**Params**\n\n* `key` **{String}**: The name of the property to define.\n* `value` **{any}**\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Example**\n\n```js\n// arbitrary `render` function using lodash `template`\napp.define('render', function(str, locals) {\n  return _.template(str)(locals);\n});\n```\n\n### [.mixin](index.js#L222)\n\nMix property `key` onto the Base prototype. If base is inherited using `Base.extend` this method will be overridden by a new `mixin` method that will only add properties to the prototype of the inheriting application.\n\n**Params**\n\n* `key` **{String}**\n* `val` **{Object|Array}**\n* `returns` **{Object}**: Returns the `base` instance for chaining.\n\n**Example**\n\n```js\napp.mixin('foo', function() {\n  // do stuff\n});\n```\n\n### [.base](index.js#L268)\n\nGetter/setter used when creating nested instances of `Base`, for storing a reference to the first ancestor instance. This works by setting an instance of `Base` on the `parent` property of a \"child\" instance. The `base` property defaults to the current instance if no `parent` property is defined.\n\n**Example**\n\n```js\n// create an instance of `Base`, this is our first (\"base\") instance\nvar first = new Base();\nfirst.foo = 'bar'; // arbitrary property, to make it easier to see what's happening later\n\n// create another instance\nvar second = new Base();\n// create a reference to the first instance (`first`)\nsecond.parent = first;\n\n// create another instance\nvar third = new Base();\n// create a reference to the previous instance (`second`)\n// repeat this pattern every time a \"child\" instance is created\nthird.parent = second;\n\n// we can always access the first instance using the `base` property\nconsole.log(first.base.foo);\n//=> 'bar'\nconsole.log(second.base.foo);\n//=> 'bar'\nconsole.log(third.base.foo);\n//=> 'bar'\n// and now you know how to get to third base ;)\n```\n\n### [#use](index.js#L293)\n\nStatic method for adding global plugin functions that will be added to an instance when created.\n\n**Params**\n\n* `fn` **{Function}**: Plugin function to use on each instance.\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\n\n**Example**\n\n```js\nBase.use(function(app) {\n  app.foo = 'bar';\n});\nvar app = new Base();\nconsole.log(app.foo);\n//=> 'bar'\n```\n\n### [#extend](index.js#L337)\n\nStatic method for inheriting the prototype and static methods of the `Base` class. This method greatly simplifies the process of creating inheritance-based applications. See [static-extend](https://github.com/jonschlinkert/static-extend) for more details.\n\n**Params**\n\n* `Ctor` **{Function}**: constructor to extend\n* `methods` **{Object}**: Optional prototype properties to mix in.\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\n\n**Example**\n\n```js\nvar extend = cu.extend(Parent);\nParent.extend(Child);\n\n// optional methods\nParent.extend(Child, {\n  foo: function() {},\n  bar: function() {}\n});\n```\n\n### [#mixin](index.js#L379)\n\nUsed for adding methods to the `Base` prototype, and/or to the prototype of child instances. When a mixin function returns a function, the returned function is pushed onto the `.mixins` array, making it available to be used on inheriting classes whenever `Base.mixins()` is called (e.g. `Base.mixins(Child)`).\n\n**Params**\n\n* `fn` **{Function}**: Function to call\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\n\n**Example**\n\n```js\nBase.mixin(function(proto) {\n  proto.foo = function(msg) {\n    return 'foo ' + msg;\n  };\n});\n```\n\n### [#mixins](index.js#L401)\n\nStatic method for running global mixin functions against a child constructor. Mixins must be registered before calling this method.\n\n**Params**\n\n* `Child` **{Function}**: Constructor function of a child class\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\n\n**Example**\n\n```js\nBase.extend(Child);\nBase.mixins(Child);\n```\n\n### [#inherit](index.js#L420)\n\nSimilar to `util.inherit`, but copies all static properties, prototype properties, and getters/setters from `Provider` to `Receiver`. See [class-utils](https://github.com/jonschlinkert/class-utils#inherit) for more details.\n\n**Params**\n\n* `Receiver` **{Function}**: Receiving (child) constructor\n* `Provider` **{Function}**: Providing (parent) constructor\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\n\n**Example**\n\n```js\nBase.inherit(Foo, Bar);\n```\n\n## In the wild\n\nThe following node.js applications were built with `Base`:\n\n* [assemble](https://github.com/assemble/assemble)\n* [verb](https://github.com/verbose/verb)\n* [generate](https://github.com/generate/generate)\n* [scaffold](https://github.com/jonschlinkert/scaffold)\n* [boilerplate](https://github.com/jonschlinkert/boilerplate)\n\n## Test coverage\n\n```\nStatements   : 98.91% ( 91/92 )\nBranches     : 92.86% ( 26/28 )\nFunctions    : 100% ( 17/17 )\nLines        : 98.9% ( 90/91 )\n```\n\n## History\n\n### v0.11.2\n\n* fixes https://github.com/micromatch/micromatch/issues/99\n\n### v0.11.0\n\n**Breaking changes**\n\n* Static `.use` and `.run` methods are now non-enumerable\n\n### v0.9.0\n\n**Breaking changes**\n\n* `.is` no longer takes a function, a string must be passed\n* all remaining `.debug` code has been removed\n* `app._namespace` was removed (related to `debug`)\n* `.plugin`, `.use`, and `.define` no longer emit events\n* `.assertPlugin` was removed\n* `.lazy` was removed\n\n## About\n\n### Related projects\n\n* [base-cwd](https://www.npmjs.com/package/base-cwd): Base plugin that adds a getter/setter for the current working directory. | [homepage](https://github.com/node-base/base-cwd \"Base plugin that adds a getter/setter for the current working directory.\")\n* [base-data](https://www.npmjs.com/package/base-data): adds a `data` method to base-methods. | [homepage](https://github.com/node-base/base-data \"adds a `data` method to base-methods.\")\n* [base-fs](https://www.npmjs.com/package/base-fs): base-methods plugin that adds vinyl-fs methods to your 'base' application for working with the file… [more](https://github.com/node-base/base-fs) | [homepage](https://github.com/node-base/base-fs \"base-methods plugin that adds vinyl-fs methods to your 'base' application for working with the file system, like src, dest, copy and symlink.\")\n* [base-generators](https://www.npmjs.com/package/base-generators): Adds project-generator support to your `base` application. | [homepage](https://github.com/node-base/base-generators \"Adds project-generator support to your `base` application.\")\n* [base-option](https://www.npmjs.com/package/base-option): Adds a few options methods to base, like `option`, `enable` and `disable`. See the readme… [more](https://github.com/node-base/base-option) | [homepage](https://github.com/node-base/base-option \"Adds a few options methods to base, like `option`, `enable` and `disable`. See the readme for the full API.\")\n* [base-pipeline](https://www.npmjs.com/package/base-pipeline): base-methods plugin that adds pipeline and plugin methods for dynamically composing streaming plugin pipelines. | [homepage](https://github.com/node-base/base-pipeline \"base-methods plugin that adds pipeline and plugin methods for dynamically composing streaming plugin pipelines.\")\n* [base-pkg](https://www.npmjs.com/package/base-pkg): Plugin for adding a `pkg` method that exposes pkg-store to your base application. | [homepage](https://github.com/node-base/base-pkg \"Plugin for adding a `pkg` method that exposes pkg-store to your base application.\")\n* [base-plugins](https://www.npmjs.com/package/base-plugins): Adds 'smart plugin' support to your base application. | [homepage](https://github.com/node-base/base-plugins \"Adds 'smart plugin' support to your base application.\")\n* [base-questions](https://www.npmjs.com/package/base-questions): Plugin for base-methods that adds methods for prompting the user and storing the answers on… [more](https://github.com/node-base/base-questions) | [homepage](https://github.com/node-base/base-questions \"Plugin for base-methods that adds methods for prompting the user and storing the answers on a project-by-project basis.\")\n* [base-store](https://www.npmjs.com/package/base-store): Plugin for getting and persisting config values with your base-methods application. Adds a 'store' object… [more](https://github.com/node-base/base-store) | [homepage](https://github.com/node-base/base-store \"Plugin for getting and persisting config values with your base-methods application. Adds a 'store' object that exposes all of the methods from the data-store library. Also now supports sub-stores!\")\n* [base-task](https://www.npmjs.com/package/base-task): base plugin that provides a very thin wrapper around [https://github.com/doowb/composer](https://github.com/doowb/composer) for adding task methods to… [more](https://github.com/node-base/base-task) | [homepage](https://github.com/node-base/base-task \"base plugin that provides a very thin wrapper around <https://github.com/doowb/composer> for adding task methods to your application.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 141 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 30  | [doowb](https://github.com/doowb) |  \n| 3   | [charlike](https://github.com/charlike) |  \n| 1   | [criticalmash](https://github.com/criticalmash) |  \n| 1   | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |  \n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on September 07, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/static-extend/node_modules/object-copy/node_modules/copy-descriptor/index.js: * console.log(app.count);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/static-extend/node_modules/object-copy/node_modules/copy-descriptor/index.js: * console.log(app.len);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://badge.fury.io/js/define-property.svg)](http://badge.fury.io/js/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i define-property --save\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## Related projects\n\n* [delegate-object](https://www.npmjs.com/package/delegate-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/delegate-object) | [homepage](https://github.com/doowb/delegate-object)\n* [forward-object](https://www.npmjs.com/package/forward-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/forward-object) | [homepage](https://github.com/doowb/forward-object)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n* [mixin-object](https://www.npmjs.com/package/mixin-object): Mixin the own and inherited properties of other objects onto the first object. Pass an… [more](https://www.npmjs.com/package/mixin-object) | [homepage](https://github.com/jonschlinkert/mixin-object)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/define-property/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on August 31, 2015._\n",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/package.json:  "readme": "# kind-of [![NPM version](https://img.shields.io/npm/v/kind-of.svg?style=flat)](https://www.npmjs.com/package/kind-of) [![NPM monthly downloads](https://img.shields.io/npm/dm/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![NPM total downloads](https://img.shields.io/npm/dt/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/kind-of.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/kind-of)\n\n> Get the native type of a value.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save kind-of\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install kind-of --save\n```\n\n## Why use this?\n\n1. [it's fast](#benchmarks) | [optimizations](#optimizations)\n2. [better type checking](#better-type-checking)\n\n## Usage\n\n> es5, browser and es6 ready\n\n```js\nvar kindOf = require('kind-of');\n\nkindOf(undefined);\n//=> 'undefined'\n\nkindOf(null);\n//=> 'null'\n\nkindOf(true);\n//=> 'boolean'\n\nkindOf(false);\n//=> 'boolean'\n\nkindOf(new Boolean(true));\n//=> 'boolean'\n\nkindOf(new Buffer(''));\n//=> 'buffer'\n\nkindOf(42);\n//=> 'number'\n\nkindOf(new Number(42));\n//=> 'number'\n\nkindOf('str');\n//=> 'string'\n\nkindOf(new String('str'));\n//=> 'string'\n\nkindOf(arguments);\n//=> 'arguments'\n\nkindOf({});\n//=> 'object'\n\nkindOf(Object.create(null));\n//=> 'object'\n\nkindOf(new Test());\n//=> 'object'\n\nkindOf(new Date());\n//=> 'date'\n\nkindOf([]);\n//=> 'array'\n\nkindOf([1, 2, 3]);\n//=> 'array'\n\nkindOf(new Array());\n//=> 'array'\n\nkindOf(/foo/);\n//=> 'regexp'\n\nkindOf(new RegExp('foo'));\n//=> 'regexp'\n\nkindOf(function () {});\n//=> 'function'\n\nkindOf(function * () {});\n//=> 'function'\n\nkindOf(new Function());\n//=> 'function'\n\nkindOf(new Map());\n//=> 'map'\n\nkindOf(new WeakMap());\n//=> 'weakmap'\n\nkindOf(new Set());\n//=> 'set'\n\nkindOf(new WeakSet());\n//=> 'weakset'\n\nkindOf(Symbol('str'));\n//=> 'symbol'\n\nkindOf(new Int8Array());\n//=> 'int8array'\n\nkindOf(new Uint8Array());\n//=> 'uint8array'\n\nkindOf(new Uint8ClampedArray());\n//=> 'uint8clampedarray'\n\nkindOf(new Int16Array());\n//=> 'int16array'\n\nkindOf(new Uint16Array());\n//=> 'uint16array'\n\nkindOf(new Int32Array());\n//=> 'int32array'\n\nkindOf(new Uint32Array());\n//=> 'uint32array'\n\nkindOf(new Float32Array());\n//=> 'float32array'\n\nkindOf(new Float64Array());\n//=> 'float64array'\n```\n\n## Release history\n\n### v4.0.0\n\n**Added**\n\n* `promise` support\n\n### v5.0.0\n\n**Added**\n\n* `Set Iterator` and `Map Iterator` support\n\n**Fixed**\n\n* Now returns `generatorfunction` for generator functions\n\n## Benchmarks\n\nBenchmarked against [typeof](http://github.com/CodingFu/typeof) and [type-of](https://github.com/ForbesLindesay/type-of).\nNote that performaces is slower for es6 features `Map`, `WeakMap`, `Set` and `WeakSet`.\n\n```bash\n#1: array\n  current x 23,329,397 ops/sec ±0.82% (94 runs sampled)\n  lib-type-of x 4,170,273 ops/sec ±0.55% (94 runs sampled)\n  lib-typeof x 9,686,935 ops/sec ±0.59% (98 runs sampled)\n\n#2: boolean\n  current x 27,197,115 ops/sec ±0.85% (94 runs sampled)\n  lib-type-of x 3,145,791 ops/sec ±0.73% (97 runs sampled)\n  lib-typeof x 9,199,562 ops/sec ±0.44% (99 runs sampled)\n\n#3: date\n  current x 20,190,117 ops/sec ±0.86% (92 runs sampled)\n  lib-type-of x 5,166,970 ops/sec ±0.74% (94 runs sampled)\n  lib-typeof x 9,610,821 ops/sec ±0.50% (96 runs sampled)\n\n#4: function\n  current x 23,855,460 ops/sec ±0.60% (97 runs sampled)\n  lib-type-of x 5,667,740 ops/sec ±0.54% (100 runs sampled)\n  lib-typeof x 10,010,644 ops/sec ±0.44% (100 runs sampled)\n\n#5: null\n  current x 27,061,047 ops/sec ±0.97% (96 runs sampled)\n  lib-type-of x 13,965,573 ops/sec ±0.62% (97 runs sampled)\n  lib-typeof x 8,460,194 ops/sec ±0.61% (97 runs sampled)\n\n#6: number\n  current x 25,075,682 ops/sec ±0.53% (99 runs sampled)\n  lib-type-of x 2,266,405 ops/sec ±0.41% (98 runs sampled)\n  lib-typeof x 9,821,481 ops/sec ±0.45% (99 runs sampled)\n\n#7: object\n  current x 3,348,980 ops/sec ±0.49% (99 runs sampled)\n  lib-type-of x 3,245,138 ops/sec ±0.60% (94 runs sampled)\n  lib-typeof x 9,262,952 ops/sec ±0.59% (99 runs sampled)\n\n#8: regex\n  current x 21,284,827 ops/sec ±0.72% (96 runs sampled)\n  lib-type-of x 4,689,241 ops/sec ±0.43% (100 runs sampled)\n  lib-typeof x 8,957,593 ops/sec ±0.62% (98 runs sampled)\n\n#9: string\n  current x 25,379,234 ops/sec ±0.58% (96 runs sampled)\n  lib-type-of x 3,635,148 ops/sec ±0.76% (93 runs sampled)\n  lib-typeof x 9,494,134 ops/sec ±0.49% (98 runs sampled)\n\n#10: undef\n  current x 27,459,221 ops/sec ±1.01% (93 runs sampled)\n  lib-type-of x 14,360,433 ops/sec ±0.52% (99 runs sampled)\n  lib-typeof x 23,202,868 ops/sec ±0.59% (94 runs sampled)\n\n```\n\n## Optimizations\n\nIn 7 out of 8 cases, this library is 2x-10x faster than other top libraries included in the benchmarks. There are a few things that lead to this performance advantage, none of them hard and fast rules, but all of them simple and repeatable in almost any code library:\n\n1. Optimize around the fastest and most common use cases first. Of course, this will change from project-to-project, but I took some time to understand how and why `typeof` checks were being used in my own libraries and other libraries I use a lot.\n2. Optimize around bottlenecks - In other words, the order in which conditionals are implemented is significant, because each check is only as fast as the failing checks that came before it. Here, the biggest bottleneck by far is checking for plain objects (an object that was created by the `Object` constructor). I opted to make this check happen by process of elimination rather than brute force up front (e.g. by using something like `val.constructor.name`), so that every other type check would not be penalized it.\n3. Don't do uneccessary processing - why do `.slice(8, -1).toLowerCase();` just to get the word `regex`? It's much faster to do `if (type === '[object RegExp]') return 'regex'`\n4. There is no reason to make the code in a microlib as terse as possible, just to win points for making it shorter. It's always better to favor performant code over terse code. You will always only be using a single `require()` statement to use the library anyway, regardless of how the code is written.\n\n## Better type checking\n\nkind-of is more correct than other type checking libs I've looked at. For example, here are some differing results from other popular libs:\n\n### [typeof](https://github.com/CodingFu/typeof) lib\n\nIncorrectly tests instances of custom constructors (pretty common):\n\n```js\nvar typeOf = require('typeof');\nfunction Test() {}\nconsole.log(typeOf(new Test()));\n//=> 'test'\n```\n\nReturns `object` instead of `arguments`:\n\n```js\nfunction foo() {\n  console.log(typeOf(arguments)) //=> 'object'\n}\nfoo();\n```\n\n### [type-of](https://github.com/ForbesLindesay/type-of) lib\n\nIncorrectly returns `object` for generator functions, buffers, `Map`, `Set`, `WeakMap` and `WeakSet`:\n\n```js\nfunction * foo() {}\nconsole.log(typeOf(foo));\n//=> 'object'\nconsole.log(typeOf(new Buffer('')));\n//=> 'object'\nconsole.log(typeOf(new Map()));\n//=> 'object'\nconsole.log(typeOf(new Set()));\n//=> 'object'\nconsole.log(typeOf(new WeakMap()));\n//=> 'object'\nconsole.log(typeOf(new WeakSet()));\n//=> 'object'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n<details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n<details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n<details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-number](https://www.npmjs.com/package/is-number): Returns true if the value is a number. comprehensive tests. | [homepage](https://github.com/jonschlinkert/is-number \"Returns true if the value is a number. comprehensive tests.\")\n* [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive.  | [homepage](https://github.com/jonschlinkert/is-primitive \"Returns `true` if the value is a primitive. \")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 82 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 3 | [aretecode](https://github.com/aretecode) |\n| 2 | [miguelmota](https://github.com/miguelmota) |\n| 1 | [dtothefp](https://github.com/dtothefp) |\n| 1 | [ksheedlo](https://github.com/ksheedlo) |\n| 1 | [pdehaan](https://github.com/pdehaan) |\n| 1 | [laggingreflex](https://github.com/laggingreflex) |\n| 1 | [charlike](https://github.com/charlike) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on October 13, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Test()));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:  console.log(typeOf(arguments)) //=> 'object'
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(foo));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Buffer('')));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Map()));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Set()));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakMap()));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakSet()));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg)](https://www.npmjs.com/package/is-data-descriptor) [![Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm i is-data-descriptor --save\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## Related projects\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor)\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://www.npmjs.com/package/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor)\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-data-descriptor/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 [Jon Schlinkert](https://github.com/jonschlinkert)\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb) on December 28, 2015._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/class-utils/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/mixin-deep/node_modules/for-in/package.json:  "readme": "# for-in [![NPM version](https://img.shields.io/npm/v/for-in.svg?style=flat)](https://www.npmjs.com/package/for-in) [![NPM monthly downloads](https://img.shields.io/npm/dm/for-in.svg?style=flat)](https://npmjs.org/package/for-in)  [![NPM total downloads](https://img.shields.io/npm/dt/for-in.svg?style=flat)](https://npmjs.org/package/for-in) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/for-in.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/for-in)\n\n> Iterate over the own and inherited enumerable properties of an object, and return an object with properties that evaluate to true from the callback. Exit early by returning `false`. JavaScript/Node.js\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save for-in\n```\n\n## Usage\n\n```js\nvar forIn = require('for-in');\n\nvar obj = {a: 'foo', b: 'bar', c: 'baz'};\nvar values = [];\nvar keys = [];\n\nforIn(obj, function (value, key, o) {\n  keys.push(key);\n  values.push(value);\n});\n\nconsole.log(keys);\n//=> ['a', 'b', 'c'];\n\nconsole.log(values);\n//=> ['foo', 'bar', 'baz'];\n```\n\n## About\n\n### Related projects\n\n* [arr-flatten](https://www.npmjs.com/package/arr-flatten): Recursively flatten an array or arrays. This is the fastest implementation of array flatten. | [homepage](https://github.com/jonschlinkert/arr-flatten \"Recursively flatten an array or arrays. This is the fastest implementation of array flatten.\")\n* [collection-map](https://www.npmjs.com/package/collection-map): Returns an array of mapped values from an array or object. | [homepage](https://github.com/jonschlinkert/collection-map \"Returns an array of mapped values from an array or object.\")\n* [for-own](https://www.npmjs.com/package/for-own): Iterate over the own enumerable properties of an object, and return an object with properties… [more](https://github.com/jonschlinkert/for-own) | [homepage](https://github.com/jonschlinkert/for-own \"Iterate over the own enumerable properties of an object, and return an object with properties that evaluate to true from the callback. Exit early by returning `false`. JavaScript/Node.js.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 16 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [paulirish](https://github.com/paulirish) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.4.2, on February 28, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/mixin-deep/node_modules/for-in/README.md:console.log(keys);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/mixin-deep/node_modules/for-in/README.md:console.log(values);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/package.json:  "readme": "# cache-base [![NPM version](https://img.shields.io/npm/v/cache-base.svg?style=flat)](https://www.npmjs.com/package/cache-base) [![NPM monthly downloads](https://img.shields.io/npm/dm/cache-base.svg?style=flat)](https://npmjs.org/package/cache-base) [![NPM total downloads](https://img.shields.io/npm/dt/cache-base.svg?style=flat)](https://npmjs.org/package/cache-base) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/cache-base.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/cache-base)\n\n> Basic object cache with `get`, `set`, `del`, and `has` methods for node.js/javascript projects.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save cache-base\n```\n\n## Usage\n\n```js\nvar Cache = require('cache-base');\n\n// instantiate\nvar app = new Cache();\n\n// set values\napp.set('a', 'b');\napp.set('c.d', 'e');\n\n// get values\napp.get('a');\n//=> 'b'\napp.get('c');\n//=> {d: 'e'}\n\nconsole.log(app.cache);\n//=> {a: 'b'}\n```\n\n**Inherit**\n\n```js\nvar util = require('util');\nvar Cache = require('cache-base');\n\nfunction MyApp() {\n  Cache.call(this);\n}\nutil.inherits(MyApp, Cache);\n\nvar app = new MyApp();\napp.set('a', 'b');\napp.get('a');\n//=> 'b'\n```\n\n**Namespace**\n\nDefine a custom property for storing values.\n\n```js\nvar Cache = require('cache-base').namespace('data');\nvar app = new Cache();\napp.set('a', 'b');\nconsole.log(app.data);\n//=> {a: 'b'}\n```\n\n## API\n\n### [namespace](index.js#L29)\n\nCreate a `Cache` constructor that when instantiated will store values on the given `prop`.\n\n**Params**\n\n* `prop` **{String}**: The property name to use for storing values.\n* `returns` **{Function}**: Returns a custom `Cache` constructor\n\n**Example**\n\n```js\nvar Cache = require('cache-base').namespace('data');\nvar cache = new Cache();\n\ncache.set('foo', 'bar');\n//=> {data: {foo: 'bar'}}\n```\n\n### [Cache](index.js#L43)\n\nCreate a new `Cache`. Internally the `Cache` constructor is created using the `namespace` function, with `cache` defined as the storage object.\n\n**Params**\n\n* `cache` **{Object}**: Optionally pass an object to initialize with.\n\n**Example**\n\n```js\nvar app = new Cache();\n```\n\n### [.set](index.js#L84)\n\nAssign `value` to `key`. Also emits `set` with the key and value.\n\n**Params**\n\n* `key` **{String}**\n* `value` **{any}**\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Events**\n\n* `emits`: `set` with `key` and `value` as arguments.\n\n**Example**\n\n```js\napp.on('set', function(key, val) {\n  // do something when `set` is emitted\n});\n\napp.set(key, value);\n\n// also takes an object or array\napp.set({name: 'Halle'});\napp.set([{foo: 'bar'}, {baz: 'quux'}]);\nconsole.log(app);\n//=> {name: 'Halle', foo: 'bar', baz: 'quux'}\n```\n\n### [.union](index.js#L114)\n\nUnion `array` to `key`. Also emits `set` with the key and value.\n\n**Params**\n\n* `key` **{String}**\n* `value` **{any}**\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Example**\n\n```js\napp.union('a.b', ['foo']);\napp.union('a.b', ['bar']);\nconsole.log(app.get('a'));\n//=> {b: ['foo', 'bar']}\n```\n\n### [.get](index.js#L144)\n\nReturn the value of `key`. Dot notation may be used to get [nested property values](https://github.com/jonschlinkert/get-value).\n\n**Params**\n\n* `key` **{String}**: The name of the property to get. Dot-notation may be used.\n* `returns` **{any}**: Returns the value of `key`\n\n**Events**\n\n* `emits`: `get` with `key` and `value` as arguments.\n\n**Example**\n\n```js\napp.set('a.b.c', 'd');\napp.get('a.b');\n//=> {c: 'd'}\n\napp.get(['a', 'b']);\n//=> {c: 'd'}\n```\n\n### [.has](index.js#L171)\n\nReturn true if app has a stored value for `key`, false only if value is `undefined`.\n\n**Params**\n\n* `key` **{String}**\n* `returns` **{Boolean}**\n\n**Events**\n\n* `emits`: `has` with `key` and true or false as arguments.\n\n**Example**\n\n```js\napp.set('foo', 'bar');\napp.has('foo');\n//=> true\n```\n\n### [.del](index.js#L199)\n\nDelete one or more properties from the instance.\n\n**Params**\n\n* `key` **{String|Array}**: Property name or array of property names.\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Events**\n\n* `emits`: `del` with the `key` as the only argument.\n\n**Example**\n\n```js\napp.del(); // delete all\n// or\napp.del('foo');\n// or\napp.del(['foo', 'bar']);\n```\n\n### [.clear](index.js#L218)\n\nReset the entire cache to an empty object.\n\n**Example**\n\n```js\napp.clear();\n```\n\n### [.visit](index.js#L235)\n\nVisit `method` over the properties in the given object, or map\nvisit over the object-elements in an array.\n\n**Params**\n\n* `method` **{String}**: The name of the `base` method to call.\n* `val` **{Object|Array}**: The object or array to iterate over.\n* `returns` **{Object}**: Returns the instance for chaining.\n\n## About\n\n### Related projects\n\n* [base-methods](https://www.npmjs.com/package/base-methods): base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting… [more](https://github.com/jonschlinkert/base-methods) | [homepage](https://github.com/jonschlinkert/base-methods \"base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting with a handful of common methods, like `set`, `get`, `del` and `use`.\")\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [has-value](https://www.npmjs.com/package/has-value): Returns true if a value exists, false if empty. Works with deeply nested values using… [more](https://github.com/jonschlinkert/has-value) | [homepage](https://github.com/jonschlinkert/has-value \"Returns true if a value exists, false if empty. Works with deeply nested values using object paths.\")\n* [option-cache](https://www.npmjs.com/package/option-cache): Simple API for managing options in JavaScript applications. | [homepage](https://github.com/jonschlinkert/option-cache \"Simple API for managing options in JavaScript applications.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [unset-value](https://www.npmjs.com/package/unset-value): Delete nested properties from an object using dot notation. | [homepage](https://github.com/jonschlinkert/unset-value \"Delete nested properties from an object using dot notation.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 54 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on July 22, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/package.json:  "readme": "# unset-value [![NPM version](https://img.shields.io/npm/v/unset-value.svg?style=flat)](https://www.npmjs.com/package/unset-value) [![NPM monthly downloads](https://img.shields.io/npm/dm/unset-value.svg?style=flat)](https://npmjs.org/package/unset-value)  [![NPM total downloads](https://img.shields.io/npm/dt/unset-value.svg?style=flat)](https://npmjs.org/package/unset-value) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/unset-value.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/unset-value)\n\n> Delete nested properties from an object using dot notation.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save unset-value\n```\n\n## Usage\n\n```js\nvar unset = require('unset-value');\n\nvar obj = {a: {b: {c: 'd', e: 'f'}}};\nunset(obj, 'a.b.c');\nconsole.log(obj);\n//=> {a: {b: {e: 'f'}}};\n```\n\n## Examples\n\n### Updates the object when a property is deleted\n\n```js\nvar obj = {a: 'b'};\nunset(obj, 'a');\nconsole.log(obj);\n//=> {}\n```\n\n### Returns true when a property is deleted\n\n```js\nunset({a: 'b'}, 'a') // true\n```\n\n### Returns `true` when a property does not exist\n\nThis is consistent with `delete` behavior in that it does not\nthrow when a property does not exist.\n\n```js\nunset({a: {b: {c: 'd'}}}, 'd') // true\n```\n\n### delete nested values\n\n```js\nvar one = {a: {b: {c: 'd'}}};\nunset(one, 'a.b');\nconsole.log(one);\n//=> {a: {}}\n\nvar two = {a: {b: {c: 'd'}}};\nunset(two, 'a.b.c');\nconsole.log(two);\n//=> {a: {b: {}}}\n\nvar three = {a: {b: {c: 'd', e: 'f'}}};\nunset(three, 'a.b.c');\nconsole.log(three);\n//=> {a: {b: {e: 'f'}}}\n```\n\n### throws on invalid args\n\n```js\nunset();\n// 'expected an object.'\n```\n\n## About\n\n### Related projects\n\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [get-values](https://www.npmjs.com/package/get-values): Return an array of all values from the given object. | [homepage](https://github.com/jonschlinkert/get-values \"Return an array of all values from the given object.\")\n* [omit-value](https://www.npmjs.com/package/omit-value): Omit properties from an object or deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/omit-value) | [homepage](https://github.com/jonschlinkert/omit-value \"Omit properties from an object or deeply nested property of an object using object path notation.\")\n* [put-value](https://www.npmjs.com/package/put-value): Update only existing values from an object, works with dot notation paths like `a.b.c` and… [more](https://github.com/tunnckocore/put-value#readme) | [homepage](https://github.com/tunnckocore/put-value#readme \"Update only existing values from an object, works with dot notation paths like `a.b.c` and support deep nesting.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [union-value](https://www.npmjs.com/package/union-value): Set an array of unique values as the property of an object. Supports setting deeply… [more](https://github.com/jonschlinkert/union-value) | [homepage](https://github.com/jonschlinkert/union-value \"Set an array of unique values as the property of an object. Supports setting deeply nested properties using using object-paths/dot notation.\")\n* [upsert-value](https://www.npmjs.com/package/upsert-value): Update or set nested values and any intermediaries with dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/doowb/upsert-value \"Update or set nested values and any intermediaries with dot notation (`'a.b.c'`) paths.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 6 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.4.2, on February 25, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/node_modules/has-value/node_modules/isobject/node_modules/isarray/package.json:  "readme": "\n# isarray\n\n`Array#isArray` for older browsers.\n\n[![build status](https://secure.travis-ci.org/juliangruber/isarray.svg)](http://travis-ci.org/juliangruber/isarray)\n[![downloads](https://img.shields.io/npm/dm/isarray.svg)](https://www.npmjs.org/package/isarray)\n\n[![browser support](https://ci.testling.com/juliangruber/isarray.png)\n](https://ci.testling.com/juliangruber/isarray)\n\n## Usage\n\n```js\nvar isArray = require('isarray');\n\nconsole.log(isArray([])); // => true\nconsole.log(isArray({})); // => false\n```\n\n## Installation\n\nWith [npm](http://npmjs.org) do\n\n```bash\n$ npm install isarray\n```\n\nThen bundle for the browser with\n[browserify](https://github.com/substack/browserify).\n\nWith [component](http://component.io) do\n\n```bash\n$ component install juliangruber/isarray\n```\n\n## License\n\n(MIT)\n\nCopyright (c) 2013 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/node_modules/has-value/node_modules/isobject/node_modules/isarray/README.md:console.log(isArray([])); // => true
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/node_modules/has-value/node_modules/isobject/node_modules/isarray/README.md:console.log(isArray({})); // => false
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/README.md:console.log(one);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/README.md:console.log(two);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/unset-value/README.md:console.log(three);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/union-value/package.json:  "readme": "# union-value [![NPM version](https://img.shields.io/npm/v/union-value.svg?style=flat)](https://www.npmjs.com/package/union-value) [![NPM monthly downloads](https://img.shields.io/npm/dm/union-value.svg?style=flat)](https://npmjs.org/package/union-value)  [![NPM total downloads](https://img.shields.io/npm/dt/union-value.svg?style=flat)](https://npmjs.org/package/union-value) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/union-value.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/union-value)\n\n> Set an array of unique values as the property of an object. Supports setting deeply nested properties using using object-paths/dot notation.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save union-value\n```\n\n## Usage\n\n```js\nvar union = require('union-value');\n\nvar obj = {};\n\nunion(obj, 'a.b.c', ['one', 'two']);\nunion(obj, 'a.b.c', ['three']);\n\nconsole.log(obj);\n//=> {a: {b: {c: [ 'one', 'two', 'three' ] }}}\n```\n\n## About\n\n### Related projects\n\n* [assign-value](https://www.npmjs.com/package/assign-value): Assign a value or extend a deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/assign-value) | [homepage](https://github.com/jonschlinkert/assign-value \"Assign a value or extend a deeply nested property of an object using object path notation.\")\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [has-value](https://www.npmjs.com/package/has-value): Returns true if a value exists, false if empty. Works with deeply nested values using… [more](https://github.com/jonschlinkert/has-value) | [homepage](https://github.com/jonschlinkert/has-value \"Returns true if a value exists, false if empty. Works with deeply nested values using object paths.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [unset-value](https://www.npmjs.com/package/unset-value): Delete nested properties from an object using dot notation. | [homepage](https://github.com/jonschlinkert/unset-value \"Delete nested properties from an object using dot notation.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.4.2, on February 25, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/union-value/node_modules/set-value/package.json:  "readme": "# set-value [![NPM version](https://img.shields.io/npm/v/set-value.svg?style=flat)](https://www.npmjs.com/package/set-value) [![NPM monthly downloads](https://img.shields.io/npm/dm/set-value.svg?style=flat)](https://npmjs.org/package/set-value)  [![NPM total downloads](https://img.shields.io/npm/dt/set-value.svg?style=flat)](https://npmjs.org/package/set-value) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/set-value.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/set-value)\n\n> Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save set-value\n```\n\n## Usage\n\n```js\nvar set = require('set-value');\n\nvar obj = {};\nset(obj, 'a.b.c', 'd');\nconsole.log(obj);\n//=> {a: {b: c: 'd'}}\n```\n\n## About\n\n### Related projects\n\n* [assign-value](https://www.npmjs.com/package/assign-value): Assign a value or extend a deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/assign-value) | [homepage](https://github.com/jonschlinkert/assign-value \"Assign a value or extend a deeply nested property of an object using object path notation.\")\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [has-value](https://www.npmjs.com/package/has-value): Returns true if a value exists, false if empty. Works with deeply nested values using… [more](https://github.com/jonschlinkert/has-value) | [homepage](https://github.com/jonschlinkert/has-value \"Returns true if a value exists, false if empty. Works with deeply nested values using object paths.\")\n* [merge-value](https://www.npmjs.com/package/merge-value): Similar to assign-value but deeply merges object values or nested values using object path/dot notation. | [homepage](https://github.com/jonschlinkert/merge-value \"Similar to assign-value but deeply merges object values or nested values using object path/dot notation.\")\n* [omit-value](https://www.npmjs.com/package/omit-value): Omit properties from an object or deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/omit-value) | [homepage](https://github.com/jonschlinkert/omit-value \"Omit properties from an object or deeply nested property of an object using object path notation.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [union-value](https://www.npmjs.com/package/union-value): Set an array of unique values as the property of an object. Supports setting deeply… [more](https://github.com/jonschlinkert/union-value) | [homepage](https://github.com/jonschlinkert/union-value \"Set an array of unique values as the property of an object. Supports setting deeply nested properties using using object-paths/dot notation.\")\n* [unset-value](https://www.npmjs.com/package/unset-value): Delete nested properties from an object using dot notation. | [homepage](https://github.com/jonschlinkert/unset-value \"Delete nested properties from an object using dot notation.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 53 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 1 | [vadimdemedes](https://github.com/vadimdemedes) |\n| 1 | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.4.2, on February 22, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/union-value/node_modules/set-value/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/union-value/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/package.json:  "readme": "# collection-visit [![NPM version](https://img.shields.io/npm/v/collection-visit.svg?style=flat)](https://www.npmjs.com/package/collection-visit) [![NPM monthly downloads](https://img.shields.io/npm/dm/collection-visit.svg?style=flat)](https://npmjs.org/package/collection-visit)  [![NPM total downloads](https://img.shields.io/npm/dt/collection-visit.svg?style=flat)](https://npmjs.org/package/collection-visit) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/collection-visit.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/collection-visit)\n\n> Visit a method over the items in an object, or map visit over the objects in an array.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save collection-visit\n```\n\n## Usage\n\n```js\nvar visit = require('collection-visit');\n\nvar ctx = {\n  data: {},\n  set: function (key, value) {\n    if (typeof key === 'object') {\n      visit(ctx, 'set', key);\n    } else {\n      ctx.data[key] = value;\n    }\n  }\n};\n\nctx.set('a', 'a');\nctx.set('b', 'b');\nctx.set('c', 'c');\nctx.set({d: {e: 'f'}});\n\nconsole.log(ctx.data);\n//=> {a: 'a', b: 'b', c: 'c', d: { e: 'f' }};\n```\n\n## About\n\n### Related projects\n\n* [base-methods](https://www.npmjs.com/package/base-methods): base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting… [more](https://github.com/jonschlinkert/base-methods) | [homepage](https://github.com/jonschlinkert/base-methods \"base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting with a handful of common methods, like `set`, `get`, `del` and `use`.\")\n* [map-visit](https://www.npmjs.com/package/map-visit): Map `visit` over an array of objects. | [homepage](https://github.com/jonschlinkert/map-visit \"Map `visit` over an array of objects.\")\n* [object-visit](https://www.npmjs.com/package/object-visit): Call a specified method on each value in the given object. | [homepage](https://github.com/jonschlinkert/object-visit \"Call a specified method on each value in the given object.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 13 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 9 | [doowb](https://github.com/doowb) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 09, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/map-visit/package.json:  "readme": "# map-visit [![NPM version](https://img.shields.io/npm/v/map-visit.svg?style=flat)](https://www.npmjs.com/package/map-visit) [![NPM monthly downloads](https://img.shields.io/npm/dm/map-visit.svg?style=flat)](https://npmjs.org/package/map-visit)  [![NPM total downloads](https://img.shields.io/npm/dt/map-visit.svg?style=flat)](https://npmjs.org/package/map-visit) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/map-visit.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/map-visit)\n\n> Map `visit` over an array of objects.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save map-visit\n```\n\n## Usage\n\n```js\nvar mapVisit = require('map-visit');\n```\n\n## What does this do?\n\n**Assign/Merge/Extend vs. Visit**\n\nLet's say you want to add a `set` method to your application that will:\n\n* set key-value pairs on a `data` object\n* extend objects onto the `data` object\n* extend arrays of objects onto the data object\n\n**Example using `extend`**\n\nHere is one way to accomplish this using Lo-Dash's `extend` (comparable to `Object.assign`):\n\n```js\nvar _ = require('lodash');\n\nvar obj = {\n  data: {},\n  set: function (key, value) {\n    if (Array.isArray(key)) {\n      _.extend.apply(_, [obj.data].concat(key));\n    } else if (typeof key === 'object') {\n      _.extend(obj.data, key);\n    } else {\n      obj.data[key] = value;\n    }\n  }\n};\n\nobj.set('a', 'a');\nobj.set([{b: 'b'}, {c: 'c'}]);\nobj.set({d: {e: 'f'}});\n\nconsole.log(obj.data);\n//=> {a: 'a', b: 'b', c: 'c', d: { e: 'f' }}\n```\n\nThe above approach works fine for most use cases. However, **if you also want to emit an event** each time a property is added to the `data` object, or you want more control over what happens as the object is extended, a better approach would be to use `visit`.\n\n**Example using `visit`**\n\nIn this approach:\n\n* when an array is passed to `set`, the `mapVisit` library calls the `set` method on each object in the array.\n* when an object is passed, `visit` calls `set` on each property in the object.\n\nAs a result, the `data` event will be emitted every time a property is added to `data` (events are just an example, you can use this approach to perform any necessary logic every time the method is called).\n\n```js\nvar mapVisit = require('map-visit');\nvar visit = require('object-visit');\n\nvar obj = {\n  data: {},\n  set: function (key, value) {\n    if (Array.isArray(key)) {\n      mapVisit(obj, 'set', key);\n    } else if (typeof key === 'object') {\n      visit(obj, 'set', key);\n    } else {\n      // simulate an event-emitter\n      console.log('emit', key, value);\n      obj.data[key] = value;\n    }\n  }\n};\n\nobj.set('a', 'a');\nobj.set([{b: 'b'}, {c: 'c'}]);\nobj.set({d: {e: 'f'}});\nobj.set({g: 'h', i: 'j', k: 'l'});\n\nconsole.log(obj.data);\n//=> {a: 'a', b: 'b', c: 'c', d: { e: 'f' }, g: 'h', i: 'j', k: 'l'}\n\n// events would look something like:\n// emit a a\n// emit b b\n// emit c c\n// emit d { e: 'f' }\n// emit g h\n// emit i j\n// emit k l\n```\n\n## About\n\n### Related projects\n\n* [collection-visit](https://www.npmjs.com/package/collection-visit): Visit a method over the items in an object, or map visit over the objects… [more](https://github.com/jonschlinkert/collection-visit) | [homepage](https://github.com/jonschlinkert/collection-visit \"Visit a method over the items in an object, or map visit over the objects in an array.\")\n* [object-visit](https://www.npmjs.com/package/object-visit): Call a specified method on each value in the given object. | [homepage](https://github.com/jonschlinkert/object-visit \"Call a specified method on each value in the given object.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 15 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 7 | [doowb](https://github.com/doowb) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 09, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/map-visit/README.md:console.log(obj.data);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/map-visit/README.md:As a result, the `data` event will be emitted every time a property is added to `data` (events are just an example, you can use this approach to perform any necessary logic every time the method is called).
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/map-visit/README.md:      console.log('emit', key, value);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/map-visit/README.md:console.log(obj.data);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/object-visit/package.json:  "readme": "# object-visit [![NPM version](https://img.shields.io/npm/v/object-visit.svg?style=flat)](https://www.npmjs.com/package/object-visit) [![NPM monthly downloads](https://img.shields.io/npm/dm/object-visit.svg?style=flat)](https://npmjs.org/package/object-visit) [![NPM total downloads](https://img.shields.io/npm/dt/object-visit.svg?style=flat)](https://npmjs.org/package/object-visit) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/object-visit.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/object-visit)\n\n> Call a specified method on each value in the given object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save object-visit\n```\n\n## Usage\n\n```js\nvar visit = require('object-visit');\n\nvar ctx = {\n  data: {},\n  set: function (key, value) {\n    if (typeof key === 'object') {\n      visit(ctx, 'set', key);\n    } else {\n      ctx.data[key] = value;\n    }\n  }\n};\n\nctx.set('a', 'a');\nctx.set('b', 'b');\nctx.set('c', 'c');\nctx.set({d: {e: 'f'}});\n\nconsole.log(ctx.data);\n//=> {a: 'a', b: 'b', c: 'c', d: { e: 'f' }};\n```\n\n## About\n\n### Related projects\n\n* [base-methods](https://www.npmjs.com/package/base-methods): base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting… [more](https://github.com/jonschlinkert/base-methods) | [homepage](https://github.com/jonschlinkert/base-methods \"base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting with a handful of common methods, like `set`, `get`, `del` and `use`.\")\n* [collection-visit](https://www.npmjs.com/package/collection-visit): Visit a method over the items in an object, or map visit over the objects… [more](https://github.com/jonschlinkert/collection-visit) | [homepage](https://github.com/jonschlinkert/collection-visit \"Visit a method over the items in an object, or map visit over the objects in an array.\")\n* [define-property](https://www.npmjs.com/package/define-property): Define a non-enumerable property on an object. | [homepage](https://github.com/jonschlinkert/define-property \"Define a non-enumerable property on an object.\")\n* [map-visit](https://www.npmjs.com/package/map-visit): Map `visit` over an array of objects. | [homepage](https://github.com/jonschlinkert/map-visit \"Map `visit` over an array of objects.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on May 30, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/node_modules/object-visit/README.md:console.log(ctx.data);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/collection-visit/README.md:console.log(ctx.data);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/package.json:  "readme": "# set-value [![NPM version](https://img.shields.io/npm/v/set-value.svg?style=flat)](https://www.npmjs.com/package/set-value) [![NPM monthly downloads](https://img.shields.io/npm/dm/set-value.svg?style=flat)](https://npmjs.org/package/set-value) [![NPM total downloads](https://img.shields.io/npm/dt/set-value.svg?style=flat)](https://npmjs.org/package/set-value) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/set-value.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/set-value)\n\n> Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save set-value\n```\n\n## Usage\n\n```js\nvar set = require('set-value');\nset(object, prop, value);\n```\n\n### Params\n\n* `object` **{object}**: The object to set `value` on\n* `prop` **{string}**: The property to set. Dot-notation may be used.\n* `value` **{any}**: The value to set on `object[prop]`\n\n## Examples\n\nUpdates and returns the given object:\n\n```js\nvar obj = {};\nset(obj, 'a.b.c', 'd');\nconsole.log(obj);\n//=> { a: { b: { c: 'd' } } }\n```\n\n### Escaping\n\n**Escaping with backslashes**\n\nPrevent set-value from splitting on a dot by prefixing it with backslashes:\n\n```js\nconsole.log(set({}, 'a\\\\.b.c', 'd'));\n//=> { 'a.b': { c: 'd' } }\n\nconsole.log(set({}, 'a\\\\.b\\\\.c', 'd'));\n//=> { 'a.b.c': 'd' }\n```\n\n**Escaping with double-quotes or single-quotes**\n\nWrap double or single quotes around the string, or part of the string, that should not be split by set-value:\n\n```js\nconsole.log(set({}, '\"a.b\".c', 'd'));\n//=> { 'a.b': { c: 'd' } }\n\nconsole.log(set({}, \"'a.b'.c\", \"d\"));\n//=> { 'a.b': { c: 'd' } }\n\nconsole.log(set({}, '\"this/is/a/.file.path\"', 'd'));\n//=> { 'this/is/a/file.path': 'd' }\n```\n\n### Bracket support\n\nset-value does not split inside brackets or braces:\n\n```js\nconsole.log(set({}, '[a.b].c', 'd'));\n//=> { '[a.b]': { c: 'd' } }\n\nconsole.log(set({}, \"(a.b).c\", \"d\"));\n//=> { '(a.b)': { c: 'd' } }\n\nconsole.log(set({}, \"<a.b>.c\", \"d\"));\n//=> { '<a.b>': { c: 'd' } }\n\nconsole.log(set({}, \"{a..b}.c\", \"d\"));\n//=> { '{a..b}': { c: 'd' } }\n```\n\n## History\n\n### v2.0.0\n\n* Adds support for escaping with double or single quotes. See [escaping](#escaping) for examples.\n* Will no longer split inside brackets or braces. See [bracket support](#bracket-support) for examples.\n\nIf there are any regressions please create a [bug report](../../issues/new). Thanks!\n\n## About\n\n### Related projects\n\n* [assign-value](https://www.npmjs.com/package/assign-value): Assign a value or extend a deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/assign-value) | [homepage](https://github.com/jonschlinkert/assign-value \"Assign a value or extend a deeply nested property of an object using object path notation.\")\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [has-value](https://www.npmjs.com/package/has-value): Returns true if a value exists, false if empty. Works with deeply nested values using… [more](https://github.com/jonschlinkert/has-value) | [homepage](https://github.com/jonschlinkert/has-value \"Returns true if a value exists, false if empty. Works with deeply nested values using object paths.\")\n* [merge-value](https://www.npmjs.com/package/merge-value): Similar to assign-value but deeply merges object values or nested values using object path/dot notation. | [homepage](https://github.com/jonschlinkert/merge-value \"Similar to assign-value but deeply merges object values or nested values using object path/dot notation.\")\n* [omit-value](https://www.npmjs.com/package/omit-value): Omit properties from an object or deeply nested property of an object using object path… [more](https://github.com/jonschlinkert/omit-value) | [homepage](https://github.com/jonschlinkert/omit-value \"Omit properties from an object or deeply nested property of an object using object path notation.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [union-value](https://www.npmjs.com/package/union-value): Set an array of unique values as the property of an object. Supports setting deeply… [more](https://github.com/jonschlinkert/union-value) | [homepage](https://github.com/jonschlinkert/union-value \"Set an array of unique values as the property of an object. Supports setting deeply nested properties using using object-paths/dot notation.\")\n* [unset-value](https://www.npmjs.com/package/unset-value): Delete nested properties from an object using dot notation. | [homepage](https://github.com/jonschlinkert/unset-value \"Delete nested properties from an object using dot notation.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 59 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 1 | [vadimdemedes](https://github.com/vadimdemedes) |\n| 1 | [wtgtybhertgeghgtwtg](https://github.com/wtgtybhertgeghgtwtg) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on June 21, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/package.json:  "readme": "# split-string [![NPM version](https://img.shields.io/npm/v/split-string.svg?style=flat)](https://www.npmjs.com/package/split-string) [![NPM monthly downloads](https://img.shields.io/npm/dm/split-string.svg?style=flat)](https://npmjs.org/package/split-string) [![NPM total downloads](https://img.shields.io/npm/dt/split-string.svg?style=flat)](https://npmjs.org/package/split-string) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/split-string.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/split-string)\n\n> Split a string on a character except when the character is escaped.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save split-string\n```\n\n<!-- section: Why use this? -->\n\n<details>\n<summary><strong>Why use this?</strong></summary>\n\n<br>\n\nAlthough it's easy to split on a string:\n\n```js\nconsole.log('a.b.c'.split('.'));\n//=> ['a', 'b', 'c']\n```\n\nIt's more challenging to split a string whilst respecting escaped or quoted characters.\n\n**Bad**\n\n```js\nconsole.log('a\\\\.b.c'.split('.'));\n//=> ['a\\\\', 'b', 'c']\n\nconsole.log('\"a.b.c\".d'.split('.'));\n//=> ['\"a', 'b', 'c\"', 'd']\n```\n\n**Good**\n\n```js\nvar split = require('split-string');\nconsole.log(split('a\\\\.b.c'));\n//=> ['a.b', 'c']\n\nconsole.log(split('\"a.b.c\".d'));\n//=> ['a.b.c', 'd']\n```\n\nSee the [options](#options) to learn how to choose the separator or retain quotes or escaping.\n\n<br>\n\n</details>\n\n## Usage\n\n```js\nvar split = require('split-string');\n\nsplit('a.b.c');\n//=> ['a', 'b', 'c']\n\n// respects escaped characters\nsplit('a.b.c\\\\.d');\n//=> ['a', 'b', 'c.d']\n\n// respects double-quoted strings\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n```\n\n**Brackets**\n\nAlso respects brackets [unless disabled](#optionsbrackets):\n\n```js\nsplit('a (b c d) e', ' ');\n//=> ['a', '(b c d)', 'e']\n```\n\n## Options\n\n### options.brackets\n\n**Type**: `object|boolean`\n\n**Default**: `undefined`\n\n**Description**\n\nIf enabled, split-string will not split inside brackets. The following brackets types are supported when `options.brackets` is `true`,\n\n```js\n{\n  '<': '>',\n  '(': ')',\n  '[': ']',\n  '{': '}'\n}\n```\n\nOr, if object of brackets must be passed, each property on the object must be a bracket type, where the property key is the opening delimiter and property value is the closing delimiter.\n\n**Examples**\n\n```js\n// no bracket support by default\nsplit('a.{b.c}');\n//=> [ 'a', '{b', 'c}' ]\n\n// support all basic bracket types: \"<>{}[]()\"\nsplit('a.{b.c}', {brackets: true});\n//=> [ 'a', '{b.c}' ]\n\n// also supports nested brackets \nsplit('a.{b.{c.d}.e}.f', {brackets: true});\n//=> [ 'a', '{b.{c.d}.e}', 'f' ]\n\n// support only the specified brackets\nsplit('[a.b].(c.d)', {brackets: {'[': ']'}});\n//=> [ '[a.b]', '(c', 'd)' ]\n```\n\n### options.sep\n\n**Type**: `string`\n\n**Default**: `.`\n\nThe separator/character to split on.\n\n**Example**\n\n```js\nsplit('a.b,c', {sep: ','});\n//=> ['a.b', 'c']\n\n// you can also pass the separator as string as the last argument\nsplit('a.b,c', ',');\n//=> ['a.b', 'c']\n```\n\n### options.keepEscaping\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep backslashes in the result.\n\n**Example**\n\n```js\nsplit('a.b\\\\.c');\n//=> ['a', 'b.c']\n\nsplit('a.b.\\\\c', {keepEscaping: true});\n//=> ['a', 'b\\.c']\n```\n\n### options.keepQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep single- or double-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\"b.c.d\".e', {keepQuotes: true});\n//=> ['a', '\"b.c.d\"', 'e']\n\nsplit('a.\\'b.c.d\\'.e', {keepQuotes: true});\n//=> ['a', '\\'b.c.d\\'', 'e']\n```\n\n### options.keepDoubleQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep double-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\"b.c.d\".e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\"b.c.d\".e', {keepDoubleQuotes: true});\n//=> ['a', '\"b.c.d\"', 'e']\n```\n\n### options.keepSingleQuotes\n\n**Type**: `boolean`\n\n**Default**: `undefined`\n\nKeep single-quotes in the result.\n\n**Example**\n\n```js\nsplit('a.\\'b.c.d\\'.e');\n//=> ['a', 'b.c.d', 'e']\n\nsplit('a.\\'b.c.d\\'.e', {keepSingleQuotes: true});\n//=> ['a', '\\'b.c.d\\'', 'e']\n```\n\n## Customizer\n\n**Type**: `function`\n\n**Default**: `undefined`\n\nPass a function as the last argument to customize how tokens are added to the array.\n\n**Example**\n\n```js\nvar arr = split('a.b', function(tok) {\n  if (tok.arr[tok.arr.length - 1] === 'a') {\n    tok.split = false;\n  }\n});\nconsole.log(arr);\n//=> ['a.b']\n```\n\n**Properties**\n\nThe `tok` object has the following properties:\n\n* `tok.val` (string) The current value about to be pushed onto the result array\n* `tok.idx` (number) the current index in the string\n* `tok.str` (string) the entire string\n* `tok.arr` (array) the result array\n\n## Release history\n\n### v3.0.0 - 2017-06-17\n\n**Added**\n\n* adds support for brackets\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [deromanize](https://www.npmjs.com/package/deromanize): Convert roman numerals to arabic numbers (useful for books, outlines, documentation, slide decks, etc) | [homepage](https://github.com/jonschlinkert/deromanize \"Convert roman numerals to arabic numbers (useful for books, outlines, documentation, slide decks, etc)\")\n* [randomatic](https://www.npmjs.com/package/randomatic): Generate randomized strings of a specified length using simple character sequences. The original generate-password. | [homepage](https://github.com/jonschlinkert/randomatic \"Generate randomized strings of a specified length using simple character sequences. The original generate-password.\")\n* [repeat-string](https://www.npmjs.com/package/repeat-string): Repeat the given string n times. Fastest implementation for repeating a string. | [homepage](https://github.com/jonschlinkert/repeat-string \"Repeat the given string n times. Fastest implementation for repeating a string.\")\n* [romanize](https://www.npmjs.com/package/romanize): Convert numbers to roman numerals (useful for books, outlines, documentation, slide decks, etc) | [homepage](https://github.com/jonschlinkert/romanize \"Convert numbers to roman numerals (useful for books, outlines, documentation, slide decks, etc)\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 28 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 9 | [doowb](https://github.com/doowb) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 19, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/package.json:  "readme": "# assign-symbols [![NPM version](https://badge.fury.io/js/assign-symbols.svg)](http://badge.fury.io/js/assign-symbols)\n\n> Assign the enumerable es6 Symbol properties from an object (or objects) to the first object passed on the arguments. Can be used as a supplement to other extend, assign or merge methods as a polyfill for the Symbols part of the es6 Object.assign method.\n\nFrom the [Mozilla Developer docs for Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol):\n\n> A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i assign-symbols --save\n```\n\n## Usage\n\n```js\nvar assignSymbols = require('assign-symbols');\nvar obj = {};\n\nvar one = {};\nvar symbolOne = Symbol('aaa');\none[symbolOne] = 'bbb';\n\nvar two = {};\nvar symbolTwo = Symbol('ccc');\ntwo[symbolTwo] = 'ddd';\n\nassignSymbols(obj, one, two);\n\nconsole.log(obj[symbolOne]);\n//=> 'bbb'\nconsole.log(obj[symbolTwo]);\n//=> 'ddd'\n```\n\n## Similar projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties of source objects to a destination object. | [homepage](https://github.com/jonschlinkert/assign-deep)\n* [clone-deep](https://www.npmjs.com/package/clone-deep): Recursively (deep) clone JavaScript native types, like Object, Array, RegExp, Date as well as primitives. | [homepage](https://github.com/jonschlinkert/clone-deep)\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow)\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/assign-symbols/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 06, 2015._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolOne]);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolTwo]);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log('a.b.c'.split('.'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log('a\\.b.c'.split('.'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log('"a.b.c".d'.split('.'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log(split('a\\.b.c'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log(split('"a.b.c".d'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/node_modules/split-string/README.md:console.log(arr);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, 'a\\.b.c', 'd'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, 'a\\.b\\.c', 'd'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, '"a.b".c', 'd'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, "'a.b'.c", "d"));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, '"this/is/a/.file.path"', 'd'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, '[a.b].c', 'd'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, "(a.b).c", "d"));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, "<a.b>.c", "d"));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/node_modules/set-value/README.md:console.log(set({}, "{a..b}.c", "d"));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/README.md:console.log(app.cache);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/README.md:console.log(app.data);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/README.md:console.log(app);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/README.md:console.log(app.get('a'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/index.js:   * console.log(app);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/cache-base/index.js:   * console.log(app.get('a'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://img.shields.io/npm/v/define-property.svg?style=flat)](https://www.npmjs.com/package/define-property) [![NPM monthly downloads](https://img.shields.io/npm/dm/define-property.svg?style=flat)](https://npmjs.org/package/define-property)  [![NPM total downloads](https://img.shields.io/npm/dt/define-property.svg?style=flat)](https://npmjs.org/package/define-property) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/define-property.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save define-property\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add define-property\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## About\n\n### Related projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target… [more](https://github.com/jonschlinkert/assign-deep) | [homepage](https://github.com/jonschlinkert/assign-deep \"Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target (first) object.\")\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow \"Extend an object with the properties of additional objects. node.js/javascript util.\")\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep \"Recursively merge values in a javascript object.\")\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep \"Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.5.0, on April 20, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg?style=flat)](https://www.npmjs.com/package/is-data-descriptor) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![NPM total downloads](https://img.shields.io/npm/dt/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-data-descriptor\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor \"Returns true if a value has the characteristics of a valid JavaScript accessor descriptor.\")\n* [is-data-descriptor](https://www.npmjs.com/package/is-data-descriptor): Returns true if a value has the characteristics of a valid JavaScript data descriptor. | [homepage](https://github.com/jonschlinkert/is-data-descriptor \"Returns true if a value has the characteristics of a valid JavaScript data descriptor.\")\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://github.com/jonschlinkert/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor \"Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for data descriptors and accessor descriptors.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 21 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [realityking](https://github.com/realityking) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 01, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/define-property/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:    <img height="250" width="250" src="https://raw.githubusercontent.com/node-base/base/master/docs/logo.png">
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.cache.foo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.foo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.baz); //=> undefined
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.foo); //=> 'bar'
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.get('isApp')); //=> true
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.get('foo')); //=> 'bar'
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.options.abc); //=> true
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app._name);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.isFoo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.isFoo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.isBar);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app._name);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(first.base.foo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(second.base.foo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(third.base.foo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/README.md:console.log(app.foo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.baz); //=> undefined
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.foo); //=> 'bar'
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.get('isApp')); //=> true
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.get('foo')); //=> 'bar'
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.options.abc); //=> true
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app._name);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.isFoo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.isFoo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.isBar);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app._name);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(first.base.foo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(second.base.foo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(third.base.foo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/base/index.js:   * console.log(app.foo);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/test.js:    console.log('[FAIL]', unencoded, atob(encoded));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/test.js:  console.log('[PASS] all tests pass');
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    encyclopedias and anthologies, or performances, phonograms or
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    assimilated works expressed by a process analogous to cinematography;
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    expressed by a process analogous to photography; a work of applied
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    Perform the Work, You may not impose any effective technological
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    License were drafted utilizing the terminology of the Berne Convention
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/LICENSE.DOCS:    related trademark or logo of Creative Commons without the prior
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/package.json:  "readme": "atob\n===\n\nUses `Buffer` to emulate the exact functionality of the browser's atob.\n\nNote: Unicode may be handled incorrectly (like the browser).\n\nIt turns base64-encoded <strong>a</strong>scii data back **to** <strong>b</strong>inary.\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var atob = require('atob');\n  var b64 = \"SGVsbG8gV29ybGQ=\";\n  var bin = atob(b64);\n\n  console.log(bin); // \"Hello World\"\n}());\n```\n\n### Need Unicode and Binary Support in the Browser?\n\nCheck out [unibabel.js](https://github.com/coolaj86/unibabel-js)\n\nChangelog\n=======\n\n  * v2.0.0 provide browser version for ios web workers\n  * v1.2.0 provide (empty) browser version\n  * v1.1.3 add MIT license (see [#4](https://github.com/node-browser-compat/atob/issues/4))\n  * v1.1.2 node only\n\nLICENSE\n=======\n\nCode copyright 2012-2015 AJ ONeal\n\nDual-licensed MIT and Apache-2.0\n\nDocs copyright 2012-2015 AJ ONeal\n\nDocs released under [Creative Commons](https://github.com/node-browser-compat/atob/blob/master/LICENSE.DOCS).\n",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/README.md:  console.log(bin); // "Hello World"
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/README.md:Changelog
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/source-map-resolve/node_modules/atob/bin/atob.js:console.log(atob(str));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/package.json:    "log",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/package.json:  "readme": "# debug\n[![Build Status](https://travis-ci.org/visionmedia/debug.svg?branch=master)](https://travis-ci.org/visionmedia/debug)  [![Coverage Status](https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master)](https://coveralls.io/github/visionmedia/debug?branch=master)  [![Slack](https://visionmedia-community-slackin.now.sh/badge.svg)](https://visionmedia-community-slackin.now.sh/) [![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers) \n[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)\n\n\n\nA tiny node.js debugging utility modelled after node core's debugging technique.\n\n**Discussion around the V3 API is under way [here](https://github.com/visionmedia/debug/issues/370)**\n\n## Installation\n\n```bash\n$ npm install debug\n```\n\n## Usage\n\n`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.\n\nExample _app.js_:\n\n```js\nvar debug = require('debug')('http')\n  , http = require('http')\n  , name = 'My App';\n\n// fake app\n\ndebug('booting %s', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + ' ' + req.url);\n  res.end('hello\\n');\n}).listen(3000, function(){\n  debug('listening');\n});\n\n// fake worker of some kind\n\nrequire('./worker');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n#### Windows note\n\n On Windows the environment variable is set using the `set` command.\n\n ```cmd\n set DEBUG=*,-not_this\n ```\n\n Note that PowerShell uses different syntax to set environment variables.\n\n ```cmd\n $env:DEBUG = \"*,-not_this\"\n  ```\n\nThen, run the program to be debugged as usual.\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n  If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\n\n## Environment Variables\n\n  When running through Node.js, you can set a few environment variables that will\n  change the behavior of the debug logging:\n\n| Name      | Purpose                                         |\n|-----------|-------------------------------------------------|\n| `DEBUG`   | Enables/disables specific debugging namespaces. |\n| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |\n| `DEBUG_DEPTH` | Object inspection depth. |\n| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |\n\n\n  __Note:__ The environment variables beginning with `DEBUG_` end up being\n  converted into an Options object that gets used with `%o`/`%O` formatters.\n  See the Node.js documentation for\n  [`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n  for the complete list.\n\n## Formatters\n\n\n  Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Below are the officially supported formatters:\n\n| Formatter | Representation |\n|-----------|----------------|\n| `%O`      | Pretty-print an Object on multiple lines. |\n| `%o`      | Pretty-print an Object all on a single line. |\n| `%s`      | String. |\n| `%d`      | Number (both integer and float). |\n| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |\n| `%%`      | Single percent sign ('%'). This does not consume an argument. |\n\n### Custom formatters\n\n  You can add custom formatters by extending the `debug.formatters` object. For example, if you wanted to add support for rendering a Buffer as hex with `%h`, you could do something like:\n\n```js\nconst createDebug = require('debug')\ncreateDebug.formatters.h = (v) => {\n  return v.toString('hex')\n}\n\n// …elsewhere\nconst debug = createDebug('foo')\ndebug('this is hex: %h', new Buffer('hello world'))\n//   foo this is hex: 68656c6c6f20776f726c6421 +0ms\n```\n\n## Browser support\n  You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),\n  or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),\n  if you don't want to build it yourself.\n\n  Debug's enable state is currently persisted by `localStorage`.\n  Consider the situation shown below where you have `worker:a` and `worker:b`,\n  and wish to debug both. You can enable this using `localStorage.debug`:\n\n```js\nlocalStorage.debug = 'worker:*'\n```\n\nAnd then refresh the page.\n\n```js\na = debug('worker:a');\nb = debug('worker:b');\n\nsetInterval(function(){\n  a('doing some work');\n}, 1000);\n\nsetInterval(function(){\n  b('doing some work');\n}, 1200);\n```\n\n#### Web Inspector Colors\n\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\n  option. These are WebKit web inspectors, Firefox ([since version\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\n  and the Firebug plugin for Firefox (any version).\n\n  Colored output looks something like:\n\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\n\n\n## Output streams\n\n  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:\n\nExample _stdout.js_:\n\n```js\nvar debug = require('debug');\nvar error = debug('app:error');\n\n// by default stderr is used\nerror('goes to stderr!');\n\nvar log = debug('app:log');\n// set this namespace to log via console.log\nlog.log = console.log.bind(console); // don't forget to bind to console!\nlog('goes to stdout');\nerror('still goes to stderr!');\n\n// set all output to go via console.info\n// overrides all per-namespace log settings\ndebug.log = console.info.bind(console);\nerror('now goes to stdout via console.info');\nlog('still goes to stdout, but via console.info now');\n```\n\n\n## Authors\n\n - TJ Holowaychuk\n - Nathan Rajlich\n - Andrew Rhyne\n \n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]\n\n<a href=\"https://opencollective.com/debug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/backer/29/avatar.svg\"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]\n\n<a href=\"https://opencollective.com/debug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/debug/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/debug/sponsor/29/avatar.svg\"></a>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:  change the behavior of the debug logging:
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:var log = debug('app:log');
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:// set this namespace to log via console.log
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:log.log = console.log.bind(console); // don't forget to bind to console!
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:log('goes to stdout');
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:// overrides all per-namespace log settings
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:debug.log = console.info.bind(console);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:log('still goes to stdout, but via console.info now');
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/README.md:Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * Misc: add npm-debug.log to .gitignore (@thebigredgeek)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * Docs: Changelog fix (@thebigredgeek)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * Fix: custom log function (#379, @hsiliev)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * README: add logging to file example (#193, @DanielOchoa)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * browser: check for `console.log` truthiness (fix IE 8/9)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * node: use stderr rather than stdout for logging (#29, @stephenmathieson)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * example: remove `console.info()` log usage
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * debug: prefer an instance `log()` function over the global one (#119)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * Readme: update documentation about styled console logs for FF v31 (#116, @wryk)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * common: make console logging function configurable (#108, @timoxley)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * node: apply log to `console`
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/CHANGELOG.md:  * rewrite: abstract common logic for Node & browsers
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js:exports.log = log;
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js: * Colorize log arguments if enabled.
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js: * Invokes `console.log()` when available.
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js: * No-op when `console.log` is not a "function".
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js:function log() {
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js:  // the `console.log` function doesn't have 'apply'
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js:    && console.log
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/browser.js:    && Function.prototype.apply.call(console.log, console, arguments);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/node.js:exports.log = log;
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/node.js: *   $ DEBUG_FD=3 node script.js 3>debug.log
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/node.js:  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/node.js:function log() {
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/node.js: * Init logic for `debug` instances.
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/inspector-log.js: * Outputs a `console.log()` to the Node.js Inspector console *only*.
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/inspector-log.js:  console.log.apply(console, arguments);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/debug.js: * This is the common logic for both the Node.js and web browser
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/debug.js: * Previous log timestamp.
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/debug.js:    var logFn = debug.log || exports.log || console.log.bind(console);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/debug.js:    logFn.apply(self, args);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/src/debug.js:  // env-specific initialization logic for debug instances
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/karma.conf.js:    // enable / disable colors in the output (reporters and logs)
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/karma.conf.js:    // level of logging
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/karma.conf.js:    logLevel: config.LOG_INFO,
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/debug/component.json:    "log",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://badge.fury.io/js/define-property.svg)](http://badge.fury.io/js/define-property)\n\n> Define a non-enumerable property on an object.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i define-property --save\n```\n\n## Usage\n\n**Params**\n\n* `obj`: The object on which to define the property.\n* `prop`: The name of the property to be defined or modified.\n* `descriptor`: The descriptor for the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**get/set**\n\n```js\ndefine(obj, 'foo', {\n  get: function() {},\n  set: function() {}\n});\n```\n\n## Related projects\n\n* [delegate-object](https://www.npmjs.com/package/delegate-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/delegate-object) | [homepage](https://github.com/doowb/delegate-object)\n* [forward-object](https://www.npmjs.com/package/forward-object): Copy properties from an object to another object, where properties with function values will be… [more](https://www.npmjs.com/package/forward-object) | [homepage](https://github.com/doowb/forward-object)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n* [mixin-object](https://www.npmjs.com/package/mixin-object): Mixin the own and inherited properties of other objects onto the first object. Pass an… [more](https://www.npmjs.com/package/mixin-object) | [homepage](https://github.com/jonschlinkert/mixin-object)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/define-property/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on August 31, 2015._\n",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/package.json:  "readme": "# kind-of [![NPM version](https://img.shields.io/npm/v/kind-of.svg?style=flat)](https://www.npmjs.com/package/kind-of) [![NPM monthly downloads](https://img.shields.io/npm/dm/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![NPM total downloads](https://img.shields.io/npm/dt/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/kind-of.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/kind-of)\n\n> Get the native type of a value.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save kind-of\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install kind-of --save\n```\n\n## Why use this?\n\n1. [it's fast](#benchmarks) | [optimizations](#optimizations)\n2. [better type checking](#better-type-checking)\n\n## Usage\n\n> es5, browser and es6 ready\n\n```js\nvar kindOf = require('kind-of');\n\nkindOf(undefined);\n//=> 'undefined'\n\nkindOf(null);\n//=> 'null'\n\nkindOf(true);\n//=> 'boolean'\n\nkindOf(false);\n//=> 'boolean'\n\nkindOf(new Boolean(true));\n//=> 'boolean'\n\nkindOf(new Buffer(''));\n//=> 'buffer'\n\nkindOf(42);\n//=> 'number'\n\nkindOf(new Number(42));\n//=> 'number'\n\nkindOf('str');\n//=> 'string'\n\nkindOf(new String('str'));\n//=> 'string'\n\nkindOf(arguments);\n//=> 'arguments'\n\nkindOf({});\n//=> 'object'\n\nkindOf(Object.create(null));\n//=> 'object'\n\nkindOf(new Test());\n//=> 'object'\n\nkindOf(new Date());\n//=> 'date'\n\nkindOf([]);\n//=> 'array'\n\nkindOf([1, 2, 3]);\n//=> 'array'\n\nkindOf(new Array());\n//=> 'array'\n\nkindOf(/foo/);\n//=> 'regexp'\n\nkindOf(new RegExp('foo'));\n//=> 'regexp'\n\nkindOf(function () {});\n//=> 'function'\n\nkindOf(function * () {});\n//=> 'function'\n\nkindOf(new Function());\n//=> 'function'\n\nkindOf(new Map());\n//=> 'map'\n\nkindOf(new WeakMap());\n//=> 'weakmap'\n\nkindOf(new Set());\n//=> 'set'\n\nkindOf(new WeakSet());\n//=> 'weakset'\n\nkindOf(Symbol('str'));\n//=> 'symbol'\n\nkindOf(new Int8Array());\n//=> 'int8array'\n\nkindOf(new Uint8Array());\n//=> 'uint8array'\n\nkindOf(new Uint8ClampedArray());\n//=> 'uint8clampedarray'\n\nkindOf(new Int16Array());\n//=> 'int16array'\n\nkindOf(new Uint16Array());\n//=> 'uint16array'\n\nkindOf(new Int32Array());\n//=> 'int32array'\n\nkindOf(new Uint32Array());\n//=> 'uint32array'\n\nkindOf(new Float32Array());\n//=> 'float32array'\n\nkindOf(new Float64Array());\n//=> 'float64array'\n```\n\n## Release history\n\n### v4.0.0\n\n**Added**\n\n* `promise` support\n\n### v5.0.0\n\n**Added**\n\n* `Set Iterator` and `Map Iterator` support\n\n**Fixed**\n\n* Now returns `generatorfunction` for generator functions\n\n## Benchmarks\n\nBenchmarked against [typeof](http://github.com/CodingFu/typeof) and [type-of](https://github.com/ForbesLindesay/type-of).\nNote that performaces is slower for es6 features `Map`, `WeakMap`, `Set` and `WeakSet`.\n\n```bash\n#1: array\n  current x 23,329,397 ops/sec ±0.82% (94 runs sampled)\n  lib-type-of x 4,170,273 ops/sec ±0.55% (94 runs sampled)\n  lib-typeof x 9,686,935 ops/sec ±0.59% (98 runs sampled)\n\n#2: boolean\n  current x 27,197,115 ops/sec ±0.85% (94 runs sampled)\n  lib-type-of x 3,145,791 ops/sec ±0.73% (97 runs sampled)\n  lib-typeof x 9,199,562 ops/sec ±0.44% (99 runs sampled)\n\n#3: date\n  current x 20,190,117 ops/sec ±0.86% (92 runs sampled)\n  lib-type-of x 5,166,970 ops/sec ±0.74% (94 runs sampled)\n  lib-typeof x 9,610,821 ops/sec ±0.50% (96 runs sampled)\n\n#4: function\n  current x 23,855,460 ops/sec ±0.60% (97 runs sampled)\n  lib-type-of x 5,667,740 ops/sec ±0.54% (100 runs sampled)\n  lib-typeof x 10,010,644 ops/sec ±0.44% (100 runs sampled)\n\n#5: null\n  current x 27,061,047 ops/sec ±0.97% (96 runs sampled)\n  lib-type-of x 13,965,573 ops/sec ±0.62% (97 runs sampled)\n  lib-typeof x 8,460,194 ops/sec ±0.61% (97 runs sampled)\n\n#6: number\n  current x 25,075,682 ops/sec ±0.53% (99 runs sampled)\n  lib-type-of x 2,266,405 ops/sec ±0.41% (98 runs sampled)\n  lib-typeof x 9,821,481 ops/sec ±0.45% (99 runs sampled)\n\n#7: object\n  current x 3,348,980 ops/sec ±0.49% (99 runs sampled)\n  lib-type-of x 3,245,138 ops/sec ±0.60% (94 runs sampled)\n  lib-typeof x 9,262,952 ops/sec ±0.59% (99 runs sampled)\n\n#8: regex\n  current x 21,284,827 ops/sec ±0.72% (96 runs sampled)\n  lib-type-of x 4,689,241 ops/sec ±0.43% (100 runs sampled)\n  lib-typeof x 8,957,593 ops/sec ±0.62% (98 runs sampled)\n\n#9: string\n  current x 25,379,234 ops/sec ±0.58% (96 runs sampled)\n  lib-type-of x 3,635,148 ops/sec ±0.76% (93 runs sampled)\n  lib-typeof x 9,494,134 ops/sec ±0.49% (98 runs sampled)\n\n#10: undef\n  current x 27,459,221 ops/sec ±1.01% (93 runs sampled)\n  lib-type-of x 14,360,433 ops/sec ±0.52% (99 runs sampled)\n  lib-typeof x 23,202,868 ops/sec ±0.59% (94 runs sampled)\n\n```\n\n## Optimizations\n\nIn 7 out of 8 cases, this library is 2x-10x faster than other top libraries included in the benchmarks. There are a few things that lead to this performance advantage, none of them hard and fast rules, but all of them simple and repeatable in almost any code library:\n\n1. Optimize around the fastest and most common use cases first. Of course, this will change from project-to-project, but I took some time to understand how and why `typeof` checks were being used in my own libraries and other libraries I use a lot.\n2. Optimize around bottlenecks - In other words, the order in which conditionals are implemented is significant, because each check is only as fast as the failing checks that came before it. Here, the biggest bottleneck by far is checking for plain objects (an object that was created by the `Object` constructor). I opted to make this check happen by process of elimination rather than brute force up front (e.g. by using something like `val.constructor.name`), so that every other type check would not be penalized it.\n3. Don't do uneccessary processing - why do `.slice(8, -1).toLowerCase();` just to get the word `regex`? It's much faster to do `if (type === '[object RegExp]') return 'regex'`\n4. There is no reason to make the code in a microlib as terse as possible, just to win points for making it shorter. It's always better to favor performant code over terse code. You will always only be using a single `require()` statement to use the library anyway, regardless of how the code is written.\n\n## Better type checking\n\nkind-of is more correct than other type checking libs I've looked at. For example, here are some differing results from other popular libs:\n\n### [typeof](https://github.com/CodingFu/typeof) lib\n\nIncorrectly tests instances of custom constructors (pretty common):\n\n```js\nvar typeOf = require('typeof');\nfunction Test() {}\nconsole.log(typeOf(new Test()));\n//=> 'test'\n```\n\nReturns `object` instead of `arguments`:\n\n```js\nfunction foo() {\n  console.log(typeOf(arguments)) //=> 'object'\n}\nfoo();\n```\n\n### [type-of](https://github.com/ForbesLindesay/type-of) lib\n\nIncorrectly returns `object` for generator functions, buffers, `Map`, `Set`, `WeakMap` and `WeakSet`:\n\n```js\nfunction * foo() {}\nconsole.log(typeOf(foo));\n//=> 'object'\nconsole.log(typeOf(new Buffer('')));\n//=> 'object'\nconsole.log(typeOf(new Map()));\n//=> 'object'\nconsole.log(typeOf(new Set()));\n//=> 'object'\nconsole.log(typeOf(new WeakMap()));\n//=> 'object'\nconsole.log(typeOf(new WeakSet()));\n//=> 'object'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n<details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n<details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n<details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-number](https://www.npmjs.com/package/is-number): Returns true if the value is a number. comprehensive tests. | [homepage](https://github.com/jonschlinkert/is-number \"Returns true if the value is a number. comprehensive tests.\")\n* [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive.  | [homepage](https://github.com/jonschlinkert/is-primitive \"Returns `true` if the value is a primitive. \")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 82 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 3 | [aretecode](https://github.com/aretecode) |\n| 2 | [miguelmota](https://github.com/miguelmota) |\n| 1 | [dtothefp](https://github.com/dtothefp) |\n| 1 | [ksheedlo](https://github.com/ksheedlo) |\n| 1 | [pdehaan](https://github.com/pdehaan) |\n| 1 | [laggingreflex](https://github.com/laggingreflex) |\n| 1 | [charlike](https://github.com/charlike) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on October 13, 2017._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Test()));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:  console.log(typeOf(arguments)) //=> 'object'
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(foo));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Buffer('')));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Map()));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new Set()));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakMap()));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/kind-of/README.md:console.log(typeOf(new WeakSet()));
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg)](https://www.npmjs.com/package/is-data-descriptor) [![Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm i is-data-descriptor --save\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## Related projects\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor)\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://www.npmjs.com/package/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor)\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-data-descriptor/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 [Jon Schlinkert](https://github.com/jonschlinkert)\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb) on December 28, 2015._",
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/snapdragon/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./lib/node_modules/micromatch/node_modules/snapdragon/README.md:    console.log(node.val)
./lib/node_modules/micromatch/node_modules/snapdragon/README.md:console.log(result.output);
./lib/node_modules/micromatch/node_modules/snapdragon/index.js: *   console.log(this);          //<= snapdragon instance
./lib/node_modules/micromatch/node_modules/snapdragon/index.js: *   console.log(this.parser);   //<= parser instance
./lib/node_modules/micromatch/node_modules/snapdragon/index.js: *   console.log(this.compiler); //<= compiler instance
./lib/node_modules/micromatch/node_modules/snapdragon/index.js: * console.log(ast);
./lib/node_modules/micromatch/node_modules/snapdragon/index.js: * console.log(res.output);
./lib/node_modules/micromatch/node_modules/to-regex/package.json:  "readme": "# to-regex [![NPM version](https://img.shields.io/npm/v/to-regex.svg?style=flat)](https://www.npmjs.com/package/to-regex) [![NPM monthly downloads](https://img.shields.io/npm/dm/to-regex.svg?style=flat)](https://npmjs.org/package/to-regex) [![NPM total downloads](https://img.shields.io/npm/dt/to-regex.svg?style=flat)](https://npmjs.org/package/to-regex) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/to-regex.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/to-regex)\n\n> Generate a regex from a string or array of strings.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n- [Install](#install)\n- [Usage](#usage)\n- [Options](#options)\n  * [options.contains](#optionscontains)\n  * [options.negate](#optionsnegate)\n  * [options.nocase](#optionsnocase)\n  * [options.flags](#optionsflags)\n  * [options.cache](#optionscache)\n  * [options.safe](#optionssafe)\n- [About](#about)\n  * [Related projects](#related-projects)\n  * [Author](#author)\n  * [License](#license)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save to-regex\n```\n\n## Usage\n\n```js\nvar toRegex = require('to-regex');\n\nconsole.log(toRegex('foo'));\n//=> /^(?:foo)$/\n\nconsole.log(toRegex('foo', {negate: true}));\n//=> /^(?:(?:(?!^(?:foo)$).)*)$/\n\nconsole.log(toRegex('foo', {contains: true}));\n//=> /(?:foo)/\n\nconsole.log(toRegex(['foo', 'bar'], {negate: true}));\n//=> /^(?:(?:(?!^(?:(?:foo)|(?:bar))$).)*)$/\n\nconsole.log(toRegex(['foo', 'bar'], {negate: true, contains: true}));\n//=> /^(?:(?:(?!(?:(?:foo)|(?:bar))).)*)$/\n```\n\n## Options\n\n### options.contains\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nGenerate a regex that will match any string that _contains_ the given pattern. By default, regex is strict will only return true for exact matches.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {contains: true}));\n//=> /(?:foo)/\n```\n\n### options.negate\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nCreate a regex that will match everything except the given pattern.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {negate: true}));\n//=> /^(?:(?:(?!^(?:foo)$).)*)$/\n```\n\n### options.nocase\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nAdds the `i` flag, to enable case-insensitive matching.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {nocase: true}));\n//=> /^(?:foo)$/i\n```\n\nAlternatively you can pass the flags you want directly on [options.flags](#options.flags).\n\n### options.flags\n\n**Type**: `String`\n\n**Default**: `undefined`\n\nDefine the flags you want to use on the generated regex.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {flags: 'gm'}));\n//=> /^(?:foo)$/gm\nconsole.log(toRegex('foo', {flags: 'gmi', nocase: true})); //<= handles redundancy\n//=> /^(?:foo)$/gmi\n```\n\n### options.cache\n\n**Type**: `Boolean`\n\n**Default**: `true`\n\nGenerated regex is cached based on the provided string and options. As a result, runtime compilation only happens once per pattern (as long as options are also the same), which can result in dramatic speed improvements.\n\nThis also helps with debugging, since adding options and pattern are added to the generated regex.\n\n**Disable caching**\n\n```js\ntoRegex('foo', {cache: false});\n```\n\n### options.safe\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nCheck the generated regular expression with [safe-regex](https://github.com/substack/safe-regex) and throw an error if the regex is potentially unsafe.\n\n**Examples**\n\n```js\nconsole.log(toRegex('(x+x+)+y'));\n//=> /^(?:(x+x+)+y)$/\n\n// The following would throw an error\ntoRegex('(x+x+)+y', {safe: true});\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [has-glob](https://www.npmjs.com/package/has-glob): Returns `true` if an array has a glob pattern. | [homepage](https://github.com/jonschlinkert/has-glob \"Returns `true` if an array has a glob pattern.\")\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [path-regex](https://www.npmjs.com/package/path-regex): Regular expression for matching the parts of a file path. | [homepage](https://github.com/regexps/path-regex \"Regular expression for matching the parts of a file path.\")\n* [to-regex-range](https://www.npmjs.com/package/to-regex-range): Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than… [more](https://github.com/micromatch/to-regex-range) | [homepage](https://github.com/micromatch/to-regex-range \"Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions.\")\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 24, 2018._",
./lib/node_modules/micromatch/node_modules/to-regex/node_modules/safe-regex/package.json:  "readme": "# safe-regex\n\ndetect potentially\n[catastrophic](http://regular-expressions.mobi/catastrophic.html)\n[exponential-time](http://perlgeek.de/blog-en/perl-tips/in-search-of-an-exponetial-regexp.html)\nregular expressions by limiting the\n[star height](https://en.wikipedia.org/wiki/Star_height) to 1\n\nWARNING: This module merely *seems* to work given all the catastrophic regular\nexpressions I could find scouring the internet, but I don't have enough of a\nbackground in automata to be absolutely sure that this module will catch all\nexponential-time cases.\n\n[![browser support](https://ci.testling.com/substack/safe-regex.png)](https://ci.testling.com/substack/safe-regex)\n\n[![build status](https://secure.travis-ci.org/substack/safe-regex.png)](http://travis-ci.org/substack/safe-regex)\n\n# example\n\n``` js\nvar safe = require('safe-regex');\nvar regex = process.argv.slice(2).join(' ');\nconsole.log(safe(regex));\n```\n\n```\n$ node safe.js '(x+x+)+y'\nfalse\n$ node safe.js '(beep|boop)*'\ntrue\n$ node safe.js '(a+){10}'\nfalse\n$ node safe.js '\\blocation\\s*:[^:\\n]+\\b(Oakland|San Francisco)\\b'\ntrue\n```\n\n# methods\n\n``` js\nvar safe = require('safe-regex')\n```\n\n## var ok = safe(re, opts={})\n\nReturn a boolean `ok` whether or not the regex `re` is safe and not possibly\ncatastrophic.\n\n`re` can be a `RegExp` object or just a string.\n\nIf the `re` is a string and is an invalid regex, returns `false`.\n\n* `opts.limit` - maximum number of allowed repetitions in the entire regex.\nDefault: `25`.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install safe-regex\n```\n\n# license\n\nMIT\n",
./lib/node_modules/micromatch/node_modules/to-regex/node_modules/safe-regex/readme.markdown:[exponential-time](http://perlgeek.de/blog-en/perl-tips/in-search-of-an-exponetial-regexp.html)
./lib/node_modules/micromatch/node_modules/to-regex/node_modules/safe-regex/readme.markdown:console.log(safe(regex));
./lib/node_modules/micromatch/node_modules/to-regex/node_modules/safe-regex/example/safe.js:console.log(safe(regex));
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo'));
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {negate: true}));
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {contains: true}));
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex(['foo', 'bar'], {negate: true}));
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex(['foo', 'bar'], {negate: true, contains: true}));
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {contains: true}));
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {negate: true}));
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {nocase: true}));
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {flags: 'gm'}));
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('foo', {flags: 'gmi', nocase: true})); //<= handles redundancy
./lib/node_modules/micromatch/node_modules/to-regex/README.md:console.log(toRegex('(x+x+)+y'));
./lib/node_modules/micromatch/node_modules/regex-not/package.json:  "readme": "# regex-not [![NPM version](https://img.shields.io/npm/v/regex-not.svg?style=flat)](https://www.npmjs.com/package/regex-not) [![NPM monthly downloads](https://img.shields.io/npm/dm/regex-not.svg?style=flat)](https://npmjs.org/package/regex-not) [![NPM total downloads](https://img.shields.io/npm/dt/regex-not.svg?style=flat)](https://npmjs.org/package/regex-not) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/regex-not.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/regex-not)\n\n> Create a javascript regular expression for matching everything except for the given string.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save regex-not\n```\n\n## Usage\n\n```js\nvar not = require('regex-not');\n```\n\nThe main export is a function that takes a string an options object.\n\n```js\nnot(string[, options]);\n```\n\n**Example**\n\n```js\nvar not = require('regex-not');\nconsole.log(not('foo'));\n//=> /^(?:(?!^(?:foo)$).)+$/\n```\n\n**Strict matching**\n\nBy default, the returned regex is for strictly (not) matching the exact given pattern (in other words, \"match this string if it does NOT _exactly equal_ `foo`\"):\n\n```js\nvar re = not('foo');\nconsole.log(re.test('foo'));     //=> false\nconsole.log(re.test('bar'));     //=> true\nconsole.log(re.test('foobar'));  //=> true\nconsole.log(re.test('barfoo'));  //=> true\n```\n\n### .create\n\nReturns a string to allow you to create your own regex:\n\n```js\nconsole.log(not.create('foo'));\n//=> '(?:(?!^(?:foo)$).)+'\n```\n\n### Options\n\n**options.contains**\n\nYou can relax strict matching by setting `options.contains` to true (in other words, \"match this string if it does NOT _contain_ `foo`\"):\n\n```js\nvar re = not('foo');\nconsole.log(re.test('foo', {contains: true}));     //=> false\nconsole.log(re.test('bar', {contains: true}));     //=> true\nconsole.log(re.test('foobar', {contains: true}));  //=> false\nconsole.log(re.test('barfoo', {contains: true}));  //=> false\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [regex-cache](https://www.npmjs.com/package/regex-cache): Memoize the results of a call to the RegExp constructor, avoiding repetitious runtime compilation of… [more](https://github.com/jonschlinkert/regex-cache) | [homepage](https://github.com/jonschlinkert/regex-cache \"Memoize the results of a call to the RegExp constructor, avoiding repetitious runtime compilation of the same string and options, resulting in surprising performance improvements.\")\n* [to-regex](https://www.npmjs.com/package/to-regex): Generate a regex from a string or array of strings. | [homepage](https://github.com/jonschlinkert/to-regex \"Generate a regex from a string or array of strings.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 9 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 1 | [doowb](https://github.com/doowb) |\n| 1 | [EdwardBetts](https://github.com/EdwardBetts) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 19, 2018._",
./lib/node_modules/micromatch/node_modules/regex-not/node_modules/safe-regex/package.json:  "readme": "# safe-regex\n\ndetect potentially\n[catastrophic](http://regular-expressions.mobi/catastrophic.html)\n[exponential-time](http://perlgeek.de/blog-en/perl-tips/in-search-of-an-exponetial-regexp.html)\nregular expressions by limiting the\n[star height](https://en.wikipedia.org/wiki/Star_height) to 1\n\nWARNING: This module merely *seems* to work given all the catastrophic regular\nexpressions I could find scouring the internet, but I don't have enough of a\nbackground in automata to be absolutely sure that this module will catch all\nexponential-time cases.\n\n[![browser support](https://ci.testling.com/substack/safe-regex.png)](https://ci.testling.com/substack/safe-regex)\n\n[![build status](https://secure.travis-ci.org/substack/safe-regex.png)](http://travis-ci.org/substack/safe-regex)\n\n# example\n\n``` js\nvar safe = require('safe-regex');\nvar regex = process.argv.slice(2).join(' ');\nconsole.log(safe(regex));\n```\n\n```\n$ node safe.js '(x+x+)+y'\nfalse\n$ node safe.js '(beep|boop)*'\ntrue\n$ node safe.js '(a+){10}'\nfalse\n$ node safe.js '\\blocation\\s*:[^:\\n]+\\b(Oakland|San Francisco)\\b'\ntrue\n```\n\n# methods\n\n``` js\nvar safe = require('safe-regex')\n```\n\n## var ok = safe(re, opts={})\n\nReturn a boolean `ok` whether or not the regex `re` is safe and not possibly\ncatastrophic.\n\n`re` can be a `RegExp` object or just a string.\n\nIf the `re` is a string and is an invalid regex, returns `false`.\n\n* `opts.limit` - maximum number of allowed repetitions in the entire regex.\nDefault: `25`.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install safe-regex\n```\n\n# license\n\nMIT\n",
./lib/node_modules/micromatch/node_modules/regex-not/node_modules/safe-regex/readme.markdown:[exponential-time](http://perlgeek.de/blog-en/perl-tips/in-search-of-an-exponetial-regexp.html)
./lib/node_modules/micromatch/node_modules/regex-not/node_modules/safe-regex/readme.markdown:console.log(safe(regex));
./lib/node_modules/micromatch/node_modules/regex-not/node_modules/safe-regex/example/safe.js:console.log(safe(regex));
./lib/node_modules/micromatch/node_modules/regex-not/README.md:console.log(not('foo'));
./lib/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('foo'));     //=> false
./lib/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('bar'));     //=> true
./lib/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('foobar'));  //=> true
./lib/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('barfoo'));  //=> true
./lib/node_modules/micromatch/node_modules/regex-not/README.md:console.log(not.create('foo'));
./lib/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('foo', {contains: true}));     //=> false
./lib/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('bar', {contains: true}));     //=> true
./lib/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('foobar', {contains: true}));  //=> false
./lib/node_modules/micromatch/node_modules/regex-not/README.md:console.log(re.test('barfoo', {contains: true}));  //=> false
./lib/node_modules/micromatch/node_modules/regex-not/index.js: & console.log(not('foo'));
./lib/node_modules/micromatch/node_modules/regex-not/index.js: & console.log(not.create('foo'));
./lib/node_modules/micromatch/node_modules/nanomatch/package.json:    "helper-changelog": "^0.3.0",
./lib/node_modules/micromatch/node_modules/nanomatch/package.json:      "helper-changelog"
./lib/node_modules/micromatch/node_modules/nanomatch/package.json:  "readme": "# nanomatch [![NPM version](https://img.shields.io/npm/v/nanomatch.svg?style=flat)](https://www.npmjs.com/package/nanomatch) [![NPM monthly downloads](https://img.shields.io/npm/dm/nanomatch.svg?style=flat)](https://npmjs.org/package/nanomatch) [![NPM total downloads](https://img.shields.io/npm/dt/nanomatch.svg?style=flat)](https://npmjs.org/package/nanomatch) [![Linux Build Status](https://img.shields.io/travis/micromatch/nanomatch.svg?style=flat&label=Travis)](https://travis-ci.org/micromatch/nanomatch) [![Windows Build Status](https://img.shields.io/appveyor/ci/micromatch/nanomatch.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/micromatch/nanomatch)\n\n> Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash 4.3 wildcard support only (no support for exglobs, posix brackets or braces)\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Table of Contents\n\n<details>\n<summary><strong>Details</strong></summary>\n\n- [Install](#install)\n- [What is nanomatch?](#what-is-nanomatch)\n- [Getting started](#getting-started)\n  * [Installing nanomatch](#installing-nanomatch)\n  * [Usage](#usage)\n- [Documentation](#documentation)\n  * [Escaping](#escaping)\n- [API](#api)\n- [Options](#options)\n  * [options.basename](#optionsbasename)\n  * [options.bash](#optionsbash)\n  * [options.cache](#optionscache)\n  * [options.dot](#optionsdot)\n  * [options.failglob](#optionsfailglob)\n  * [options.ignore](#optionsignore)\n  * [options.matchBase](#optionsmatchbase)\n  * [options.nocase](#optionsnocase)\n  * [options.nodupes](#optionsnodupes)\n  * [options.noglobstar](#optionsnoglobstar)\n  * [options.nonegate](#optionsnonegate)\n  * [options.nonull](#optionsnonull)\n  * [options.nullglob](#optionsnullglob)\n  * [options.slash](#optionsslash)\n  * [options.star](#optionsstar)\n  * [options.snapdragon](#optionssnapdragon)\n  * [options.sourcemap](#optionssourcemap)\n  * [options.unescape](#optionsunescape)\n  * [options.unixify](#optionsunixify)\n- [Features](#features)\n- [Bash expansion libs](#bash-expansion-libs)\n- [Benchmarks](#benchmarks)\n  * [Running benchmarks](#running-benchmarks)\n  * [Nanomatch vs. Minimatch vs. Multimatch](#nanomatch-vs-minimatch-vs-multimatch)\n- [About](#about)\n\n</details>\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save nanomatch\n```\n\n<details>\n<summary><strong>Release history</strong></summary>\n\n## History\n\n### key\n\nChangelog entries are classified using the following labels _(from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog)_):\n\n* `added`: for new features\n* `changed`: for changes in existing functionality\n* `deprecated`: for once-stable features removed in upcoming releases\n* `removed`: for deprecated features removed in this release\n* `fixed`: for any bug fixes\n* `bumped`: updated dependencies, only minor or higher will be listed.\n\n### [1.1.0](https://github.com/micromatch/nanomatch/compare/1.0.4...1.1.0) - 2017-04-11\n\n**Fixed**\n\n* adds support for unclosed quotes\n\n**Added**\n\n* adds support for `options.noglobstar`\n\n### [1.0.4](https://github.com/micromatch/nanomatch/compare/1.0.3...1.0.4) - 2017-04-06\n\nHousekeeping updates. Adds documentation section about escaping, cleans up utils.\n\n### [1.0.3](https://github.com/micromatch/nanomatch/compare/1.0.1...1.0.3) - 2017-04-06\n\nThis release includes fixes for windows path edge cases and other improvements for stricter adherence to bash spec.\n\n**Fixed**\n\n* More windows path edge cases\n\n**Added**\n\n* Support for bash-like quoted strings for escaping sequences of characters, such as `foo/\"**\"/bar` where `**` should be matched literally and not evaluated as special characters.\n\n### [1.0.1](https://github.com/micromatch/nanomatch/compare/1.0.0...1.0.1) - 2016-12-12\n\n**Added**\n\n* Support for windows path edge cases where backslashes are used in brackets or other unusual combinations.\n\n### [1.0.0](https://github.com/micromatch/nanomatch/compare/0.1.0...1.0.0) - 2016-12-12\n\nStable release.\n\n### [0.1.0] - 2016-10-08\n\nFirst release.\n\n</details>\n\n## What is nanomatch?\n\nNanomatch is a fast and accurate glob matcher with full support for standard Bash glob features, including the following \"metacharacters\": `*`, `**`, `?` and `[...]`.\n\n**Learn more**\n\n* [Getting started](#getting-started): learn how to install and begin using nanomatch\n* [Features](#features): jump to info about supported patterns, and a glob matching reference\n* [API documentation](#api): jump to available options and methods\n* [Unit tests](test): visit unit tests. there is no better way to learn a code library than spending time the unit tests. Nanomatch has 36,000 unit tests - go become a glob matching ninja!\n\n<details>\n<summary><strong>How is this different?</strong></summary>\n\n**Speed and accuracy**\n\nNanomatch uses [snapdragon](https://github.com/jonschlinkert/snapdragon) for parsing and compiling globs, which results in:\n\n* Granular control over the entire conversion process in a way that is easy to understand, reason about, and customize.\n* Faster matching, from a combination of optimized glob patterns and (optional) caching.\n* Much greater accuracy than minimatch. In fact, nanomatch passes _all of the spec tests_ from bash, including some that bash still fails. However, since there is no real specification for globs, if you encounter a pattern that yields unexpected match results [after researching previous issues](../../issues), [please let us know](../../issues/new).\n\n**Basic globbing only**\n\nNanomatch supports [basic globbing only](#features), which is limited to `*`, `**`, `?` and regex-like brackets.\n\nIf you need support for the other [bash \"expansion\" types](#bash-expansion-libs) (in addition to the wildcard matching provided by nanomatch), consider using [micromatch](https://github.com/micromatch/micromatch) instead. _(micromatch >=3.0.0  uses the nanomatch parser and compiler for basic glob matching)_\n\n</details>\n\n## Getting started\n\n### Installing nanomatch\n\n**Install with [yarn](https://yarnpkg.com/)**\n\n```sh\n$ yarn add nanomatch\n```\n\n**Install with [npm](https://npmjs.com)**\n\n```sh\n$ npm install nanomatch\n```\n\n### Usage\n\nAdd nanomatch to your project using node's `require()` system:\n\n```js\nvar nanomatch = require('nanomatch');\n\n// the main export is a function that takes an array of strings to match\n// and a string or array of patterns to use for matching\nnanomatch(list, patterns[, options]);\n```\n\n**Params**\n\n* `list` **{String|Array}**: List of strings to perform matches against. This is often a list of file paths.\n* `patterns` **{String|Array}**: One or more [glob paterns](#features) to use for matching.\n* `options` **{Object}**: Any [supported options](#options) may be passed\n\n**Examples**\n\n```js\nvar nm = require('nanomatch');\nconsole.log(nm(['a', 'b/b', 'c/c/c'], '*'));\n//=> ['a']\n\nconsole.log(nm(['a', 'b/b', 'c/c/c'], '*/*'));\n//=> ['b/b']\n\nconsole.log(nm(['a', 'b/b', 'c/c/c'], '**'));\n//=> ['a', 'b/b', 'c/c/c']\n```\n\nSee the [API documentation](#api) for available methods and [options](https://github.com/einaros/options.js).\n\n## Documentation\n\n### Escaping\n\n_Backslashes and quotes_ can be used to escape characters, forcing nanomatch to regard those characters as a literal characters.\n\n**Backslashes**\n\nUse backslashes to escape single characters. For example, the following pattern would match `foo/*/bar` exactly:\n\n```js\n'foo/\\*/bar'\n```\n\nThe following pattern would match `foo/` followed by a literal `*`, followed by zero or more of any characters besides `/`, followed by `/bar`.\n\n```js\n'foo/\\**/bar'\n```\n\n**Quoted strings**\n\nUse single or double quotes to escape sequences of characters. For example, the following patterns would match `foo/**/bar` exactly:\n\n```js\n'foo/\"**\"/bar'\n'foo/\\'**\\'/bar'\n\"foo/'**'/bar\"\n```\n\n**Matching literal quotes**\n\nIf you need to match quotes literally, you can escape them as well. For example, the following will match `foo/\"*\"/bar`, `foo/\"a\"/bar`, `foo/\"b\"/bar`, or `foo/\"c\"/bar`:\n\n```js\n'foo/\\\\\"*\\\\\"/bar'\n```\n\nAnd the following will match `foo/'*'/bar`, `foo/'a'/bar`, `foo/'b'/bar`, or `foo/'c'/bar`:\n\n```js\n'foo/\\\\\\'*\\\\\\'/bar'\n```\n\n## API\n\n### [nanomatch](index.js#L40)\n\nThe main function takes a list of strings and one or more glob patterns to use for matching.\n\n**Params**\n\n* `list` **{Array}**: A list of strings to match\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm(list, patterns[, options]);\n\nconsole.log(nm(['a.js', 'a.txt'], ['*.js']));\n//=> [ 'a.js' ]\n```\n\n### [.match](index.js#L106)\n\nSimilar to the main function, but `pattern` must be a string.\n\n**Params**\n\n* `list` **{Array}**: Array of strings to match\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of matches\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.match(list, pattern[, options]);\n\nconsole.log(nm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));\n//=> ['a.a', 'a.aa']\n```\n\n### [.isMatch](index.js#L167)\n\nReturns true if the specified `string` matches the given glob `pattern`.\n\n**Params**\n\n* `string` **{String}**: String to match\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if the string matches the glob pattern.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.isMatch(string, pattern[, options]);\n\nconsole.log(nm.isMatch('a.a', '*.a'));\n//=> true\nconsole.log(nm.isMatch('a.b', '*.a'));\n//=> false\n```\n\n### [.some](index.js#L205)\n\nReturns true if some of the elements in the given `list` match any of the given glob `patterns`.\n\n**Params**\n\n* `list` **{String|Array}**: The string or array of strings to test. Returns as soon as the first match is found.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.some(list, patterns[, options]);\n\nconsole.log(nm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// true\nconsole.log(nm.some(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n### [.every](index.js#L243)\n\nReturns true if every element in the given `list` matches at least one of the given glob `patterns`.\n\n**Params**\n\n* `list` **{String|Array}**: The string or array of strings to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.every(list, patterns[, options]);\n\nconsole.log(nm.every('foo.js', ['foo.js']));\n// true\nconsole.log(nm.every(['foo.js', 'bar.js'], ['*.js']));\n// true\nconsole.log(nm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n// false\nconsole.log(nm.every(['foo.js'], ['*.js', '!foo.js']));\n// false\n```\n\n### [.any](index.js#L277)\n\nReturns true if **any** of the given glob `patterns` match the specified `string`.\n\n**Params**\n\n* `str` **{String|Array}**: The string to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.any(string, patterns[, options]);\n\nconsole.log(nm.any('a.a', ['b.*', '*.a']));\n//=> true\nconsole.log(nm.any('a.a', 'b.*'));\n//=> false\n```\n\n### [.all](index.js#L325)\n\nReturns true if **all** of the given `patterns` match the specified string.\n\n**Params**\n\n* `str` **{String|Array}**: The string to test.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if any patterns match `str`\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.all(string, patterns[, options]);\n\nconsole.log(nm.all('foo.js', ['foo.js']));\n// true\n\nconsole.log(nm.all('foo.js', ['*.js', '!foo.js']));\n// false\n\nconsole.log(nm.all('foo.js', ['*.js', 'foo.js']));\n// true\n\nconsole.log(nm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n// true\n```\n\n### [.not](index.js#L359)\n\nReturns a list of strings that _**do not match any**_ of the given `patterns`.\n\n**Params**\n\n* `list` **{Array}**: Array of strings to match.\n* `patterns` **{String|Array}**: One or more glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Array}**: Returns an array of strings that **do not match** the given patterns.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.not(list, patterns[, options]);\n\nconsole.log(nm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n//=> ['b.b', 'c.c']\n```\n\n### [.contains](index.js#L394)\n\nReturns true if the given `string` contains the given pattern. Similar to [.isMatch](#isMatch) but the pattern can match any part of the string.\n\n**Params**\n\n* `str` **{String}**: The string to match.\n* `patterns` **{String|Array}**: Glob pattern to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns true if the patter matches any part of `str`.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.contains(string, pattern[, options]);\n\nconsole.log(nm.contains('aa/bb/cc', '*b'));\n//=> true\nconsole.log(nm.contains('aa/bb/cc', '*d'));\n//=> false\n```\n\n### [.matchKeys](index.js#L450)\n\nFilter the keys of the given object with the given `glob` pattern and `options`. Does not attempt to match nested keys. If you need this feature, use [glob-object](https://github.com/jonschlinkert/glob-object) instead.\n\n**Params**\n\n* `object` **{Object}**: The object with keys to filter.\n* `patterns` **{String|Array}**: One or more glob patterns to use for matching.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Object}**: Returns an object with only keys that match the given patterns.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.matchKeys(object, patterns[, options]);\n\nvar obj = { aa: 'a', ab: 'b', ac: 'c' };\nconsole.log(nm.matchKeys(obj, '*b'));\n//=> { ab: 'b' }\n```\n\n### [.matcher](index.js#L479)\n\nReturns a memoized matcher function from the given glob `pattern` and `options`. The returned function takes a string to match as its only argument and returns true if the string is a match.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed.\n* `returns` **{Function}**: Returns a matcher function.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.matcher(pattern[, options]);\n\nvar isMatch = nm.matcher('*.!(*a)');\nconsole.log(isMatch('a.a'));\n//=> false\nconsole.log(isMatch('a.b'));\n//=> true\n```\n\n### [.capture](index.js#L560)\n\nReturns an array of matches captured by `pattern` in `string, or`null` if the pattern did not match.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern to use for matching.\n* `string` **{String}**: String to match\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed\n* `returns` **{Boolean}**: Returns an array of captures if the string matches the glob pattern, otherwise `null`.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.capture(pattern, string[, options]);\n\nconsole.log(nm.capture('test/*.js', 'test/foo.js'));\n//=> ['foo']\nconsole.log(nm.capture('test/*.js', 'foo/bar.css'));\n//=> null\n```\n\n### [.makeRe](index.js#L595)\n\nCreate a regular expression from the given glob `pattern`.\n\n**Params**\n\n* `pattern` **{String}**: A glob pattern to convert to regex.\n* `options` **{Object}**: See available [options](#options) for changing how matches are performed.\n* `returns` **{RegExp}**: Returns a regex created from the given pattern.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.makeRe(pattern[, options]);\n\nconsole.log(nm.makeRe('*.js'));\n//=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n```\n\n### [.create](index.js#L658)\n\nParses the given glob `pattern` and returns an object with the compiled `output` and optional source `map`.\n\n**Params**\n\n* `pattern` **{String}**: Glob pattern to parse and compile.\n* `options` **{Object}**: Any [options](#options) to change how parsing and compiling is performed.\n* `returns` **{Object}**: Returns an object with the parsed AST, compiled string and optional source map.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.create(pattern[, options]);\n\nconsole.log(nm.create('abc/*.js'));\n// { options: { source: 'string', sourcemap: true },\n//   state: {},\n//   compilers:\n//    { ... },\n//   output: '(\\\\.[\\\\\\\\\\\\/])?abc\\\\/(?!\\\\.)(?=.)[^\\\\/]*?\\\\.js',\n//   ast:\n//    { type: 'root',\n//      errors: [],\n//      nodes:\n//       [ ... ],\n//      dot: false,\n//      input: 'abc/*.js' },\n//   parsingErrors: [],\n//   map:\n//    { version: 3,\n//      sources: [ 'string' ],\n//      names: [],\n//      mappings: 'AAAA,GAAG,EAAC,kBAAC,EAAC,EAAE',\n//      sourcesContent: [ 'abc/*.js' ] },\n//   position: { line: 1, column: 28 },\n//   content: {},\n//   files: {},\n//   idx: 6 }\n```\n\n### [.parse](index.js#L697)\n\nParse the given `str` with the given `options`.\n\n**Params**\n\n* `str` **{String}**\n* `options` **{Object}**\n* `returns` **{Object}**: Returns an AST\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.parse(pattern[, options]);\n\nvar ast = nm.parse('a/{b,c}/d');\nconsole.log(ast);\n// { type: 'root',\n//   errors: [],\n//   input: 'a/{b,c}/d',\n//   nodes:\n//    [ { type: 'bos', val: '' },\n//      { type: 'text', val: 'a/' },\n//      { type: 'brace',\n//        nodes:\n//         [ { type: 'brace.open', val: '{' },\n//           { type: 'text', val: 'b,c' },\n//           { type: 'brace.close', val: '}' } ] },\n//      { type: 'text', val: '/d' },\n//      { type: 'eos', val: '' } ] }\n```\n\n### [.compile](index.js#L745)\n\nCompile the given `ast` or string with the given `options`.\n\n**Params**\n\n* `ast` **{Object|String}**\n* `options` **{Object}**\n* `returns` **{Object}**: Returns an object that has an `output` property with the compiled string.\n\n**Example**\n\n```js\nvar nm = require('nanomatch');\nnm.compile(ast[, options]);\n\nvar ast = nm.parse('a/{b,c}/d');\nconsole.log(nm.compile(ast));\n// { options: { source: 'string' },\n//   state: {},\n//   compilers:\n//    { eos: [Function],\n//      noop: [Function],\n//      bos: [Function],\n//      brace: [Function],\n//      'brace.open': [Function],\n//      text: [Function],\n//      'brace.close': [Function] },\n//   output: [ 'a/(b|c)/d' ],\n//   ast:\n//    { ... },\n//   parsingErrors: [] }\n```\n\n### [.clearCache](index.js#L768)\n\nClear the regex cache.\n\n**Example**\n\n```js\nnm.clearCache();\n```\n\n## Options\n\n<details>\n<summary><strong>basename</strong></summary>\n\n### options.basename\n\nAllow glob patterns without slashes to match a file path based on its basename. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `matchBase`.\n\nType: `boolean`\n\nDefault: `false`\n\n**Example**\n\n```js\nnm(['a/b.js', 'a/c.md'], '*.js');\n//=> []\n\nnm(['a/b.js', 'a/c.md'], '*.js', {matchBase: true});\n//=> ['a/b.js']\n```\n\n</details>\n\n<details>\n<summary><strong>bash</strong></summary>\n\n### options.bash\n\nEnabled by default, this option enforces bash-like behavior with stars immediately following a bracket expression. Bash bracket expressions are similar to regex character classes, but unlike regex, a star following a bracket expression **does not repeat the bracketed characters**. Instead, the star is treated the same as an other star.\n\nType: `boolean`\n\nDefault: `true`\n\n**Example**\n\n```js\nvar files = ['abc', 'ajz'];\nconsole.log(nm(files, '[a-c]*'));\n//=> ['abc', 'ajz']\n\nconsole.log(nm(files, '[a-c]*', {bash: false}));\n```\n\n</details>\n\n<details>\n<summary><strong>cache</strong></summary>\n\n### options.cache\n\nDisable regex and function memoization.\n\nType: `boolean`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>dot</strong></summary>\n\n### options.dot\n\nMatch dotfiles. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `dot`.\n\nType: `boolean`\n\nDefault: `false`\n\n</details>\n\n<details>\n<summary><strong>failglob</strong></summary>\n\n### options.failglob\n\nSimilar to the `--failglob` behavior in Bash, throws an error when no matches are found.\n\nType: `boolean`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>ignore</strong></summary>\n\n### options.ignore\n\nString or array of glob patterns to match files to ignore.\n\nType: `String|Array`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>matchBase</strong></summary>\n\n### options.matchBase\n\nAlias for [options.basename](#options-basename).\n\n</details>\n\n<details>\n<summary><strong>nocase</strong></summary>\n\n### options.nocase\n\nUse a case-insensitive regex for matching files. Same behavior as [minimatch](https://github.com/isaacs/minimatch).\n\nType: `boolean`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>nodupes</strong></summary>\n\n### options.nodupes\n\nRemove duplicate elements from the result array.\n\nType: `boolean`\n\nDefault: `true` (enabled by default)\n\n**Example**\n\nExample of using the `unescape` and `nodupes` options together:\n\n```js\nnm.match(['a/b/c', 'a/b/c'], '**');\n//=> ['abc']\n\nnm.match(['a/b/c', 'a/b/c'], '**', {nodupes: false});\n//=> ['a/b/c', 'a/b/c']\n```\n\n</details>\n\n<details>\n<summary><strong>nonegate</strong></summary>\n\n### options.noglobstar\n\nDisable matching with globstars (`**`).\n\nType: `boolean`\n\nDefault: `undefined`\n\n```js\nnm(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**');\n//=> ['a/b', 'a/b/c', 'a/b/c/d']\n\nnm(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**', {noglobstar: true});\n//=> ['a/b']\n```\n\n</details>\n\n<details>\n<summary><strong>nonegate</strong></summary>\n\n### options.nonegate\n\nDisallow negation (`!`) patterns, and treat leading `!` as a literal character to match.\n\nType: `boolean`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>nonull</strong></summary>\n\n### options.nonull\n\nAlias for [options.nullglob](#options-nullglob).\n\n</details>\n\n<details>\n<summary><strong>nullglob</strong></summary>\n\n### options.nullglob\n\nIf `true`, when no matches are found the actual (arrayified) glob pattern is returned instead of an empty array. Same behavior as [minimatch](https://github.com/isaacs/minimatch) option `nonull`.\n\nType: `boolean`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong><a name=\"slash\">slash</a></strong></summary>\n\n### options.slash\n\nCustomize the slash character(s) to use for matching.\n\nType: `string|function`\n\nDefault: `[/\\\\]` (forward slash and backslash)\n\n</details>\n\n<details>\n<summary><strong><a name=\"star\">star</a></strong></summary>\n\n### options.star\n\nCustomize the star character(s) to use for matching. It's not recommended that you modify this unless you have advanced knowledge of the compiler and matching rules.\n\nType: `string|function`\n\nDefault: `[^/\\\\]*?`\n\n</details>\n\n<details>\n<summary><strong><a name=\"snapdragon\">snapdragon</a></strong></summary>\n\n### options.snapdragon\n\nPass your own instance of [snapdragon](https://github.com/jonschlinkert/snapdragon) to customize parsers or compilers.\n\nType: `object`\n\nDefault: `undefined`\n\n</details>\n\n<details>\n<summary><strong>snapdragon</strong></summary>\n\n### options.sourcemap\n\nGenerate a source map by enabling the `sourcemap` option with the `.parse`, `.compile`, or `.create` methods.\n\n**Examples**\n\n```js\nvar nm = require('nanomatch');\n\nvar res = nm.create('abc/*.js', {sourcemap: true});\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'string' ],\n//   names: [],\n//   mappings: 'AAAA,GAAG,EAAC,iBAAC,EAAC,EAAE',\n//   sourcesContent: [ 'abc/*.js' ] }\n\nvar ast = nm.parse('abc/**/*.js');\nvar res = nm.compile(ast, {sourcemap: true});\nconsole.log(res.map);\n// { version: 3,\n//   sources: [ 'string' ],\n//   names: [],\n//   mappings: 'AAAA,GAAG,EAAC,2BAAE,EAAC,iBAAC,EAAC,EAAE',\n//   sourcesContent: [ 'abc/**/*.js' ] }\n```\n\n</details>\n\n<details>\n<summary><strong>unescape</strong></summary>\n\n### options.unescape\n\nRemove backslashes from returned matches.\n\nType: `boolean`\n\nDefault: `undefined`\n\n**Example**\n\nIn this example we want to match a literal `*`:\n\n```js\nnm.match(['abc', 'a\\\\*c'], 'a\\\\*c');\n//=> ['a\\\\*c']\n\nnm.match(['abc', 'a\\\\*c'], 'a\\\\*c', {unescape: true});\n//=> ['a*c']\n```\n\n</details>\n\n<details>\n<summary><strong>unixify</strong></summary>\n\n### options.unixify\n\nConvert path separators on returned files to posix/unix-style forward slashes.\n\nType: `boolean`\n\nDefault: `true`\n\n**Example**\n\n```js\nnm.match(['a\\\\b\\\\c'], 'a/**');\n//=> ['a/b/c']\n\nnm.match(['a\\\\b\\\\c'], {unixify: false});\n//=> ['a\\\\b\\\\c']\n```\n\n</details>\n\n## Features\n\nNanomatch has full support for standard Bash glob features, including the following \"metacharacters\": `*`, `**`, `?` and `[...]`.\n\nHere are some examples of how they work:\n\n| **Pattern** | **Description** | \n| --- | --- |\n| `*` | Matches any string except for `/`, leading `.`, or `/.` inside a path |\n| `**` | Matches any string including `/`, but not a leading `.` or `/.` inside a path. More than two stars (e.g. `***` is treated the same as one star, and `**` loses its special meaning | when it's not the only thing in a path segment, per Bash specifications) |\n| `foo*` | Matches any string beginning with `foo` |\n| `*bar*` | Matches any string containing `bar` (beginning, middle or end) |\n| `*.min.js` | Matches any string ending with `.min.js` |\n| `[abc]*.js` | Matches any string beginning with `a`, `b`, or `c` and ending with `.js` |\n| `abc?` | Matches `abcd` or `abcz` but not `abcde` |\n\nThe exceptions noted for `*` apply to all patterns that contain a `*`.\n\n**Not supported**\n\nThe following extended-globbing features are not supported:\n\n* [brace expansion](https://github.com/jonschlinkert/braces) (e.g. `{a,b,c}`)\n* [extglobs](https://github.com/jonschlinkert/extglob) (e.g. `@(a|!(c|d))`)\n* [POSIX brackets](https://github.com/jonschlinkert/expand-brackets) (e.g. `[[:alpha:][:digit:]]`)\n\nIf you need any of these features consider using [micromatch](https://github.com/micromatch/micromatch) instead.\n\n## Bash expansion libs\n\nNanomatch is part of a suite of libraries aimed at bringing the power and expressiveness of [Bash's](https://www.gnu.org/software/bash/) matching and expansion capabilities to JavaScript, _and - as you can see by the [benchmarks](#benchmarks) - without sacrificing speed_.\n\n| **Related library** | **Matching Type** | **Example** | **Description** | \n| --- | --- | --- | --- |\n| `nanomatch` (you are here) | Wildcards | `*` | [Filename expansion](https://www.gnu.org/software/bash/manual/html_node/Filename-Expansion.html#Filename-Expansion), also referred to as globbing and pathname expansion, allows the use of [wildcards](#features) for matching. |\n| [expand-tilde](https://github.com/jonschlinkert/expand-tilde) | Tildes | `~` | [Tilde expansion](https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html#Tilde-Expansion) converts the leading tilde in a file path to the user home directory. |\n| [braces](https://github.com/jonschlinkert/braces) | Braces | `{a,b,c}` | [Brace expansion](https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html) |\n| [expand-brackets](https://github.com/jonschlinkert/expand-brackets) | Brackets | `[[:alpha:]]` | [POSIX character classes](https://www.gnu.org/software/grep/manual/html_node/Character-Classes-and-Bracket-Expressions.html) (also referred to as POSIX brackets, or POSIX character classes) |\n| [extglob](https://github.com/jonschlinkert/extglob) | Parens | `!(a\\ | b)` | [Extglobs](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching) |\n| [micromatch](https://github.com/micromatch/micromatch) | All | all | Micromatch is built on top of the other libraries. |\n\nThere are many resources available on the web if you want to dive deeper into how these features work in Bash.\n\n## Benchmarks\n\n### Running benchmarks\n\nInstall dev dependencies:\n\n```bash\nnpm i -d && node benchmark\n```\n\n### Nanomatch vs. Minimatch vs. Multimatch\n\n```bash\n# globstar-basic (182 bytes)\n  minimatch x 69,512 ops/sec ±1.92% (88 runs sampled)\n  multimatch x 63,376 ops/sec ±1.41% (89 runs sampled)\n  nanomatch x 432,451 ops/sec ±0.92% (88 runs sampled)\n\n  fastest is nanomatch (by 651% avg)\n\n# large-list-globstar (485686 bytes)\n  minimatch x 34.02 ops/sec ±1.42% (59 runs sampled)\n  multimatch x 33.58 ops/sec ±1.97% (58 runs sampled)\n  nanomatch x 483 ops/sec ±1.06% (86 runs sampled)\n\n  fastest is nanomatch (by 1429% avg)\n\n# long-list-globstar (194085 bytes)\n  minimatch x 383 ops/sec ±0.74% (90 runs sampled)\n  multimatch x 378 ops/sec ±0.59% (89 runs sampled)\n  nanomatch x 990 ops/sec ±1.14% (85 runs sampled)\n\n  fastest is nanomatch (by 260% avg)\n\n# negation-basic (132 bytes)\n  minimatch x 242,145 ops/sec ±1.17% (89 runs sampled)\n  multimatch x 76,403 ops/sec ±0.78% (92 runs sampled)\n  nanomatch x 537,253 ops/sec ±1.44% (86 runs sampled)\n\n  fastest is nanomatch (by 337% avg)\n\n# not-glob-basic (93 bytes)\n  minimatch x 252,402 ops/sec ±1.33% (89 runs sampled)\n  multimatch x 209,954 ops/sec ±1.30% (90 runs sampled)\n  nanomatch x 1,716,468 ops/sec ±1.13% (86 runs sampled)\n\n  fastest is nanomatch (by 742% avg)\n\n# star-basic (93 bytes)\n  minimatch x 182,780 ops/sec ±1.41% (91 runs sampled)\n  multimatch x 153,210 ops/sec ±0.72% (89 runs sampled)\n  nanomatch x 599,621 ops/sec ±1.22% (90 runs sampled)\n\n  fastest is nanomatch (by 357% avg)\n\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [extglob](https://www.npmjs.com/package/extglob): Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob… [more](https://github.com/micromatch/extglob) | [homepage](https://github.com/micromatch/extglob \"Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob patterns.\")\n* [is-extglob](https://www.npmjs.com/package/is-extglob): Returns true if a string has an extglob. | [homepage](https://github.com/jonschlinkert/is-extglob \"Returns true if a string has an extglob.\")\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [micromatch](https://www.npmjs.com/package/micromatch): Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | [homepage](https://github.com/micromatch/micromatch \"Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 164 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 1 | [devongovett](https://github.com/devongovett) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 18, 2018._",
./lib/node_modules/micromatch/node_modules/nanomatch/node_modules/is-windows/package.json:  "readme": "# is-windows [![NPM version](https://img.shields.io/npm/v/is-windows.svg?style=flat)](https://www.npmjs.com/package/is-windows) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-windows.svg?style=flat)](https://npmjs.org/package/is-windows) [![NPM total downloads](https://img.shields.io/npm/dt/is-windows.svg?style=flat)](https://npmjs.org/package/is-windows) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-windows.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-windows)\n\n> Returns true if the platform is windows. UMD module, works with node.js, commonjs, browser, AMD, electron, etc.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-windows\n```\n\n## Heads up!\n\nAs of `v0.2.0` this module always returns a function.\n\n## Node.js usage\n\n```js\nvar isWindows = require('is-windows');\n\nconsole.log(isWindows());\n//=> returns true if the platform is windows\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-absolute](https://www.npmjs.com/package/is-absolute): Returns true if a file path is absolute. Does not rely on the path module… [more](https://github.com/jonschlinkert/is-absolute) | [homepage](https://github.com/jonschlinkert/is-absolute \"Returns true if a file path is absolute. Does not rely on the path module and can be used as a polyfill for node.js native `path.isAbolute`.\")\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-relative](https://www.npmjs.com/package/is-relative): Returns `true` if the path appears to be relative. | [homepage](https://github.com/jonschlinkert/is-relative \"Returns `true` if the path appears to be relative.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n* [window-size](https://www.npmjs.com/package/window-size): Reliable way to get the height and width of terminal/console, since it's not calculated or… [more](https://github.com/jonschlinkert/window-size) | [homepage](https://github.com/jonschlinkert/window-size \"Reliable way to get the height and width of terminal/console, since it's not calculated or updated the same way on all platforms, environments and node.js versions.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 11 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 4 | [doowb](https://github.com/doowb) |\n| 1 | [SimenB](https://github.com/SimenB) |\n| 1 | [gucong3000](https://github.com/gucong3000) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on February 14, 2018._",
./lib/node_modules/micromatch/node_modules/nanomatch/node_modules/is-windows/README.md:console.log(isWindows());
./lib/node_modules/micromatch/node_modules/nanomatch/node_modules/is-odd/node_modules/is-number/index.js:    // an empty string would be coerced to true with the below logic
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:Changelog entries are classified using the following labels _(from [keep-a-changelog](https://github.com/olivierlacan/keep-a-changelog)_):
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(['a', 'b/b', 'c/c/c'], '*'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(['a', 'b/b', 'c/c/c'], '*/*'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(['a', 'b/b', 'c/c/c'], '**'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(['a.js', 'a.txt'], ['*.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.isMatch('a.a', '*.a'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.isMatch('a.b', '*.a'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.some(['foo.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.every('foo.js', ['foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.every(['foo.js', 'bar.js'], ['*.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.every(['foo.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.any('a.a', ['b.*', '*.a']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.any('a.a', 'b.*'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.all('foo.js', ['foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.all('foo.js', ['*.js', '!foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.all('foo.js', ['*.js', 'foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.not(['a.a', 'b.b', 'c.c'], '*.a'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.contains('aa/bb/cc', '*b'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.contains('aa/bb/cc', '*d'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.matchKeys(obj, '*b'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(isMatch('a.a'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(isMatch('a.b'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.capture('test/*.js', 'test/foo.js'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.capture('test/*.js', 'foo/bar.css'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.makeRe('*.js'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.create('abc/*.js'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(ast);
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm.compile(ast));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(files, '[a-c]*'));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(nm(files, '[a-c]*', {bash: false}));
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(res.map);
./lib/node_modules/micromatch/node_modules/nanomatch/README.md:console.log(res.map);
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm(['a.js', 'a.txt'], ['*.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.isMatch('a.a', '*.a'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.isMatch('a.b', '*.a'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.some(['foo.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.every('foo.js', ['foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.every(['foo.js', 'bar.js'], ['*.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.every(['foo.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.any('a.a', ['b.*', '*.a']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.any('a.a', 'b.*'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.all('foo.js', ['foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.all('foo.js', ['*.js', '!foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.all('foo.js', ['*.js', 'foo.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.not(['a.a', 'b.b', 'c.c'], '*.a'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.contains('aa/bb/cc', '*b'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.contains('aa/bb/cc', '*d'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.matchKeys(obj, '*b'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(isMatch('a.a'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(isMatch('a.b'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.capture('test/*.js', 'test/foo.js'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.capture('test/*.js', 'foo/bar.css'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.makeRe('*.js'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.create('abc/*.js'));
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(ast);
./lib/node_modules/micromatch/node_modules/nanomatch/index.js: * console.log(nm.compile(ast));
./lib/node_modules/micromatch/node_modules/array-unique/package.json:  "readme": "# array-unique [![NPM version](https://img.shields.io/npm/v/array-unique.svg?style=flat)](https://www.npmjs.com/package/array-unique) [![NPM downloads](https://img.shields.io/npm/dm/array-unique.svg?style=flat)](https://npmjs.org/package/array-unique) [![Build Status](https://img.shields.io/travis/jonschlinkert/array-unique.svg?style=flat)](https://travis-ci.org/jonschlinkert/array-unique)\n\nRemove duplicate values from an array. Fastest ES5 implementation.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save array-unique\n```\n\n## Usage\n\n```js\nvar unique = require('array-unique');\n\nvar arr = ['a', 'b', 'c', 'c'];\nconsole.log(unique(arr)) //=> ['a', 'b', 'c']\nconsole.log(arr)         //=> ['a', 'b', 'c']\n\n/* The above modifies the input array. To prevent that at a slight performance cost: */\nvar unique = require(\"array-unique\").immutable;\n\nvar arr = ['a', 'b', 'c', 'c'];\nconsole.log(unique(arr)) //=> ['a', 'b', 'c']\nconsole.log(arr)         //=> ['a', 'b', 'c', 'c']\n```\n\n## About\n\n### Related projects\n\n* [arr-diff](https://www.npmjs.com/package/arr-diff): Returns an array with only the unique values from the first array, by excluding all… [more](https://github.com/jonschlinkert/arr-diff) | [homepage](https://github.com/jonschlinkert/arr-diff \"Returns an array with only the unique values from the first array, by excluding all values from additional arrays using strict equality for comparisons.\")\n* [arr-flatten](https://www.npmjs.com/package/arr-flatten): Recursively flatten an array or arrays. This is the fastest implementation of array flatten. | [homepage](https://github.com/jonschlinkert/arr-flatten \"Recursively flatten an array or arrays. This is the fastest implementation of array flatten.\")\n* [arr-map](https://www.npmjs.com/package/arr-map): Faster, node.js focused alternative to JavaScript's native array map. | [homepage](https://github.com/jonschlinkert/arr-map \"Faster, node.js focused alternative to JavaScript's native array map.\")\n* [arr-pluck](https://www.npmjs.com/package/arr-pluck): Retrieves the value of a specified property from all elements in the collection. | [homepage](https://github.com/jonschlinkert/arr-pluck \"Retrieves the value of a specified property from all elements in the collection.\")\n* [arr-reduce](https://www.npmjs.com/package/arr-reduce): Fast array reduce that also loops over sparse elements. | [homepage](https://github.com/jonschlinkert/arr-reduce \"Fast array reduce that also loops over sparse elements.\")\n* [arr-union](https://www.npmjs.com/package/arr-union): Combines a list of arrays, returning a single array with unique values, using strict equality… [more](https://github.com/jonschlinkert/arr-union) | [homepage](https://github.com/jonschlinkert/arr-union \"Combines a list of arrays, returning a single array with unique values, using strict equality for comparisons.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/array-unique/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.1.28, on July 31, 2016._",
./lib/node_modules/micromatch/node_modules/array-unique/README.md:console.log(unique(arr)) //=> ['a', 'b', 'c']
./lib/node_modules/micromatch/node_modules/array-unique/README.md:console.log(arr)         //=> ['a', 'b', 'c']
./lib/node_modules/micromatch/node_modules/array-unique/README.md:console.log(unique(arr)) //=> ['a', 'b', 'c']
./lib/node_modules/micromatch/node_modules/array-unique/README.md:console.log(arr)         //=> ['a', 'b', 'c', 'c']
./lib/node_modules/micromatch/node_modules/extend-shallow/node_modules/assign-symbols/package.json:  "readme": "# assign-symbols [![NPM version](https://badge.fury.io/js/assign-symbols.svg)](http://badge.fury.io/js/assign-symbols)\n\n> Assign the enumerable es6 Symbol properties from an object (or objects) to the first object passed on the arguments. Can be used as a supplement to other extend, assign or merge methods as a polyfill for the Symbols part of the es6 Object.assign method.\n\nFrom the [Mozilla Developer docs for Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol):\n\n> A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i assign-symbols --save\n```\n\n## Usage\n\n```js\nvar assignSymbols = require('assign-symbols');\nvar obj = {};\n\nvar one = {};\nvar symbolOne = Symbol('aaa');\none[symbolOne] = 'bbb';\n\nvar two = {};\nvar symbolTwo = Symbol('ccc');\ntwo[symbolTwo] = 'ddd';\n\nassignSymbols(obj, one, two);\n\nconsole.log(obj[symbolOne]);\n//=> 'bbb'\nconsole.log(obj[symbolTwo]);\n//=> 'ddd'\n```\n\n## Similar projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties of source objects to a destination object. | [homepage](https://github.com/jonschlinkert/assign-deep)\n* [clone-deep](https://www.npmjs.com/package/clone-deep): Recursively (deep) clone JavaScript native types, like Object, Array, RegExp, Date as well as primitives. | [homepage](https://github.com/jonschlinkert/clone-deep)\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow)\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep)\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/assign-symbols/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 06, 2015._",
./lib/node_modules/micromatch/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolOne]);
./lib/node_modules/micromatch/node_modules/extend-shallow/node_modules/assign-symbols/README.md:console.log(obj[symbolTwo]);
./lib/node_modules/micromatch/node_modules/fragment-cache/package.json:  "readme": "# fragment-cache [![NPM version](https://img.shields.io/npm/v/fragment-cache.svg?style=flat)](https://www.npmjs.com/package/fragment-cache) [![NPM downloads](https://img.shields.io/npm/dm/fragment-cache.svg?style=flat)](https://npmjs.org/package/fragment-cache) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/fragment-cache.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/fragment-cache)\n\n> A cache for managing namespaced sub-caches\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save fragment-cache\n```\n\n## Usage\n\n```js\nvar Fragment = require('fragment-cache');\nvar fragment = new Fragment();\n```\n\n## API\n\n### [FragmentCache](index.js#L24)\n\nCreate a new `FragmentCache` with an optional object to use for `caches`.\n\n**Example**\n\n```js\nvar fragment = new FragmentCache();\n```\n\n**Params**\n\n* `cacheName` **{String}**\n* `returns` **{Object}**: Returns the [map-cache](https://github.com/jonschlinkert/map-cache) instance.\n\n### [.cache](index.js#L49)\n\nGet cache `name` from the `fragment.caches` object. Creates a new `MapCache` if it doesn't already exist.\n\n**Example**\n\n```js\nvar cache = fragment.cache('files');\nconsole.log(fragment.caches.hasOwnProperty('files'));\n//=> true\n```\n\n**Params**\n\n* `cacheName` **{String}**\n* `returns` **{Object}**: Returns the [map-cache](https://github.com/jonschlinkert/map-cache) instance.\n\n### [.set](index.js#L67)\n\nSet a value for property `key` on cache `name`\n\n**Example**\n\n```js\nfragment.set('files', 'somefile.js', new File({path: 'somefile.js'}));\n```\n\n**Params**\n\n* `name` **{String}**\n* `key` **{String}**: Property name to set\n* `val` **{any}**: The value of `key`\n* `returns` **{Object}**: The cache instance for chaining\n\n### [.has](index.js#L93)\n\nReturns true if a non-undefined value is set for `key` on fragment cache `name`.\n\n**Example**\n\n```js\nvar cache = fragment.cache('files');\ncache.set('somefile.js');\n\nconsole.log(cache.has('somefile.js'));\n//=> true\n\nconsole.log(cache.has('some-other-file.js'));\n//=> false\n```\n\n**Params**\n\n* `name` **{String}**: Cache name\n* `key` **{String}**: Optionally specify a property to check for on cache `name`\n* `returns` **{Boolean}**\n\n### [.get](index.js#L115)\n\nGet `name`, or if specified, the value of `key`. Invokes the [cache](#cache) method, so that cache `name` will be created it doesn't already exist. If `key` is not passed, the entire cache (`name`) is returned.\n\n**Example**\n\n```js\nvar Vinyl = require('vinyl');\nvar cache = fragment.cache('files');\ncache.set('somefile.js', new Vinyl({path: 'somefile.js'}));\nconsole.log(cache.get('somefile.js'));\n//=> <File \"somefile.js\">\n```\n\n**Params**\n\n* `name` **{String}**\n* `returns` **{Object}**: Returns cache `name`, or the value of `key` if specified\n\n## About\n\n### Related projects\n\n* [base](https://www.npmjs.com/package/base): base is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting… [more](https://github.com/node-base/base) | [homepage](https://github.com/node-base/base \"base is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting with a handful of common methods, like `set`, `get`, `del` and `use`.\")\n* [map-cache](https://www.npmjs.com/package/map-cache): Basic cache object for storing key-value pairs. | [homepage](https://github.com/jonschlinkert/map-cache \"Basic cache object for storing key-value pairs.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/fragment-cache/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.2.0, on October 17, 2016._",
./lib/node_modules/micromatch/node_modules/fragment-cache/README.md:console.log(fragment.caches.hasOwnProperty('files'));
./lib/node_modules/micromatch/node_modules/fragment-cache/README.md:console.log(cache.has('somefile.js'));
./lib/node_modules/micromatch/node_modules/fragment-cache/README.md:console.log(cache.has('some-other-file.js'));
./lib/node_modules/micromatch/node_modules/fragment-cache/README.md:console.log(cache.get('somefile.js'));
./lib/node_modules/micromatch/node_modules/fragment-cache/index.js:   * console.log(fragment.caches.hasOwnProperty('files'));
./lib/node_modules/micromatch/node_modules/fragment-cache/index.js:   * console.log(cache.has('somefile.js'));
./lib/node_modules/micromatch/node_modules/fragment-cache/index.js:   * console.log(cache.has('some-other-file.js'));
./lib/node_modules/micromatch/node_modules/fragment-cache/index.js:   * console.log(cache.get('somefile.js'));
./lib/node_modules/micromatch/node_modules/define-property/package.json:  "readme": "# define-property [![NPM version](https://img.shields.io/npm/v/define-property.svg?style=flat)](https://www.npmjs.com/package/define-property) [![NPM monthly downloads](https://img.shields.io/npm/dm/define-property.svg?style=flat)](https://npmjs.org/package/define-property) [![NPM total downloads](https://img.shields.io/npm/dt/define-property.svg?style=flat)](https://npmjs.org/package/define-property) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/define-property.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/define-property)\n\n> Define a non-enumerable property on an object. Uses Reflect.defineProperty when available, otherwise Object.defineProperty.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save define-property\n```\n\n## Release history\n\nSee [the CHANGELOG](changelog.md) for updates.\n\n## Usage\n\n**Params**\n\n* `object`: The object on which to define the property.\n* `key`: The name of the property to be defined or modified.\n* `value`: The value or descriptor of the property being defined or modified.\n\n```js\nvar define = require('define-property');\nvar obj = {};\ndefine(obj, 'foo', function(val) {\n  return val.toUpperCase();\n});\n\n// by default, defined properties are non-enumberable\nconsole.log(obj);\n//=> {}\n\nconsole.log(obj.foo('bar'));\n//=> 'BAR'\n```\n\n**defining setters/getters**\n\nPass the same properties you would if using [Object.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) or [Reflect.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty).\n\n```js\ndefine(obj, 'foo', {\n  set: function() {},\n  get: function() {}\n});\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target… [more](https://github.com/jonschlinkert/assign-deep) | [homepage](https://github.com/jonschlinkert/assign-deep \"Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target (first) object.\")\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow \"Extend an object with the properties of additional objects. node.js/javascript util.\")\n* [merge-deep](https://www.npmjs.com/package/merge-deep): Recursively merge values in a javascript object. | [homepage](https://github.com/jonschlinkert/merge-deep \"Recursively merge values in a javascript object.\")\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep \"Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 28 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 1 | [doowb](https://github.com/doowb) |\n\n### Author\n\n**Jon Schlinkert**\n\n* Connect with me on [linkedin/in/jonschlinkert](https://linkedin.com/in/jonschlinkert)\n* Follow me on [github/jonschlinkert](https://github.com/jonschlinkert)\n* Follow me on [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on January 25, 2018._",
./lib/node_modules/micromatch/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/package.json:  "readme": "# is-data-descriptor [![NPM version](https://img.shields.io/npm/v/is-data-descriptor.svg?style=flat)](https://www.npmjs.com/package/is-data-descriptor) [![NPM monthly downloads](https://img.shields.io/npm/dm/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![NPM total downloads](https://img.shields.io/npm/dt/is-data-descriptor.svg?style=flat)](https://npmjs.org/package/is-data-descriptor) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/is-data-descriptor.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/is-data-descriptor)\n\n> Returns true if a value has the characteristics of a valid JavaScript data descriptor.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save is-data-descriptor\n```\n\n## Usage\n\n```js\nvar isDataDesc = require('is-data-descriptor');\n```\n\n## Examples\n\n`true` when the descriptor has valid properties with valid values.\n\n```js\n// `value` can be anything\nisDataDesc({value: 'foo'})\nisDataDesc({value: function() {}})\nisDataDesc({value: true})\n//=> true\n```\n\n`false` when not an object\n\n```js\nisDataDesc('a')\n//=> false\nisDataDesc(null)\n//=> false\nisDataDesc([])\n//=> false\n```\n\n`false` when the object has invalid properties\n\n```js\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', bar: 'baz'})\n//=> false\nisDataDesc({value: 'foo', get: function(){}})\n//=> false\nisDataDesc({get: function(){}, value: 'foo'})\n//=> false\n```\n\n`false` when a value is not the correct type\n\n```js\nisDataDesc({value: 'foo', enumerable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', configurable: 'foo'})\n//=> false\nisDataDesc({value: 'foo', writable: 'foo'})\n//=> false\n```\n\n## Valid properties\n\nThe only valid data descriptor properties are the following:\n\n* `configurable` (required)\n* `enumerable` (required)\n* `value` (optional)\n* `writable` (optional)\n\nTo be a valid data descriptor, either `value` or `writable` must be defined.\n\n**Invalid properties**\n\nA descriptor may have additional _invalid_ properties (an error will **not** be thrown).\n\n```js\nvar foo = {};\n\nObject.defineProperty(foo, 'bar', {\n  enumerable: true,\n  whatever: 'blah', // invalid, but doesn't cause an error\n  get: function() {\n    return 'baz';\n  }\n});\n\nconsole.log(foo.bar);\n//=> 'baz'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-accessor-descriptor](https://www.npmjs.com/package/is-accessor-descriptor): Returns true if a value has the characteristics of a valid JavaScript accessor descriptor. | [homepage](https://github.com/jonschlinkert/is-accessor-descriptor \"Returns true if a value has the characteristics of a valid JavaScript accessor descriptor.\")\n* [is-data-descriptor](https://www.npmjs.com/package/is-data-descriptor): Returns true if a value has the characteristics of a valid JavaScript data descriptor. | [homepage](https://github.com/jonschlinkert/is-data-descriptor \"Returns true if a value has the characteristics of a valid JavaScript data descriptor.\")\n* [is-descriptor](https://www.npmjs.com/package/is-descriptor): Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for… [more](https://github.com/jonschlinkert/is-descriptor) | [homepage](https://github.com/jonschlinkert/is-descriptor \"Returns true if a value has the characteristics of a valid JavaScript descriptor. Works for data descriptors and accessor descriptors.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 21 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [realityking](https://github.com/realityking) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on November 01, 2017._",
./lib/node_modules/micromatch/node_modules/define-property/node_modules/is-descriptor/node_modules/is-data-descriptor/README.md:console.log(foo.bar);
./lib/node_modules/micromatch/node_modules/define-property/README.md:See [the CHANGELOG](changelog.md) for updates.
./lib/node_modules/micromatch/node_modules/define-property/README.md:console.log(obj);
./lib/node_modules/micromatch/node_modules/define-property/README.md:console.log(obj.foo('bar'));
./lib/node_modules/micromatch/README.md:console.log(mm(['foo', 'bar', 'qux'], ['f*', 'b*'])); 
./lib/node_modules/micromatch/README.md:console.log(mm.isMatch('foo', 'f*'));  
./lib/node_modules/micromatch/README.md:* regex logical "or" (`foo/(abc|xyz).js`)
./lib/node_modules/micromatch/README.md:console.log(mm(['a.js', 'a.txt'], ['*.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));
./lib/node_modules/micromatch/README.md:console.log(mm.isMatch('a.a', '*.a'));
./lib/node_modules/micromatch/README.md:console.log(mm.isMatch('a.b', '*.a'));
./lib/node_modules/micromatch/README.md:console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.every('foo.js', ['foo.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.any('a.a', ['b.*', '*.a']));
./lib/node_modules/micromatch/README.md:console.log(mm.any('a.a', 'b.*'));
./lib/node_modules/micromatch/README.md:console.log(mm.all('foo.js', ['foo.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.all('foo.js', ['*.js', '!foo.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.all('foo.js', ['*.js', 'foo.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
./lib/node_modules/micromatch/README.md:console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
./lib/node_modules/micromatch/README.md:console.log(mm.contains('aa/bb/cc', '*b'));
./lib/node_modules/micromatch/README.md:console.log(mm.contains('aa/bb/cc', '*d'));
./lib/node_modules/micromatch/README.md:console.log(mm.matchKeys(obj, '*b'));
./lib/node_modules/micromatch/README.md:console.log(isMatch('a.a'));
./lib/node_modules/micromatch/README.md:console.log(isMatch('a.b'));
./lib/node_modules/micromatch/README.md:console.log(mm.capture('test/*.js', 'test/foo.js'));
./lib/node_modules/micromatch/README.md:console.log(mm.capture('test/*.js', 'foo/bar.css'));
./lib/node_modules/micromatch/README.md:console.log(mm.makeRe('*.js'));
./lib/node_modules/micromatch/README.md:console.log(mm.braces('foo/{a,b}/bar'));
./lib/node_modules/micromatch/README.md:console.log(mm.braces('foo/{a,b}/bar', {expand: true}));
./lib/node_modules/micromatch/README.md:console.log(mm.create('abc/*.js'));
./lib/node_modules/micromatch/README.md:console.log(ast);
./lib/node_modules/micromatch/README.md:console.log(mm.compile(ast));
./lib/node_modules/micromatch/README.md:console.log(mm(files, '[a-c]*'));
./lib/node_modules/micromatch/README.md:console.log(mm(files, '[a-c]*', {bash: false}));
./lib/node_modules/micromatch/README.md:console.log(res.map);
./lib/node_modules/micromatch/README.md:console.log(res.map);
./lib/node_modules/micromatch/README.md:console.log(res.map);
./lib/node_modules/micromatch/index.js: * console.log(mm(['a.js', 'a.txt'], ['*.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));
./lib/node_modules/micromatch/index.js: * console.log(mm.isMatch('a.a', '*.a'));
./lib/node_modules/micromatch/index.js: * console.log(mm.isMatch('a.b', '*.a'));
./lib/node_modules/micromatch/index.js: * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.every('foo.js', ['foo.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.any('a.a', ['b.*', '*.a']));
./lib/node_modules/micromatch/index.js: * console.log(mm.any('a.a', 'b.*'));
./lib/node_modules/micromatch/index.js: * console.log(mm.all('foo.js', ['foo.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.all('foo.js', ['*.js', '!foo.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.all('foo.js', ['*.js', 'foo.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
./lib/node_modules/micromatch/index.js: * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
./lib/node_modules/micromatch/index.js: * console.log(mm.contains('aa/bb/cc', '*b'));
./lib/node_modules/micromatch/index.js: * console.log(mm.contains('aa/bb/cc', '*d'));
./lib/node_modules/micromatch/index.js: * console.log(mm.matchKeys(obj, '*b'));
./lib/node_modules/micromatch/index.js: * console.log(isMatch('a.a'));
./lib/node_modules/micromatch/index.js: * console.log(isMatch('a.b'));
./lib/node_modules/micromatch/index.js: * console.log(mm.capture('test/*.js', 'test/foo.js'));
./lib/node_modules/micromatch/index.js: * console.log(mm.capture('test/*.js', 'foo/bar.css'));
./lib/node_modules/micromatch/index.js: * console.log(mm.makeRe('*.js'));
./lib/node_modules/micromatch/index.js: * console.log(mm.braces('foo/{a,b}/bar'));
./lib/node_modules/micromatch/index.js: * console.log(mm.braces('foo/{a,b}/bar', {expand: true}));
./lib/node_modules/micromatch/index.js: * console.log(mm.create('abc/*.js'));
./lib/node_modules/micromatch/index.js: * console.log(ast);
./lib/node_modules/micromatch/index.js: * console.log(mm.compile(ast));
./lib/node_modules/lodash/fill.js: * console.log(array);
./lib/node_modules/lodash/pullAllBy.js: * console.log(array);
./lib/node_modules/lodash/delay.js: *   console.log(text);
./lib/node_modules/lodash/unset.js: * console.log(object);
./lib/node_modules/lodash/unset.js: * console.log(object);
./lib/node_modules/lodash/template.js:  // (http://ejohn.org/blog/javascript-micro-templating/)
./lib/node_modules/lodash/stubObject.js: * console.log(objects);
./lib/node_modules/lodash/stubObject.js: * console.log(objects[0] === objects[1]);
./lib/node_modules/lodash/update.js: * console.log(object.a[0].b.c);
./lib/node_modules/lodash/update.js: * console.log(object.x[0].y.z);
./lib/node_modules/lodash/remove.js: * console.log(array);
./lib/node_modules/lodash/remove.js: * console.log(evens);
./lib/node_modules/lodash/clone.js: * console.log(shallow[0] === objects[0]);
./lib/node_modules/lodash/stubArray.js: * console.log(arrays);
./lib/node_modules/lodash/stubArray.js: * console.log(arrays[0] === arrays[1]);
./lib/node_modules/lodash/forEachRight.js: *   console.log(value);
./lib/node_modules/lodash/forEach.js: *   console.log(value);
./lib/node_modules/lodash/forEach.js: *   console.log(key);
./lib/node_modules/lodash/pullAllWith.js: * console.log(array);
./lib/node_modules/lodash/pullAll.js: * console.log(array);
./lib/node_modules/lodash/cloneWith.js: * console.log(el === document.body);
./lib/node_modules/lodash/cloneWith.js: * console.log(el.nodeName);
./lib/node_modules/lodash/cloneWith.js: * console.log(el.childNodes.length);
./lib/node_modules/lodash/now.js: *   console.log(_.now() - stamp);
./lib/node_modules/lodash/after.js: *   console.log('done saving!');
./lib/node_modules/lodash/set.js: * console.log(object.a[0].b.c);
./lib/node_modules/lodash/set.js: * console.log(object.x[0].y.z);
./lib/node_modules/lodash/forIn.js: *   console.log(key);
./lib/node_modules/lodash/castArray.js: * console.log(_.castArray(array) === array);
./lib/node_modules/lodash/reverse.js: * console.log(array);
./lib/node_modules/lodash/constant.js: * console.log(objects);
./lib/node_modules/lodash/constant.js: * console.log(objects[0] === objects[1]);
./lib/node_modules/lodash/pullAt.js: * console.log(array);
./lib/node_modules/lodash/pullAt.js: * console.log(pulled);
./lib/node_modules/lodash/lodash.js:  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
./lib/node_modules/lodash/lodash.js:     * console.log(other);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(pulled);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(evens);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     * console.log(array);
./lib/node_modules/lodash/lodash.js:     *   console.log(value);
./lib/node_modules/lodash/lodash.js:     *   console.log(key);
./lib/node_modules/lodash/lodash.js:     *   console.log(value);
./lib/node_modules/lodash/lodash.js:     *   console.log(_.now() - stamp);
./lib/node_modules/lodash/lodash.js:     *   console.log('done saving!');
./lib/node_modules/lodash/lodash.js:     *   console.log(text);
./lib/node_modules/lodash/lodash.js:     *   console.log(text);
./lib/node_modules/lodash/lodash.js:     * console.log(_.castArray(array) === array);
./lib/node_modules/lodash/lodash.js:     * console.log(shallow[0] === objects[0]);
./lib/node_modules/lodash/lodash.js:     * console.log(el === document.body);
./lib/node_modules/lodash/lodash.js:     * console.log(el.nodeName);
./lib/node_modules/lodash/lodash.js:     * console.log(el.childNodes.length);
./lib/node_modules/lodash/lodash.js:     * console.log(deep[0] === objects[0]);
./lib/node_modules/lodash/lodash.js:     * console.log(el === document.body);
./lib/node_modules/lodash/lodash.js:     * console.log(el.nodeName);
./lib/node_modules/lodash/lodash.js:     * console.log(el.childNodes.length);
./lib/node_modules/lodash/lodash.js:     *   console.log(key);
./lib/node_modules/lodash/lodash.js:     *   console.log(key);
./lib/node_modules/lodash/lodash.js:     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
./lib/node_modules/lodash/lodash.js:     *   console.log(key);
./lib/node_modules/lodash/lodash.js:     *   console.log(key);
./lib/node_modules/lodash/lodash.js:     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
./lib/node_modules/lodash/lodash.js:     * console.log(object.a[0].b.c);
./lib/node_modules/lodash/lodash.js:     * console.log(object.x[0].y.z);
./lib/node_modules/lodash/lodash.js:     * console.log(object);
./lib/node_modules/lodash/lodash.js:     * console.log(object);
./lib/node_modules/lodash/lodash.js:     * console.log(object.a[0].b.c);
./lib/node_modules/lodash/lodash.js:     * console.log(object.x[0].y.z);
./lib/node_modules/lodash/lodash.js:      // (http://ejohn.org/blog/javascript-micro-templating/)
./lib/node_modules/lodash/lodash.js:     *     console.log('clicked ' + this.label);
./lib/node_modules/lodash/lodash.js:     * console.log(objects);
./lib/node_modules/lodash/lodash.js:     * console.log(objects[0] === objects[1]);
./lib/node_modules/lodash/lodash.js:     * console.log(_.identity(object) === object);
./lib/node_modules/lodash/lodash.js:     * console.log(arrays);
./lib/node_modules/lodash/lodash.js:     * console.log(arrays[0] === arrays[1]);
./lib/node_modules/lodash/lodash.js:     * console.log(objects);
./lib/node_modules/lodash/lodash.js:     * console.log(objects[0] === objects[1]);
./lib/node_modules/lodash/forOwnRight.js: *   console.log(key);
./lib/node_modules/lodash/forOwnRight.js: * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
./lib/node_modules/lodash/cloneDeepWith.js: * console.log(el === document.body);
./lib/node_modules/lodash/cloneDeepWith.js: * console.log(el.nodeName);
./lib/node_modules/lodash/cloneDeepWith.js: * console.log(el.childNodes.length);
./lib/node_modules/lodash/cloneDeep.js: * console.log(deep[0] === objects[0]);
./lib/node_modules/lodash/forInRight.js: *   console.log(key);
./lib/node_modules/lodash/forInRight.js: * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
./lib/node_modules/lodash/commit.js: * console.log(array);
./lib/node_modules/lodash/commit.js: * console.log(array);
./lib/node_modules/lodash/commit.js: * console.log(array);
./lib/node_modules/lodash/pull.js: * console.log(array);
./lib/node_modules/lodash/identity.js: * console.log(_.identity(object) === object);
./lib/node_modules/lodash/wrapperReverse.js: * console.log(array);
./lib/node_modules/lodash/concat.js: * console.log(other);
./lib/node_modules/lodash/concat.js: * console.log(array);
./lib/node_modules/lodash/forOwn.js: *   console.log(key);
./lib/node_modules/lodash/_hasUnicode.js:/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
./lib/node_modules/lodash/core.js:   * console.log(other);
./lib/node_modules/lodash/core.js:   * console.log(array);
./lib/node_modules/lodash/core.js:   *   console.log(value);
./lib/node_modules/lodash/core.js:   *   console.log(key);
./lib/node_modules/lodash/core.js:   *   console.log(text);
./lib/node_modules/lodash/core.js:   *   console.log(text);
./lib/node_modules/lodash/core.js:   * console.log(shallow[0] === objects[0]);
./lib/node_modules/lodash/core.js:   * console.log(_.identity(object) === object);
./lib/node_modules/lodash/bindAll.js: *     console.log('clicked ' + this.label);
./lib/node_modules/lodash/defer.js: *   console.log(text);
./lib/index.js:var logger = require('./logger').getInstance()
./lib/index.js:var getArrow = require('./logger').getArrow
./lib/index.js:  logger.info('[HPM] Proxy created:', config.context, ' -> ', proxyOptions.target)
./lib/index.js:  // log errors for debug purpose
./lib/index.js:  proxy.on('error', logError)
./lib/index.js:      logger.info('[HPM] Upgrading to WebSocket')
./lib/index.js:    // store uri before it gets rewritten for logging
./lib/index.js:    // debug logging for both http(s) and websockets
./lib/index.js:    if (proxyOptions.logLevel === 'debug') {
./lib/index.js:      logger.debug('[HPM] %s %s %s %s', req.method, originalPath, arrow, newProxyOptions.target)
./lib/index.js:        logger.debug('[HPM] Router new target: %s -> "%s"', options.target, newTarget)
./lib/index.js:        logger.info('[HPM] pathRewrite: No rewritten path found. (%s)', req.url)
./lib/index.js:  function logError (err, req, res) {
./lib/index.js:    logger.error(errorMessage, req.url, hostname, target, err.code, errReference)
./lib/router.js:var logger = require('./logger.js').getInstance()
./lib/router.js:        logger.debug('[HPM] Router table match: "%s"', key)
./lib/router.js:        logger.debug('[HPM] Router table match: "%s"', host)
./lib/handlers.js:var logger = require('./logger').getInstance()
./lib/handlers.js:  logger.debug('[HPM] Subscribed to http-proxy events: ', _.keys(handlers))
./lib/handlers.js:    handlers.close = logClose
./lib/handlers.js:function logClose (req, socket, head) {
./lib/handlers.js:  logger.info('[HPM] Client disconnected')
./lib/config-factory.js:var logger = require('./logger').getInstance()
./lib/config-factory.js:    logger.warn('*************************************')
./lib/config-factory.js:    logger.warn('[HPM] Deprecated "option.proxyHost"')
./lib/config-factory.js:    logger.warn('      Use "option.changeOrigin" or "option.headers.host" instead')
./lib/config-factory.js:    logger.warn('      "option.proxyHost" will be removed in future release.')
./lib/config-factory.js:    logger.warn('*************************************')
./lib/config-factory.js:    logger.warn('*************************************')
./lib/config-factory.js:    logger.warn('[HPM] Deprecated "option.proxyTable"')
./lib/config-factory.js:    logger.warn('      Use "option.router" instead')
./lib/config-factory.js:    logger.warn('      "option.proxyTable" will be removed in future release.')
./lib/config-factory.js:    logger.warn('*************************************')
./lib/config-factory.js:  if (options.logLevel) {
./lib/config-factory.js:    logger.setLevel(options.logLevel)
./lib/config-factory.js:  if (options.logProvider) {
./lib/config-factory.js:    logger.setProvider(options.logProvider)
./lib/path-rewriter.js:var logger = require('./logger').getInstance()
./lib/path-rewriter.js:        logger.debug('[HPM] Rewriting path from "%s" to "%s"', path, result)
./lib/path-rewriter.js:      logger.info('[HPM] Proxy rewrite rule created: "%s" ~> "%s"', key, rewriteConfig[key])
