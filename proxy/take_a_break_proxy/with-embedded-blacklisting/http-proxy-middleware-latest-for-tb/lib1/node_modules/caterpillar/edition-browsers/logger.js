/* eslint class-methods-use-this:0 */
'use strict';

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('extendr'),
    extend = _require.extend,
    deep = _require.deep;

var _require2 = require('stream'),
    PassThrough = _require2.PassThrough;

var rfcLogLevels = require('rfc-log-levels');
/**
 * @typedef {Object} LineInfo
 * @property {number} line the line of code that trigged the log
 * @property {string} method the method that triggered the log
 * @property {string} file the file that triggered the log
 */

/**
 * @typedef {Object} LevelInfo
 * @property {number} levelNumber the log level number
 * @property {string} levelName the log level name
 */

/**
 * @typedef {Object} LogEntry
 * @augments LevelInfo
 * @augments LineInfo
 * @property {string} date the iso string of when the log occured
 * @property {Array<*>} args all the arguments that were after the log level
 */

/**
 * Logger.
 * This is what we write to.
 * It extends from PassThrough and not transform.
 * If you are piping / writing directly to the logger, make sure it corresponds to the correct entry format (as described in `log`).
 *
 * @param {...*} args forwarded to {@link Logger#setConfig}
 * @extends stream.PassThrough
 *
 * @example <caption>Creation</caption>
 * // Via class
 * const Logger = require('caterpillar').Logger
 * const logger = new Logger()
 * // Via create helper
 * const logger = Logger.create()
 * // Via create alias
 * const logger = require('caterpillar').create()
 */


var Logger =
/*#__PURE__*/
function (_PassThrough) {
  _inherits(Logger, _PassThrough);

  function Logger() {
    var _getPrototypeOf2, _this2;

    var _this;

    _classCallCheck(this, Logger);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Logger)).call.apply(_getPrototypeOf2, [this].concat(args)));
    /**
     * Internal configuration object
     * @type {Object}
     * @private
     */

    _this._config = _this.getInitialConfig();

    (_this2 = _this).setConfig.apply(_this2, args);

    return _this;
  } // ===================================
  // Generic Differences
  // This code is shared but different between Logger and Transform

  /**
   * Get the initial configuration.
   * Initial log levels are fetched from: https://github.com/bevry/log-levels
   * @returns {Object}
   */


  _createClass(Logger, [{
    key: "getInitialConfig",
    value: function getInitialConfig() {
      return {
        lineOffset: 0,
        levels: extend({}, rfcLogLevels, {
          default: 6
        })
      };
    }
    /**
     * Alternative way of creating an instance of the class without having to use the `new` keyword.
     * Useful when creating the class directly from `require` statements.
     * @static
     * @param {...*} args
     * @returns {Logger}
     */

  }, {
    key: "getConfig",
    // ===================================
    // Generic
    // This code is shared between Logger and Transform

    /**
     * Get the current configuration object for this instance.
     * @returns {Object}
     */
    value: function getConfig() {
      return this._config;
    }
    /**
     * Apply the specified configurations to this instance's configuration via deep merging.
     * @param {...Array<Object>} configs
     * @returns {this}
     *
     * @example
     * setConfig({a: 1}, {b: 2})
     * getConfig()  // {a: 1, b: 2}
     */

  }, {
    key: "setConfig",
    value: function setConfig() {
      for (var _len2 = arguments.length, configs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        configs[_key2] = arguments[_key2];
      }

      deep.apply(void 0, [this._config].concat(configs));
      this.emit.apply(this, ['config'].concat(configs));
      return this;
    }
    /**
     * Pipe this data to some other writable stream.
     * If the child stream also has a `setConfig` method, we will ensure the childs configuration is kept consistent with parents.
     * @param {stream.Writable} child stream to be piped to
     * @returns {stream.Writable} the result of the pipe operation
     */

  }, {
    key: "pipe",
    value: function pipe(child) {
      var _this3 = this;

      if (child.setConfig) {
        child.setConfig(this.getConfig());
        var listener = child.setConfig.bind(child);
        this.on('config', listener);
        child.once('close', function () {
          return _this3.removeListener('config', listener);
        });
      }

      return _get(_getPrototypeOf(Logger.prototype), "pipe", this).call(this, child);
    } // ===================================
    // Logger

    /**
     * Receive a level name and return the level number
     * @param {string} name
     * @returns {number}
     * @throws {Error} will throw an error if no result was found
     */

  }, {
    key: "getLevelNumber",
    value: function getLevelNumber(name) {
      var _this$getConfig = this.getConfig(),
          levels = _this$getConfig.levels;

      if (levels[name] == null) {
        throw new Error("No level number was found for the level name: ".concat(name));
      } else {
        return levels[name];
      }
    }
    /**
     * Receive a level number and return the level name
     * @param {number} number
     * @returns {string}
     * @throws {Error} will throw an error if returned empty handed
     */

  }, {
    key: "getLevelName",
    value: function getLevelName(number) {
      var _this$getConfig2 = this.getConfig(),
          levels = _this$getConfig2.levels; // Try to return the levelName


      for (var name in levels) {
        if (levels.hasOwnProperty(name)) {
          var value = levels[name];

          if (value === number) {
            return name;
          }
        }
      } // Return


      throw new Error("No level name was found for the level number: ".concat(number));
    }
    /**
     * Receive either the level name or number and return the combination.
     *
     * @param {string|number} level
     * @returns {LevelInfo}
     * @throws {Error} will throw an error if returned empty handed
     *
     * @example <caption>Input</caption>
     * logger.getLevelInfo('note')
     * @example <caption>Result</caption>
     * {
     * 	"levelNumber": 5,
     * 	"levelName": "notice"
     * }
     */

  }, {
    key: "getLevelInfo",
    value: function getLevelInfo(level) {
      if (typeof level === 'string') {
        var levelNumber = this.getLevelNumber(level); // will throw if not found

        var levelName = this.getLevelName(levelNumber); // name could be shortened, so get the expanded name

        return {
          levelNumber: levelNumber,
          levelName: levelName
        };
      } else if (typeof level === 'number') {
        var _levelName = this.getLevelName(level); // will throw if not found


        return {
          levelNumber: level,
          levelName: _levelName
        };
      } else {
        throw new Error("Unknown level type: ".concat(_typeof(level), " for ").concat(level));
      }
    }
    /**
     * The current line info of whatever called this.
     *
     * @returns {LineInfo}
     * @throws {Error} will throw an error if returned empty handed
     *
     * @example <caption>Input</caption>
     * logger.getLineInfo()
     * @example <caption>Result</caption>
     * {
     * 	"line": "60",
     * 	"method": "Object.<anonymous>",
     * 	"file": "/Users/balupton/some-project/calling-file.js"
     * }
     */

  }, {
    key: "getLineInfo",
    value: function getLineInfo() {
      // Prepare
      var offset = this.getConfig().lineOffset;
      var result = {
        line: -1,
        method: 'unknown',
        file: 'unknown'
      };

      try {
        // Create an error
        var err = new Error();
        var stack, lines; // And attempt to retrieve it's stack
        // https://github.com/winstonjs/winston/issues/401#issuecomment-61913086

        try {
          stack = err.stack;
        } catch (error1) {
          try {
            var previous = err.__previous__ || err.__previous;
            stack = previous && previous.stack;
          } catch (error2) {
            stack = null;
          }
        } // Handle different stack formats


        if (stack) {
          if (Array.isArray(stack)) {
            lines = Array(stack);
          } else {
            lines = stack.toString().split('\n');
          }
        } else {
          lines = [];
        } // Handle different line formats


        lines = lines // Ensure each line item is a string
        .map(function (line) {
          return (line || '').toString();
        }) // Filter out empty line items
        .filter(function (line) {
          return line.length !== 0;
        }); // Parse our lines

        for (var index = 0; index < lines.length; index++) {
          var line = lines[index];

          if (line.indexOf(__dirname) !== -1 || line.indexOf(' at ') === -1) {
            continue;
          }

          if (offset !== 0) {
            --offset;
            continue;
          }

          var parts = line.split(':');

          if (parts.length >= 2) {
            if (parts[0].indexOf('(') === -1) {
              result.method = 'unknown';
              result.file = parts[0].replace(/^.+?\s+at\s+/, '');
            } else {
              result.method = parts[0].replace(/^.+?\s+at\s+/, '').replace(/\s+\(.+$/, '');
              result.file = parts[0].replace(/^.+?\(/, '');
            }

            result.line = Number(parts[1]);
            break;
          }
        }
      } catch (err) {
        throw new Error("Caterpillar.getLineInfo: Failed to parse the error stack: ".concat(err));
      } // Return


      return result;
    }
    /**
     * Takes an arguments array and tranforms it into a log entry
     * @param {Array<*>} args
     * @returns {LogEntry}
     */

  }, {
    key: "getLogEntry",
    value: function getLogEntry(args) {
      var date = new Date().toISOString();
      var lineInfo = this.getLineInfo();
      var level = args.shift();
      var levelInfo;

      try {
        levelInfo = this.getLevelInfo(level);
      } catch (err) {
        // if it threw (level was not a valid name or number), then use the default level
        levelInfo = this.getLevelInfo('default');
        args.unshift(level);
      }

      return extend({
        date: date,
        args: args
      }, levelInfo, lineInfo);
    }
    /**
     * Log the arguments into the logger stream as formatted data with debugging information.
     * Such that our transformers can deal with it intelligently.
     *
     * @param {...*} args forwarded to {@link Logger#getLogEntry}
     * @returns {this}
     *
     * @example <caption>Inputs</caption>
     * logger.log('note', 'this is working swell')
     * logger.log('this', 'worked', 'swell')
     *
     * @example <caption>Results</caption>
     * {
     * 	"args": ["this is working swell"],
     * 	"date": "2013-04-25T10:18:25.722Z",
     * 	"levelNumber": 5,
     * 	"levelName": "notice",
     * 	"line": "59",
     * 	"method": "Object.<anonymous>",
     * 	"file": "/Users/balupton/some-project/calling-file.js"
     * }
     * {
     *		"args": ["this", "worked", "well"],
     *		"date": "2013-04-25T10:18:26.539Z",
     *		"levelNumber": 6,
     *		"levelName": "info",
     *		"line": "60",
     *		"method": "Object.<anonymous>",
     *		"file": "/Users/balupton/some-project/calling-file.js"
     * }
     */

  }, {
    key: "log",
    value: function log() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      // Fetch the log entry
      var entry = this.getLogEntry(args); // Write the arguments as an entry to be transformed by our format

      this.write(JSON.stringify(entry)); // Chain

      return this;
    }
  }], [{
    key: "create",
    value: function create() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _construct(this, args);
    }
  }]);

  return Logger;
}(PassThrough); // Export


module.exports = Logger;