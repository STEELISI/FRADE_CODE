/* eslint class-methods-use-this:0 */
'use strict';

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('extendr'),
    deep = _require.deep;

var _Transform = require('stream').Transform;
/**
 * Transform.
 * This is a helper for our transforms to be able to process the written log data more easily.
 * All the need to do is extend this class and add their own `format` method.
 *
 * @param {...*} args forwarded to {@link Logger#setConfig}
 * @extends stream.Transform
 *
 * @example
 * class Pretty extends require('caterpillar').Transform {
 * 	format (entry) {
 * 		return require('util').inspect(entry, {colors: true})
 * 	}
 * }
 * require('caterpillar').create()
 * 	.pipe(Pretty.create())
 * 	.pipe(process.stdout)
 * 	.log('note', 'cool times', 5)
 */


var Transform =
/*#__PURE__*/
function (_Transform2) {
  _inherits(Transform, _Transform2);

  function Transform() {
    var _getPrototypeOf2, _this2;

    var _this;

    _classCallCheck(this, Transform);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Transform)).call.apply(_getPrototypeOf2, [this].concat(args)));
    /**
     * Internal configuration object
     * @type {Object}
     * @private
     */

    _this._config = _this.getInitialConfig();

    (_this2 = _this).setConfig.apply(_this2, args);

    return _this;
  } // ===================================
  // Generic Differences
  // This code is shared but different between Logger and Transform

  /**
   * Get the initial configuration option.
   * Use this to add default/initial configuration to your class.
   * @returns {Object}
   */


  _createClass(Transform, [{
    key: "getInitialConfig",
    value: function getInitialConfig() {
      return {};
    }
    /**
     * Alternative way of creating an instance of the class without having to use the `new` keyword.
     * Useful when creating the class directly from `require` statements.
     * @static
     * @param {...*} args
     * @returns {Transform}
     */

  }, {
    key: "getConfig",
    // ===================================
    // Generic
    // This code is shared between Logger and Transform

    /**
     * Get the current configuration object for this instance.
     * @returns {Object}
     */
    value: function getConfig() {
      return this._config;
    }
    /**
     * Apply the specified configurations to this instance's configuration via deep merging.
     * @param {...Array<Object>} configs
     * @returns {this}
     *
     * @example
     * setConfig({a: 1}, {b: 2})
     * getConfig()  // {a: 1, b: 2}
     */

  }, {
    key: "setConfig",
    value: function setConfig() {
      for (var _len2 = arguments.length, configs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        configs[_key2] = arguments[_key2];
      }

      deep.apply(void 0, [this._config].concat(configs));
      this.emit.apply(this, ['config'].concat(configs));
      return this;
    }
    /**
     * Pipe this data to some other writable stream.
     * If the child stream also has a `setConfig` method, we will ensure the childs configuration is kept consistent with parents.
     * @param {stream.Writable} child stream to be piped to
     * @returns {stream.Writable} the result of the pipe operation
     */

  }, {
    key: "pipe",
    value: function pipe(child) {
      var _this3 = this;

      if (child.setConfig) {
        child.setConfig(this.getConfig());
        var listener = child.setConfig.bind(child);
        this.on('config', listener);
        child.once('close', function () {
          return _this3.removeListener('config', listener);
        });
      }

      return _get(_getPrototypeOf(Transform.prototype), "pipe", this).call(this, child);
    } // ===================================
    // Transform

    /**
     * Transform the written buffer into data we can format
     * @private
     * @param {Buffer|string} chunk
     * @param {string} encoding
     * @param {function} next
     * @returns {void}
     */

  }, {
    key: "_transform",
    value: function _transform(chunk, encoding, next) {
      var message = chunk.toString();

      try {
        message = this.format(message);
      } catch (err) {
        return next(err);
      }

      if (message && _typeof(message) === 'object') {
        message = JSON.stringify(message);
      }

      return next(null, message);
    }
    /**
     * Format the written data into whatever we want.
     * Here is where our transformers work with the written data to enhance it.
     * By default (without any other transformers at work) this will be a stringified {@link LogEntry}.
     * @param {string} message
     * @returns {*}
     */

  }, {
    key: "format",
    value: function format(message) {
      return message;
    }
  }], [{
    key: "create",
    value: function create() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _construct(this, args);
    }
  }]);

  return Transform;
}(_Transform); // Export


module.exports = Transform;