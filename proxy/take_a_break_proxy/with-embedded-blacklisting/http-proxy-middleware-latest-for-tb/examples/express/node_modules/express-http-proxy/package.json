{
  "name": "express-http-proxy",
  "version": "0.7.4",
  "description": "http proxy middleware for express",
  "main": "index.js",
  "scripts": {
    "test": "npm -s run mocha && npm run -s lint && npm run -s jscs",
    "mocha": "mocha -R spec test/*.js",
    "lint": "jshint index.js test/*.js",
    "jscs": "jscs index.js test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/villadora/express-http-proxy.git"
  },
  "keywords": [
    "express-http-proxy"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "author": {
    "name": "villadora",
    "email": "jky239@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/villadora/express-http-proxy/issues"
  },
  "devDependencies": {
    "express": "^4.3.1",
    "iconv": "^2.1.4",
    "jshint": "^2.5.5",
    "mocha": "^2.1.0",
    "jscs": "^3.0.6",
    "supertest": "^0.13.0"
  },
  "dependencies": {
    "lodash.iserror": "^3.1.0",
    "raw-body": "^1.1.6"
  },
  "contributors": [
    {
      "name": "Liam Bennett"
    },
    {
      "name": "eldereal",
      "url": "https://github.com/eldereal"
    },
    {
      "name": "Saulius Menkevičius",
      "url": "https://github.com/razzmatazz"
    },
    {
      "name": "Jérémy Lal",
      "email": "kapouer@melix.org"
    },
    {
      "name": "Wei Gao",
      "email": "jky239@gmail.com"
    },
    {
      "name": "Nik Krimm",
      "url": "https://github.com/monkpow"
    }
  ],
  "readme": "# express-http-proxy [![NPM version](https://badge.fury.io/js/express-http-proxy.svg)](http://badge.fury.io/js/express-http-proxy) [![Build Status](https://travis-ci.org/villadora/express-http-proxy.svg?branch=master)](https://travis-ci.org/villadora/express-http-proxy) [![Dependency Status](https://gemnasium.com/villadora/express-http-proxy.svg)](https://gemnasium.com/villadora/express-http-proxy)\n\nExpress proxy middleware to forward request to another host and pass response back\n\n## Install\n\n```bash\n$ npm install express-http-proxy --save\n```\n\n## Usage\n```js\nproxy(host, options);\n```\n\nTo proxy URLS starting with '/proxy' to the host 'www.google.com':\n\n```js\nvar proxy = require('express-http-proxy');\n\nvar app = require('express')();\n\napp.use('/proxy', proxy('www.google.com'));\n```\n\n### Options\n\n\n#### forwardPath\n\nThe ```forwardPath``` option allows you to modify the path prior to proxying the request.\n\n```js\nvar proxy = require('express-http-proxy');\n\nvar app = require('express')();\n\napp.use('/proxy', proxy('www.google.com', {\n  forwardPath: function(req, res) {\n    return require('url').parse(req.url).path;\n  }\n}));\n```\n\n#### filter\nThe ```filter``` option can be used to limit what requests are proxied. For example, if you only want to proxy get request\n\n```js\napp.use('/proxy', proxy('www.google.com', {\n  filter: function(req, res) {\n     return req.method == 'GET';\n  },\n  forwardPath: function(req, res) {\n    return require('url').parse(req.url).path;\n  }\n}));\n```\n\n#### intercept\nYou can intercept the response before sending it back to the client.\n\n```js\napp.use('/proxy', proxy('www.google.com', {\n  intercept: function(rsp, data, req, res, callback) {\n    // rsp - original response from the target\n    data = JSON.parse(data.toString('utf8'));\n    callback(null, JSON.stringify(data));\n  }\n}));\n```\n\n#### decorateRequest\n\nYou can change the request options before it is sent to the target.\n\n```js\napp.use('/proxy', proxy('www.google.com', {\n  decorateRequest: function(reqOpt, req) {\n    reqOpt.headers['Content-Type'] = '';\n    reqOpt.method = 'GET';\n    reqOpt.bodyContent = wrap(req.bodyContent);\n    return reqOpt;\n  }\n}));\n\n```\n\n#### preserveHostHdr\n\nYou can copy the host HTTP header to the proxied express server using the `preserveHostHdr` option.\n\n```\napp.use('/proxy', proxy('www.google.com', {\n  preserveHostHdr: true\n}));\n```\n\n#### reqBodyEncoding\n\nEncoding used to decode request body. Default to ```utf-8```.\n\nUse ```null``` to avoid decoding and pass the body as is.\nAccept any values supported by [raw-body](https://www.npmjs.com/package/raw-body#readme).\n\n```\napp.use('/post', proxy('httpbin.org', {\n  reqBodyEncoding: null\n}));\n```\n\n\n#### timeout\n\nBy default, node does not express a timeout on connections.   Use timeout option to impose a specific timeout.    Timed-out requests will respond with 504 status code and a X-Timeout-Reason header.\n\n```js\napp.use('/', proxy('httpbin.org', {\n  timeout: 2000  // in milliseconds, two seconds\n}));\n```\n\n\n## Questions\n\n### Q: Can it support https proxy?\n\nA:  Yes, you can use the 'https-proxy-agent' package. Something like this:\n\n```js\nvar corporateProxyServer = process.env.HTTP_PROXY || process.env.http_proxy || process.env.HTTPS_PROXY || process.env.https_proxy;\n\nif (corporateProxyServer) {\n  corporateProxyAgent = new HttpsProxyAgent(corporateProxyServer);\n}\n```\n\nThen inside the decorateRequest method, add the agent to the request:\n\n```js\n  req.agent = corporateProxyAgent;\n```\n\n## Release Notes\n\n| Release | Notes |\n| --- | --- |\n| 0.7.4 | Move jscs to devDependencies to avoid conflict with nsp. |\n| 0.7.3 | Adds a timeout option.   Code organization and small bug fixes. |\n| 0.7.2 | Collecting many minor documentation and test improvements. |\n| 0.4.0 | Signature of `intercept` callback changed from `function(data, req, res, callback)` to `function(rsp, data, req, res, callback)` where `rsp` is the original response from the target |\n\n## Licence\n\nMIT\n<!-- do not want to make nodeinit to complicated, you can edit this whenever you want. -->\n",
  "readmeFilename": "README.md",
  "_id": "express-http-proxy@0.7.4",
  "dist": {
    "shasum": "7373b0768eeb40da0786b33ebfebabdf0e692ecf"
  },
  "_from": "express-http-proxy@",
  "_resolved": "https://registry.npmjs.org/express-http-proxy/-/express-http-proxy-0.7.4.tgz"
}
